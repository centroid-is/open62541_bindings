From ce851a9552995d05d258eceb0428a9f4ee94e6b5 Mon Sep 17 00:00:00 2001
From: pieter-scholtz <pieter.scholtz@kdab.com>
Date: Tue, 8 Aug 2023 10:33:14 +0200
Subject: [PATCH 1/2] refactor(client): Move high level client functions to
 UA_INLINABLE

---
 include/open62541/client_highlevel.h | 300 +++++++++++++--------------
 1 file changed, 150 insertions(+), 150 deletions(-)

diff --git a/include/open62541/client_highlevel.h b/include/open62541/client_highlevel.h
index 8c34ac1fe4f..999e68bcae9 100644
--- a/include/open62541/client_highlevel.h
+++ b/include/open62541/client_highlevel.h
@@ -45,172 +45,172 @@ __UA_Client_readAttribute(UA_Client *client, const UA_NodeId *nodeId,
                           UA_AttributeId attributeId, void *out,
                           const UA_DataType *outDataType);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readNodeIdAttribute(UA_Client *client, const UA_NodeId nodeId,
-                              UA_NodeId *outNodeId) {
+                              UA_NodeId *outNodeId) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_NODEID,
                                      outNodeId, &UA_TYPES[UA_TYPES_NODEID]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readNodeClassAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                 UA_NodeClass *outNodeClass) {
+                                 UA_NodeClass *outNodeClass) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_NODECLASS,
                                      outNodeClass, &UA_TYPES[UA_TYPES_NODECLASS]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readBrowseNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  UA_QualifiedName *outBrowseName) {
+                                  UA_QualifiedName *outBrowseName) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_BROWSENAME,
                                      outBrowseName,
                                      &UA_TYPES[UA_TYPES_QUALIFIEDNAME]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readDisplayNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   UA_LocalizedText *outDisplayName) {
+                                   UA_LocalizedText *outDisplayName) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_DISPLAYNAME,
                                      outDisplayName,
                                      &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readDescriptionAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   UA_LocalizedText *outDescription) {
+                                   UA_LocalizedText *outDescription) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_DESCRIPTION,
                                      outDescription,
                                      &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readWriteMaskAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                 UA_UInt32 *outWriteMask) {
+                                 UA_UInt32 *outWriteMask) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_WRITEMASK,
                                      outWriteMask, &UA_TYPES[UA_TYPES_UINT32]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readUserWriteMaskAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                     UA_UInt32 *outUserWriteMask) {
+                                     UA_UInt32 *outUserWriteMask) ,{
     return __UA_Client_readAttribute(client, &nodeId,
                                      UA_ATTRIBUTEID_USERWRITEMASK,
                                      outUserWriteMask,
                                      &UA_TYPES[UA_TYPES_UINT32]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readIsAbstractAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  UA_Boolean *outIsAbstract) {
+                                  UA_Boolean *outIsAbstract) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_ISABSTRACT,
                                      outIsAbstract, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readSymmetricAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                 UA_Boolean *outSymmetric) {
+                                 UA_Boolean *outSymmetric) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_SYMMETRIC,
                                      outSymmetric, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readInverseNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   UA_LocalizedText *outInverseName) {
+                                   UA_LocalizedText *outInverseName) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_INVERSENAME,
                                      outInverseName,
                                      &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readContainsNoLoopsAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                       UA_Boolean *outContainsNoLoops) {
+                                       UA_Boolean *outContainsNoLoops),{
     return __UA_Client_readAttribute(client, &nodeId,
                                      UA_ATTRIBUTEID_CONTAINSNOLOOPS,
                                      outContainsNoLoops,
                                      &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readEventNotifierAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                     UA_Byte *outEventNotifier) {
+                                     UA_Byte *outEventNotifier) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_EVENTNOTIFIER,
                                      outEventNotifier, &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readValueAttribute(UA_Client *client, const UA_NodeId nodeId,
-                             UA_Variant *outValue) {
+                             UA_Variant *outValue) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_VALUE,
                                      outValue, &UA_TYPES[UA_TYPES_VARIANT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readDataTypeAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                UA_NodeId *outDataType) {
+                                UA_NodeId *outDataType) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_DATATYPE,
                                      outDataType, &UA_TYPES[UA_TYPES_NODEID]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readValueRankAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                 UA_Int32 *outValueRank) {
+                                 UA_Int32 *outValueRank) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_VALUERANK,
                                      outValueRank, &UA_TYPES[UA_TYPES_INT32]);
-}
+})
 
 UA_StatusCode UA_EXPORT
 UA_Client_readArrayDimensionsAttribute(UA_Client *client, const UA_NodeId nodeId,
                                        size_t *outArrayDimensionsSize,
                                        UA_UInt32 **outArrayDimensions);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readAccessLevelAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   UA_Byte *outAccessLevel) {
+                                   UA_Byte *outAccessLevel) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_ACCESSLEVEL,
                                      outAccessLevel, &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readUserAccessLevelAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                       UA_Byte *outUserAccessLevel) {
+                                       UA_Byte *outUserAccessLevel) ,{
     return __UA_Client_readAttribute(client, &nodeId,
                                      UA_ATTRIBUTEID_USERACCESSLEVEL,
                                      outUserAccessLevel,
                                      &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readMinimumSamplingIntervalAttribute(UA_Client *client,
                                                const UA_NodeId nodeId,
-                                               UA_Double *outMinSamplingInterval) {
+                                               UA_Double *outMinSamplingInterval) ,{
     return __UA_Client_readAttribute(client, &nodeId,
                                      UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
                                      outMinSamplingInterval,
                                      &UA_TYPES[UA_TYPES_DOUBLE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readHistorizingAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   UA_Boolean *outHistorizing) {
+                                   UA_Boolean *outHistorizing) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_HISTORIZING,
                                      outHistorizing, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readExecutableAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  UA_Boolean *outExecutable) {
+                                  UA_Boolean *outExecutable) ,{
     return __UA_Client_readAttribute(client, &nodeId, UA_ATTRIBUTEID_EXECUTABLE,
                                      outExecutable, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_readUserExecutableAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                      UA_Boolean *outUserExecutable) {
+                                      UA_Boolean *outUserExecutable) ,{
     return __UA_Client_readAttribute(client, &nodeId,
                                      UA_ATTRIBUTEID_USEREXECUTABLE,
                                      outUserExecutable,
                                      &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
 /**
  * Historical Access
@@ -279,173 +279,173 @@ __UA_Client_writeAttribute(UA_Client *client, const UA_NodeId *nodeId,
                            UA_AttributeId attributeId, const void *in,
                            const UA_DataType *inDataType);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeNodeIdAttribute(UA_Client *client, const UA_NodeId nodeId,
-                               const UA_NodeId *newNodeId) {
+                               const UA_NodeId *newNodeId) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_NODEID,
                                       newNodeId, &UA_TYPES[UA_TYPES_NODEID]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeNodeClassAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  const UA_NodeClass *newNodeClass) {
+                                  const UA_NodeClass *newNodeClass) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_NODECLASS,
                                       newNodeClass, &UA_TYPES[UA_TYPES_NODECLASS]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeBrowseNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   const UA_QualifiedName *newBrowseName) {
+                                   const UA_QualifiedName *newBrowseName) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_BROWSENAME,
                                       newBrowseName,
                                       &UA_TYPES[UA_TYPES_QUALIFIEDNAME]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDisplayNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                    const UA_LocalizedText *newDisplayName) {
+                                    const UA_LocalizedText *newDisplayName) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_DISPLAYNAME,
                                       newDisplayName,
                                       &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDescriptionAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                    const UA_LocalizedText *newDescription) {
+                                    const UA_LocalizedText *newDescription) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_DESCRIPTION,
                                       newDescription,
                                       &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeWriteMaskAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  const UA_UInt32 *newWriteMask) {
+                                  const UA_UInt32 *newWriteMask) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_WRITEMASK,
                                       newWriteMask, &UA_TYPES[UA_TYPES_UINT32]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserWriteMaskAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                      const UA_UInt32 *newUserWriteMask) {
+                                      const UA_UInt32 *newUserWriteMask) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_USERWRITEMASK,
                                       newUserWriteMask,
                                       &UA_TYPES[UA_TYPES_UINT32]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeIsAbstractAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   const UA_Boolean *newIsAbstract) {
+                                   const UA_Boolean *newIsAbstract) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_ISABSTRACT,
                                       newIsAbstract, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeSymmetricAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  const UA_Boolean *newSymmetric) {
+                                  const UA_Boolean *newSymmetric) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_SYMMETRIC,
                                       newSymmetric, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeInverseNameAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                    const UA_LocalizedText *newInverseName) {
+                                    const UA_LocalizedText *newInverseName) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_INVERSENAME,
                                       newInverseName,
                                       &UA_TYPES[UA_TYPES_LOCALIZEDTEXT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeContainsNoLoopsAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                        const UA_Boolean *newContainsNoLoops) {
+                                        const UA_Boolean *newContainsNoLoops) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_CONTAINSNOLOOPS,
                                       newContainsNoLoops,
                                       &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeEventNotifierAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                      const UA_Byte *newEventNotifier) {
+                                      const UA_Byte *newEventNotifier) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_EVENTNOTIFIER,
                                       newEventNotifier,
                                       &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeValueAttribute(UA_Client *client, const UA_NodeId nodeId,
-                              const UA_Variant *newValue) {
+                              const UA_Variant *newValue) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_VALUE,
                                       newValue, &UA_TYPES[UA_TYPES_VARIANT]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDataTypeAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                 const UA_NodeId *newDataType) {
+                                 const UA_NodeId *newDataType) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_DATATYPE,
                                       newDataType, &UA_TYPES[UA_TYPES_NODEID]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeValueRankAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                  const UA_Int32 *newValueRank) {
+                                  const UA_Int32 *newValueRank) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_VALUERANK,
                                       newValueRank, &UA_TYPES[UA_TYPES_INT32]);
-}
+})
 
 UA_StatusCode UA_EXPORT
 UA_Client_writeArrayDimensionsAttribute(UA_Client *client, const UA_NodeId nodeId,
                                         size_t newArrayDimensionsSize,
                                         const UA_UInt32 *newArrayDimensions);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeAccessLevelAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                    const UA_Byte *newAccessLevel) {
+                                    const UA_Byte *newAccessLevel) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_ACCESSLEVEL,
                                       newAccessLevel, &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserAccessLevelAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                        const UA_Byte *newUserAccessLevel) {
+                                        const UA_Byte *newUserAccessLevel) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_USERACCESSLEVEL,
                                       newUserAccessLevel,
                                       &UA_TYPES[UA_TYPES_BYTE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeMinimumSamplingIntervalAttribute(UA_Client *client,
                                                 const UA_NodeId nodeId,
-                                                const UA_Double *newMinInterval) {
+                                                const UA_Double *newMinInterval) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
                                       newMinInterval, &UA_TYPES[UA_TYPES_DOUBLE]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeHistorizingAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                    const UA_Boolean *newHistorizing) {
+                                    const UA_Boolean *newHistorizing) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_HISTORIZING,
                                       newHistorizing, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeExecutableAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                   const UA_Boolean *newExecutable) {
+                                   const UA_Boolean *newExecutable) ,{
     return __UA_Client_writeAttribute(client, &nodeId, UA_ATTRIBUTEID_EXECUTABLE,
                                       newExecutable, &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserExecutableAttribute(UA_Client *client, const UA_NodeId nodeId,
-                                       const UA_Boolean *newUserExecutable) {
+                                       const UA_Boolean *newUserExecutable) ,{
     return __UA_Client_writeAttribute(client, &nodeId,
                                       UA_ATTRIBUTEID_USEREXECUTABLE,
                                       newUserExecutable,
                                       &UA_TYPES[UA_TYPES_BOOLEAN]);
-}
+})
 
 /**
  * Method Calling
@@ -505,119 +505,119 @@ __UA_Client_addNode(UA_Client *client, const UA_NodeClass nodeClass,
                     const UA_NodeId typeDefinition, const UA_NodeAttributes *attr,
                     const UA_DataType *attributeType, UA_NodeId *outNewNodeId);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addVariableNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                           const UA_NodeId parentNodeId,
                           const UA_NodeId referenceTypeId,
                           const UA_QualifiedName browseName,
                           const UA_NodeId typeDefinition,
                           const UA_VariableAttributes attr,
-                          UA_NodeId *outNewNodeId) {
+                          UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_VARIABLE, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                typeDefinition, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VARIABLEATTRIBUTES],
                                outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addVariableTypeNode(UA_Client *client,
                               const UA_NodeId requestedNewNodeId,
                               const UA_NodeId parentNodeId,
                               const UA_NodeId referenceTypeId,
                               const UA_QualifiedName browseName,
                               const UA_VariableTypeAttributes attr,
-                              UA_NodeId *outNewNodeId) {
+                              UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_VARIABLETYPE,
                                requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VARIABLETYPEATTRIBUTES],
                                outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addObjectNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                         const UA_NodeId parentNodeId,
                         const UA_NodeId referenceTypeId,
                         const UA_QualifiedName browseName,
                         const UA_NodeId typeDefinition,
-                        const UA_ObjectAttributes attr, UA_NodeId *outNewNodeId) {
+                        const UA_ObjectAttributes attr, UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_OBJECT, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                typeDefinition, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_OBJECTATTRIBUTES], outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addObjectTypeNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                             const UA_NodeId parentNodeId,
                             const UA_NodeId referenceTypeId,
                             const UA_QualifiedName browseName,
                             const UA_ObjectTypeAttributes attr,
-                            UA_NodeId *outNewNodeId) {
+                            UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_OBJECTTYPE, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_OBJECTTYPEATTRIBUTES],
                                outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addViewNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                       const UA_NodeId parentNodeId,
                       const UA_NodeId referenceTypeId,
                       const UA_QualifiedName browseName,
                       const UA_ViewAttributes attr,
-                      UA_NodeId *outNewNodeId) {
+                      UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_VIEW, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VIEWATTRIBUTES], outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addReferenceTypeNode(UA_Client *client,
                                const UA_NodeId requestedNewNodeId,
                                const UA_NodeId parentNodeId,
                                const UA_NodeId referenceTypeId,
                                const UA_QualifiedName browseName,
                                const UA_ReferenceTypeAttributes attr,
-                               UA_NodeId *outNewNodeId) {
+                               UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_REFERENCETYPE,
                                requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_REFERENCETYPEATTRIBUTES],
                                outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addDataTypeNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                           const UA_NodeId parentNodeId,
                           const UA_NodeId referenceTypeId,
                           const UA_QualifiedName browseName,
                           const UA_DataTypeAttributes attr,
-                          UA_NodeId *outNewNodeId) {
+                          UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_DATATYPE, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_DATATYPEATTRIBUTES],
                                outNewNodeId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addMethodNode(UA_Client *client, const UA_NodeId requestedNewNodeId,
                         const UA_NodeId parentNodeId,
                         const UA_NodeId referenceTypeId,
                         const UA_QualifiedName browseName,
                         const UA_MethodAttributes attr,
-                        UA_NodeId *outNewNodeId) {
+                        UA_NodeId *outNewNodeId) ,{
     return __UA_Client_addNode(client, UA_NODECLASS_METHOD, requestedNewNodeId,
                                parentNodeId, referenceTypeId, browseName,
                                UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_METHODATTRIBUTES], outNewNodeId);
-}
+})
 
 /**
  * Misc Highlevel Functionality

From 869e2cb7954009dd2a5c9709a157fd81d0b492cb Mon Sep 17 00:00:00 2001
From: pieter-scholtz <pieter.scholtz@kdab.com>
Date: Tue, 8 Aug 2023 10:41:16 +0200
Subject: [PATCH 2/2] refactor(client): Move highlevel async client functions
 to UA_INLINABLE

---
 include/open62541/client_highlevel_async.h | 198 ++++++++++-----------
 1 file changed, 99 insertions(+), 99 deletions(-)

diff --git a/include/open62541/client_highlevel_async.h b/include/open62541/client_highlevel_async.h
index 65b131612f2..a9460a30a1f 100644
--- a/include/open62541/client_highlevel_async.h
+++ b/include/open62541/client_highlevel_async.h
@@ -24,37 +24,37 @@ _UA_BEGIN_DECLS
 
 typedef void (*UA_ClientAsyncReadCallback)(UA_Client *client, void *userdata,
                                            UA_UInt32 requestId, UA_ReadResponse *rr);
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Client_sendAsyncReadRequest(UA_Client *client, UA_ReadRequest *request,
                                UA_ClientAsyncReadCallback readCallback, void *userdata,
-                               UA_UInt32 *reqId) {
+                               UA_UInt32 *reqId) ,{
     return __UA_Client_AsyncService(client, request, &UA_TYPES[UA_TYPES_READREQUEST],
                                       (UA_ClientAsyncServiceCallback)readCallback,
                                       &UA_TYPES[UA_TYPES_READRESPONSE], userdata, reqId);
-}
+})
 
 typedef void (*UA_ClientAsyncWriteCallback)(UA_Client *client, void *userdata,
                                             UA_UInt32 requestId, UA_WriteResponse *wr);
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Client_sendAsyncWriteRequest(UA_Client *client, UA_WriteRequest *request,
                                 UA_ClientAsyncWriteCallback writeCallback, void *userdata,
-                                UA_UInt32 *reqId) {
+                                UA_UInt32 *reqId) ,{
     return __UA_Client_AsyncService(client, request, &UA_TYPES[UA_TYPES_WRITEREQUEST],
                                       (UA_ClientAsyncServiceCallback)writeCallback,
                                       &UA_TYPES[UA_TYPES_WRITERESPONSE], userdata, reqId);
-}
+})
 
 typedef void (*UA_ClientAsyncBrowseCallback)(UA_Client *client, void *userdata,
                                              UA_UInt32 requestId, UA_BrowseResponse *wr);
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Client_sendAsyncBrowseRequest(UA_Client *client, UA_BrowseRequest *request,
                                  UA_ClientAsyncBrowseCallback browseCallback,
-                                 void *userdata, UA_UInt32 *reqId) {
+                                 void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_AsyncService(client, request, &UA_TYPES[UA_TYPES_BROWSEREQUEST],
                                       (UA_ClientAsyncServiceCallback)browseCallback,
                                       &UA_TYPES[UA_TYPES_BROWSERESPONSE], userdata,
                                       reqId);
-}
+})
 
 /**
  * Asynchronous Operations
@@ -318,198 +318,198 @@ __UA_Client_writeAttribute_async(UA_Client *client, const UA_NodeId *nodeId,
                                  UA_ClientAsyncServiceCallback callback, void *userdata,
                                  UA_UInt32 *reqId);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeValueAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                     const UA_Variant *newValue,
                                     UA_ClientAsyncWriteCallback callback, void *userdata,
-                                    UA_UInt32 *reqId) {
+                                    UA_UInt32 *reqId) ,{
 
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_VALUE, newValue, &UA_TYPES[UA_TYPES_VARIANT],
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeNodeIdAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                      const UA_NodeId *outNodeId,
                                      UA_ClientAsyncServiceCallback callback,
-                                     void *userdata, UA_UInt32 *reqId) {
+                                     void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_NODEID,
                                             outNodeId, &UA_TYPES[UA_TYPES_NODEID],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeNodeClassAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                         const UA_NodeClass *outNodeClass,
                                         UA_ClientAsyncServiceCallback callback,
-                                        void *userdata, UA_UInt32 *reqId) {
+                                        void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_NODECLASS,
                                             outNodeClass, &UA_TYPES[UA_TYPES_NODECLASS],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeBrowseNameAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                          const UA_QualifiedName *outBrowseName,
                                          UA_ClientAsyncServiceCallback callback,
-                                         void *userdata, UA_UInt32 *reqId) {
+                                         void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_BROWSENAME, outBrowseName,
         &UA_TYPES[UA_TYPES_QUALIFIEDNAME], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDisplayNameAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                           const UA_LocalizedText *outDisplayName,
                                           UA_ClientAsyncServiceCallback callback,
-                                          void *userdata, UA_UInt32 *reqId) {
+                                          void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_DISPLAYNAME, outDisplayName,
         &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDescriptionAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                           const UA_LocalizedText *outDescription,
                                           UA_ClientAsyncServiceCallback callback,
-                                          void *userdata, UA_UInt32 *reqId) {
+                                          void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_DESCRIPTION, outDescription,
         &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeWriteMaskAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                         const UA_UInt32 *outWriteMask,
                                         UA_ClientAsyncServiceCallback callback,
-                                        void *userdata, UA_UInt32 *reqId) {
+                                        void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_WRITEMASK,
                                             outWriteMask, &UA_TYPES[UA_TYPES_UINT32],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserWriteMaskAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                             const UA_UInt32 *outUserWriteMask,
                                             UA_ClientAsyncServiceCallback callback,
-                                            void *userdata, UA_UInt32 *reqId) {
+                                            void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_USERWRITEMASK,
                                             outUserWriteMask, &UA_TYPES[UA_TYPES_UINT32],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeIsAbstractAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                          const UA_Boolean *outIsAbstract,
                                          UA_ClientAsyncServiceCallback callback,
-                                         void *userdata, UA_UInt32 *reqId) {
+                                         void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_ISABSTRACT,
                                             outIsAbstract, &UA_TYPES[UA_TYPES_BOOLEAN],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeSymmetricAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                         const UA_Boolean *outSymmetric,
                                         UA_ClientAsyncServiceCallback callback,
-                                        void *userdata, UA_UInt32 *reqId) {
+                                        void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_SYMMETRIC,
                                             outSymmetric, &UA_TYPES[UA_TYPES_BOOLEAN],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeInverseNameAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                           const UA_LocalizedText *outInverseName,
                                           UA_ClientAsyncServiceCallback callback,
-                                          void *userdata, UA_UInt32 *reqId) {
+                                          void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_INVERSENAME, outInverseName,
         &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeContainsNoLoopsAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                               const UA_Boolean *outContainsNoLoops,
                                               UA_ClientAsyncServiceCallback callback,
-                                              void *userdata, UA_UInt32 *reqId) {
+                                              void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_CONTAINSNOLOOPS, outContainsNoLoops,
         &UA_TYPES[UA_TYPES_BOOLEAN], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeEventNotifierAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                             const UA_Byte *outEventNotifier,
                                             UA_ClientAsyncServiceCallback callback,
-                                            void *userdata, UA_UInt32 *reqId) {
+                                            void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_EVENTNOTIFIER,
                                             outEventNotifier, &UA_TYPES[UA_TYPES_BYTE],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeDataTypeAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                        const UA_NodeId *outDataType,
                                        UA_ClientAsyncServiceCallback callback,
-                                       void *userdata, UA_UInt32 *reqId) {
+                                       void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_DATATYPE,
                                             outDataType, &UA_TYPES[UA_TYPES_NODEID],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeValueRankAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                         const UA_Int32 *outValueRank,
                                         UA_ClientAsyncServiceCallback callback,
-                                        void *userdata, UA_UInt32 *reqId) {
+                                        void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_VALUERANK,
                                             outValueRank, &UA_TYPES[UA_TYPES_INT32],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeAccessLevelAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                           const UA_Byte *outAccessLevel,
                                           UA_ClientAsyncServiceCallback callback,
-                                          void *userdata, UA_UInt32 *reqId) {
+                                          void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_ACCESSLEVEL,
                                             outAccessLevel, &UA_TYPES[UA_TYPES_BYTE],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserAccessLevelAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                               const UA_Byte *outUserAccessLevel,
                                               UA_ClientAsyncServiceCallback callback,
-                                              void *userdata, UA_UInt32 *reqId) {
+                                              void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_USERACCESSLEVEL, outUserAccessLevel,
         &UA_TYPES[UA_TYPES_BYTE], callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeMinimumSamplingIntervalAttribute_async(
     UA_Client *client, const UA_NodeId nodeId,
     const UA_Double *outMinimumSamplingInterval, UA_ClientAsyncServiceCallback callback,
-    void *userdata, UA_UInt32 *reqId) {
+    void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
         outMinimumSamplingInterval, &UA_TYPES[UA_TYPES_DOUBLE], callback, userdata,
         reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeHistorizingAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                           const UA_Boolean *outHistorizing,
                                           UA_ClientAsyncServiceCallback callback,
-                                          void *userdata, UA_UInt32 *reqId) {
+                                          void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_HISTORIZING,
                                             outHistorizing, &UA_TYPES[UA_TYPES_BOOLEAN],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeExecutableAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                          const UA_Boolean *outExecutable,
                                          UA_ClientAsyncServiceCallback callback,
-                                         void *userdata, UA_UInt32 *reqId) {
+                                         void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(client, &nodeId, UA_ATTRIBUTEID_EXECUTABLE,
                                             outExecutable, &UA_TYPES[UA_TYPES_BOOLEAN],
                                             callback, userdata, reqId);
-}
-static UA_INLINE UA_StatusCode
+})
+UA_INLINABLE( UA_StatusCode
 UA_Client_writeUserExecutableAttribute_async(UA_Client *client, const UA_NodeId nodeId,
                                              const UA_Boolean *outUserExecutable,
                                              UA_ClientAsyncServiceCallback callback,
-                                             void *userdata, UA_UInt32 *reqId) {
+                                             void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_writeAttribute_async(
         client, &nodeId, UA_ATTRIBUTEID_USEREXECUTABLE, outUserExecutable,
         &UA_TYPES[UA_TYPES_BOOLEAN], callback, userdata, reqId);
-}
+})
 
 /**
  * Method Calling
@@ -523,15 +523,15 @@ __UA_Client_call_async(UA_Client *client, const UA_NodeId objectId,
 typedef void (*UA_ClientAsyncCallCallback)(UA_Client *client, void *userdata,
                                            UA_UInt32 requestId, UA_CallResponse *cr);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_call_async(UA_Client *client, const UA_NodeId objectId,
                      const UA_NodeId methodId, size_t inputSize, const UA_Variant *input,
                      UA_ClientAsyncCallCallback callback, void *userdata,
-                     UA_UInt32 *reqId) {
+                     UA_UInt32 *reqId) ,{
     return __UA_Client_call_async(client, objectId, methodId, inputSize, input,
                                   (UA_ClientAsyncServiceCallback)callback, userdata,
                                   reqId);
-}
+})
 
 /**
  * Node Management
@@ -550,7 +550,7 @@ __UA_Client_addNode_async(UA_Client *client, const UA_NodeClass nodeClass,
                           UA_ClientAsyncServiceCallback callback, void *userdata,
                           UA_UInt32 *reqId);
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addVariableNode_async(UA_Client *client, const UA_NodeId requestedNewNodeId,
                                 const UA_NodeId parentNodeId,
                                 const UA_NodeId referenceTypeId,
@@ -558,28 +558,28 @@ UA_Client_addVariableNode_async(UA_Client *client, const UA_NodeId requestedNewN
                                 const UA_NodeId typeDefinition,
                                 const UA_VariableAttributes attr, UA_NodeId *outNewNodeId,
                                 UA_ClientAsyncAddNodesCallback callback, void *userdata,
-                                UA_UInt32 *reqId) {
+                                UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_VARIABLE, requestedNewNodeId, parentNodeId, referenceTypeId,
         browseName, typeDefinition, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_VARIABLEATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addVariableTypeNode_async(
     UA_Client *client, const UA_NodeId requestedNewNodeId, const UA_NodeId parentNodeId,
     const UA_NodeId referenceTypeId, const UA_QualifiedName browseName,
     const UA_VariableTypeAttributes attr, UA_NodeId *outNewNodeId,
-    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) {
+    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_VARIABLETYPE, requestedNewNodeId, parentNodeId,
         referenceTypeId, browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_VARIABLETYPEATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addObjectNode_async(UA_Client *client, const UA_NodeId requestedNewNodeId,
                               const UA_NodeId parentNodeId,
                               const UA_NodeId referenceTypeId,
@@ -587,83 +587,83 @@ UA_Client_addObjectNode_async(UA_Client *client, const UA_NodeId requestedNewNod
                               const UA_NodeId typeDefinition,
                               const UA_ObjectAttributes attr, UA_NodeId *outNewNodeId,
                               UA_ClientAsyncAddNodesCallback callback, void *userdata,
-                              UA_UInt32 *reqId) {
+                              UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_OBJECT, requestedNewNodeId, parentNodeId, referenceTypeId,
         browseName, typeDefinition, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_OBJECTATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addObjectTypeNode_async(
     UA_Client *client, const UA_NodeId requestedNewNodeId, const UA_NodeId parentNodeId,
     const UA_NodeId referenceTypeId, const UA_QualifiedName browseName,
     const UA_ObjectTypeAttributes attr, UA_NodeId *outNewNodeId,
-    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) {
+    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_OBJECTTYPE, requestedNewNodeId, parentNodeId,
         referenceTypeId, browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_OBJECTTYPEATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addViewNode_async(UA_Client *client, const UA_NodeId requestedNewNodeId,
                             const UA_NodeId parentNodeId, const UA_NodeId referenceTypeId,
                             const UA_QualifiedName browseName,
                             const UA_ViewAttributes attr, UA_NodeId *outNewNodeId,
                             UA_ClientAsyncAddNodesCallback callback, void *userdata,
-                            UA_UInt32 *reqId) {
+                            UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_VIEW, requestedNewNodeId, parentNodeId, referenceTypeId,
         browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_VIEWATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addReferenceTypeNode_async(
     UA_Client *client, const UA_NodeId requestedNewNodeId, const UA_NodeId parentNodeId,
     const UA_NodeId referenceTypeId, const UA_QualifiedName browseName,
     const UA_ReferenceTypeAttributes attr, UA_NodeId *outNewNodeId,
-    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) {
+    UA_ClientAsyncAddNodesCallback callback, void *userdata, UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_REFERENCETYPE, requestedNewNodeId, parentNodeId,
         referenceTypeId, browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_REFERENCETYPEATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addDataTypeNode_async(UA_Client *client, const UA_NodeId requestedNewNodeId,
                                 const UA_NodeId parentNodeId,
                                 const UA_NodeId referenceTypeId,
                                 const UA_QualifiedName browseName,
                                 const UA_DataTypeAttributes attr, UA_NodeId *outNewNodeId,
                                 UA_ClientAsyncAddNodesCallback callback, void *userdata,
-                                UA_UInt32 *reqId) {
+                                UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_DATATYPE, requestedNewNodeId, parentNodeId, referenceTypeId,
         browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_DATATYPEATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_Client_addMethodNode_async(UA_Client *client, const UA_NodeId requestedNewNodeId,
                               const UA_NodeId parentNodeId,
                               const UA_NodeId referenceTypeId,
                               const UA_QualifiedName browseName,
                               const UA_MethodAttributes attr, UA_NodeId *outNewNodeId,
                               UA_ClientAsyncAddNodesCallback callback, void *userdata,
-                              UA_UInt32 *reqId) {
+                              UA_UInt32 *reqId) ,{
     return __UA_Client_addNode_async(
         client, UA_NODECLASS_METHOD, requestedNewNodeId, parentNodeId, referenceTypeId,
         browseName, UA_NODEID_NULL, (const UA_NodeAttributes *)&attr,
         &UA_TYPES[UA_TYPES_METHODATTRIBUTES], outNewNodeId,
         (UA_ClientAsyncServiceCallback)callback, userdata, reqId);
-}
+})
 
 /**
  * Misc Functionalities
