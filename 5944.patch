From 2d582d8b3dc2c2de0ae7147d87ce4cf2967ab18b Mon Sep 17 00:00:00 2001
From: pieter-scholtz <pieter.scholtz@kdab.com>
Date: Wed, 9 Aug 2023 08:59:06 +0200
Subject: [PATCH 1/2] refactor(server): Move server config functions to
 UA_INLINABLE

---
 plugins/include/open62541/server_config_default.h | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/plugins/include/open62541/server_config_default.h b/plugins/include/open62541/server_config_default.h
index eade7f5411c..b99468cce08 100644
--- a/plugins/include/open62541/server_config_default.h
+++ b/plugins/include/open62541/server_config_default.h
@@ -51,12 +51,12 @@ UA_ServerConfig_setMinimalCustomBuffer(UA_ServerConfig *config,
  * The config will set the tcp network layer to the given port and adds a single
  * endpoint with the security policy ``SecurityPolicy#None`` to the server. A
  * server certificate may be supplied but is optional. */
-static UA_INLINE UA_StatusCode
+UA_INLINABLE( UA_StatusCode
 UA_ServerConfig_setMinimal(UA_ServerConfig *config, UA_UInt16 portNumber,
-                           const UA_ByteString *certificate) {
+                           const UA_ByteString *certificate) ,{
     return UA_ServerConfig_setMinimalCustomBuffer(config, portNumber,
                                                   certificate, 0, 0);
-}
+})
 
 #ifdef UA_ENABLE_ENCRYPTION
 
@@ -76,10 +76,10 @@ UA_ServerConfig_setDefaultWithSecurityPolicies(UA_ServerConfig *conf,
 
 /* Creates a server config on the default port 4840 with no server
  * certificate. */
-static UA_INLINE UA_StatusCode
-UA_ServerConfig_setDefault(UA_ServerConfig *config) {
+UA_INLINABLE( UA_StatusCode
+UA_ServerConfig_setDefault(UA_ServerConfig *config) ,{
     return UA_ServerConfig_setMinimal(config, 4840, NULL);
-}
+})
 
 /* Creates a new server config with no security policies and no endpoints.
  *

From 9fd2370e85a02e18f9027ff4f763661a06cf8909 Mon Sep 17 00:00:00 2001
From: pieter-scholtz <pieter.scholtz@kdab.com>
Date: Wed, 9 Aug 2023 08:58:50 +0200
Subject: [PATCH 2/2] refactor(server): Move public server functions to
 UA_INLINABLE

---
 include/open62541/server.h | 259 +++++++++++++++++++------------------
 1 file changed, 130 insertions(+), 129 deletions(-)

diff --git a/include/open62541/server.h b/include/open62541/server.h
index 4848d312f56..e2936fc340f 100644
--- a/include/open62541/server.h
+++ b/include/open62541/server.h
@@ -612,138 +612,138 @@ UA_StatusCode UA_EXPORT UA_THREADSAFE
 __UA_Server_read(UA_Server *server, const UA_NodeId *nodeId,
                  UA_AttributeId attributeId, void *v);
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readNodeId(UA_Server *server, const UA_NodeId nodeId,
-                     UA_NodeId *outNodeId) {
+                     UA_NodeId *outNodeId) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_NODEID, outNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readNodeClass(UA_Server *server, const UA_NodeId nodeId,
-                        UA_NodeClass *outNodeClass) {
+                        UA_NodeClass *outNodeClass) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_NODECLASS,
                             outNodeClass);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readBrowseName(UA_Server *server, const UA_NodeId nodeId,
-                         UA_QualifiedName *outBrowseName) {
+                         UA_QualifiedName *outBrowseName) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_BROWSENAME,
                             outBrowseName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readDisplayName(UA_Server *server, const UA_NodeId nodeId,
-                          UA_LocalizedText *outDisplayName) {
+                          UA_LocalizedText *outDisplayName) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_DISPLAYNAME,
                             outDisplayName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readDescription(UA_Server *server, const UA_NodeId nodeId,
-                          UA_LocalizedText *outDescription) {
+                          UA_LocalizedText *outDescription) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_DESCRIPTION,
                             outDescription);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readWriteMask(UA_Server *server, const UA_NodeId nodeId,
-                        UA_UInt32 *outWriteMask) {
+                        UA_UInt32 *outWriteMask) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_WRITEMASK,
                             outWriteMask);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readIsAbstract(UA_Server *server, const UA_NodeId nodeId,
-                         UA_Boolean *outIsAbstract) {
+                         UA_Boolean *outIsAbstract) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_ISABSTRACT,
                             outIsAbstract);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readSymmetric(UA_Server *server, const UA_NodeId nodeId,
-                        UA_Boolean *outSymmetric) {
+                        UA_Boolean *outSymmetric) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_SYMMETRIC,
                             outSymmetric);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readInverseName(UA_Server *server, const UA_NodeId nodeId,
-                          UA_LocalizedText *outInverseName) {
+                          UA_LocalizedText *outInverseName) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_INVERSENAME,
                             outInverseName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readContainsNoLoops(UA_Server *server, const UA_NodeId nodeId,
-                              UA_Boolean *outContainsNoLoops) {
+                              UA_Boolean *outContainsNoLoops) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_CONTAINSNOLOOPS,
                             outContainsNoLoops);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readEventNotifier(UA_Server *server, const UA_NodeId nodeId,
-                            UA_Byte *outEventNotifier) {
+                            UA_Byte *outEventNotifier) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_EVENTNOTIFIER,
                             outEventNotifier);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readValue(UA_Server *server, const UA_NodeId nodeId,
-                    UA_Variant *outValue) {
+                    UA_Variant *outValue) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_VALUE, outValue);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readDataType(UA_Server *server, const UA_NodeId nodeId,
-                       UA_NodeId *outDataType) {
+                       UA_NodeId *outDataType) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_DATATYPE,
                             outDataType);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readValueRank(UA_Server *server, const UA_NodeId nodeId,
-                        UA_Int32 *outValueRank) {
+                        UA_Int32 *outValueRank) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_VALUERANK,
                             outValueRank);
-}
+})
 
 /* Returns a variant with an int32 array */
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readArrayDimensions(UA_Server *server, const UA_NodeId nodeId,
-                              UA_Variant *outArrayDimensions) {
+                              UA_Variant *outArrayDimensions) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_ARRAYDIMENSIONS,
                             outArrayDimensions);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readAccessLevel(UA_Server *server, const UA_NodeId nodeId,
-                          UA_Byte *outAccessLevel) {
+                          UA_Byte *outAccessLevel) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_ACCESSLEVEL,
                             outAccessLevel);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readMinimumSamplingInterval(UA_Server *server, const UA_NodeId nodeId,
-                                      UA_Double *outMinimumSamplingInterval) {
+                                      UA_Double *outMinimumSamplingInterval) ,{
     return __UA_Server_read(server, &nodeId,
                             UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
                             outMinimumSamplingInterval);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readHistorizing(UA_Server *server, const UA_NodeId nodeId,
-                          UA_Boolean *outHistorizing) {
+                          UA_Boolean *outHistorizing) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_HISTORIZING,
                             outHistorizing);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_readExecutable(UA_Server *server, const UA_NodeId nodeId,
-                         UA_Boolean *outExecutable) {
+                         UA_Boolean *outExecutable) ,{
     return __UA_Server_read(server, &nodeId, UA_ATTRIBUTEID_EXECUTABLE,
                             outExecutable);
-}
+})
 
 /**
  * The following node attributes cannot be changed once a node has been created:
@@ -781,130 +781,131 @@ __UA_Server_write(UA_Server *server, const UA_NodeId *nodeId,
                   const UA_AttributeId attributeId,
                   const UA_DataType *attr_type, const void *attr);
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeBrowseName(UA_Server *server, const UA_NodeId nodeId,
-                          const UA_QualifiedName browseName) {
+                          const UA_QualifiedName browseName) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_BROWSENAME,
                              &UA_TYPES[UA_TYPES_QUALIFIEDNAME], &browseName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeDisplayName(UA_Server *server, const UA_NodeId nodeId,
-                           const UA_LocalizedText displayName) {
+                           const UA_LocalizedText displayName) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_DISPLAYNAME,
                              &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], &displayName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeDescription(UA_Server *server, const UA_NodeId nodeId,
-                           const UA_LocalizedText description) {
+                           const UA_LocalizedText description) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_DESCRIPTION,
                              &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], &description);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeWriteMask(UA_Server *server, const UA_NodeId nodeId,
-                         const UA_UInt32 writeMask) {
+                         const UA_UInt32 writeMask) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_WRITEMASK,
                              &UA_TYPES[UA_TYPES_UINT32], &writeMask);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeIsAbstract(UA_Server *server, const UA_NodeId nodeId,
-                          const UA_Boolean isAbstract) {
+                          const UA_Boolean isAbstract) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_ISABSTRACT,
                              &UA_TYPES[UA_TYPES_BOOLEAN], &isAbstract);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeInverseName(UA_Server *server, const UA_NodeId nodeId,
-                           const UA_LocalizedText inverseName) {
+                           const UA_LocalizedText inverseName) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_INVERSENAME,
                              &UA_TYPES[UA_TYPES_LOCALIZEDTEXT], &inverseName);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeEventNotifier(UA_Server *server, const UA_NodeId nodeId,
-                             const UA_Byte eventNotifier) {
+                             const UA_Byte eventNotifier) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_EVENTNOTIFIER,
                              &UA_TYPES[UA_TYPES_BYTE], &eventNotifier);
-}
+})
 
 /**
  * Writes an UA_Variant to a variable/variableType node.
  * StatusCode is set to ``UA_STATUSCODE_GOOD``, sourceTimestamp and
  * serverTimestamp are set to UA_DateTime_now()
  */
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeValue(UA_Server *server, const UA_NodeId nodeId,
-                     const UA_Variant value) {
+                     const UA_Variant value) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_VALUE,
                              &UA_TYPES[UA_TYPES_VARIANT], &value);
-}
+})
 
 /**
  * Writes an UA_DataValue to a variable/variableType node.
  * In contrast to UA_Server_writeValue, this functions can also write
  * sourceTimestamp, serverTimestamp and statusCode.
  */
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeDataValue(UA_Server *server, const UA_NodeId nodeId,
-                     const UA_DataValue value) {
+                     const UA_DataValue value) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_VALUE,
                              &UA_TYPES[UA_TYPES_DATAVALUE], &value);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeDataType(UA_Server *server, const UA_NodeId nodeId,
-                        const UA_NodeId dataType) {
+                        const UA_NodeId dataType) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_DATATYPE,
                              &UA_TYPES[UA_TYPES_NODEID], &dataType);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeValueRank(UA_Server *server, const UA_NodeId nodeId,
-                         const UA_Int32 valueRank) {
+                         const UA_Int32 valueRank) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_VALUERANK,
                              &UA_TYPES[UA_TYPES_INT32], &valueRank);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeArrayDimensions(UA_Server *server, const UA_NodeId nodeId,
-                               const UA_Variant arrayDimensions) {
+                               const UA_Variant arrayDimensions) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_ARRAYDIMENSIONS,
                              &UA_TYPES[UA_TYPES_VARIANT], &arrayDimensions);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeAccessLevel(UA_Server *server, const UA_NodeId nodeId,
-                           const UA_Byte accessLevel) {
+                           const UA_Byte accessLevel) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_ACCESSLEVEL,
                              &UA_TYPES[UA_TYPES_BYTE], &accessLevel);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeMinimumSamplingInterval(UA_Server *server, const UA_NodeId nodeId,
-                                       const UA_Double miniumSamplingInterval) {
+                                       const UA_Double miniumSamplingInterval) ,{
     return __UA_Server_write(server, &nodeId,
                              UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
                              &UA_TYPES[UA_TYPES_DOUBLE],
                              &miniumSamplingInterval);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeHistorizing(UA_Server *server, const UA_NodeId nodeId,
-                          const UA_Boolean historizing) {
+                          const UA_Boolean historizing) ,{
     return __UA_Server_write(server, &nodeId,
                              UA_ATTRIBUTEID_HISTORIZING,
                              &UA_TYPES[UA_TYPES_BOOLEAN],
                              &historizing);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_writeExecutable(UA_Server *server, const UA_NodeId nodeId,
-                          const UA_Boolean executable) {
+                          const UA_Boolean executable) ,{
     return __UA_Server_write(server, &nodeId, UA_ATTRIBUTEID_EXECUTABLE,
-                             &UA_TYPES[UA_TYPES_BOOLEAN], &executable); }
+                             &UA_TYPES[UA_TYPES_BOOLEAN], &executable); 
+})
 
 /**
  * Browsing
@@ -1317,22 +1318,22 @@ __UA_Server_addNode(UA_Server *server, const UA_NodeClass nodeClass,
                     const UA_DataType *attributeType,
                     void *nodeContext, UA_NodeId *outNewNodeId);
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addVariableNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                           const UA_NodeId parentNodeId,
                           const UA_NodeId referenceTypeId,
                           const UA_QualifiedName browseName,
                           const UA_NodeId typeDefinition,
                           const UA_VariableAttributes attr,
-                          void *nodeContext, UA_NodeId *outNewNodeId) {
+                          void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_VARIABLE, &requestedNewNodeId,
                                &parentNodeId, &referenceTypeId, browseName,
                                &typeDefinition, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VARIABLEATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addVariableTypeNode(UA_Server *server,
                               const UA_NodeId requestedNewNodeId,
                               const UA_NodeId parentNodeId,
@@ -1340,88 +1341,88 @@ UA_Server_addVariableTypeNode(UA_Server *server,
                               const UA_QualifiedName browseName,
                               const UA_NodeId typeDefinition,
                               const UA_VariableTypeAttributes attr,
-                              void *nodeContext, UA_NodeId *outNewNodeId) {
+                              void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_VARIABLETYPE,
                                &requestedNewNodeId, &parentNodeId, &referenceTypeId,
                                browseName, &typeDefinition,
                                (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VARIABLETYPEATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addObjectNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                         const UA_NodeId parentNodeId,
                         const UA_NodeId referenceTypeId,
                         const UA_QualifiedName browseName,
                         const UA_NodeId typeDefinition,
                         const UA_ObjectAttributes attr,
-                        void *nodeContext, UA_NodeId *outNewNodeId) {
+                        void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_OBJECT, &requestedNewNodeId,
                                &parentNodeId, &referenceTypeId, browseName,
                                &typeDefinition, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_OBJECTATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addObjectTypeNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                             const UA_NodeId parentNodeId,
                             const UA_NodeId referenceTypeId,
                             const UA_QualifiedName browseName,
                             const UA_ObjectTypeAttributes attr,
-                            void *nodeContext, UA_NodeId *outNewNodeId) {
+                            void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_OBJECTTYPE, &requestedNewNodeId,
                                &parentNodeId, &referenceTypeId, browseName,
                                &UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_OBJECTTYPEATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addViewNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                       const UA_NodeId parentNodeId,
                       const UA_NodeId referenceTypeId,
                       const UA_QualifiedName browseName,
                       const UA_ViewAttributes attr,
-                      void *nodeContext, UA_NodeId *outNewNodeId) {
+                      void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_VIEW, &requestedNewNodeId,
                                &parentNodeId, &referenceTypeId, browseName,
                                &UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_VIEWATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addReferenceTypeNode(UA_Server *server,
                                const UA_NodeId requestedNewNodeId,
                                const UA_NodeId parentNodeId,
                                const UA_NodeId referenceTypeId,
                                const UA_QualifiedName browseName,
                                const UA_ReferenceTypeAttributes attr,
-                               void *nodeContext, UA_NodeId *outNewNodeId) {
+                               void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_REFERENCETYPE,
                                &requestedNewNodeId, &parentNodeId, &referenceTypeId,
                                browseName, &UA_NODEID_NULL,
                                (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_REFERENCETYPEATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addDataTypeNode(UA_Server *server,
                           const UA_NodeId requestedNewNodeId,
                           const UA_NodeId parentNodeId,
                           const UA_NodeId referenceTypeId,
                           const UA_QualifiedName browseName,
                           const UA_DataTypeAttributes attr,
-                          void *nodeContext, UA_NodeId *outNewNodeId) {
+                          void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return __UA_Server_addNode(server, UA_NODECLASS_DATATYPE, &requestedNewNodeId,
                                &parentNodeId, &referenceTypeId, browseName,
                                &UA_NODEID_NULL, (const UA_NodeAttributes*)&attr,
                                &UA_TYPES[UA_TYPES_DATATYPEATTRIBUTES],
                                nodeContext, outNewNodeId);
-}
+})
 
 UA_StatusCode UA_EXPORT UA_THREADSAFE
 UA_Server_addDataSourceVariableNode(UA_Server *server,
@@ -1450,14 +1451,14 @@ UA_Server_addMethodNodeEx(UA_Server *server, const UA_NodeId requestedNewNodeId,
                           UA_NodeId *outputArgumentsOutNewNodeId,
                           void *nodeContext, UA_NodeId *outNewNodeId);
 
-static UA_INLINE UA_THREADSAFE UA_StatusCode
+UA_INLINABLE( UA_THREADSAFE UA_StatusCode
 UA_Server_addMethodNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                         const UA_NodeId parentNodeId, const UA_NodeId referenceTypeId,
                         const UA_QualifiedName browseName, const UA_MethodAttributes attr,
                         UA_MethodCallback method,
                         size_t inputArgumentsSize, const UA_Argument *inputArguments,
                         size_t outputArgumentsSize, const UA_Argument *outputArguments,
-                        void *nodeContext, UA_NodeId *outNewNodeId) {
+                        void *nodeContext, UA_NodeId *outNewNodeId) ,{
     return UA_Server_addMethodNodeEx(server, requestedNewNodeId,  parentNodeId,
                                      referenceTypeId, browseName, attr, method,
                                      inputArgumentsSize, inputArguments,
@@ -1465,7 +1466,7 @@ UA_Server_addMethodNode(UA_Server *server, const UA_NodeId requestedNewNodeId,
                                      outputArgumentsSize, outputArguments,
                                      UA_NODEID_NULL, NULL,
                                      nodeContext, outNewNodeId);
-}
+})
 
 #endif
