// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Low level bindings to open62541
class open62541 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  open62541(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  open62541.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr = _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr = _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>('imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
          ffi.NativeFunction<intmax_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>(
      'strtoimax');
  late final _strtoimax =
      _strtoimaxPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
          ffi.NativeFunction<uintmax_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>(
      'strtoumax');
  late final _strtoumax =
      _strtoumaxPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
          ffi.NativeFunction<intmax_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>(
      'wcstoimax');
  late final _wcstoimax =
      _wcstoimaxPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
          ffi.NativeFunction<uintmax_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>(
      'wcstoumax');
  late final _wcstoumax =
      _wcstoumaxPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'memcpy');
  late final _memcpy =
      _memcpyPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'memmove');
  late final _memmove =
      _memmovePtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'strcat');
  late final _strcat =
      _strcatPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'strcpy');
  late final _strcpy =
      _strcpyPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>('strerror');
  late final _strerror = _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>('strlen');
  late final _strlen = _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'strncat');
  late final _strncat =
      _strncatPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'strncpy');
  late final _strncpy =
      _strncpyPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'strpbrk');
  late final _strpbrk =
      _strpbrkPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'strstr');
  late final _strstr =
      _strstrPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'strtok');
  late final _strtok =
      _strtokPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Size)>>(
          'strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy =
      _memccpyPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>('getpriority');
  late final _getpriority = _getpriorityPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>('getrlimit');
  late final _getrlimit = _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>('getrusage');
  late final _getrusage = _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>('setpriority');
  late final _setpriority = _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>('setrlimit');
  late final _setrlimit = _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait(
      arg0,
    );
  }

  late final _waitPtr = _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait = _waitPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<ffi.NativeFunction<pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid = _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr.asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max = _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>('malloc');
  late final _malloc = _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc = _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('free');
  late final _free = _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc = _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size, ffi.Size)>>(
          'posix_memalign');
  late final _posix_memalign =
      _posix_memalignPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
          'at_quick_exit');
  late final _at_quick_exit =
      _at_quick_exitPtr.asFunction<int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr = _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>('atof');
  late final _atof = _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>('atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr = _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>('atoll');
  late final _atoll = _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
                  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>>(
      'bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr = _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr = _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr = _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr = _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>('lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen = _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>>(
          'mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
                  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>>(
      'qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
          'strtod');
  late final _strtod =
      _strtodPtr.asFunction<double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
          'strtof');
  late final _strtof =
      _strtofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi
      .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol =
      _strtolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll =
      _strtollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul =
      _strtoulPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull =
      _strtoullPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('system');
  late final _system = _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, ffi.Size)>>(
          'wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb = _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>('a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr = _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt =
      _ecvtPtr.asFunction<ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 = _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt =
      _fcvtPtr.asFunction<ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>(
          'initstate');
  late final _initstate = _initstatePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 = _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>('l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 = _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('mkstemp');
  late final _mkstemp = _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 = _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>('ptsname');
  late final _ptsname = _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('putenv');
  late final _putenv = _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr = _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>('rand_r');
  late final _rand_r = _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'realpath');
  late final _realpath =
      _realpathPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedShort> Function(ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<ffi.Pointer<ffi.UnsignedShort> Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>('setkey');
  late final _setkey = _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('unsetenv');
  late final _unsetenv = _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void __assert_rtn(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___assert_rtn(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___assert_rtnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>('__assert_rtn');
  late final ___assert_rtn = ___assert_rtnPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// Returns a readable attribute name like "NodeId" or "Invalid" if the attribute
  /// does not exist.
  ffi.Pointer<ffi.Char> UA_AttributeId_name(
    UA_AttributeId attrId,
  ) {
    return _UA_AttributeId_name(
      attrId.value,
    );
  }

  late final _UA_AttributeId_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>('UA_AttributeId_name');
  late final _UA_AttributeId_name = _UA_AttributeId_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> UA_StatusCode_name(
    int code,
  ) {
    return _UA_StatusCode_name(
      code,
    );
  }

  late final _UA_StatusCode_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(UA_StatusCode)>>('UA_StatusCode_name');
  late final _UA_StatusCode_name = _UA_StatusCode_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool UA_StatusCode_isBad(
    int code,
  ) {
    return _UA_StatusCode_isBad(
      code,
    );
  }

  late final _UA_StatusCode_isBadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>('UA_StatusCode_isBad');
  late final _UA_StatusCode_isBad = _UA_StatusCode_isBadPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isUncertain(
    int code,
  ) {
    return _UA_StatusCode_isUncertain(
      code,
    );
  }

  late final _UA_StatusCode_isUncertainPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>('UA_StatusCode_isUncertain');
  late final _UA_StatusCode_isUncertain = _UA_StatusCode_isUncertainPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isGood(
    int code,
  ) {
    return _UA_StatusCode_isGood(
      code,
    );
  }

  late final _UA_StatusCode_isGoodPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>('UA_StatusCode_isGood');
  late final _UA_StatusCode_isGood = _UA_StatusCode_isGoodPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isEqualTop(
    int s1,
    int s2,
  ) {
    return _UA_StatusCode_isEqualTop(
      s1,
      s2,
    );
  }

  late final _UA_StatusCode_isEqualTopPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode, UA_StatusCode)>>('UA_StatusCode_isEqualTop');
  late final _UA_StatusCode_isEqualTop = _UA_StatusCode_isEqualTopPtr.asFunction<bool Function(int, int)>();

  UA_String UA_String_fromChars(
    ffi.Pointer<ffi.Char> src,
  ) {
    return _UA_String_fromChars(
      src,
    );
  }

  late final _UA_String_fromCharsPtr =
      _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>('UA_String_fromChars');
  late final _UA_String_fromChars = _UA_String_fromCharsPtr.asFunction<UA_String Function(ffi.Pointer<ffi.Char>)>();

  bool UA_String_isEmpty(
    ffi.Pointer<UA_String> s,
  ) {
    return _UA_String_isEmpty(
      s,
    );
  }

  late final _UA_String_isEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_String>)>>('UA_String_isEmpty');
  late final _UA_String_isEmpty = _UA_String_isEmptyPtr.asFunction<bool Function(ffi.Pointer<UA_String>)>();

  int UA_String_append(
    ffi.Pointer<UA_String> s,
    UA_String s2,
  ) {
    return _UA_String_append(
      s,
      s2,
    );
  }

  late final _UA_String_appendPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_String>, UA_String)>>('UA_String_append');
  late final _UA_String_append = _UA_String_appendPtr.asFunction<int Function(ffi.Pointer<UA_String>, UA_String)>();

  late final ffi.Pointer<UA_String> _UA_STRING_NULL = _lookup<UA_String>('UA_STRING_NULL');

  UA_String get UA_STRING_NULL => _UA_STRING_NULL.ref;

  UA_String UA_STRING(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_STRING(
      chars,
    );
  }

  late final _UA_STRINGPtr = _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>('UA_STRING');
  late final _UA_STRING = _UA_STRINGPtr.asFunction<UA_String Function(ffi.Pointer<ffi.Char>)>();

  int UA_String_printf(
    ffi.Pointer<UA_String> str,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _UA_String_printf(
      str,
      format,
    );
  }

  late final _UA_String_printfPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_String>, ffi.Pointer<ffi.Char>)>>(
          'UA_String_printf');
  late final _UA_String_printf =
      _UA_String_printfPtr.asFunction<int Function(ffi.Pointer<UA_String>, ffi.Pointer<ffi.Char>)>();

  int UA_String_vprintf(
    ffi.Pointer<UA_String> str,
    ffi.Pointer<ffi.Char> format,
    va_list args,
  ) {
    return _UA_String_vprintf(
      str,
      format,
      args,
    );
  }

  late final _UA_String_vprintfPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_String>, ffi.Pointer<ffi.Char>, va_list)>>(
          'UA_String_vprintf');
  late final _UA_String_vprintf =
      _UA_String_vprintfPtr.asFunction<int Function(ffi.Pointer<UA_String>, ffi.Pointer<ffi.Char>, va_list)>();

  int UA_DateTime_now() {
    return _UA_DateTime_now();
  }

  late final _UA_DateTime_nowPtr = _lookup<ffi.NativeFunction<UA_DateTime Function()>>('UA_DateTime_now');
  late final _UA_DateTime_now = _UA_DateTime_nowPtr.asFunction<int Function()>();

  int UA_DateTime_localTimeUtcOffset() {
    return _UA_DateTime_localTimeUtcOffset();
  }

  late final _UA_DateTime_localTimeUtcOffsetPtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function()>>('UA_DateTime_localTimeUtcOffset');
  late final _UA_DateTime_localTimeUtcOffset = _UA_DateTime_localTimeUtcOffsetPtr.asFunction<int Function()>();

  int UA_DateTime_nowMonotonic() {
    return _UA_DateTime_nowMonotonic();
  }

  late final _UA_DateTime_nowMonotonicPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function()>>('UA_DateTime_nowMonotonic');
  late final _UA_DateTime_nowMonotonic = _UA_DateTime_nowMonotonicPtr.asFunction<int Function()>();

  UA_DateTimeStruct UA_DateTime_toStruct(
    int t,
  ) {
    return _UA_DateTime_toStruct(
      t,
    );
  }

  late final _UA_DateTime_toStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTimeStruct Function(UA_DateTime)>>('UA_DateTime_toStruct');
  late final _UA_DateTime_toStruct = _UA_DateTime_toStructPtr.asFunction<UA_DateTimeStruct Function(int)>();

  int UA_DateTime_fromStruct(
    UA_DateTimeStruct ts,
  ) {
    return _UA_DateTime_fromStruct(
      ts,
    );
  }

  late final _UA_DateTime_fromStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_DateTimeStruct)>>('UA_DateTime_fromStruct');
  late final _UA_DateTime_fromStruct = _UA_DateTime_fromStructPtr.asFunction<int Function(UA_DateTimeStruct)>();

  int UA_DateTime_toUnixTime(
    int date,
  ) {
    return _UA_DateTime_toUnixTime(
      date,
    );
  }

  late final _UA_DateTime_toUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function(UA_DateTime)>>('UA_DateTime_toUnixTime');
  late final _UA_DateTime_toUnixTime = _UA_DateTime_toUnixTimePtr.asFunction<int Function(int)>();

  int UA_DateTime_fromUnixTime(
    int unixDate,
  ) {
    return _UA_DateTime_fromUnixTime(
      unixDate,
    );
  }

  late final _UA_DateTime_fromUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_Int64)>>('UA_DateTime_fromUnixTime');
  late final _UA_DateTime_fromUnixTime = _UA_DateTime_fromUnixTimePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<UA_Guid> _UA_GUID_NULL = _lookup<UA_Guid>('UA_GUID_NULL');

  UA_Guid get UA_GUID_NULL => _UA_GUID_NULL.ref;

  int UA_Guid_print(
    ffi.Pointer<UA_Guid> guid,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_Guid_print(
      guid,
      output,
    );
  }

  late final _UA_Guid_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_String>)>>(
          'UA_Guid_print');
  late final _UA_Guid_print =
      _UA_Guid_printPtr.asFunction<int Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_String>)>();

  int UA_Guid_parse(
    ffi.Pointer<UA_Guid> guid,
    UA_String str,
  ) {
    return _UA_Guid_parse(
      guid,
      str,
    );
  }

  late final _UA_Guid_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Guid>, UA_String)>>('UA_Guid_parse');
  late final _UA_Guid_parse = _UA_Guid_parsePtr.asFunction<int Function(ffi.Pointer<UA_Guid>, UA_String)>();

  UA_Guid UA_GUID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_GUID(
      chars,
    );
  }

  late final _UA_GUIDPtr = _lookup<ffi.NativeFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>>('UA_GUID');
  late final _UA_GUID = _UA_GUIDPtr.asFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<UA_ByteString> _UA_BYTESTRING_NULL = _lookup<UA_ByteString>('UA_BYTESTRING_NULL');

  UA_ByteString get UA_BYTESTRING_NULL => _UA_BYTESTRING_NULL.ref;

  int UA_ByteString_allocBuffer(
    ffi.Pointer<UA_ByteString> bs,
    int length,
  ) {
    return _UA_ByteString_allocBuffer(
      bs,
      length,
    );
  }

  late final _UA_ByteString_allocBufferPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Size)>>(
          'UA_ByteString_allocBuffer');
  late final _UA_ByteString_allocBuffer =
      _UA_ByteString_allocBufferPtr.asFunction<int Function(ffi.Pointer<UA_ByteString>, int)>();

  int UA_ByteString_toBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ByteString_toBase64(
      bs,
      output,
    );
  }

  late final _UA_ByteString_toBase64Ptr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>>(
          'UA_ByteString_toBase64');
  late final _UA_ByteString_toBase64 =
      _UA_ByteString_toBase64Ptr.asFunction<int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_ByteString_fromBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> input,
  ) {
    return _UA_ByteString_fromBase64(
      bs,
      input,
    );
  }

  late final _UA_ByteString_fromBase64Ptr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>>(
          'UA_ByteString_fromBase64');
  late final _UA_ByteString_fromBase64 =
      _UA_ByteString_fromBase64Ptr.asFunction<int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_ByteString_hash(
    int initialHashValue,
    ffi.Pointer<UA_Byte> data,
    int size,
  ) {
    return _UA_ByteString_hash(
      initialHashValue,
      data,
      size,
    );
  }

  late final _UA_ByteString_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(UA_UInt32, ffi.Pointer<UA_Byte>, ffi.Size)>>('UA_ByteString_hash');
  late final _UA_ByteString_hash = _UA_ByteString_hashPtr.asFunction<int Function(int, ffi.Pointer<UA_Byte>, int)>();

  late final ffi.Pointer<UA_NodeId> _UA_NODEID_NULL = _lookup<UA_NodeId>('UA_NODEID_NULL');

  UA_NodeId get UA_NODEID_NULL => _UA_NODEID_NULL.ref;

  bool UA_NodeId_isNull(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_isNull(
      p,
    );
  }

  late final _UA_NodeId_isNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeId>)>>('UA_NodeId_isNull');
  late final _UA_NodeId_isNull = _UA_NodeId_isNullPtr.asFunction<bool Function(ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_print(
    ffi.Pointer<UA_NodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_NodeId_print(
      id,
      output,
    );
  }

  late final _UA_NodeId_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>)>>(
          'UA_NodeId_print');
  late final _UA_NodeId_print =
      _UA_NodeId_printPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>)>();

  int UA_NodeId_printEx(
    ffi.Pointer<UA_NodeId> id,
    ffi.Pointer<UA_String> output,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
  ) {
    return _UA_NodeId_printEx(
      id,
      output,
      nsMapping,
    );
  }

  late final _UA_NodeId_printExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>, ffi.Pointer<UA_NamespaceMapping>)>>('UA_NodeId_printEx');
  late final _UA_NodeId_printEx = _UA_NodeId_printExPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>, ffi.Pointer<UA_NamespaceMapping>)>();

  int UA_NodeId_parse(
    ffi.Pointer<UA_NodeId> id,
    UA_String str,
  ) {
    return _UA_NodeId_parse(
      id,
      str,
    );
  }

  late final _UA_NodeId_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeId>, UA_String)>>('UA_NodeId_parse');
  late final _UA_NodeId_parse = _UA_NodeId_parsePtr.asFunction<int Function(ffi.Pointer<UA_NodeId>, UA_String)>();

  int UA_NodeId_parseEx(
    ffi.Pointer<UA_NodeId> id,
    UA_String str,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
  ) {
    return _UA_NodeId_parseEx(
      id,
      str,
      nsMapping,
    );
  }

  late final _UA_NodeId_parseExPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeId>, UA_String, ffi.Pointer<UA_NamespaceMapping>)>>(
      'UA_NodeId_parseEx');
  late final _UA_NodeId_parseEx = _UA_NodeId_parseExPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, UA_String, ffi.Pointer<UA_NamespaceMapping>)>();

  UA_NodeId UA_NODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID(
      chars,
    );
  }

  late final _UA_NODEIDPtr = _lookup<ffi.NativeFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>>('UA_NODEID');
  late final _UA_NODEID = _UA_NODEIDPtr.asFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_NODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_NODEID_NUMERICPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_UInt32)>>('UA_NODEID_NUMERIC');
  late final _UA_NODEID_NUMERIC = _UA_NODEID_NUMERICPtr.asFunction<UA_NodeId Function(int, int)>();

  UA_NodeId UA_NODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRINGPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING');
  late final _UA_NODEID_STRING = _UA_NODEID_STRINGPtr.asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRING_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING_ALLOC');
  late final _UA_NODEID_STRING_ALLOC =
      _UA_NODEID_STRING_ALLOCPtr.asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_NODEID_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_NODEID_GUIDPtr = _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_Guid)>>('UA_NODEID_GUID');
  late final _UA_NODEID_GUID = _UA_NODEID_GUIDPtr.asFunction<UA_NodeId Function(int, UA_Guid)>();

  UA_NodeId UA_NODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRINGPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING');
  late final _UA_NODEID_BYTESTRING =
      _UA_NODEID_BYTESTRINGPtr.asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRING_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING_ALLOC');
  late final _UA_NODEID_BYTESTRING_ALLOC =
      _UA_NODEID_BYTESTRING_ALLOCPtr.asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_Order UA_NodeId_order(
    ffi.Pointer<UA_NodeId> n1,
    ffi.Pointer<UA_NodeId> n2,
  ) {
    return UA_Order.fromValue(_UA_NodeId_order(
      n1,
      n2,
    ));
  }

  late final _UA_NodeId_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>>('UA_NodeId_order');
  late final _UA_NodeId_order =
      _UA_NodeId_orderPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_hash(
    ffi.Pointer<UA_NodeId> n,
  ) {
    return _UA_NodeId_hash(
      n,
    );
  }

  late final _UA_NodeId_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_NodeId>)>>('UA_NodeId_hash');
  late final _UA_NodeId_hash = _UA_NodeId_hashPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>)>();

  late final ffi.Pointer<UA_ExpandedNodeId> _UA_EXPANDEDNODEID_NULL =
      _lookup<UA_ExpandedNodeId>('UA_EXPANDEDNODEID_NULL');

  UA_ExpandedNodeId get UA_EXPANDEDNODEID_NULL => _UA_EXPANDEDNODEID_NULL.ref;

  int UA_ExpandedNodeId_print(
    ffi.Pointer<UA_ExpandedNodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ExpandedNodeId_print(
      id,
      output,
    );
  }

  late final _UA_ExpandedNodeId_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>)>>(
          'UA_ExpandedNodeId_print');
  late final _UA_ExpandedNodeId_print =
      _UA_ExpandedNodeId_printPtr.asFunction<int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>)>();

  int UA_ExpandedNodeId_printEx(
    ffi.Pointer<UA_ExpandedNodeId> id,
    ffi.Pointer<UA_String> output,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
    int serverUrisSize,
    ffi.Pointer<UA_String> serverUris,
  ) {
    return _UA_ExpandedNodeId_printEx(
      id,
      output,
      nsMapping,
      serverUrisSize,
      serverUris,
    );
  }

  late final _UA_ExpandedNodeId_printExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_NamespaceMapping>, ffi.Size, ffi.Pointer<UA_String>)>>('UA_ExpandedNodeId_printEx');
  late final _UA_ExpandedNodeId_printEx = _UA_ExpandedNodeId_printExPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>, ffi.Pointer<UA_NamespaceMapping>, int,
          ffi.Pointer<UA_String>)>();

  int UA_ExpandedNodeId_parse(
    ffi.Pointer<UA_ExpandedNodeId> id,
    UA_String str,
  ) {
    return _UA_ExpandedNodeId_parse(
      id,
      str,
    );
  }

  late final _UA_ExpandedNodeId_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>, UA_String)>>(
          'UA_ExpandedNodeId_parse');
  late final _UA_ExpandedNodeId_parse =
      _UA_ExpandedNodeId_parsePtr.asFunction<int Function(ffi.Pointer<UA_ExpandedNodeId>, UA_String)>();

  int UA_ExpandedNodeId_parseEx(
    ffi.Pointer<UA_ExpandedNodeId> id,
    UA_String str,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
    int serverUrisSize,
    ffi.Pointer<UA_String> serverUris,
  ) {
    return _UA_ExpandedNodeId_parseEx(
      id,
      str,
      nsMapping,
      serverUrisSize,
      serverUris,
    );
  }

  late final _UA_ExpandedNodeId_parseExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>, UA_String, ffi.Pointer<UA_NamespaceMapping>, ffi.Size,
              ffi.Pointer<UA_String>)>>('UA_ExpandedNodeId_parseEx');
  late final _UA_ExpandedNodeId_parseEx = _UA_ExpandedNodeId_parseExPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExpandedNodeId>, UA_String, ffi.Pointer<UA_NamespaceMapping>, int, ffi.Pointer<UA_String>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID(
      chars,
    );
  }

  late final _UA_EXPANDEDNODEIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID');
  late final _UA_EXPANDEDNODEID = _UA_EXPANDEDNODEIDPtr.asFunction<UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_NODEID2EXPANDEDNODEID(
    UA_NodeId nodeId,
  ) {
    return _UA_NODEID2EXPANDEDNODEID(
      nodeId,
    );
  }

  late final _UA_NODEID2EXPANDEDNODEIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodeId)>>('UA_NODEID2EXPANDEDNODEID');
  late final _UA_NODEID2EXPANDEDNODEID =
      _UA_NODEID2EXPANDEDNODEIDPtr.asFunction<UA_ExpandedNodeId Function(UA_NodeId)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_EXPANDEDNODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_EXPANDEDNODEID_NUMERICPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_UInt32)>>('UA_EXPANDEDNODEID_NUMERIC');
  late final _UA_EXPANDEDNODEID_NUMERIC =
      _UA_EXPANDEDNODEID_NUMERICPtr.asFunction<UA_ExpandedNodeId Function(int, int)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRINGPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>(
          'UA_EXPANDEDNODEID_STRING');
  late final _UA_EXPANDEDNODEID_STRING =
      _UA_EXPANDEDNODEID_STRINGPtr.asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>(
          'UA_EXPANDEDNODEID_STRING_ALLOC');
  late final _UA_EXPANDEDNODEID_STRING_ALLOC =
      _UA_EXPANDEDNODEID_STRING_ALLOCPtr.asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_EXPANDEDNODEID_STRING_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_GUIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_Guid)>>('UA_EXPANDEDNODEID_STRING_GUID');
  late final _UA_EXPANDEDNODEID_STRING_GUID =
      _UA_EXPANDEDNODEID_STRING_GUIDPtr.asFunction<UA_ExpandedNodeId Function(int, UA_Guid)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRINGPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>(
          'UA_EXPANDEDNODEID_BYTESTRING');
  late final _UA_EXPANDEDNODEID_BYTESTRING =
      _UA_EXPANDEDNODEID_BYTESTRINGPtr.asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>(
          'UA_EXPANDEDNODEID_BYTESTRING_ALLOC');
  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOC =
      _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr.asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_NODEID(
    UA_NodeId nodeId,
  ) {
    return _UA_EXPANDEDNODEID_NODEID(
      nodeId,
    );
  }

  late final _UA_EXPANDEDNODEID_NODEIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodeId)>>('UA_EXPANDEDNODEID_NODEID');
  late final _UA_EXPANDEDNODEID_NODEID =
      _UA_EXPANDEDNODEID_NODEIDPtr.asFunction<UA_ExpandedNodeId Function(UA_NodeId)>();

  bool UA_ExpandedNodeId_isLocal(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_isLocal(
      n,
    );
  }

  late final _UA_ExpandedNodeId_isLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_isLocal');
  late final _UA_ExpandedNodeId_isLocal =
      _UA_ExpandedNodeId_isLocalPtr.asFunction<bool Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  UA_Order UA_ExpandedNodeId_order(
    ffi.Pointer<UA_ExpandedNodeId> n1,
    ffi.Pointer<UA_ExpandedNodeId> n2,
  ) {
    return UA_Order.fromValue(_UA_ExpandedNodeId_order(
      n1,
      n2,
    ));
  }

  late final _UA_ExpandedNodeId_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>>(
          'UA_ExpandedNodeId_order');
  late final _UA_ExpandedNodeId_order = _UA_ExpandedNodeId_orderPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_hash(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_hash(
      n,
    );
  }

  late final _UA_ExpandedNodeId_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_hash');
  late final _UA_ExpandedNodeId_hash =
      _UA_ExpandedNodeId_hashPtr.asFunction<int Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_QualifiedName_isNull(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_isNull(
      q,
    );
  }

  late final _UA_QualifiedName_isNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_isNull');
  late final _UA_QualifiedName_isNull =
      _UA_QualifiedName_isNullPtr.asFunction<bool Function(ffi.Pointer<UA_QualifiedName>)>();

  int UA_QualifiedName_hash(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_hash(
      q,
    );
  }

  late final _UA_QualifiedName_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_hash');
  late final _UA_QualifiedName_hash =
      _UA_QualifiedName_hashPtr.asFunction<int Function(ffi.Pointer<UA_QualifiedName>)>();

  UA_QualifiedName UA_QUALIFIEDNAME(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAMEPtr =
      _lookup<ffi.NativeFunction<UA_QualifiedName Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_QUALIFIEDNAME');
  late final _UA_QUALIFIEDNAME =
      _UA_QUALIFIEDNAMEPtr.asFunction<UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  UA_QualifiedName UA_QUALIFIEDNAME_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAME_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_QualifiedName Function(UA_UInt16, ffi.Pointer<ffi.Char>)>>(
          'UA_QUALIFIEDNAME_ALLOC');
  late final _UA_QUALIFIEDNAME_ALLOC =
      _UA_QUALIFIEDNAME_ALLOCPtr.asFunction<UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  int UA_QualifiedName_print(
    ffi.Pointer<UA_QualifiedName> qn,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_QualifiedName_print(
      qn,
      output,
    );
  }

  late final _UA_QualifiedName_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_String>)>>(
          'UA_QualifiedName_print');
  late final _UA_QualifiedName_print =
      _UA_QualifiedName_printPtr.asFunction<int Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_String>)>();

  int UA_QualifiedName_printEx(
    ffi.Pointer<UA_QualifiedName> qn,
    ffi.Pointer<UA_String> output,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
  ) {
    return _UA_QualifiedName_printEx(
      qn,
      output,
      nsMapping,
    );
  }

  late final _UA_QualifiedName_printExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_NamespaceMapping>)>>('UA_QualifiedName_printEx');
  late final _UA_QualifiedName_printEx = _UA_QualifiedName_printExPtr.asFunction<
      int Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_String>, ffi.Pointer<UA_NamespaceMapping>)>();

  int UA_QualifiedName_parse(
    ffi.Pointer<UA_QualifiedName> qn,
    UA_String str,
  ) {
    return _UA_QualifiedName_parse(
      qn,
      str,
    );
  }

  late final _UA_QualifiedName_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>, UA_String)>>(
          'UA_QualifiedName_parse');
  late final _UA_QualifiedName_parse =
      _UA_QualifiedName_parsePtr.asFunction<int Function(ffi.Pointer<UA_QualifiedName>, UA_String)>();

  int UA_QualifiedName_parseEx(
    ffi.Pointer<UA_QualifiedName> qn,
    UA_String str,
    ffi.Pointer<UA_NamespaceMapping> nsMapping,
  ) {
    return _UA_QualifiedName_parseEx(
      qn,
      str,
      nsMapping,
    );
  }

  late final _UA_QualifiedName_parseExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_QualifiedName>, UA_String, ffi.Pointer<UA_NamespaceMapping>)>>('UA_QualifiedName_parseEx');
  late final _UA_QualifiedName_parseEx = _UA_QualifiedName_parseExPtr.asFunction<
      int Function(ffi.Pointer<UA_QualifiedName>, UA_String, ffi.Pointer<UA_NamespaceMapping>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXTPtr =
      _lookup<ffi.NativeFunction<UA_LocalizedText Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'UA_LOCALIZEDTEXT');
  late final _UA_LOCALIZEDTEXT =
      _UA_LOCALIZEDTEXTPtr.asFunction<UA_LocalizedText Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT_ALLOC(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT_ALLOC(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXT_ALLOCPtr =
      _lookup<ffi.NativeFunction<UA_LocalizedText Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'UA_LOCALIZEDTEXT_ALLOC');
  late final _UA_LOCALIZEDTEXT_ALLOC =
      _UA_LOCALIZEDTEXT_ALLOCPtr.asFunction<UA_LocalizedText Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_NumericRange_parse(
    ffi.Pointer<UA_NumericRange> range,
    UA_String str,
  ) {
    return _UA_NumericRange_parse(
      range,
      str,
    );
  }

  late final _UA_NumericRange_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NumericRange>, UA_String)>>(
          'UA_NumericRange_parse');
  late final _UA_NumericRange_parse =
      _UA_NumericRange_parsePtr.asFunction<int Function(ffi.Pointer<UA_NumericRange>, UA_String)>();

  UA_NumericRange UA_NUMERICRANGE(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _UA_NUMERICRANGE(
      s,
    );
  }

  late final _UA_NUMERICRANGEPtr =
      _lookup<ffi.NativeFunction<UA_NumericRange Function(ffi.Pointer<ffi.Char>)>>('UA_NUMERICRANGE');
  late final _UA_NUMERICRANGE = _UA_NUMERICRANGEPtr.asFunction<UA_NumericRange Function(ffi.Pointer<ffi.Char>)>();

  bool UA_Variant_isEmpty(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isEmpty(
      v,
    );
  }

  late final _UA_Variant_isEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>('UA_Variant_isEmpty');
  late final _UA_Variant_isEmpty = _UA_Variant_isEmptyPtr.asFunction<bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_isScalar(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isScalar(
      v,
    );
  }

  late final _UA_Variant_isScalarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>('UA_Variant_isScalar');
  late final _UA_Variant_isScalar = _UA_Variant_isScalarPtr.asFunction<bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_hasScalarType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasScalarType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasScalarTypePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>>(
          'UA_Variant_hasScalarType');
  late final _UA_Variant_hasScalarType =
      _UA_Variant_hasScalarTypePtr.asFunction<bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  bool UA_Variant_hasArrayType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasArrayType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasArrayTypePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>>(
          'UA_Variant_hasArrayType');
  late final _UA_Variant_hasArrayType =
      _UA_Variant_hasArrayTypePtr.asFunction<bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setScalar(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalar(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_Variant_setScalar');
  late final _UA_Variant_setScalar = _UA_Variant_setScalarPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setScalarCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalarCopy(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_Variant_setScalarCopy');
  late final _UA_Variant_setScalarCopy = _UA_Variant_setScalarCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setArray(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArray(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setArray');
  late final _UA_Variant_setArray = _UA_Variant_setArrayPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setArrayCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArrayCopy(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setArrayCopy');
  late final _UA_Variant_setArrayCopy = _UA_Variant_setArrayCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_DataType>)>();

  int UA_Variant_copyRange(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
    UA_NumericRange range,
  ) {
    return _UA_Variant_copyRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_Variant_copyRangePtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>, UA_NumericRange)>>(
      'UA_Variant_copyRange');
  late final _UA_Variant_copyRange = _UA_Variant_copyRangePtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>, UA_NumericRange)>();

  int UA_Variant_setRange(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRange(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Size, UA_NumericRange)>>('UA_Variant_setRange');
  late final _UA_Variant_setRange = _UA_Variant_setRangePtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int, UA_NumericRange)>();

  int UA_Variant_setRangeCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRangeCopy(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangeCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, ffi.Size, UA_NumericRange)>>('UA_Variant_setRangeCopy');
  late final _UA_Variant_setRangeCopy = _UA_Variant_setRangeCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int, UA_NumericRange)>();

  void UA_ExtensionObject_setValue(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValue(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValue');
  late final _UA_ExtensionObject_setValue = _UA_ExtensionObject_setValuePtr.asFunction<
      void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_ExtensionObject_setValueNoDelete(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueNoDelete(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueNoDeletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValueNoDelete');
  late final _UA_ExtensionObject_setValueNoDelete = _UA_ExtensionObject_setValueNoDeletePtr.asFunction<
      void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_ExtensionObject_setValueCopy(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueCopy(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValueCopy');
  late final _UA_ExtensionObject_setValueCopy = _UA_ExtensionObject_setValueCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  bool UA_ExtensionObject_hasDecodedType(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_hasDecodedType(
      eo,
      type,
    );
  }

  late final _UA_ExtensionObject_hasDecodedTypePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_DataType>)>>(
          'UA_ExtensionObject_hasDecodedType');
  late final _UA_ExtensionObject_hasDecodedType = _UA_ExtensionObject_hasDecodedTypePtr.asFunction<
      bool Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_DataType>)>();

  int UA_DataValue_copyVariantRange(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
    UA_NumericRange range,
  ) {
    return _UA_DataValue_copyVariantRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_DataValue_copyVariantRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>, UA_NumericRange)>>('UA_DataValue_copyVariantRange');
  late final _UA_DataValue_copyVariantRange = _UA_DataValue_copyVariantRangePtr.asFunction<
      int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>, UA_NumericRange)>();

  bool UA_DataType_getStructMember(
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Char> memberName,
    ffi.Pointer<ffi.Size> outOffset,
    ffi.Pointer<ffi.Pointer<UA_DataType>> outMemberType,
    ffi.Pointer<ffi.Bool> outIsArray,
  ) {
    return _UA_DataType_getStructMember(
      type,
      memberName,
      outOffset,
      outMemberType,
      outIsArray,
    );
  }

  late final _UA_DataType_getStructMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_DataType>>, ffi.Pointer<ffi.Bool>)>>('UA_DataType_getStructMember');
  late final _UA_DataType_getStructMember = _UA_DataType_getStructMemberPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_DataType>>, ffi.Pointer<ffi.Bool>)>();

  bool UA_DataType_isNumeric(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_DataType_isNumeric(
      type,
    );
  }

  late final _UA_DataType_isNumericPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataType>)>>('UA_DataType_isNumeric');
  late final _UA_DataType_isNumeric = _UA_DataType_isNumericPtr.asFunction<bool Function(ffi.Pointer<UA_DataType>)>();

  /// Builtin data types can be accessed as UA_TYPES[UA_TYPES_XXX], where XXX is
  /// the name of the data type. If only the NodeId of a type is known, use the
  /// following method to retrieve the data type description.
  ffi.Pointer<UA_DataType> UA_findDataType(
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_findDataType(
      typeId,
    );
  }

  late final _UA_findDataTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>)>>('UA_findDataType');
  late final _UA_findDataType =
      _UA_findDataTypePtr.asFunction<ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<UA_DataType> UA_findDataTypeWithCustom(
    ffi.Pointer<UA_NodeId> typeId,
    ffi.Pointer<UA_DataTypeArray> customTypes,
  ) {
    return _UA_findDataTypeWithCustom(
      typeId,
      customTypes,
    );
  }

  late final _UA_findDataTypeWithCustomPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataTypeArray>)>>(
      'UA_findDataTypeWithCustom');
  late final _UA_findDataTypeWithCustom = _UA_findDataTypeWithCustomPtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataTypeArray>)>();

  ffi.Pointer<ffi.Void> UA_new(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_new(
      type,
    );
  }

  late final _UA_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>>('UA_new');
  late final _UA_new = _UA_newPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>();

  void UA_init(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_init(
      p,
      type,
    );
  }

  late final _UA_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_init');
  late final _UA_init = _UA_initPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_copy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_copy(
      src,
      dst,
      type,
    );
  }

  late final _UA_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_copy');
  late final _UA_copy =
      _UA_copyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_clear(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_clear(
      p,
      type,
    );
  }

  late final _UA_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_clear');
  late final _UA_clear = _UA_clearPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_delete(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_delete(
      p,
      type,
    );
  }

  late final _UA_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_delete');
  late final _UA_delete = _UA_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_print(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_print(
      p,
      type,
      output,
    );
  }

  late final _UA_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_String>)>>('UA_print');
  late final _UA_print =
      _UA_printPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_String>)>();

  UA_Order UA_order(
    ffi.Pointer<ffi.Void> p1,
    ffi.Pointer<ffi.Void> p2,
    ffi.Pointer<UA_DataType> type,
  ) {
    return UA_Order.fromValue(_UA_order(
      p1,
      p2,
      type,
    ));
  }

  late final _UA_orderPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_order');
  late final _UA_order =
      _UA_orderPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  bool UA_equal(
    ffi.Pointer<ffi.Void> p1,
    ffi.Pointer<ffi.Void> p2,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_equal(
      p1,
      p2,
      type,
    );
  }

  late final _UA_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_equal');
  late final _UA_equal =
      _UA_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_NamespaceMapping_local2Remote(
    ffi.Pointer<UA_NamespaceMapping> nm,
    int localIndex,
  ) {
    return _UA_NamespaceMapping_local2Remote(
      nm,
      localIndex,
    );
  }

  late final _UA_NamespaceMapping_local2RemotePtr =
      _lookup<ffi.NativeFunction<UA_UInt16 Function(ffi.Pointer<UA_NamespaceMapping>, UA_UInt16)>>(
          'UA_NamespaceMapping_local2Remote');
  late final _UA_NamespaceMapping_local2Remote =
      _UA_NamespaceMapping_local2RemotePtr.asFunction<int Function(ffi.Pointer<UA_NamespaceMapping>, int)>();

  int UA_NamespaceMapping_remote2Local(
    ffi.Pointer<UA_NamespaceMapping> nm,
    int remoteIndex,
  ) {
    return _UA_NamespaceMapping_remote2Local(
      nm,
      remoteIndex,
    );
  }

  late final _UA_NamespaceMapping_remote2LocalPtr =
      _lookup<ffi.NativeFunction<UA_UInt16 Function(ffi.Pointer<UA_NamespaceMapping>, UA_UInt16)>>(
          'UA_NamespaceMapping_remote2Local');
  late final _UA_NamespaceMapping_remote2Local =
      _UA_NamespaceMapping_remote2LocalPtr.asFunction<int Function(ffi.Pointer<UA_NamespaceMapping>, int)>();

  int UA_NamespaceMapping_uri2Index(
    ffi.Pointer<UA_NamespaceMapping> nm,
    UA_String uri,
    ffi.Pointer<UA_UInt16> index,
  ) {
    return _UA_NamespaceMapping_uri2Index(
      nm,
      uri,
      index,
    );
  }

  late final _UA_NamespaceMapping_uri2IndexPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NamespaceMapping>, UA_String, ffi.Pointer<UA_UInt16>)>>(
      'UA_NamespaceMapping_uri2Index');
  late final _UA_NamespaceMapping_uri2Index = _UA_NamespaceMapping_uri2IndexPtr.asFunction<
      int Function(ffi.Pointer<UA_NamespaceMapping>, UA_String, ffi.Pointer<UA_UInt16>)>();

  int UA_NamespaceMapping_index2Uri(
    ffi.Pointer<UA_NamespaceMapping> nm,
    int index,
    ffi.Pointer<UA_String> uri,
  ) {
    return _UA_NamespaceMapping_index2Uri(
      nm,
      index,
      uri,
    );
  }

  late final _UA_NamespaceMapping_index2UriPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NamespaceMapping>, UA_UInt16, ffi.Pointer<UA_String>)>>(
      'UA_NamespaceMapping_index2Uri');
  late final _UA_NamespaceMapping_index2Uri = _UA_NamespaceMapping_index2UriPtr.asFunction<
      int Function(ffi.Pointer<UA_NamespaceMapping>, int, ffi.Pointer<UA_String>)>();

  void UA_NamespaceMapping_delete(
    ffi.Pointer<UA_NamespaceMapping> nm,
  ) {
    return _UA_NamespaceMapping_delete(
      nm,
    );
  }

  late final _UA_NamespaceMapping_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NamespaceMapping>)>>('UA_NamespaceMapping_delete');
  late final _UA_NamespaceMapping_delete =
      _UA_NamespaceMapping_deletePtr.asFunction<void Function(ffi.Pointer<UA_NamespaceMapping>)>();

  int UA_calcSizeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_EncodeBinaryOptions> options,
  ) {
    return _UA_calcSizeBinary(
      p,
      type,
      options,
    );
  }

  late final _UA_calcSizeBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_EncodeBinaryOptions>)>>('UA_calcSizeBinary');
  late final _UA_calcSizeBinary = _UA_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_EncodeBinaryOptions>)>();

  int UA_encodeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_ByteString> outBuf,
    ffi.Pointer<UA_EncodeBinaryOptions> options,
  ) {
    return _UA_encodeBinary(
      p,
      type,
      outBuf,
      options,
    );
  }

  late final _UA_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_EncodeBinaryOptions>)>>('UA_encodeBinary');
  late final _UA_encodeBinary = _UA_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_ByteString>,
          ffi.Pointer<UA_EncodeBinaryOptions>)>();

  int UA_decodeBinary(
    ffi.Pointer<UA_ByteString> inBuf,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_DecodeBinaryOptions> options,
  ) {
    return _UA_decodeBinary(
      inBuf,
      p,
      type,
      options,
    );
  }

  late final _UA_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_DecodeBinaryOptions>)>>('UA_decodeBinary');
  late final _UA_decodeBinary = _UA_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_DecodeBinaryOptions>)>();

  int UA_calcSizeJson(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_EncodeJsonOptions> options,
  ) {
    return _UA_calcSizeJson(
      src,
      type,
      options,
    );
  }

  late final _UA_calcSizeJsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_EncodeJsonOptions>)>>('UA_calcSizeJson');
  late final _UA_calcSizeJson = _UA_calcSizeJsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_EncodeJsonOptions>)>();

  int UA_encodeJson(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_ByteString> outBuf,
    ffi.Pointer<UA_EncodeJsonOptions> options,
  ) {
    return _UA_encodeJson(
      src,
      type,
      outBuf,
      options,
    );
  }

  late final _UA_encodeJsonPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_EncodeJsonOptions>)>>('UA_encodeJson');
  late final _UA_encodeJson = _UA_encodeJsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_ByteString>,
          ffi.Pointer<UA_EncodeJsonOptions>)>();

  int UA_decodeJson(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_DecodeJsonOptions> options,
  ) {
    return _UA_decodeJson(
      src,
      dst,
      type,
      options,
    );
  }

  late final _UA_decodeJsonPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_DecodeJsonOptions>)>>('UA_decodeJson');
  late final _UA_decodeJson = _UA_decodeJsonPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_DecodeJsonOptions>)>();

  ffi.Pointer<ffi.Void> UA_Array_new(
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_new(
      size,
      type,
    );
  }

  late final _UA_Array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Array_new');
  late final _UA_Array_new =
      _UA_Array_newPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_copy(
    ffi.Pointer<ffi.Void> src,
    int size,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_copy(
      src,
      size,
      dst,
      type,
    );
  }

  late final _UA_Array_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_copy');
  late final _UA_Array_copy = _UA_Array_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<UA_DataType>)>();

  int UA_Array_resize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    int newSize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_resize(
      p,
      size,
      newSize,
      type,
    );
  }

  late final _UA_Array_resizePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Array_resize');
  late final _UA_Array_resize = _UA_Array_resizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_append(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_append(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_append');
  late final _UA_Array_append = _UA_Array_appendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  int UA_Array_appendCopy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_appendCopy(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_appendCopy');
  late final _UA_Array_appendCopy = _UA_Array_appendCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  void UA_Array_delete(
    ffi.Pointer<ffi.Void> p,
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_delete(
      p,
      size,
      type,
    );
  }

  late final _UA_Array_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<UA_DataType>)>>(
          'UA_Array_delete');
  late final _UA_Array_delete =
      _UA_Array_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_DataType>)>();

  late final ffi.Pointer<UA_DataType> _UA_TYPES = _lookup<UA_DataType>('UA_TYPES');

  ffi.Pointer<UA_DataType> get UA_TYPES => _UA_TYPES;

  void UA_Boolean_init(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_init(
      p,
    );
  }

  late final _UA_Boolean_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>('UA_Boolean_init');
  late final _UA_Boolean_init = _UA_Boolean_initPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<ffi.Bool> UA_Boolean_new() {
    return _UA_Boolean_new();
  }

  late final _UA_Boolean_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function()>>('UA_Boolean_new');
  late final _UA_Boolean_new = _UA_Boolean_newPtr.asFunction<ffi.Pointer<ffi.Bool> Function()>();

  int UA_Boolean_copy(
    ffi.Pointer<ffi.Bool> src,
    ffi.Pointer<ffi.Bool> dst,
  ) {
    return _UA_Boolean_copy(
      src,
      dst,
    );
  }

  late final _UA_Boolean_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_copy');
  late final _UA_Boolean_copy =
      _UA_Boolean_copyPtr.asFunction<int Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_clear(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_clear(
      p,
    );
  }

  late final _UA_Boolean_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>('UA_Boolean_clear');
  late final _UA_Boolean_clear = _UA_Boolean_clearPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_delete(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_delete(
      p,
    );
  }

  late final _UA_Boolean_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>('UA_Boolean_delete');
  late final _UA_Boolean_delete = _UA_Boolean_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  bool UA_Boolean_equal(
    ffi.Pointer<ffi.Bool> p1,
    ffi.Pointer<ffi.Bool> p2,
  ) {
    return _UA_Boolean_equal(
      p1,
      p2,
    );
  }

  late final _UA_Boolean_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>>('UA_Boolean_equal');
  late final _UA_Boolean_equal =
      _UA_Boolean_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void UA_SByte_init(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_init(
      p,
    );
  }

  late final _UA_SByte_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>('UA_SByte_init');
  late final _UA_SByte_init = _UA_SByte_initPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  ffi.Pointer<UA_SByte> UA_SByte_new() {
    return _UA_SByte_new();
  }

  late final _UA_SByte_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_SByte> Function()>>('UA_SByte_new');
  late final _UA_SByte_new = _UA_SByte_newPtr.asFunction<ffi.Pointer<UA_SByte> Function()>();

  int UA_SByte_copy(
    ffi.Pointer<UA_SByte> src,
    ffi.Pointer<UA_SByte> dst,
  ) {
    return _UA_SByte_copy(
      src,
      dst,
    );
  }

  late final _UA_SByte_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_copy');
  late final _UA_SByte_copy =
      _UA_SByte_copyPtr.asFunction<int Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>();

  void UA_SByte_clear(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_clear(
      p,
    );
  }

  late final _UA_SByte_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>('UA_SByte_clear');
  late final _UA_SByte_clear = _UA_SByte_clearPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  void UA_SByte_delete(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_delete(
      p,
    );
  }

  late final _UA_SByte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>('UA_SByte_delete');
  late final _UA_SByte_delete = _UA_SByte_deletePtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  bool UA_SByte_equal(
    ffi.Pointer<UA_SByte> p1,
    ffi.Pointer<UA_SByte> p2,
  ) {
    return _UA_SByte_equal(
      p1,
      p2,
    );
  }

  late final _UA_SByte_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>>('UA_SByte_equal');
  late final _UA_SByte_equal =
      _UA_SByte_equalPtr.asFunction<bool Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>();

  void UA_Byte_init(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_init(
      p,
    );
  }

  late final _UA_Byte_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>('UA_Byte_init');
  late final _UA_Byte_init = _UA_Byte_initPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  ffi.Pointer<UA_Byte> UA_Byte_new() {
    return _UA_Byte_new();
  }

  late final _UA_Byte_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Byte> Function()>>('UA_Byte_new');
  late final _UA_Byte_new = _UA_Byte_newPtr.asFunction<ffi.Pointer<UA_Byte> Function()>();

  int UA_Byte_copy(
    ffi.Pointer<UA_Byte> src,
    ffi.Pointer<UA_Byte> dst,
  ) {
    return _UA_Byte_copy(
      src,
      dst,
    );
  }

  late final _UA_Byte_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>>('UA_Byte_copy');
  late final _UA_Byte_copy = _UA_Byte_copyPtr.asFunction<int Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>();

  void UA_Byte_clear(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_clear(
      p,
    );
  }

  late final _UA_Byte_clearPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>('UA_Byte_clear');
  late final _UA_Byte_clear = _UA_Byte_clearPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Byte_delete(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_delete(
      p,
    );
  }

  late final _UA_Byte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>('UA_Byte_delete');
  late final _UA_Byte_delete = _UA_Byte_deletePtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  bool UA_Byte_equal(
    ffi.Pointer<UA_Byte> p1,
    ffi.Pointer<UA_Byte> p2,
  ) {
    return _UA_Byte_equal(
      p1,
      p2,
    );
  }

  late final _UA_Byte_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>>('UA_Byte_equal');
  late final _UA_Byte_equal = _UA_Byte_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>();

  void UA_Int16_init(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_init(
      p,
    );
  }

  late final _UA_Int16_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>('UA_Int16_init');
  late final _UA_Int16_init = _UA_Int16_initPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  ffi.Pointer<UA_Int16> UA_Int16_new() {
    return _UA_Int16_new();
  }

  late final _UA_Int16_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int16> Function()>>('UA_Int16_new');
  late final _UA_Int16_new = _UA_Int16_newPtr.asFunction<ffi.Pointer<UA_Int16> Function()>();

  int UA_Int16_copy(
    ffi.Pointer<UA_Int16> src,
    ffi.Pointer<UA_Int16> dst,
  ) {
    return _UA_Int16_copy(
      src,
      dst,
    );
  }

  late final _UA_Int16_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_copy');
  late final _UA_Int16_copy =
      _UA_Int16_copyPtr.asFunction<int Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>();

  void UA_Int16_clear(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_clear(
      p,
    );
  }

  late final _UA_Int16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>('UA_Int16_clear');
  late final _UA_Int16_clear = _UA_Int16_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  void UA_Int16_delete(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_delete(
      p,
    );
  }

  late final _UA_Int16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>('UA_Int16_delete');
  late final _UA_Int16_delete = _UA_Int16_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  bool UA_Int16_equal(
    ffi.Pointer<UA_Int16> p1,
    ffi.Pointer<UA_Int16> p2,
  ) {
    return _UA_Int16_equal(
      p1,
      p2,
    );
  }

  late final _UA_Int16_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>>('UA_Int16_equal');
  late final _UA_Int16_equal =
      _UA_Int16_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>();

  void UA_UInt16_init(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_init(
      p,
    );
  }

  late final _UA_UInt16_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>('UA_UInt16_init');
  late final _UA_UInt16_init = _UA_UInt16_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  ffi.Pointer<UA_UInt16> UA_UInt16_new() {
    return _UA_UInt16_new();
  }

  late final _UA_UInt16_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt16> Function()>>('UA_UInt16_new');
  late final _UA_UInt16_new = _UA_UInt16_newPtr.asFunction<ffi.Pointer<UA_UInt16> Function()>();

  int UA_UInt16_copy(
    ffi.Pointer<UA_UInt16> src,
    ffi.Pointer<UA_UInt16> dst,
  ) {
    return _UA_UInt16_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt16_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_copy');
  late final _UA_UInt16_copy =
      _UA_UInt16_copyPtr.asFunction<int Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_clear(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_clear(
      p,
    );
  }

  late final _UA_UInt16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>('UA_UInt16_clear');
  late final _UA_UInt16_clear = _UA_UInt16_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_delete(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_delete(
      p,
    );
  }

  late final _UA_UInt16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>('UA_UInt16_delete');
  late final _UA_UInt16_delete = _UA_UInt16_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  bool UA_UInt16_equal(
    ffi.Pointer<UA_UInt16> p1,
    ffi.Pointer<UA_UInt16> p2,
  ) {
    return _UA_UInt16_equal(
      p1,
      p2,
    );
  }

  late final _UA_UInt16_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>>('UA_UInt16_equal');
  late final _UA_UInt16_equal =
      _UA_UInt16_equalPtr.asFunction<bool Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>();

  void UA_Int32_init(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_init(
      p,
    );
  }

  late final _UA_Int32_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>('UA_Int32_init');
  late final _UA_Int32_init = _UA_Int32_initPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  ffi.Pointer<UA_Int32> UA_Int32_new() {
    return _UA_Int32_new();
  }

  late final _UA_Int32_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int32> Function()>>('UA_Int32_new');
  late final _UA_Int32_new = _UA_Int32_newPtr.asFunction<ffi.Pointer<UA_Int32> Function()>();

  int UA_Int32_copy(
    ffi.Pointer<UA_Int32> src,
    ffi.Pointer<UA_Int32> dst,
  ) {
    return _UA_Int32_copy(
      src,
      dst,
    );
  }

  late final _UA_Int32_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_copy');
  late final _UA_Int32_copy =
      _UA_Int32_copyPtr.asFunction<int Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>();

  void UA_Int32_clear(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_clear(
      p,
    );
  }

  late final _UA_Int32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>('UA_Int32_clear');
  late final _UA_Int32_clear = _UA_Int32_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  void UA_Int32_delete(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_delete(
      p,
    );
  }

  late final _UA_Int32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>('UA_Int32_delete');
  late final _UA_Int32_delete = _UA_Int32_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  bool UA_Int32_equal(
    ffi.Pointer<UA_Int32> p1,
    ffi.Pointer<UA_Int32> p2,
  ) {
    return _UA_Int32_equal(
      p1,
      p2,
    );
  }

  late final _UA_Int32_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>>('UA_Int32_equal');
  late final _UA_Int32_equal =
      _UA_Int32_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>();

  void UA_UInt32_init(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_init(
      p,
    );
  }

  late final _UA_UInt32_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>('UA_UInt32_init');
  late final _UA_UInt32_init = _UA_UInt32_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  ffi.Pointer<UA_UInt32> UA_UInt32_new() {
    return _UA_UInt32_new();
  }

  late final _UA_UInt32_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt32> Function()>>('UA_UInt32_new');
  late final _UA_UInt32_new = _UA_UInt32_newPtr.asFunction<ffi.Pointer<UA_UInt32> Function()>();

  int UA_UInt32_copy(
    ffi.Pointer<UA_UInt32> src,
    ffi.Pointer<UA_UInt32> dst,
  ) {
    return _UA_UInt32_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt32_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_copy');
  late final _UA_UInt32_copy =
      _UA_UInt32_copyPtr.asFunction<int Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_clear(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_clear(
      p,
    );
  }

  late final _UA_UInt32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>('UA_UInt32_clear');
  late final _UA_UInt32_clear = _UA_UInt32_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_delete(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_delete(
      p,
    );
  }

  late final _UA_UInt32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>('UA_UInt32_delete');
  late final _UA_UInt32_delete = _UA_UInt32_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  bool UA_UInt32_equal(
    ffi.Pointer<UA_UInt32> p1,
    ffi.Pointer<UA_UInt32> p2,
  ) {
    return _UA_UInt32_equal(
      p1,
      p2,
    );
  }

  late final _UA_UInt32_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>>('UA_UInt32_equal');
  late final _UA_UInt32_equal =
      _UA_UInt32_equalPtr.asFunction<bool Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>();

  void UA_Int64_init(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_init(
      p,
    );
  }

  late final _UA_Int64_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>('UA_Int64_init');
  late final _UA_Int64_init = _UA_Int64_initPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  ffi.Pointer<UA_Int64> UA_Int64_new() {
    return _UA_Int64_new();
  }

  late final _UA_Int64_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int64> Function()>>('UA_Int64_new');
  late final _UA_Int64_new = _UA_Int64_newPtr.asFunction<ffi.Pointer<UA_Int64> Function()>();

  int UA_Int64_copy(
    ffi.Pointer<UA_Int64> src,
    ffi.Pointer<UA_Int64> dst,
  ) {
    return _UA_Int64_copy(
      src,
      dst,
    );
  }

  late final _UA_Int64_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_copy');
  late final _UA_Int64_copy =
      _UA_Int64_copyPtr.asFunction<int Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>();

  void UA_Int64_clear(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_clear(
      p,
    );
  }

  late final _UA_Int64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>('UA_Int64_clear');
  late final _UA_Int64_clear = _UA_Int64_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  void UA_Int64_delete(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_delete(
      p,
    );
  }

  late final _UA_Int64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>('UA_Int64_delete');
  late final _UA_Int64_delete = _UA_Int64_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  bool UA_Int64_equal(
    ffi.Pointer<UA_Int64> p1,
    ffi.Pointer<UA_Int64> p2,
  ) {
    return _UA_Int64_equal(
      p1,
      p2,
    );
  }

  late final _UA_Int64_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>>('UA_Int64_equal');
  late final _UA_Int64_equal =
      _UA_Int64_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>();

  void UA_UInt64_init(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_init(
      p,
    );
  }

  late final _UA_UInt64_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>('UA_UInt64_init');
  late final _UA_UInt64_init = _UA_UInt64_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  ffi.Pointer<UA_UInt64> UA_UInt64_new() {
    return _UA_UInt64_new();
  }

  late final _UA_UInt64_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt64> Function()>>('UA_UInt64_new');
  late final _UA_UInt64_new = _UA_UInt64_newPtr.asFunction<ffi.Pointer<UA_UInt64> Function()>();

  int UA_UInt64_copy(
    ffi.Pointer<UA_UInt64> src,
    ffi.Pointer<UA_UInt64> dst,
  ) {
    return _UA_UInt64_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt64_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_copy');
  late final _UA_UInt64_copy =
      _UA_UInt64_copyPtr.asFunction<int Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_clear(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_clear(
      p,
    );
  }

  late final _UA_UInt64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>('UA_UInt64_clear');
  late final _UA_UInt64_clear = _UA_UInt64_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_delete(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_delete(
      p,
    );
  }

  late final _UA_UInt64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>('UA_UInt64_delete');
  late final _UA_UInt64_delete = _UA_UInt64_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  bool UA_UInt64_equal(
    ffi.Pointer<UA_UInt64> p1,
    ffi.Pointer<UA_UInt64> p2,
  ) {
    return _UA_UInt64_equal(
      p1,
      p2,
    );
  }

  late final _UA_UInt64_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>>('UA_UInt64_equal');
  late final _UA_UInt64_equal =
      _UA_UInt64_equalPtr.asFunction<bool Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>();

  void UA_Float_init(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_init(
      p,
    );
  }

  late final _UA_Float_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>('UA_Float_init');
  late final _UA_Float_init = _UA_Float_initPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  ffi.Pointer<UA_Float> UA_Float_new() {
    return _UA_Float_new();
  }

  late final _UA_Float_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Float> Function()>>('UA_Float_new');
  late final _UA_Float_new = _UA_Float_newPtr.asFunction<ffi.Pointer<UA_Float> Function()>();

  int UA_Float_copy(
    ffi.Pointer<UA_Float> src,
    ffi.Pointer<UA_Float> dst,
  ) {
    return _UA_Float_copy(
      src,
      dst,
    );
  }

  late final _UA_Float_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>>(
          'UA_Float_copy');
  late final _UA_Float_copy =
      _UA_Float_copyPtr.asFunction<int Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>();

  void UA_Float_clear(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_clear(
      p,
    );
  }

  late final _UA_Float_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>('UA_Float_clear');
  late final _UA_Float_clear = _UA_Float_clearPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  void UA_Float_delete(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_delete(
      p,
    );
  }

  late final _UA_Float_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>('UA_Float_delete');
  late final _UA_Float_delete = _UA_Float_deletePtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  bool UA_Float_equal(
    ffi.Pointer<UA_Float> p1,
    ffi.Pointer<UA_Float> p2,
  ) {
    return _UA_Float_equal(
      p1,
      p2,
    );
  }

  late final _UA_Float_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>>('UA_Float_equal');
  late final _UA_Float_equal =
      _UA_Float_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>();

  void UA_Double_init(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_init(
      p,
    );
  }

  late final _UA_Double_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>('UA_Double_init');
  late final _UA_Double_init = _UA_Double_initPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  ffi.Pointer<UA_Double> UA_Double_new() {
    return _UA_Double_new();
  }

  late final _UA_Double_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Double> Function()>>('UA_Double_new');
  late final _UA_Double_new = _UA_Double_newPtr.asFunction<ffi.Pointer<UA_Double> Function()>();

  int UA_Double_copy(
    ffi.Pointer<UA_Double> src,
    ffi.Pointer<UA_Double> dst,
  ) {
    return _UA_Double_copy(
      src,
      dst,
    );
  }

  late final _UA_Double_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>>(
          'UA_Double_copy');
  late final _UA_Double_copy =
      _UA_Double_copyPtr.asFunction<int Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>();

  void UA_Double_clear(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_clear(
      p,
    );
  }

  late final _UA_Double_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>('UA_Double_clear');
  late final _UA_Double_clear = _UA_Double_clearPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  void UA_Double_delete(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_delete(
      p,
    );
  }

  late final _UA_Double_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>('UA_Double_delete');
  late final _UA_Double_delete = _UA_Double_deletePtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  bool UA_Double_equal(
    ffi.Pointer<UA_Double> p1,
    ffi.Pointer<UA_Double> p2,
  ) {
    return _UA_Double_equal(
      p1,
      p2,
    );
  }

  late final _UA_Double_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>>('UA_Double_equal');
  late final _UA_Double_equal =
      _UA_Double_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>();

  void UA_String_init(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_init(
      p,
    );
  }

  late final _UA_String_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>('UA_String_init');
  late final _UA_String_init = _UA_String_initPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  ffi.Pointer<UA_String> UA_String_new() {
    return _UA_String_new();
  }

  late final _UA_String_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_String> Function()>>('UA_String_new');
  late final _UA_String_new = _UA_String_newPtr.asFunction<ffi.Pointer<UA_String> Function()>();

  int UA_String_copy(
    ffi.Pointer<UA_String> src,
    ffi.Pointer<UA_String> dst,
  ) {
    return _UA_String_copy(
      src,
      dst,
    );
  }

  late final _UA_String_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>>(
          'UA_String_copy');
  late final _UA_String_copy =
      _UA_String_copyPtr.asFunction<int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  void UA_String_clear(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_clear(
      p,
    );
  }

  late final _UA_String_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>('UA_String_clear');
  late final _UA_String_clear = _UA_String_clearPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  void UA_String_delete(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_delete(
      p,
    );
  }

  late final _UA_String_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>('UA_String_delete');
  late final _UA_String_delete = _UA_String_deletePtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  bool UA_String_equal(
    ffi.Pointer<UA_String> p1,
    ffi.Pointer<UA_String> p2,
  ) {
    return _UA_String_equal(
      p1,
      p2,
    );
  }

  late final _UA_String_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>>('UA_String_equal');
  late final _UA_String_equal =
      _UA_String_equalPtr.asFunction<bool Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  void UA_DateTime_init(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_init(
      p,
    );
  }

  late final _UA_DateTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>('UA_DateTime_init');
  late final _UA_DateTime_init = _UA_DateTime_initPtr.asFunction<void Function(ffi.Pointer<UA_DateTime>)>();

  ffi.Pointer<UA_DateTime> UA_DateTime_new() {
    return _UA_DateTime_new();
  }

  late final _UA_DateTime_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_DateTime> Function()>>('UA_DateTime_new');
  late final _UA_DateTime_new = _UA_DateTime_newPtr.asFunction<ffi.Pointer<UA_DateTime> Function()>();

  int UA_DateTime_copy(
    ffi.Pointer<UA_DateTime> src,
    ffi.Pointer<UA_DateTime> dst,
  ) {
    return _UA_DateTime_copy(
      src,
      dst,
    );
  }

  late final _UA_DateTime_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_copy');
  late final _UA_DateTime_copy =
      _UA_DateTime_copyPtr.asFunction<int Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_clear(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_clear(
      p,
    );
  }

  late final _UA_DateTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>('UA_DateTime_clear');
  late final _UA_DateTime_clear = _UA_DateTime_clearPtr.asFunction<void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_delete(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_delete(
      p,
    );
  }

  late final _UA_DateTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>('UA_DateTime_delete');
  late final _UA_DateTime_delete = _UA_DateTime_deletePtr.asFunction<void Function(ffi.Pointer<UA_DateTime>)>();

  bool UA_DateTime_equal(
    ffi.Pointer<UA_DateTime> p1,
    ffi.Pointer<UA_DateTime> p2,
  ) {
    return _UA_DateTime_equal(
      p1,
      p2,
    );
  }

  late final _UA_DateTime_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_equal');
  late final _UA_DateTime_equal =
      _UA_DateTime_equalPtr.asFunction<bool Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>();

  void UA_Guid_init(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_init(
      p,
    );
  }

  late final _UA_Guid_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>('UA_Guid_init');
  late final _UA_Guid_init = _UA_Guid_initPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  ffi.Pointer<UA_Guid> UA_Guid_new() {
    return _UA_Guid_new();
  }

  late final _UA_Guid_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Guid> Function()>>('UA_Guid_new');
  late final _UA_Guid_new = _UA_Guid_newPtr.asFunction<ffi.Pointer<UA_Guid> Function()>();

  int UA_Guid_copy(
    ffi.Pointer<UA_Guid> src,
    ffi.Pointer<UA_Guid> dst,
  ) {
    return _UA_Guid_copy(
      src,
      dst,
    );
  }

  late final _UA_Guid_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_copy');
  late final _UA_Guid_copy = _UA_Guid_copyPtr.asFunction<int Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  void UA_Guid_clear(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_clear(
      p,
    );
  }

  late final _UA_Guid_clearPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>('UA_Guid_clear');
  late final _UA_Guid_clear = _UA_Guid_clearPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  void UA_Guid_delete(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_delete(
      p,
    );
  }

  late final _UA_Guid_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>('UA_Guid_delete');
  late final _UA_Guid_delete = _UA_Guid_deletePtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  bool UA_Guid_equal(
    ffi.Pointer<UA_Guid> p1,
    ffi.Pointer<UA_Guid> p2,
  ) {
    return _UA_Guid_equal(
      p1,
      p2,
    );
  }

  late final _UA_Guid_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_equal');
  late final _UA_Guid_equal = _UA_Guid_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  void UA_ByteString_init(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_init(
      p,
    );
  }

  late final _UA_ByteString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>('UA_ByteString_init');
  late final _UA_ByteString_init = _UA_ByteString_initPtr.asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  ffi.Pointer<UA_ByteString> UA_ByteString_new() {
    return _UA_ByteString_new();
  }

  late final _UA_ByteString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ByteString> Function()>>('UA_ByteString_new');
  late final _UA_ByteString_new = _UA_ByteString_newPtr.asFunction<ffi.Pointer<UA_ByteString> Function()>();

  int UA_ByteString_copy(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<UA_ByteString> dst,
  ) {
    return _UA_ByteString_copy(
      src,
      dst,
    );
  }

  late final _UA_ByteString_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>>(
          'UA_ByteString_copy');
  late final _UA_ByteString_copy =
      _UA_ByteString_copyPtr.asFunction<int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_clear(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_clear(
      p,
    );
  }

  late final _UA_ByteString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>('UA_ByteString_clear');
  late final _UA_ByteString_clear = _UA_ByteString_clearPtr.asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_delete(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_delete(
      p,
    );
  }

  late final _UA_ByteString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>('UA_ByteString_delete');
  late final _UA_ByteString_delete = _UA_ByteString_deletePtr.asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  bool UA_ByteString_equal(
    ffi.Pointer<UA_ByteString> p1,
    ffi.Pointer<UA_ByteString> p2,
  ) {
    return _UA_ByteString_equal(
      p1,
      p2,
    );
  }

  late final _UA_ByteString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>>(
          'UA_ByteString_equal');
  late final _UA_ByteString_equal =
      _UA_ByteString_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  void UA_XmlElement_init(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_init(
      p,
    );
  }

  late final _UA_XmlElement_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_init');
  late final _UA_XmlElement_init = _UA_XmlElement_initPtr.asFunction<void Function(ffi.Pointer<UA_XmlElement>)>();

  ffi.Pointer<UA_XmlElement> UA_XmlElement_new() {
    return _UA_XmlElement_new();
  }

  late final _UA_XmlElement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_XmlElement> Function()>>('UA_XmlElement_new');
  late final _UA_XmlElement_new = _UA_XmlElement_newPtr.asFunction<ffi.Pointer<UA_XmlElement> Function()>();

  int UA_XmlElement_copy(
    ffi.Pointer<UA_XmlElement> src,
    ffi.Pointer<UA_XmlElement> dst,
  ) {
    return _UA_XmlElement_copy(
      src,
      dst,
    );
  }

  late final _UA_XmlElement_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>>(
          'UA_XmlElement_copy');
  late final _UA_XmlElement_copy =
      _UA_XmlElement_copyPtr.asFunction<int Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_clear(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_clear(
      p,
    );
  }

  late final _UA_XmlElement_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_clear');
  late final _UA_XmlElement_clear = _UA_XmlElement_clearPtr.asFunction<void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_delete(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_delete(
      p,
    );
  }

  late final _UA_XmlElement_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_delete');
  late final _UA_XmlElement_delete = _UA_XmlElement_deletePtr.asFunction<void Function(ffi.Pointer<UA_XmlElement>)>();

  bool UA_XmlElement_equal(
    ffi.Pointer<UA_XmlElement> p1,
    ffi.Pointer<UA_XmlElement> p2,
  ) {
    return _UA_XmlElement_equal(
      p1,
      p2,
    );
  }

  late final _UA_XmlElement_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>>(
          'UA_XmlElement_equal');
  late final _UA_XmlElement_equal =
      _UA_XmlElement_equalPtr.asFunction<bool Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>();

  void UA_NodeId_init(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_init(
      p,
    );
  }

  late final _UA_NodeId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>('UA_NodeId_init');
  late final _UA_NodeId_init = _UA_NodeId_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<UA_NodeId> UA_NodeId_new() {
    return _UA_NodeId_new();
  }

  late final _UA_NodeId_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeId> Function()>>('UA_NodeId_new');
  late final _UA_NodeId_new = _UA_NodeId_newPtr.asFunction<ffi.Pointer<UA_NodeId> Function()>();

  int UA_NodeId_copy(
    ffi.Pointer<UA_NodeId> src,
    ffi.Pointer<UA_NodeId> dst,
  ) {
    return _UA_NodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeId_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_copy');
  late final _UA_NodeId_copy =
      _UA_NodeId_copyPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_clear(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_clear(
      p,
    );
  }

  late final _UA_NodeId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>('UA_NodeId_clear');
  late final _UA_NodeId_clear = _UA_NodeId_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_delete(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_delete(
      p,
    );
  }

  late final _UA_NodeId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>('UA_NodeId_delete');
  late final _UA_NodeId_delete = _UA_NodeId_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  bool UA_NodeId_equal(
    ffi.Pointer<UA_NodeId> p1,
    ffi.Pointer<UA_NodeId> p2,
  ) {
    return _UA_NodeId_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>>('UA_NodeId_equal');
  late final _UA_NodeId_equal =
      _UA_NodeId_equalPtr.asFunction<bool Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  void UA_ExpandedNodeId_init(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_init(
      p,
    );
  }

  late final _UA_ExpandedNodeId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_init');
  late final _UA_ExpandedNodeId_init =
      _UA_ExpandedNodeId_initPtr.asFunction<void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  ffi.Pointer<UA_ExpandedNodeId> UA_ExpandedNodeId_new() {
    return _UA_ExpandedNodeId_new();
  }

  late final _UA_ExpandedNodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExpandedNodeId> Function()>>('UA_ExpandedNodeId_new');
  late final _UA_ExpandedNodeId_new = _UA_ExpandedNodeId_newPtr.asFunction<ffi.Pointer<UA_ExpandedNodeId> Function()>();

  int UA_ExpandedNodeId_copy(
    ffi.Pointer<UA_ExpandedNodeId> src,
    ffi.Pointer<UA_ExpandedNodeId> dst,
  ) {
    return _UA_ExpandedNodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_ExpandedNodeId_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_copy');
  late final _UA_ExpandedNodeId_copy = _UA_ExpandedNodeId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_clear(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_clear(
      p,
    );
  }

  late final _UA_ExpandedNodeId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_clear');
  late final _UA_ExpandedNodeId_clear =
      _UA_ExpandedNodeId_clearPtr.asFunction<void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_delete(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_delete(
      p,
    );
  }

  late final _UA_ExpandedNodeId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_delete');
  late final _UA_ExpandedNodeId_delete =
      _UA_ExpandedNodeId_deletePtr.asFunction<void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_ExpandedNodeId_equal(
    ffi.Pointer<UA_ExpandedNodeId> p1,
    ffi.Pointer<UA_ExpandedNodeId> p2,
  ) {
    return _UA_ExpandedNodeId_equal(
      p1,
      p2,
    );
  }

  late final _UA_ExpandedNodeId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>>(
          'UA_ExpandedNodeId_equal');
  late final _UA_ExpandedNodeId_equal = _UA_ExpandedNodeId_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_StatusCode_init(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_init(
      p,
    );
  }

  late final _UA_StatusCode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_init');
  late final _UA_StatusCode_init = _UA_StatusCode_initPtr.asFunction<void Function(ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_StatusCode> UA_StatusCode_new() {
    return _UA_StatusCode_new();
  }

  late final _UA_StatusCode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StatusCode> Function()>>('UA_StatusCode_new');
  late final _UA_StatusCode_new = _UA_StatusCode_newPtr.asFunction<ffi.Pointer<UA_StatusCode> Function()>();

  int UA_StatusCode_copy(
    ffi.Pointer<UA_StatusCode> src,
    ffi.Pointer<UA_StatusCode> dst,
  ) {
    return _UA_StatusCode_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusCode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>>(
          'UA_StatusCode_copy');
  late final _UA_StatusCode_copy =
      _UA_StatusCode_copyPtr.asFunction<int Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_clear(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_clear(
      p,
    );
  }

  late final _UA_StatusCode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_clear');
  late final _UA_StatusCode_clear = _UA_StatusCode_clearPtr.asFunction<void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_delete(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_delete(
      p,
    );
  }

  late final _UA_StatusCode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_delete');
  late final _UA_StatusCode_delete = _UA_StatusCode_deletePtr.asFunction<void Function(ffi.Pointer<UA_StatusCode>)>();

  bool UA_StatusCode_equal(
    ffi.Pointer<UA_StatusCode> p1,
    ffi.Pointer<UA_StatusCode> p2,
  ) {
    return _UA_StatusCode_equal(
      p1,
      p2,
    );
  }

  late final _UA_StatusCode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>>(
          'UA_StatusCode_equal');
  late final _UA_StatusCode_equal =
      _UA_StatusCode_equalPtr.asFunction<bool Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>();

  void UA_QualifiedName_init(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_init(
      p,
    );
  }

  late final _UA_QualifiedName_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_init');
  late final _UA_QualifiedName_init =
      _UA_QualifiedName_initPtr.asFunction<void Function(ffi.Pointer<UA_QualifiedName>)>();

  ffi.Pointer<UA_QualifiedName> UA_QualifiedName_new() {
    return _UA_QualifiedName_new();
  }

  late final _UA_QualifiedName_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QualifiedName> Function()>>('UA_QualifiedName_new');
  late final _UA_QualifiedName_new = _UA_QualifiedName_newPtr.asFunction<ffi.Pointer<UA_QualifiedName> Function()>();

  int UA_QualifiedName_copy(
    ffi.Pointer<UA_QualifiedName> src,
    ffi.Pointer<UA_QualifiedName> dst,
  ) {
    return _UA_QualifiedName_copy(
      src,
      dst,
    );
  }

  late final _UA_QualifiedName_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>>(
          'UA_QualifiedName_copy');
  late final _UA_QualifiedName_copy = _UA_QualifiedName_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_clear(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_clear(
      p,
    );
  }

  late final _UA_QualifiedName_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_clear');
  late final _UA_QualifiedName_clear =
      _UA_QualifiedName_clearPtr.asFunction<void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_delete(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_delete(
      p,
    );
  }

  late final _UA_QualifiedName_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_delete');
  late final _UA_QualifiedName_delete =
      _UA_QualifiedName_deletePtr.asFunction<void Function(ffi.Pointer<UA_QualifiedName>)>();

  bool UA_QualifiedName_equal(
    ffi.Pointer<UA_QualifiedName> p1,
    ffi.Pointer<UA_QualifiedName> p2,
  ) {
    return _UA_QualifiedName_equal(
      p1,
      p2,
    );
  }

  late final _UA_QualifiedName_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>>(
          'UA_QualifiedName_equal');
  late final _UA_QualifiedName_equal = _UA_QualifiedName_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_LocalizedText_init(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_init(
      p,
    );
  }

  late final _UA_LocalizedText_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_init');
  late final _UA_LocalizedText_init =
      _UA_LocalizedText_initPtr.asFunction<void Function(ffi.Pointer<UA_LocalizedText>)>();

  ffi.Pointer<UA_LocalizedText> UA_LocalizedText_new() {
    return _UA_LocalizedText_new();
  }

  late final _UA_LocalizedText_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocalizedText> Function()>>('UA_LocalizedText_new');
  late final _UA_LocalizedText_new = _UA_LocalizedText_newPtr.asFunction<ffi.Pointer<UA_LocalizedText> Function()>();

  int UA_LocalizedText_copy(
    ffi.Pointer<UA_LocalizedText> src,
    ffi.Pointer<UA_LocalizedText> dst,
  ) {
    return _UA_LocalizedText_copy(
      src,
      dst,
    );
  }

  late final _UA_LocalizedText_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>>(
          'UA_LocalizedText_copy');
  late final _UA_LocalizedText_copy = _UA_LocalizedText_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_clear(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_clear(
      p,
    );
  }

  late final _UA_LocalizedText_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_clear');
  late final _UA_LocalizedText_clear =
      _UA_LocalizedText_clearPtr.asFunction<void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_delete(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_delete(
      p,
    );
  }

  late final _UA_LocalizedText_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_delete');
  late final _UA_LocalizedText_delete =
      _UA_LocalizedText_deletePtr.asFunction<void Function(ffi.Pointer<UA_LocalizedText>)>();

  bool UA_LocalizedText_equal(
    ffi.Pointer<UA_LocalizedText> p1,
    ffi.Pointer<UA_LocalizedText> p2,
  ) {
    return _UA_LocalizedText_equal(
      p1,
      p2,
    );
  }

  late final _UA_LocalizedText_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>>(
          'UA_LocalizedText_equal');
  late final _UA_LocalizedText_equal = _UA_LocalizedText_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>();

  void UA_ExtensionObject_init(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_init(
      p,
    );
  }

  late final _UA_ExtensionObject_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>('UA_ExtensionObject_init');
  late final _UA_ExtensionObject_init =
      _UA_ExtensionObject_initPtr.asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  ffi.Pointer<UA_ExtensionObject> UA_ExtensionObject_new() {
    return _UA_ExtensionObject_new();
  }

  late final _UA_ExtensionObject_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExtensionObject> Function()>>('UA_ExtensionObject_new');
  late final _UA_ExtensionObject_new =
      _UA_ExtensionObject_newPtr.asFunction<ffi.Pointer<UA_ExtensionObject> Function()>();

  int UA_ExtensionObject_copy(
    ffi.Pointer<UA_ExtensionObject> src,
    ffi.Pointer<UA_ExtensionObject> dst,
  ) {
    return _UA_ExtensionObject_copy(
      src,
      dst,
    );
  }

  late final _UA_ExtensionObject_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_copy');
  late final _UA_ExtensionObject_copy = _UA_ExtensionObject_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_clear(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_clear(
      p,
    );
  }

  late final _UA_ExtensionObject_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>('UA_ExtensionObject_clear');
  late final _UA_ExtensionObject_clear =
      _UA_ExtensionObject_clearPtr.asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_delete(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_delete(
      p,
    );
  }

  late final _UA_ExtensionObject_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>('UA_ExtensionObject_delete');
  late final _UA_ExtensionObject_delete =
      _UA_ExtensionObject_deletePtr.asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  bool UA_ExtensionObject_equal(
    ffi.Pointer<UA_ExtensionObject> p1,
    ffi.Pointer<UA_ExtensionObject> p2,
  ) {
    return _UA_ExtensionObject_equal(
      p1,
      p2,
    );
  }

  late final _UA_ExtensionObject_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>>(
          'UA_ExtensionObject_equal');
  late final _UA_ExtensionObject_equal = _UA_ExtensionObject_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>();

  void UA_DataValue_init(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_init(
      p,
    );
  }

  late final _UA_DataValue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>('UA_DataValue_init');
  late final _UA_DataValue_init = _UA_DataValue_initPtr.asFunction<void Function(ffi.Pointer<UA_DataValue>)>();

  ffi.Pointer<UA_DataValue> UA_DataValue_new() {
    return _UA_DataValue_new();
  }

  late final _UA_DataValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataValue> Function()>>('UA_DataValue_new');
  late final _UA_DataValue_new = _UA_DataValue_newPtr.asFunction<ffi.Pointer<UA_DataValue> Function()>();

  int UA_DataValue_copy(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
  ) {
    return _UA_DataValue_copy(
      src,
      dst,
    );
  }

  late final _UA_DataValue_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_copy');
  late final _UA_DataValue_copy =
      _UA_DataValue_copyPtr.asFunction<int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_clear(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_clear(
      p,
    );
  }

  late final _UA_DataValue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>('UA_DataValue_clear');
  late final _UA_DataValue_clear = _UA_DataValue_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_delete(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_delete(
      p,
    );
  }

  late final _UA_DataValue_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>('UA_DataValue_delete');
  late final _UA_DataValue_delete = _UA_DataValue_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataValue>)>();

  bool UA_DataValue_equal(
    ffi.Pointer<UA_DataValue> p1,
    ffi.Pointer<UA_DataValue> p2,
  ) {
    return _UA_DataValue_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataValue_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_equal');
  late final _UA_DataValue_equal =
      _UA_DataValue_equalPtr.asFunction<bool Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>();

  void UA_Variant_init(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_init(
      p,
    );
  }

  late final _UA_Variant_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>('UA_Variant_init');
  late final _UA_Variant_init = _UA_Variant_initPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  ffi.Pointer<UA_Variant> UA_Variant_new() {
    return _UA_Variant_new();
  }

  late final _UA_Variant_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Variant> Function()>>('UA_Variant_new');
  late final _UA_Variant_new = _UA_Variant_newPtr.asFunction<ffi.Pointer<UA_Variant> Function()>();

  int UA_Variant_copy(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
  ) {
    return _UA_Variant_copy(
      src,
      dst,
    );
  }

  late final _UA_Variant_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_copy');
  late final _UA_Variant_copy =
      _UA_Variant_copyPtr.asFunction<int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>();

  void UA_Variant_clear(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_clear(
      p,
    );
  }

  late final _UA_Variant_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>('UA_Variant_clear');
  late final _UA_Variant_clear = _UA_Variant_clearPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  void UA_Variant_delete(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_delete(
      p,
    );
  }

  late final _UA_Variant_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>('UA_Variant_delete');
  late final _UA_Variant_delete = _UA_Variant_deletePtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_equal(
    ffi.Pointer<UA_Variant> p1,
    ffi.Pointer<UA_Variant> p2,
  ) {
    return _UA_Variant_equal(
      p1,
      p2,
    );
  }

  late final _UA_Variant_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_equal');
  late final _UA_Variant_equal =
      _UA_Variant_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>();

  void UA_DiagnosticInfo_init(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_init(
      p,
    );
  }

  late final _UA_DiagnosticInfo_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>('UA_DiagnosticInfo_init');
  late final _UA_DiagnosticInfo_init =
      _UA_DiagnosticInfo_initPtr.asFunction<void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  ffi.Pointer<UA_DiagnosticInfo> UA_DiagnosticInfo_new() {
    return _UA_DiagnosticInfo_new();
  }

  late final _UA_DiagnosticInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DiagnosticInfo> Function()>>('UA_DiagnosticInfo_new');
  late final _UA_DiagnosticInfo_new = _UA_DiagnosticInfo_newPtr.asFunction<ffi.Pointer<UA_DiagnosticInfo> Function()>();

  int UA_DiagnosticInfo_copy(
    ffi.Pointer<UA_DiagnosticInfo> src,
    ffi.Pointer<UA_DiagnosticInfo> dst,
  ) {
    return _UA_DiagnosticInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_DiagnosticInfo_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_copy');
  late final _UA_DiagnosticInfo_copy = _UA_DiagnosticInfo_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_clear(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_clear(
      p,
    );
  }

  late final _UA_DiagnosticInfo_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>('UA_DiagnosticInfo_clear');
  late final _UA_DiagnosticInfo_clear =
      _UA_DiagnosticInfo_clearPtr.asFunction<void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_delete(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_delete(
      p,
    );
  }

  late final _UA_DiagnosticInfo_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>('UA_DiagnosticInfo_delete');
  late final _UA_DiagnosticInfo_delete =
      _UA_DiagnosticInfo_deletePtr.asFunction<void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  bool UA_DiagnosticInfo_equal(
    ffi.Pointer<UA_DiagnosticInfo> p1,
    ffi.Pointer<UA_DiagnosticInfo> p2,
  ) {
    return _UA_DiagnosticInfo_equal(
      p1,
      p2,
    );
  }

  late final _UA_DiagnosticInfo_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>>(
          'UA_DiagnosticInfo_equal');
  late final _UA_DiagnosticInfo_equal = _UA_DiagnosticInfo_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_NamingRuleType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NamingRuleType_init(
      p,
    );
  }

  late final _UA_NamingRuleType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NamingRuleType_init');
  late final _UA_NamingRuleType_init =
      _UA_NamingRuleType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_NamingRuleType_new() {
    return _UA_NamingRuleType_new();
  }

  late final _UA_NamingRuleType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_NamingRuleType_new');
  late final _UA_NamingRuleType_new = _UA_NamingRuleType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_NamingRuleType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_NamingRuleType_copy(
      src,
      dst,
    );
  }

  late final _UA_NamingRuleType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NamingRuleType_copy');
  late final _UA_NamingRuleType_copy =
      _UA_NamingRuleType_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NamingRuleType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NamingRuleType_clear(
      p,
    );
  }

  late final _UA_NamingRuleType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NamingRuleType_clear');
  late final _UA_NamingRuleType_clear =
      _UA_NamingRuleType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NamingRuleType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NamingRuleType_delete(
      p,
    );
  }

  late final _UA_NamingRuleType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NamingRuleType_delete');
  late final _UA_NamingRuleType_delete =
      _UA_NamingRuleType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_NamingRuleType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_NamingRuleType_equal(
      p1,
      p2,
    );
  }

  late final _UA_NamingRuleType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NamingRuleType_equal');
  late final _UA_NamingRuleType_equal = _UA_NamingRuleType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_Enumeration_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Enumeration_init(
      p,
    );
  }

  late final _UA_Enumeration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Enumeration_init');
  late final _UA_Enumeration_init = _UA_Enumeration_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_Enumeration_new() {
    return _UA_Enumeration_new();
  }

  late final _UA_Enumeration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_Enumeration_new');
  late final _UA_Enumeration_new = _UA_Enumeration_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_Enumeration_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_Enumeration_copy(
      src,
      dst,
    );
  }

  late final _UA_Enumeration_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_Enumeration_copy');
  late final _UA_Enumeration_copy =
      _UA_Enumeration_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_Enumeration_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Enumeration_clear(
      p,
    );
  }

  late final _UA_Enumeration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Enumeration_clear');
  late final _UA_Enumeration_clear = _UA_Enumeration_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_Enumeration_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Enumeration_delete(
      p,
    );
  }

  late final _UA_Enumeration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Enumeration_delete');
  late final _UA_Enumeration_delete =
      _UA_Enumeration_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_Enumeration_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_Enumeration_equal(
      p1,
      p2,
    );
  }

  late final _UA_Enumeration_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_Enumeration_equal');
  late final _UA_Enumeration_equal =
      _UA_Enumeration_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ImageBMP_init(
    ffi.Pointer<UA_ImageBMP> p,
  ) {
    return _UA_ImageBMP_init(
      p,
    );
  }

  late final _UA_ImageBMP_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageBMP>)>>('UA_ImageBMP_init');
  late final _UA_ImageBMP_init = _UA_ImageBMP_initPtr.asFunction<void Function(ffi.Pointer<UA_ImageBMP>)>();

  ffi.Pointer<UA_ImageBMP> UA_ImageBMP_new() {
    return _UA_ImageBMP_new();
  }

  late final _UA_ImageBMP_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_ImageBMP> Function()>>('UA_ImageBMP_new');
  late final _UA_ImageBMP_new = _UA_ImageBMP_newPtr.asFunction<ffi.Pointer<UA_ImageBMP> Function()>();

  int UA_ImageBMP_copy(
    ffi.Pointer<UA_ImageBMP> src,
    ffi.Pointer<UA_ImageBMP> dst,
  ) {
    return _UA_ImageBMP_copy(
      src,
      dst,
    );
  }

  late final _UA_ImageBMP_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ImageBMP>, ffi.Pointer<UA_ImageBMP>)>>(
          'UA_ImageBMP_copy');
  late final _UA_ImageBMP_copy =
      _UA_ImageBMP_copyPtr.asFunction<int Function(ffi.Pointer<UA_ImageBMP>, ffi.Pointer<UA_ImageBMP>)>();

  void UA_ImageBMP_clear(
    ffi.Pointer<UA_ImageBMP> p,
  ) {
    return _UA_ImageBMP_clear(
      p,
    );
  }

  late final _UA_ImageBMP_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageBMP>)>>('UA_ImageBMP_clear');
  late final _UA_ImageBMP_clear = _UA_ImageBMP_clearPtr.asFunction<void Function(ffi.Pointer<UA_ImageBMP>)>();

  void UA_ImageBMP_delete(
    ffi.Pointer<UA_ImageBMP> p,
  ) {
    return _UA_ImageBMP_delete(
      p,
    );
  }

  late final _UA_ImageBMP_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageBMP>)>>('UA_ImageBMP_delete');
  late final _UA_ImageBMP_delete = _UA_ImageBMP_deletePtr.asFunction<void Function(ffi.Pointer<UA_ImageBMP>)>();

  bool UA_ImageBMP_equal(
    ffi.Pointer<UA_ImageBMP> p1,
    ffi.Pointer<UA_ImageBMP> p2,
  ) {
    return _UA_ImageBMP_equal(
      p1,
      p2,
    );
  }

  late final _UA_ImageBMP_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ImageBMP>, ffi.Pointer<UA_ImageBMP>)>>(
          'UA_ImageBMP_equal');
  late final _UA_ImageBMP_equal =
      _UA_ImageBMP_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ImageBMP>, ffi.Pointer<UA_ImageBMP>)>();

  void UA_ImageGIF_init(
    ffi.Pointer<UA_ImageGIF> p,
  ) {
    return _UA_ImageGIF_init(
      p,
    );
  }

  late final _UA_ImageGIF_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageGIF>)>>('UA_ImageGIF_init');
  late final _UA_ImageGIF_init = _UA_ImageGIF_initPtr.asFunction<void Function(ffi.Pointer<UA_ImageGIF>)>();

  ffi.Pointer<UA_ImageGIF> UA_ImageGIF_new() {
    return _UA_ImageGIF_new();
  }

  late final _UA_ImageGIF_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_ImageGIF> Function()>>('UA_ImageGIF_new');
  late final _UA_ImageGIF_new = _UA_ImageGIF_newPtr.asFunction<ffi.Pointer<UA_ImageGIF> Function()>();

  int UA_ImageGIF_copy(
    ffi.Pointer<UA_ImageGIF> src,
    ffi.Pointer<UA_ImageGIF> dst,
  ) {
    return _UA_ImageGIF_copy(
      src,
      dst,
    );
  }

  late final _UA_ImageGIF_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ImageGIF>, ffi.Pointer<UA_ImageGIF>)>>(
          'UA_ImageGIF_copy');
  late final _UA_ImageGIF_copy =
      _UA_ImageGIF_copyPtr.asFunction<int Function(ffi.Pointer<UA_ImageGIF>, ffi.Pointer<UA_ImageGIF>)>();

  void UA_ImageGIF_clear(
    ffi.Pointer<UA_ImageGIF> p,
  ) {
    return _UA_ImageGIF_clear(
      p,
    );
  }

  late final _UA_ImageGIF_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageGIF>)>>('UA_ImageGIF_clear');
  late final _UA_ImageGIF_clear = _UA_ImageGIF_clearPtr.asFunction<void Function(ffi.Pointer<UA_ImageGIF>)>();

  void UA_ImageGIF_delete(
    ffi.Pointer<UA_ImageGIF> p,
  ) {
    return _UA_ImageGIF_delete(
      p,
    );
  }

  late final _UA_ImageGIF_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageGIF>)>>('UA_ImageGIF_delete');
  late final _UA_ImageGIF_delete = _UA_ImageGIF_deletePtr.asFunction<void Function(ffi.Pointer<UA_ImageGIF>)>();

  bool UA_ImageGIF_equal(
    ffi.Pointer<UA_ImageGIF> p1,
    ffi.Pointer<UA_ImageGIF> p2,
  ) {
    return _UA_ImageGIF_equal(
      p1,
      p2,
    );
  }

  late final _UA_ImageGIF_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ImageGIF>, ffi.Pointer<UA_ImageGIF>)>>(
          'UA_ImageGIF_equal');
  late final _UA_ImageGIF_equal =
      _UA_ImageGIF_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ImageGIF>, ffi.Pointer<UA_ImageGIF>)>();

  void UA_ImageJPG_init(
    ffi.Pointer<UA_ImageJPG> p,
  ) {
    return _UA_ImageJPG_init(
      p,
    );
  }

  late final _UA_ImageJPG_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageJPG>)>>('UA_ImageJPG_init');
  late final _UA_ImageJPG_init = _UA_ImageJPG_initPtr.asFunction<void Function(ffi.Pointer<UA_ImageJPG>)>();

  ffi.Pointer<UA_ImageJPG> UA_ImageJPG_new() {
    return _UA_ImageJPG_new();
  }

  late final _UA_ImageJPG_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_ImageJPG> Function()>>('UA_ImageJPG_new');
  late final _UA_ImageJPG_new = _UA_ImageJPG_newPtr.asFunction<ffi.Pointer<UA_ImageJPG> Function()>();

  int UA_ImageJPG_copy(
    ffi.Pointer<UA_ImageJPG> src,
    ffi.Pointer<UA_ImageJPG> dst,
  ) {
    return _UA_ImageJPG_copy(
      src,
      dst,
    );
  }

  late final _UA_ImageJPG_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ImageJPG>, ffi.Pointer<UA_ImageJPG>)>>(
          'UA_ImageJPG_copy');
  late final _UA_ImageJPG_copy =
      _UA_ImageJPG_copyPtr.asFunction<int Function(ffi.Pointer<UA_ImageJPG>, ffi.Pointer<UA_ImageJPG>)>();

  void UA_ImageJPG_clear(
    ffi.Pointer<UA_ImageJPG> p,
  ) {
    return _UA_ImageJPG_clear(
      p,
    );
  }

  late final _UA_ImageJPG_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageJPG>)>>('UA_ImageJPG_clear');
  late final _UA_ImageJPG_clear = _UA_ImageJPG_clearPtr.asFunction<void Function(ffi.Pointer<UA_ImageJPG>)>();

  void UA_ImageJPG_delete(
    ffi.Pointer<UA_ImageJPG> p,
  ) {
    return _UA_ImageJPG_delete(
      p,
    );
  }

  late final _UA_ImageJPG_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImageJPG>)>>('UA_ImageJPG_delete');
  late final _UA_ImageJPG_delete = _UA_ImageJPG_deletePtr.asFunction<void Function(ffi.Pointer<UA_ImageJPG>)>();

  bool UA_ImageJPG_equal(
    ffi.Pointer<UA_ImageJPG> p1,
    ffi.Pointer<UA_ImageJPG> p2,
  ) {
    return _UA_ImageJPG_equal(
      p1,
      p2,
    );
  }

  late final _UA_ImageJPG_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ImageJPG>, ffi.Pointer<UA_ImageJPG>)>>(
          'UA_ImageJPG_equal');
  late final _UA_ImageJPG_equal =
      _UA_ImageJPG_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ImageJPG>, ffi.Pointer<UA_ImageJPG>)>();

  void UA_ImagePNG_init(
    ffi.Pointer<UA_ImagePNG> p,
  ) {
    return _UA_ImagePNG_init(
      p,
    );
  }

  late final _UA_ImagePNG_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImagePNG>)>>('UA_ImagePNG_init');
  late final _UA_ImagePNG_init = _UA_ImagePNG_initPtr.asFunction<void Function(ffi.Pointer<UA_ImagePNG>)>();

  ffi.Pointer<UA_ImagePNG> UA_ImagePNG_new() {
    return _UA_ImagePNG_new();
  }

  late final _UA_ImagePNG_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_ImagePNG> Function()>>('UA_ImagePNG_new');
  late final _UA_ImagePNG_new = _UA_ImagePNG_newPtr.asFunction<ffi.Pointer<UA_ImagePNG> Function()>();

  int UA_ImagePNG_copy(
    ffi.Pointer<UA_ImagePNG> src,
    ffi.Pointer<UA_ImagePNG> dst,
  ) {
    return _UA_ImagePNG_copy(
      src,
      dst,
    );
  }

  late final _UA_ImagePNG_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ImagePNG>, ffi.Pointer<UA_ImagePNG>)>>(
          'UA_ImagePNG_copy');
  late final _UA_ImagePNG_copy =
      _UA_ImagePNG_copyPtr.asFunction<int Function(ffi.Pointer<UA_ImagePNG>, ffi.Pointer<UA_ImagePNG>)>();

  void UA_ImagePNG_clear(
    ffi.Pointer<UA_ImagePNG> p,
  ) {
    return _UA_ImagePNG_clear(
      p,
    );
  }

  late final _UA_ImagePNG_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImagePNG>)>>('UA_ImagePNG_clear');
  late final _UA_ImagePNG_clear = _UA_ImagePNG_clearPtr.asFunction<void Function(ffi.Pointer<UA_ImagePNG>)>();

  void UA_ImagePNG_delete(
    ffi.Pointer<UA_ImagePNG> p,
  ) {
    return _UA_ImagePNG_delete(
      p,
    );
  }

  late final _UA_ImagePNG_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ImagePNG>)>>('UA_ImagePNG_delete');
  late final _UA_ImagePNG_delete = _UA_ImagePNG_deletePtr.asFunction<void Function(ffi.Pointer<UA_ImagePNG>)>();

  bool UA_ImagePNG_equal(
    ffi.Pointer<UA_ImagePNG> p1,
    ffi.Pointer<UA_ImagePNG> p2,
  ) {
    return _UA_ImagePNG_equal(
      p1,
      p2,
    );
  }

  late final _UA_ImagePNG_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ImagePNG>, ffi.Pointer<UA_ImagePNG>)>>(
          'UA_ImagePNG_equal');
  late final _UA_ImagePNG_equal =
      _UA_ImagePNG_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ImagePNG>, ffi.Pointer<UA_ImagePNG>)>();

  void UA_AudioDataType_init(
    ffi.Pointer<UA_AudioDataType> p,
  ) {
    return _UA_AudioDataType_init(
      p,
    );
  }

  late final _UA_AudioDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AudioDataType>)>>('UA_AudioDataType_init');
  late final _UA_AudioDataType_init =
      _UA_AudioDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_AudioDataType>)>();

  ffi.Pointer<UA_AudioDataType> UA_AudioDataType_new() {
    return _UA_AudioDataType_new();
  }

  late final _UA_AudioDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AudioDataType> Function()>>('UA_AudioDataType_new');
  late final _UA_AudioDataType_new = _UA_AudioDataType_newPtr.asFunction<ffi.Pointer<UA_AudioDataType> Function()>();

  int UA_AudioDataType_copy(
    ffi.Pointer<UA_AudioDataType> src,
    ffi.Pointer<UA_AudioDataType> dst,
  ) {
    return _UA_AudioDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_AudioDataType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AudioDataType>, ffi.Pointer<UA_AudioDataType>)>>(
          'UA_AudioDataType_copy');
  late final _UA_AudioDataType_copy = _UA_AudioDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AudioDataType>, ffi.Pointer<UA_AudioDataType>)>();

  void UA_AudioDataType_clear(
    ffi.Pointer<UA_AudioDataType> p,
  ) {
    return _UA_AudioDataType_clear(
      p,
    );
  }

  late final _UA_AudioDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AudioDataType>)>>('UA_AudioDataType_clear');
  late final _UA_AudioDataType_clear =
      _UA_AudioDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AudioDataType>)>();

  void UA_AudioDataType_delete(
    ffi.Pointer<UA_AudioDataType> p,
  ) {
    return _UA_AudioDataType_delete(
      p,
    );
  }

  late final _UA_AudioDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AudioDataType>)>>('UA_AudioDataType_delete');
  late final _UA_AudioDataType_delete =
      _UA_AudioDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AudioDataType>)>();

  bool UA_AudioDataType_equal(
    ffi.Pointer<UA_AudioDataType> p1,
    ffi.Pointer<UA_AudioDataType> p2,
  ) {
    return _UA_AudioDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AudioDataType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AudioDataType>, ffi.Pointer<UA_AudioDataType>)>>(
          'UA_AudioDataType_equal');
  late final _UA_AudioDataType_equal = _UA_AudioDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AudioDataType>, ffi.Pointer<UA_AudioDataType>)>();

  void UA_UriString_init(
    ffi.Pointer<UA_UriString> p,
  ) {
    return _UA_UriString_init(
      p,
    );
  }

  late final _UA_UriString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UriString>)>>('UA_UriString_init');
  late final _UA_UriString_init = _UA_UriString_initPtr.asFunction<void Function(ffi.Pointer<UA_UriString>)>();

  ffi.Pointer<UA_UriString> UA_UriString_new() {
    return _UA_UriString_new();
  }

  late final _UA_UriString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UriString> Function()>>('UA_UriString_new');
  late final _UA_UriString_new = _UA_UriString_newPtr.asFunction<ffi.Pointer<UA_UriString> Function()>();

  int UA_UriString_copy(
    ffi.Pointer<UA_UriString> src,
    ffi.Pointer<UA_UriString> dst,
  ) {
    return _UA_UriString_copy(
      src,
      dst,
    );
  }

  late final _UA_UriString_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UriString>, ffi.Pointer<UA_UriString>)>>(
          'UA_UriString_copy');
  late final _UA_UriString_copy =
      _UA_UriString_copyPtr.asFunction<int Function(ffi.Pointer<UA_UriString>, ffi.Pointer<UA_UriString>)>();

  void UA_UriString_clear(
    ffi.Pointer<UA_UriString> p,
  ) {
    return _UA_UriString_clear(
      p,
    );
  }

  late final _UA_UriString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UriString>)>>('UA_UriString_clear');
  late final _UA_UriString_clear = _UA_UriString_clearPtr.asFunction<void Function(ffi.Pointer<UA_UriString>)>();

  void UA_UriString_delete(
    ffi.Pointer<UA_UriString> p,
  ) {
    return _UA_UriString_delete(
      p,
    );
  }

  late final _UA_UriString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UriString>)>>('UA_UriString_delete');
  late final _UA_UriString_delete = _UA_UriString_deletePtr.asFunction<void Function(ffi.Pointer<UA_UriString>)>();

  bool UA_UriString_equal(
    ffi.Pointer<UA_UriString> p1,
    ffi.Pointer<UA_UriString> p2,
  ) {
    return _UA_UriString_equal(
      p1,
      p2,
    );
  }

  late final _UA_UriString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UriString>, ffi.Pointer<UA_UriString>)>>(
          'UA_UriString_equal');
  late final _UA_UriString_equal =
      _UA_UriString_equalPtr.asFunction<bool Function(ffi.Pointer<UA_UriString>, ffi.Pointer<UA_UriString>)>();

  void UA_BitFieldMaskDataType_init(
    ffi.Pointer<UA_BitFieldMaskDataType> p,
  ) {
    return _UA_BitFieldMaskDataType_init(
      p,
    );
  }

  late final _UA_BitFieldMaskDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>>(
          'UA_BitFieldMaskDataType_init');
  late final _UA_BitFieldMaskDataType_init =
      _UA_BitFieldMaskDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>();

  ffi.Pointer<UA_BitFieldMaskDataType> UA_BitFieldMaskDataType_new() {
    return _UA_BitFieldMaskDataType_new();
  }

  late final _UA_BitFieldMaskDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BitFieldMaskDataType> Function()>>('UA_BitFieldMaskDataType_new');
  late final _UA_BitFieldMaskDataType_new =
      _UA_BitFieldMaskDataType_newPtr.asFunction<ffi.Pointer<UA_BitFieldMaskDataType> Function()>();

  int UA_BitFieldMaskDataType_copy(
    ffi.Pointer<UA_BitFieldMaskDataType> src,
    ffi.Pointer<UA_BitFieldMaskDataType> dst,
  ) {
    return _UA_BitFieldMaskDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BitFieldMaskDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BitFieldMaskDataType>,
              ffi.Pointer<UA_BitFieldMaskDataType>)>>('UA_BitFieldMaskDataType_copy');
  late final _UA_BitFieldMaskDataType_copy = _UA_BitFieldMaskDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BitFieldMaskDataType>, ffi.Pointer<UA_BitFieldMaskDataType>)>();

  void UA_BitFieldMaskDataType_clear(
    ffi.Pointer<UA_BitFieldMaskDataType> p,
  ) {
    return _UA_BitFieldMaskDataType_clear(
      p,
    );
  }

  late final _UA_BitFieldMaskDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>>(
          'UA_BitFieldMaskDataType_clear');
  late final _UA_BitFieldMaskDataType_clear =
      _UA_BitFieldMaskDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>();

  void UA_BitFieldMaskDataType_delete(
    ffi.Pointer<UA_BitFieldMaskDataType> p,
  ) {
    return _UA_BitFieldMaskDataType_delete(
      p,
    );
  }

  late final _UA_BitFieldMaskDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>>(
          'UA_BitFieldMaskDataType_delete');
  late final _UA_BitFieldMaskDataType_delete =
      _UA_BitFieldMaskDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_BitFieldMaskDataType>)>();

  bool UA_BitFieldMaskDataType_equal(
    ffi.Pointer<UA_BitFieldMaskDataType> p1,
    ffi.Pointer<UA_BitFieldMaskDataType> p2,
  ) {
    return _UA_BitFieldMaskDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_BitFieldMaskDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_BitFieldMaskDataType>,
              ffi.Pointer<UA_BitFieldMaskDataType>)>>('UA_BitFieldMaskDataType_equal');
  late final _UA_BitFieldMaskDataType_equal = _UA_BitFieldMaskDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BitFieldMaskDataType>, ffi.Pointer<UA_BitFieldMaskDataType>)>();

  void UA_SemanticVersionString_init(
    ffi.Pointer<UA_SemanticVersionString> p,
  ) {
    return _UA_SemanticVersionString_init(
      p,
    );
  }

  late final _UA_SemanticVersionString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticVersionString>)>>(
          'UA_SemanticVersionString_init');
  late final _UA_SemanticVersionString_init =
      _UA_SemanticVersionString_initPtr.asFunction<void Function(ffi.Pointer<UA_SemanticVersionString>)>();

  ffi.Pointer<UA_SemanticVersionString> UA_SemanticVersionString_new() {
    return _UA_SemanticVersionString_new();
  }

  late final _UA_SemanticVersionString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SemanticVersionString> Function()>>('UA_SemanticVersionString_new');
  late final _UA_SemanticVersionString_new =
      _UA_SemanticVersionString_newPtr.asFunction<ffi.Pointer<UA_SemanticVersionString> Function()>();

  int UA_SemanticVersionString_copy(
    ffi.Pointer<UA_SemanticVersionString> src,
    ffi.Pointer<UA_SemanticVersionString> dst,
  ) {
    return _UA_SemanticVersionString_copy(
      src,
      dst,
    );
  }

  late final _UA_SemanticVersionString_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SemanticVersionString>,
              ffi.Pointer<UA_SemanticVersionString>)>>('UA_SemanticVersionString_copy');
  late final _UA_SemanticVersionString_copy = _UA_SemanticVersionString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SemanticVersionString>, ffi.Pointer<UA_SemanticVersionString>)>();

  void UA_SemanticVersionString_clear(
    ffi.Pointer<UA_SemanticVersionString> p,
  ) {
    return _UA_SemanticVersionString_clear(
      p,
    );
  }

  late final _UA_SemanticVersionString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticVersionString>)>>(
          'UA_SemanticVersionString_clear');
  late final _UA_SemanticVersionString_clear =
      _UA_SemanticVersionString_clearPtr.asFunction<void Function(ffi.Pointer<UA_SemanticVersionString>)>();

  void UA_SemanticVersionString_delete(
    ffi.Pointer<UA_SemanticVersionString> p,
  ) {
    return _UA_SemanticVersionString_delete(
      p,
    );
  }

  late final _UA_SemanticVersionString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticVersionString>)>>(
          'UA_SemanticVersionString_delete');
  late final _UA_SemanticVersionString_delete =
      _UA_SemanticVersionString_deletePtr.asFunction<void Function(ffi.Pointer<UA_SemanticVersionString>)>();

  bool UA_SemanticVersionString_equal(
    ffi.Pointer<UA_SemanticVersionString> p1,
    ffi.Pointer<UA_SemanticVersionString> p2,
  ) {
    return _UA_SemanticVersionString_equal(
      p1,
      p2,
    );
  }

  late final _UA_SemanticVersionString_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SemanticVersionString>,
              ffi.Pointer<UA_SemanticVersionString>)>>('UA_SemanticVersionString_equal');
  late final _UA_SemanticVersionString_equal = _UA_SemanticVersionString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SemanticVersionString>, ffi.Pointer<UA_SemanticVersionString>)>();

  void UA_KeyValuePair_init(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_init(
      p,
    );
  }

  late final _UA_KeyValuePair_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>('UA_KeyValuePair_init');
  late final _UA_KeyValuePair_init = _UA_KeyValuePair_initPtr.asFunction<void Function(ffi.Pointer<UA_KeyValuePair>)>();

  ffi.Pointer<UA_KeyValuePair> UA_KeyValuePair_new() {
    return _UA_KeyValuePair_new();
  }

  late final _UA_KeyValuePair_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_KeyValuePair> Function()>>('UA_KeyValuePair_new');
  late final _UA_KeyValuePair_new = _UA_KeyValuePair_newPtr.asFunction<ffi.Pointer<UA_KeyValuePair> Function()>();

  int UA_KeyValuePair_copy(
    ffi.Pointer<UA_KeyValuePair> src,
    ffi.Pointer<UA_KeyValuePair> dst,
  ) {
    return _UA_KeyValuePair_copy(
      src,
      dst,
    );
  }

  late final _UA_KeyValuePair_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>>(
          'UA_KeyValuePair_copy');
  late final _UA_KeyValuePair_copy =
      _UA_KeyValuePair_copyPtr.asFunction<int Function(ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_clear(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_clear(
      p,
    );
  }

  late final _UA_KeyValuePair_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>('UA_KeyValuePair_clear');
  late final _UA_KeyValuePair_clear =
      _UA_KeyValuePair_clearPtr.asFunction<void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_delete(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_delete(
      p,
    );
  }

  late final _UA_KeyValuePair_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>('UA_KeyValuePair_delete');
  late final _UA_KeyValuePair_delete =
      _UA_KeyValuePair_deletePtr.asFunction<void Function(ffi.Pointer<UA_KeyValuePair>)>();

  bool UA_KeyValuePair_equal(
    ffi.Pointer<UA_KeyValuePair> p1,
    ffi.Pointer<UA_KeyValuePair> p2,
  ) {
    return _UA_KeyValuePair_equal(
      p1,
      p2,
    );
  }

  late final _UA_KeyValuePair_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>>(
          'UA_KeyValuePair_equal');
  late final _UA_KeyValuePair_equal =
      _UA_KeyValuePair_equalPtr.asFunction<bool Function(ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>();

  void UA_AdditionalParametersType_init(
    ffi.Pointer<UA_AdditionalParametersType> p,
  ) {
    return _UA_AdditionalParametersType_init(
      p,
    );
  }

  late final _UA_AdditionalParametersType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AdditionalParametersType>)>>(
          'UA_AdditionalParametersType_init');
  late final _UA_AdditionalParametersType_init =
      _UA_AdditionalParametersType_initPtr.asFunction<void Function(ffi.Pointer<UA_AdditionalParametersType>)>();

  ffi.Pointer<UA_AdditionalParametersType> UA_AdditionalParametersType_new() {
    return _UA_AdditionalParametersType_new();
  }

  late final _UA_AdditionalParametersType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AdditionalParametersType> Function()>>(
          'UA_AdditionalParametersType_new');
  late final _UA_AdditionalParametersType_new =
      _UA_AdditionalParametersType_newPtr.asFunction<ffi.Pointer<UA_AdditionalParametersType> Function()>();

  int UA_AdditionalParametersType_copy(
    ffi.Pointer<UA_AdditionalParametersType> src,
    ffi.Pointer<UA_AdditionalParametersType> dst,
  ) {
    return _UA_AdditionalParametersType_copy(
      src,
      dst,
    );
  }

  late final _UA_AdditionalParametersType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AdditionalParametersType>,
              ffi.Pointer<UA_AdditionalParametersType>)>>('UA_AdditionalParametersType_copy');
  late final _UA_AdditionalParametersType_copy = _UA_AdditionalParametersType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AdditionalParametersType>, ffi.Pointer<UA_AdditionalParametersType>)>();

  void UA_AdditionalParametersType_clear(
    ffi.Pointer<UA_AdditionalParametersType> p,
  ) {
    return _UA_AdditionalParametersType_clear(
      p,
    );
  }

  late final _UA_AdditionalParametersType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AdditionalParametersType>)>>(
          'UA_AdditionalParametersType_clear');
  late final _UA_AdditionalParametersType_clear =
      _UA_AdditionalParametersType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AdditionalParametersType>)>();

  void UA_AdditionalParametersType_delete(
    ffi.Pointer<UA_AdditionalParametersType> p,
  ) {
    return _UA_AdditionalParametersType_delete(
      p,
    );
  }

  late final _UA_AdditionalParametersType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AdditionalParametersType>)>>(
          'UA_AdditionalParametersType_delete');
  late final _UA_AdditionalParametersType_delete =
      _UA_AdditionalParametersType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AdditionalParametersType>)>();

  bool UA_AdditionalParametersType_equal(
    ffi.Pointer<UA_AdditionalParametersType> p1,
    ffi.Pointer<UA_AdditionalParametersType> p2,
  ) {
    return _UA_AdditionalParametersType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AdditionalParametersType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AdditionalParametersType>,
              ffi.Pointer<UA_AdditionalParametersType>)>>('UA_AdditionalParametersType_equal');
  late final _UA_AdditionalParametersType_equal = _UA_AdditionalParametersType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AdditionalParametersType>, ffi.Pointer<UA_AdditionalParametersType>)>();

  void UA_EphemeralKeyType_init(
    ffi.Pointer<UA_EphemeralKeyType> p,
  ) {
    return _UA_EphemeralKeyType_init(
      p,
    );
  }

  late final _UA_EphemeralKeyType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EphemeralKeyType>)>>('UA_EphemeralKeyType_init');
  late final _UA_EphemeralKeyType_init =
      _UA_EphemeralKeyType_initPtr.asFunction<void Function(ffi.Pointer<UA_EphemeralKeyType>)>();

  ffi.Pointer<UA_EphemeralKeyType> UA_EphemeralKeyType_new() {
    return _UA_EphemeralKeyType_new();
  }

  late final _UA_EphemeralKeyType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EphemeralKeyType> Function()>>('UA_EphemeralKeyType_new');
  late final _UA_EphemeralKeyType_new =
      _UA_EphemeralKeyType_newPtr.asFunction<ffi.Pointer<UA_EphemeralKeyType> Function()>();

  int UA_EphemeralKeyType_copy(
    ffi.Pointer<UA_EphemeralKeyType> src,
    ffi.Pointer<UA_EphemeralKeyType> dst,
  ) {
    return _UA_EphemeralKeyType_copy(
      src,
      dst,
    );
  }

  late final _UA_EphemeralKeyType_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EphemeralKeyType>, ffi.Pointer<UA_EphemeralKeyType>)>>(
      'UA_EphemeralKeyType_copy');
  late final _UA_EphemeralKeyType_copy = _UA_EphemeralKeyType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EphemeralKeyType>, ffi.Pointer<UA_EphemeralKeyType>)>();

  void UA_EphemeralKeyType_clear(
    ffi.Pointer<UA_EphemeralKeyType> p,
  ) {
    return _UA_EphemeralKeyType_clear(
      p,
    );
  }

  late final _UA_EphemeralKeyType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EphemeralKeyType>)>>('UA_EphemeralKeyType_clear');
  late final _UA_EphemeralKeyType_clear =
      _UA_EphemeralKeyType_clearPtr.asFunction<void Function(ffi.Pointer<UA_EphemeralKeyType>)>();

  void UA_EphemeralKeyType_delete(
    ffi.Pointer<UA_EphemeralKeyType> p,
  ) {
    return _UA_EphemeralKeyType_delete(
      p,
    );
  }

  late final _UA_EphemeralKeyType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EphemeralKeyType>)>>('UA_EphemeralKeyType_delete');
  late final _UA_EphemeralKeyType_delete =
      _UA_EphemeralKeyType_deletePtr.asFunction<void Function(ffi.Pointer<UA_EphemeralKeyType>)>();

  bool UA_EphemeralKeyType_equal(
    ffi.Pointer<UA_EphemeralKeyType> p1,
    ffi.Pointer<UA_EphemeralKeyType> p2,
  ) {
    return _UA_EphemeralKeyType_equal(
      p1,
      p2,
    );
  }

  late final _UA_EphemeralKeyType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EphemeralKeyType>, ffi.Pointer<UA_EphemeralKeyType>)>>(
      'UA_EphemeralKeyType_equal');
  late final _UA_EphemeralKeyType_equal = _UA_EphemeralKeyType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EphemeralKeyType>, ffi.Pointer<UA_EphemeralKeyType>)>();

  void UA_RationalNumber_init(
    ffi.Pointer<UA_RationalNumber> p,
  ) {
    return _UA_RationalNumber_init(
      p,
    );
  }

  late final _UA_RationalNumber_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RationalNumber>)>>('UA_RationalNumber_init');
  late final _UA_RationalNumber_init =
      _UA_RationalNumber_initPtr.asFunction<void Function(ffi.Pointer<UA_RationalNumber>)>();

  ffi.Pointer<UA_RationalNumber> UA_RationalNumber_new() {
    return _UA_RationalNumber_new();
  }

  late final _UA_RationalNumber_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RationalNumber> Function()>>('UA_RationalNumber_new');
  late final _UA_RationalNumber_new = _UA_RationalNumber_newPtr.asFunction<ffi.Pointer<UA_RationalNumber> Function()>();

  int UA_RationalNumber_copy(
    ffi.Pointer<UA_RationalNumber> src,
    ffi.Pointer<UA_RationalNumber> dst,
  ) {
    return _UA_RationalNumber_copy(
      src,
      dst,
    );
  }

  late final _UA_RationalNumber_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RationalNumber>, ffi.Pointer<UA_RationalNumber>)>>(
      'UA_RationalNumber_copy');
  late final _UA_RationalNumber_copy = _UA_RationalNumber_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RationalNumber>, ffi.Pointer<UA_RationalNumber>)>();

  void UA_RationalNumber_clear(
    ffi.Pointer<UA_RationalNumber> p,
  ) {
    return _UA_RationalNumber_clear(
      p,
    );
  }

  late final _UA_RationalNumber_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RationalNumber>)>>('UA_RationalNumber_clear');
  late final _UA_RationalNumber_clear =
      _UA_RationalNumber_clearPtr.asFunction<void Function(ffi.Pointer<UA_RationalNumber>)>();

  void UA_RationalNumber_delete(
    ffi.Pointer<UA_RationalNumber> p,
  ) {
    return _UA_RationalNumber_delete(
      p,
    );
  }

  late final _UA_RationalNumber_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RationalNumber>)>>('UA_RationalNumber_delete');
  late final _UA_RationalNumber_delete =
      _UA_RationalNumber_deletePtr.asFunction<void Function(ffi.Pointer<UA_RationalNumber>)>();

  bool UA_RationalNumber_equal(
    ffi.Pointer<UA_RationalNumber> p1,
    ffi.Pointer<UA_RationalNumber> p2,
  ) {
    return _UA_RationalNumber_equal(
      p1,
      p2,
    );
  }

  late final _UA_RationalNumber_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RationalNumber>, ffi.Pointer<UA_RationalNumber>)>>(
          'UA_RationalNumber_equal');
  late final _UA_RationalNumber_equal = _UA_RationalNumber_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RationalNumber>, ffi.Pointer<UA_RationalNumber>)>();

  void UA_ThreeDVector_init(
    ffi.Pointer<UA_ThreeDVector> p,
  ) {
    return _UA_ThreeDVector_init(
      p,
    );
  }

  late final _UA_ThreeDVector_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDVector>)>>('UA_ThreeDVector_init');
  late final _UA_ThreeDVector_init = _UA_ThreeDVector_initPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDVector>)>();

  ffi.Pointer<UA_ThreeDVector> UA_ThreeDVector_new() {
    return _UA_ThreeDVector_new();
  }

  late final _UA_ThreeDVector_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ThreeDVector> Function()>>('UA_ThreeDVector_new');
  late final _UA_ThreeDVector_new = _UA_ThreeDVector_newPtr.asFunction<ffi.Pointer<UA_ThreeDVector> Function()>();

  int UA_ThreeDVector_copy(
    ffi.Pointer<UA_ThreeDVector> src,
    ffi.Pointer<UA_ThreeDVector> dst,
  ) {
    return _UA_ThreeDVector_copy(
      src,
      dst,
    );
  }

  late final _UA_ThreeDVector_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ThreeDVector>, ffi.Pointer<UA_ThreeDVector>)>>(
          'UA_ThreeDVector_copy');
  late final _UA_ThreeDVector_copy =
      _UA_ThreeDVector_copyPtr.asFunction<int Function(ffi.Pointer<UA_ThreeDVector>, ffi.Pointer<UA_ThreeDVector>)>();

  void UA_ThreeDVector_clear(
    ffi.Pointer<UA_ThreeDVector> p,
  ) {
    return _UA_ThreeDVector_clear(
      p,
    );
  }

  late final _UA_ThreeDVector_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDVector>)>>('UA_ThreeDVector_clear');
  late final _UA_ThreeDVector_clear =
      _UA_ThreeDVector_clearPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDVector>)>();

  void UA_ThreeDVector_delete(
    ffi.Pointer<UA_ThreeDVector> p,
  ) {
    return _UA_ThreeDVector_delete(
      p,
    );
  }

  late final _UA_ThreeDVector_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDVector>)>>('UA_ThreeDVector_delete');
  late final _UA_ThreeDVector_delete =
      _UA_ThreeDVector_deletePtr.asFunction<void Function(ffi.Pointer<UA_ThreeDVector>)>();

  bool UA_ThreeDVector_equal(
    ffi.Pointer<UA_ThreeDVector> p1,
    ffi.Pointer<UA_ThreeDVector> p2,
  ) {
    return _UA_ThreeDVector_equal(
      p1,
      p2,
    );
  }

  late final _UA_ThreeDVector_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ThreeDVector>, ffi.Pointer<UA_ThreeDVector>)>>(
          'UA_ThreeDVector_equal');
  late final _UA_ThreeDVector_equal =
      _UA_ThreeDVector_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ThreeDVector>, ffi.Pointer<UA_ThreeDVector>)>();

  void UA_ThreeDCartesianCoordinates_init(
    ffi.Pointer<UA_ThreeDCartesianCoordinates> p,
  ) {
    return _UA_ThreeDCartesianCoordinates_init(
      p,
    );
  }

  late final _UA_ThreeDCartesianCoordinates_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>>(
          'UA_ThreeDCartesianCoordinates_init');
  late final _UA_ThreeDCartesianCoordinates_init =
      _UA_ThreeDCartesianCoordinates_initPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>();

  ffi.Pointer<UA_ThreeDCartesianCoordinates> UA_ThreeDCartesianCoordinates_new() {
    return _UA_ThreeDCartesianCoordinates_new();
  }

  late final _UA_ThreeDCartesianCoordinates_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ThreeDCartesianCoordinates> Function()>>(
          'UA_ThreeDCartesianCoordinates_new');
  late final _UA_ThreeDCartesianCoordinates_new =
      _UA_ThreeDCartesianCoordinates_newPtr.asFunction<ffi.Pointer<UA_ThreeDCartesianCoordinates> Function()>();

  int UA_ThreeDCartesianCoordinates_copy(
    ffi.Pointer<UA_ThreeDCartesianCoordinates> src,
    ffi.Pointer<UA_ThreeDCartesianCoordinates> dst,
  ) {
    return _UA_ThreeDCartesianCoordinates_copy(
      src,
      dst,
    );
  }

  late final _UA_ThreeDCartesianCoordinates_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>,
              ffi.Pointer<UA_ThreeDCartesianCoordinates>)>>('UA_ThreeDCartesianCoordinates_copy');
  late final _UA_ThreeDCartesianCoordinates_copy = _UA_ThreeDCartesianCoordinates_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>, ffi.Pointer<UA_ThreeDCartesianCoordinates>)>();

  void UA_ThreeDCartesianCoordinates_clear(
    ffi.Pointer<UA_ThreeDCartesianCoordinates> p,
  ) {
    return _UA_ThreeDCartesianCoordinates_clear(
      p,
    );
  }

  late final _UA_ThreeDCartesianCoordinates_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>>(
          'UA_ThreeDCartesianCoordinates_clear');
  late final _UA_ThreeDCartesianCoordinates_clear =
      _UA_ThreeDCartesianCoordinates_clearPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>();

  void UA_ThreeDCartesianCoordinates_delete(
    ffi.Pointer<UA_ThreeDCartesianCoordinates> p,
  ) {
    return _UA_ThreeDCartesianCoordinates_delete(
      p,
    );
  }

  late final _UA_ThreeDCartesianCoordinates_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>>(
          'UA_ThreeDCartesianCoordinates_delete');
  late final _UA_ThreeDCartesianCoordinates_delete =
      _UA_ThreeDCartesianCoordinates_deletePtr.asFunction<void Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>)>();

  bool UA_ThreeDCartesianCoordinates_equal(
    ffi.Pointer<UA_ThreeDCartesianCoordinates> p1,
    ffi.Pointer<UA_ThreeDCartesianCoordinates> p2,
  ) {
    return _UA_ThreeDCartesianCoordinates_equal(
      p1,
      p2,
    );
  }

  late final _UA_ThreeDCartesianCoordinates_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>,
              ffi.Pointer<UA_ThreeDCartesianCoordinates>)>>('UA_ThreeDCartesianCoordinates_equal');
  late final _UA_ThreeDCartesianCoordinates_equal = _UA_ThreeDCartesianCoordinates_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ThreeDCartesianCoordinates>, ffi.Pointer<UA_ThreeDCartesianCoordinates>)>();

  void UA_ThreeDOrientation_init(
    ffi.Pointer<UA_ThreeDOrientation> p,
  ) {
    return _UA_ThreeDOrientation_init(
      p,
    );
  }

  late final _UA_ThreeDOrientation_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDOrientation>)>>('UA_ThreeDOrientation_init');
  late final _UA_ThreeDOrientation_init =
      _UA_ThreeDOrientation_initPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDOrientation>)>();

  ffi.Pointer<UA_ThreeDOrientation> UA_ThreeDOrientation_new() {
    return _UA_ThreeDOrientation_new();
  }

  late final _UA_ThreeDOrientation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ThreeDOrientation> Function()>>('UA_ThreeDOrientation_new');
  late final _UA_ThreeDOrientation_new =
      _UA_ThreeDOrientation_newPtr.asFunction<ffi.Pointer<UA_ThreeDOrientation> Function()>();

  int UA_ThreeDOrientation_copy(
    ffi.Pointer<UA_ThreeDOrientation> src,
    ffi.Pointer<UA_ThreeDOrientation> dst,
  ) {
    return _UA_ThreeDOrientation_copy(
      src,
      dst,
    );
  }

  late final _UA_ThreeDOrientation_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ThreeDOrientation>, ffi.Pointer<UA_ThreeDOrientation>)>>('UA_ThreeDOrientation_copy');
  late final _UA_ThreeDOrientation_copy = _UA_ThreeDOrientation_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ThreeDOrientation>, ffi.Pointer<UA_ThreeDOrientation>)>();

  void UA_ThreeDOrientation_clear(
    ffi.Pointer<UA_ThreeDOrientation> p,
  ) {
    return _UA_ThreeDOrientation_clear(
      p,
    );
  }

  late final _UA_ThreeDOrientation_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDOrientation>)>>('UA_ThreeDOrientation_clear');
  late final _UA_ThreeDOrientation_clear =
      _UA_ThreeDOrientation_clearPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDOrientation>)>();

  void UA_ThreeDOrientation_delete(
    ffi.Pointer<UA_ThreeDOrientation> p,
  ) {
    return _UA_ThreeDOrientation_delete(
      p,
    );
  }

  late final _UA_ThreeDOrientation_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDOrientation>)>>('UA_ThreeDOrientation_delete');
  late final _UA_ThreeDOrientation_delete =
      _UA_ThreeDOrientation_deletePtr.asFunction<void Function(ffi.Pointer<UA_ThreeDOrientation>)>();

  bool UA_ThreeDOrientation_equal(
    ffi.Pointer<UA_ThreeDOrientation> p1,
    ffi.Pointer<UA_ThreeDOrientation> p2,
  ) {
    return _UA_ThreeDOrientation_equal(
      p1,
      p2,
    );
  }

  late final _UA_ThreeDOrientation_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ThreeDOrientation>, ffi.Pointer<UA_ThreeDOrientation>)>>(
      'UA_ThreeDOrientation_equal');
  late final _UA_ThreeDOrientation_equal = _UA_ThreeDOrientation_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ThreeDOrientation>, ffi.Pointer<UA_ThreeDOrientation>)>();

  void UA_ThreeDFrame_init(
    ffi.Pointer<UA_ThreeDFrame> p,
  ) {
    return _UA_ThreeDFrame_init(
      p,
    );
  }

  late final _UA_ThreeDFrame_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDFrame>)>>('UA_ThreeDFrame_init');
  late final _UA_ThreeDFrame_init = _UA_ThreeDFrame_initPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDFrame>)>();

  ffi.Pointer<UA_ThreeDFrame> UA_ThreeDFrame_new() {
    return _UA_ThreeDFrame_new();
  }

  late final _UA_ThreeDFrame_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ThreeDFrame> Function()>>('UA_ThreeDFrame_new');
  late final _UA_ThreeDFrame_new = _UA_ThreeDFrame_newPtr.asFunction<ffi.Pointer<UA_ThreeDFrame> Function()>();

  int UA_ThreeDFrame_copy(
    ffi.Pointer<UA_ThreeDFrame> src,
    ffi.Pointer<UA_ThreeDFrame> dst,
  ) {
    return _UA_ThreeDFrame_copy(
      src,
      dst,
    );
  }

  late final _UA_ThreeDFrame_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ThreeDFrame>, ffi.Pointer<UA_ThreeDFrame>)>>(
          'UA_ThreeDFrame_copy');
  late final _UA_ThreeDFrame_copy =
      _UA_ThreeDFrame_copyPtr.asFunction<int Function(ffi.Pointer<UA_ThreeDFrame>, ffi.Pointer<UA_ThreeDFrame>)>();

  void UA_ThreeDFrame_clear(
    ffi.Pointer<UA_ThreeDFrame> p,
  ) {
    return _UA_ThreeDFrame_clear(
      p,
    );
  }

  late final _UA_ThreeDFrame_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDFrame>)>>('UA_ThreeDFrame_clear');
  late final _UA_ThreeDFrame_clear = _UA_ThreeDFrame_clearPtr.asFunction<void Function(ffi.Pointer<UA_ThreeDFrame>)>();

  void UA_ThreeDFrame_delete(
    ffi.Pointer<UA_ThreeDFrame> p,
  ) {
    return _UA_ThreeDFrame_delete(
      p,
    );
  }

  late final _UA_ThreeDFrame_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ThreeDFrame>)>>('UA_ThreeDFrame_delete');
  late final _UA_ThreeDFrame_delete =
      _UA_ThreeDFrame_deletePtr.asFunction<void Function(ffi.Pointer<UA_ThreeDFrame>)>();

  bool UA_ThreeDFrame_equal(
    ffi.Pointer<UA_ThreeDFrame> p1,
    ffi.Pointer<UA_ThreeDFrame> p2,
  ) {
    return _UA_ThreeDFrame_equal(
      p1,
      p2,
    );
  }

  late final _UA_ThreeDFrame_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ThreeDFrame>, ffi.Pointer<UA_ThreeDFrame>)>>(
          'UA_ThreeDFrame_equal');
  late final _UA_ThreeDFrame_equal =
      _UA_ThreeDFrame_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ThreeDFrame>, ffi.Pointer<UA_ThreeDFrame>)>();

  void UA_OpenFileMode_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OpenFileMode_init(
      p,
    );
  }

  late final _UA_OpenFileMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OpenFileMode_init');
  late final _UA_OpenFileMode_init = _UA_OpenFileMode_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_OpenFileMode_new() {
    return _UA_OpenFileMode_new();
  }

  late final _UA_OpenFileMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_OpenFileMode_new');
  late final _UA_OpenFileMode_new = _UA_OpenFileMode_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_OpenFileMode_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_OpenFileMode_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenFileMode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_OpenFileMode_copy');
  late final _UA_OpenFileMode_copy =
      _UA_OpenFileMode_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_OpenFileMode_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OpenFileMode_clear(
      p,
    );
  }

  late final _UA_OpenFileMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OpenFileMode_clear');
  late final _UA_OpenFileMode_clear =
      _UA_OpenFileMode_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_OpenFileMode_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OpenFileMode_delete(
      p,
    );
  }

  late final _UA_OpenFileMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OpenFileMode_delete');
  late final _UA_OpenFileMode_delete =
      _UA_OpenFileMode_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_OpenFileMode_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_OpenFileMode_equal(
      p1,
      p2,
    );
  }

  late final _UA_OpenFileMode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_OpenFileMode_equal');
  late final _UA_OpenFileMode_equal =
      _UA_OpenFileMode_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdentityCriteriaType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdentityCriteriaType_init(
      p,
    );
  }

  late final _UA_IdentityCriteriaType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdentityCriteriaType_init');
  late final _UA_IdentityCriteriaType_init =
      _UA_IdentityCriteriaType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_IdentityCriteriaType_new() {
    return _UA_IdentityCriteriaType_new();
  }

  late final _UA_IdentityCriteriaType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_IdentityCriteriaType_new');
  late final _UA_IdentityCriteriaType_new =
      _UA_IdentityCriteriaType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_IdentityCriteriaType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_IdentityCriteriaType_copy(
      src,
      dst,
    );
  }

  late final _UA_IdentityCriteriaType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_IdentityCriteriaType_copy');
  late final _UA_IdentityCriteriaType_copy = _UA_IdentityCriteriaType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdentityCriteriaType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdentityCriteriaType_clear(
      p,
    );
  }

  late final _UA_IdentityCriteriaType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdentityCriteriaType_clear');
  late final _UA_IdentityCriteriaType_clear =
      _UA_IdentityCriteriaType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdentityCriteriaType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdentityCriteriaType_delete(
      p,
    );
  }

  late final _UA_IdentityCriteriaType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdentityCriteriaType_delete');
  late final _UA_IdentityCriteriaType_delete =
      _UA_IdentityCriteriaType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_IdentityCriteriaType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_IdentityCriteriaType_equal(
      p1,
      p2,
    );
  }

  late final _UA_IdentityCriteriaType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_IdentityCriteriaType_equal');
  late final _UA_IdentityCriteriaType_equal = _UA_IdentityCriteriaType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdentityMappingRuleType_init(
    ffi.Pointer<UA_IdentityMappingRuleType> p,
  ) {
    return _UA_IdentityMappingRuleType_init(
      p,
    );
  }

  late final _UA_IdentityMappingRuleType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>>(
          'UA_IdentityMappingRuleType_init');
  late final _UA_IdentityMappingRuleType_init =
      _UA_IdentityMappingRuleType_initPtr.asFunction<void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>();

  ffi.Pointer<UA_IdentityMappingRuleType> UA_IdentityMappingRuleType_new() {
    return _UA_IdentityMappingRuleType_new();
  }

  late final _UA_IdentityMappingRuleType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_IdentityMappingRuleType> Function()>>('UA_IdentityMappingRuleType_new');
  late final _UA_IdentityMappingRuleType_new =
      _UA_IdentityMappingRuleType_newPtr.asFunction<ffi.Pointer<UA_IdentityMappingRuleType> Function()>();

  int UA_IdentityMappingRuleType_copy(
    ffi.Pointer<UA_IdentityMappingRuleType> src,
    ffi.Pointer<UA_IdentityMappingRuleType> dst,
  ) {
    return _UA_IdentityMappingRuleType_copy(
      src,
      dst,
    );
  }

  late final _UA_IdentityMappingRuleType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_IdentityMappingRuleType>,
              ffi.Pointer<UA_IdentityMappingRuleType>)>>('UA_IdentityMappingRuleType_copy');
  late final _UA_IdentityMappingRuleType_copy = _UA_IdentityMappingRuleType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_IdentityMappingRuleType>, ffi.Pointer<UA_IdentityMappingRuleType>)>();

  void UA_IdentityMappingRuleType_clear(
    ffi.Pointer<UA_IdentityMappingRuleType> p,
  ) {
    return _UA_IdentityMappingRuleType_clear(
      p,
    );
  }

  late final _UA_IdentityMappingRuleType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>>(
          'UA_IdentityMappingRuleType_clear');
  late final _UA_IdentityMappingRuleType_clear =
      _UA_IdentityMappingRuleType_clearPtr.asFunction<void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>();

  void UA_IdentityMappingRuleType_delete(
    ffi.Pointer<UA_IdentityMappingRuleType> p,
  ) {
    return _UA_IdentityMappingRuleType_delete(
      p,
    );
  }

  late final _UA_IdentityMappingRuleType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>>(
          'UA_IdentityMappingRuleType_delete');
  late final _UA_IdentityMappingRuleType_delete =
      _UA_IdentityMappingRuleType_deletePtr.asFunction<void Function(ffi.Pointer<UA_IdentityMappingRuleType>)>();

  bool UA_IdentityMappingRuleType_equal(
    ffi.Pointer<UA_IdentityMappingRuleType> p1,
    ffi.Pointer<UA_IdentityMappingRuleType> p2,
  ) {
    return _UA_IdentityMappingRuleType_equal(
      p1,
      p2,
    );
  }

  late final _UA_IdentityMappingRuleType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_IdentityMappingRuleType>,
              ffi.Pointer<UA_IdentityMappingRuleType>)>>('UA_IdentityMappingRuleType_equal');
  late final _UA_IdentityMappingRuleType_equal = _UA_IdentityMappingRuleType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_IdentityMappingRuleType>, ffi.Pointer<UA_IdentityMappingRuleType>)>();

  void UA_CurrencyUnitType_init(
    ffi.Pointer<UA_CurrencyUnitType> p,
  ) {
    return _UA_CurrencyUnitType_init(
      p,
    );
  }

  late final _UA_CurrencyUnitType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CurrencyUnitType>)>>('UA_CurrencyUnitType_init');
  late final _UA_CurrencyUnitType_init =
      _UA_CurrencyUnitType_initPtr.asFunction<void Function(ffi.Pointer<UA_CurrencyUnitType>)>();

  ffi.Pointer<UA_CurrencyUnitType> UA_CurrencyUnitType_new() {
    return _UA_CurrencyUnitType_new();
  }

  late final _UA_CurrencyUnitType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CurrencyUnitType> Function()>>('UA_CurrencyUnitType_new');
  late final _UA_CurrencyUnitType_new =
      _UA_CurrencyUnitType_newPtr.asFunction<ffi.Pointer<UA_CurrencyUnitType> Function()>();

  int UA_CurrencyUnitType_copy(
    ffi.Pointer<UA_CurrencyUnitType> src,
    ffi.Pointer<UA_CurrencyUnitType> dst,
  ) {
    return _UA_CurrencyUnitType_copy(
      src,
      dst,
    );
  }

  late final _UA_CurrencyUnitType_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CurrencyUnitType>, ffi.Pointer<UA_CurrencyUnitType>)>>(
      'UA_CurrencyUnitType_copy');
  late final _UA_CurrencyUnitType_copy = _UA_CurrencyUnitType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CurrencyUnitType>, ffi.Pointer<UA_CurrencyUnitType>)>();

  void UA_CurrencyUnitType_clear(
    ffi.Pointer<UA_CurrencyUnitType> p,
  ) {
    return _UA_CurrencyUnitType_clear(
      p,
    );
  }

  late final _UA_CurrencyUnitType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CurrencyUnitType>)>>('UA_CurrencyUnitType_clear');
  late final _UA_CurrencyUnitType_clear =
      _UA_CurrencyUnitType_clearPtr.asFunction<void Function(ffi.Pointer<UA_CurrencyUnitType>)>();

  void UA_CurrencyUnitType_delete(
    ffi.Pointer<UA_CurrencyUnitType> p,
  ) {
    return _UA_CurrencyUnitType_delete(
      p,
    );
  }

  late final _UA_CurrencyUnitType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CurrencyUnitType>)>>('UA_CurrencyUnitType_delete');
  late final _UA_CurrencyUnitType_delete =
      _UA_CurrencyUnitType_deletePtr.asFunction<void Function(ffi.Pointer<UA_CurrencyUnitType>)>();

  bool UA_CurrencyUnitType_equal(
    ffi.Pointer<UA_CurrencyUnitType> p1,
    ffi.Pointer<UA_CurrencyUnitType> p2,
  ) {
    return _UA_CurrencyUnitType_equal(
      p1,
      p2,
    );
  }

  late final _UA_CurrencyUnitType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CurrencyUnitType>, ffi.Pointer<UA_CurrencyUnitType>)>>(
      'UA_CurrencyUnitType_equal');
  late final _UA_CurrencyUnitType_equal = _UA_CurrencyUnitType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CurrencyUnitType>, ffi.Pointer<UA_CurrencyUnitType>)>();

  void UA_TrustListMasks_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TrustListMasks_init(
      p,
    );
  }

  late final _UA_TrustListMasks_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TrustListMasks_init');
  late final _UA_TrustListMasks_init =
      _UA_TrustListMasks_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TrustListMasks_new() {
    return _UA_TrustListMasks_new();
  }

  late final _UA_TrustListMasks_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TrustListMasks_new');
  late final _UA_TrustListMasks_new = _UA_TrustListMasks_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TrustListMasks_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TrustListMasks_copy(
      src,
      dst,
    );
  }

  late final _UA_TrustListMasks_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TrustListMasks_copy');
  late final _UA_TrustListMasks_copy =
      _UA_TrustListMasks_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TrustListMasks_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TrustListMasks_clear(
      p,
    );
  }

  late final _UA_TrustListMasks_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TrustListMasks_clear');
  late final _UA_TrustListMasks_clear =
      _UA_TrustListMasks_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TrustListMasks_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TrustListMasks_delete(
      p,
    );
  }

  late final _UA_TrustListMasks_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TrustListMasks_delete');
  late final _UA_TrustListMasks_delete =
      _UA_TrustListMasks_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TrustListMasks_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TrustListMasks_equal(
      p1,
      p2,
    );
  }

  late final _UA_TrustListMasks_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TrustListMasks_equal');
  late final _UA_TrustListMasks_equal = _UA_TrustListMasks_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TrustListDataType_init(
    ffi.Pointer<UA_TrustListDataType> p,
  ) {
    return _UA_TrustListDataType_init(
      p,
    );
  }

  late final _UA_TrustListDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_init');
  late final _UA_TrustListDataType_init =
      _UA_TrustListDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_TrustListDataType>)>();

  ffi.Pointer<UA_TrustListDataType> UA_TrustListDataType_new() {
    return _UA_TrustListDataType_new();
  }

  late final _UA_TrustListDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TrustListDataType> Function()>>('UA_TrustListDataType_new');
  late final _UA_TrustListDataType_new =
      _UA_TrustListDataType_newPtr.asFunction<ffi.Pointer<UA_TrustListDataType> Function()>();

  int UA_TrustListDataType_copy(
    ffi.Pointer<UA_TrustListDataType> src,
    ffi.Pointer<UA_TrustListDataType> dst,
  ) {
    return _UA_TrustListDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TrustListDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_copy');
  late final _UA_TrustListDataType_copy = _UA_TrustListDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>();

  void UA_TrustListDataType_clear(
    ffi.Pointer<UA_TrustListDataType> p,
  ) {
    return _UA_TrustListDataType_clear(
      p,
    );
  }

  late final _UA_TrustListDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_clear');
  late final _UA_TrustListDataType_clear =
      _UA_TrustListDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_TrustListDataType>)>();

  void UA_TrustListDataType_delete(
    ffi.Pointer<UA_TrustListDataType> p,
  ) {
    return _UA_TrustListDataType_delete(
      p,
    );
  }

  late final _UA_TrustListDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_delete');
  late final _UA_TrustListDataType_delete =
      _UA_TrustListDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_TrustListDataType>)>();

  bool UA_TrustListDataType_equal(
    ffi.Pointer<UA_TrustListDataType> p1,
    ffi.Pointer<UA_TrustListDataType> p2,
  ) {
    return _UA_TrustListDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_TrustListDataType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>>(
      'UA_TrustListDataType_equal');
  late final _UA_TrustListDataType_equal = _UA_TrustListDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>();

  void UA_DecimalDataType_init(
    ffi.Pointer<UA_DecimalDataType> p,
  ) {
    return _UA_DecimalDataType_init(
      p,
    );
  }

  late final _UA_DecimalDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalDataType>)>>('UA_DecimalDataType_init');
  late final _UA_DecimalDataType_init =
      _UA_DecimalDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_DecimalDataType>)>();

  ffi.Pointer<UA_DecimalDataType> UA_DecimalDataType_new() {
    return _UA_DecimalDataType_new();
  }

  late final _UA_DecimalDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DecimalDataType> Function()>>('UA_DecimalDataType_new');
  late final _UA_DecimalDataType_new =
      _UA_DecimalDataType_newPtr.asFunction<ffi.Pointer<UA_DecimalDataType> Function()>();

  int UA_DecimalDataType_copy(
    ffi.Pointer<UA_DecimalDataType> src,
    ffi.Pointer<UA_DecimalDataType> dst,
  ) {
    return _UA_DecimalDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DecimalDataType_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DecimalDataType>, ffi.Pointer<UA_DecimalDataType>)>>(
      'UA_DecimalDataType_copy');
  late final _UA_DecimalDataType_copy = _UA_DecimalDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DecimalDataType>, ffi.Pointer<UA_DecimalDataType>)>();

  void UA_DecimalDataType_clear(
    ffi.Pointer<UA_DecimalDataType> p,
  ) {
    return _UA_DecimalDataType_clear(
      p,
    );
  }

  late final _UA_DecimalDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalDataType>)>>('UA_DecimalDataType_clear');
  late final _UA_DecimalDataType_clear =
      _UA_DecimalDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_DecimalDataType>)>();

  void UA_DecimalDataType_delete(
    ffi.Pointer<UA_DecimalDataType> p,
  ) {
    return _UA_DecimalDataType_delete(
      p,
    );
  }

  late final _UA_DecimalDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalDataType>)>>('UA_DecimalDataType_delete');
  late final _UA_DecimalDataType_delete =
      _UA_DecimalDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_DecimalDataType>)>();

  bool UA_DecimalDataType_equal(
    ffi.Pointer<UA_DecimalDataType> p1,
    ffi.Pointer<UA_DecimalDataType> p2,
  ) {
    return _UA_DecimalDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DecimalDataType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DecimalDataType>, ffi.Pointer<UA_DecimalDataType>)>>(
          'UA_DecimalDataType_equal');
  late final _UA_DecimalDataType_equal = _UA_DecimalDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DecimalDataType>, ffi.Pointer<UA_DecimalDataType>)>();

  void UA_DataTypeDescription_init(
    ffi.Pointer<UA_DataTypeDescription> p,
  ) {
    return _UA_DataTypeDescription_init(
      p,
    );
  }

  late final _UA_DataTypeDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeDescription>)>>(
          'UA_DataTypeDescription_init');
  late final _UA_DataTypeDescription_init =
      _UA_DataTypeDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeDescription>)>();

  ffi.Pointer<UA_DataTypeDescription> UA_DataTypeDescription_new() {
    return _UA_DataTypeDescription_new();
  }

  late final _UA_DataTypeDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataTypeDescription> Function()>>('UA_DataTypeDescription_new');
  late final _UA_DataTypeDescription_new =
      _UA_DataTypeDescription_newPtr.asFunction<ffi.Pointer<UA_DataTypeDescription> Function()>();

  int UA_DataTypeDescription_copy(
    ffi.Pointer<UA_DataTypeDescription> src,
    ffi.Pointer<UA_DataTypeDescription> dst,
  ) {
    return _UA_DataTypeDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataTypeDescription>,
              ffi.Pointer<UA_DataTypeDescription>)>>('UA_DataTypeDescription_copy');
  late final _UA_DataTypeDescription_copy = _UA_DataTypeDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataTypeDescription>, ffi.Pointer<UA_DataTypeDescription>)>();

  void UA_DataTypeDescription_clear(
    ffi.Pointer<UA_DataTypeDescription> p,
  ) {
    return _UA_DataTypeDescription_clear(
      p,
    );
  }

  late final _UA_DataTypeDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeDescription>)>>(
          'UA_DataTypeDescription_clear');
  late final _UA_DataTypeDescription_clear =
      _UA_DataTypeDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeDescription>)>();

  void UA_DataTypeDescription_delete(
    ffi.Pointer<UA_DataTypeDescription> p,
  ) {
    return _UA_DataTypeDescription_delete(
      p,
    );
  }

  late final _UA_DataTypeDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeDescription>)>>(
          'UA_DataTypeDescription_delete');
  late final _UA_DataTypeDescription_delete =
      _UA_DataTypeDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataTypeDescription>)>();

  bool UA_DataTypeDescription_equal(
    ffi.Pointer<UA_DataTypeDescription> p1,
    ffi.Pointer<UA_DataTypeDescription> p2,
  ) {
    return _UA_DataTypeDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataTypeDescription_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataTypeDescription>, ffi.Pointer<UA_DataTypeDescription>)>>(
      'UA_DataTypeDescription_equal');
  late final _UA_DataTypeDescription_equal = _UA_DataTypeDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataTypeDescription>, ffi.Pointer<UA_DataTypeDescription>)>();

  void UA_SimpleTypeDescription_init(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_init(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
          'UA_SimpleTypeDescription_init');
  late final _UA_SimpleTypeDescription_init =
      _UA_SimpleTypeDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  ffi.Pointer<UA_SimpleTypeDescription> UA_SimpleTypeDescription_new() {
    return _UA_SimpleTypeDescription_new();
  }

  late final _UA_SimpleTypeDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>>('UA_SimpleTypeDescription_new');
  late final _UA_SimpleTypeDescription_new =
      _UA_SimpleTypeDescription_newPtr.asFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>();

  int UA_SimpleTypeDescription_copy(
    ffi.Pointer<UA_SimpleTypeDescription> src,
    ffi.Pointer<UA_SimpleTypeDescription> dst,
  ) {
    return _UA_SimpleTypeDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleTypeDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SimpleTypeDescription>,
              ffi.Pointer<UA_SimpleTypeDescription>)>>('UA_SimpleTypeDescription_copy');
  late final _UA_SimpleTypeDescription_copy = _UA_SimpleTypeDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SimpleTypeDescription>, ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_clear(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_clear(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
          'UA_SimpleTypeDescription_clear');
  late final _UA_SimpleTypeDescription_clear =
      _UA_SimpleTypeDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_delete(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_delete(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
          'UA_SimpleTypeDescription_delete');
  late final _UA_SimpleTypeDescription_delete =
      _UA_SimpleTypeDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  bool UA_SimpleTypeDescription_equal(
    ffi.Pointer<UA_SimpleTypeDescription> p1,
    ffi.Pointer<UA_SimpleTypeDescription> p2,
  ) {
    return _UA_SimpleTypeDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_SimpleTypeDescription_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SimpleTypeDescription>,
              ffi.Pointer<UA_SimpleTypeDescription>)>>('UA_SimpleTypeDescription_equal');
  late final _UA_SimpleTypeDescription_equal = _UA_SimpleTypeDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SimpleTypeDescription>, ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_PortableQualifiedName_init(
    ffi.Pointer<UA_PortableQualifiedName> p,
  ) {
    return _UA_PortableQualifiedName_init(
      p,
    );
  }

  late final _UA_PortableQualifiedName_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableQualifiedName>)>>(
          'UA_PortableQualifiedName_init');
  late final _UA_PortableQualifiedName_init =
      _UA_PortableQualifiedName_initPtr.asFunction<void Function(ffi.Pointer<UA_PortableQualifiedName>)>();

  ffi.Pointer<UA_PortableQualifiedName> UA_PortableQualifiedName_new() {
    return _UA_PortableQualifiedName_new();
  }

  late final _UA_PortableQualifiedName_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PortableQualifiedName> Function()>>('UA_PortableQualifiedName_new');
  late final _UA_PortableQualifiedName_new =
      _UA_PortableQualifiedName_newPtr.asFunction<ffi.Pointer<UA_PortableQualifiedName> Function()>();

  int UA_PortableQualifiedName_copy(
    ffi.Pointer<UA_PortableQualifiedName> src,
    ffi.Pointer<UA_PortableQualifiedName> dst,
  ) {
    return _UA_PortableQualifiedName_copy(
      src,
      dst,
    );
  }

  late final _UA_PortableQualifiedName_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PortableQualifiedName>,
              ffi.Pointer<UA_PortableQualifiedName>)>>('UA_PortableQualifiedName_copy');
  late final _UA_PortableQualifiedName_copy = _UA_PortableQualifiedName_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PortableQualifiedName>, ffi.Pointer<UA_PortableQualifiedName>)>();

  void UA_PortableQualifiedName_clear(
    ffi.Pointer<UA_PortableQualifiedName> p,
  ) {
    return _UA_PortableQualifiedName_clear(
      p,
    );
  }

  late final _UA_PortableQualifiedName_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableQualifiedName>)>>(
          'UA_PortableQualifiedName_clear');
  late final _UA_PortableQualifiedName_clear =
      _UA_PortableQualifiedName_clearPtr.asFunction<void Function(ffi.Pointer<UA_PortableQualifiedName>)>();

  void UA_PortableQualifiedName_delete(
    ffi.Pointer<UA_PortableQualifiedName> p,
  ) {
    return _UA_PortableQualifiedName_delete(
      p,
    );
  }

  late final _UA_PortableQualifiedName_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableQualifiedName>)>>(
          'UA_PortableQualifiedName_delete');
  late final _UA_PortableQualifiedName_delete =
      _UA_PortableQualifiedName_deletePtr.asFunction<void Function(ffi.Pointer<UA_PortableQualifiedName>)>();

  bool UA_PortableQualifiedName_equal(
    ffi.Pointer<UA_PortableQualifiedName> p1,
    ffi.Pointer<UA_PortableQualifiedName> p2,
  ) {
    return _UA_PortableQualifiedName_equal(
      p1,
      p2,
    );
  }

  late final _UA_PortableQualifiedName_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PortableQualifiedName>,
              ffi.Pointer<UA_PortableQualifiedName>)>>('UA_PortableQualifiedName_equal');
  late final _UA_PortableQualifiedName_equal = _UA_PortableQualifiedName_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PortableQualifiedName>, ffi.Pointer<UA_PortableQualifiedName>)>();

  void UA_PortableNodeId_init(
    ffi.Pointer<UA_PortableNodeId> p,
  ) {
    return _UA_PortableNodeId_init(
      p,
    );
  }

  late final _UA_PortableNodeId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableNodeId>)>>('UA_PortableNodeId_init');
  late final _UA_PortableNodeId_init =
      _UA_PortableNodeId_initPtr.asFunction<void Function(ffi.Pointer<UA_PortableNodeId>)>();

  ffi.Pointer<UA_PortableNodeId> UA_PortableNodeId_new() {
    return _UA_PortableNodeId_new();
  }

  late final _UA_PortableNodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PortableNodeId> Function()>>('UA_PortableNodeId_new');
  late final _UA_PortableNodeId_new = _UA_PortableNodeId_newPtr.asFunction<ffi.Pointer<UA_PortableNodeId> Function()>();

  int UA_PortableNodeId_copy(
    ffi.Pointer<UA_PortableNodeId> src,
    ffi.Pointer<UA_PortableNodeId> dst,
  ) {
    return _UA_PortableNodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_PortableNodeId_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PortableNodeId>, ffi.Pointer<UA_PortableNodeId>)>>(
      'UA_PortableNodeId_copy');
  late final _UA_PortableNodeId_copy = _UA_PortableNodeId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PortableNodeId>, ffi.Pointer<UA_PortableNodeId>)>();

  void UA_PortableNodeId_clear(
    ffi.Pointer<UA_PortableNodeId> p,
  ) {
    return _UA_PortableNodeId_clear(
      p,
    );
  }

  late final _UA_PortableNodeId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableNodeId>)>>('UA_PortableNodeId_clear');
  late final _UA_PortableNodeId_clear =
      _UA_PortableNodeId_clearPtr.asFunction<void Function(ffi.Pointer<UA_PortableNodeId>)>();

  void UA_PortableNodeId_delete(
    ffi.Pointer<UA_PortableNodeId> p,
  ) {
    return _UA_PortableNodeId_delete(
      p,
    );
  }

  late final _UA_PortableNodeId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PortableNodeId>)>>('UA_PortableNodeId_delete');
  late final _UA_PortableNodeId_delete =
      _UA_PortableNodeId_deletePtr.asFunction<void Function(ffi.Pointer<UA_PortableNodeId>)>();

  bool UA_PortableNodeId_equal(
    ffi.Pointer<UA_PortableNodeId> p1,
    ffi.Pointer<UA_PortableNodeId> p2,
  ) {
    return _UA_PortableNodeId_equal(
      p1,
      p2,
    );
  }

  late final _UA_PortableNodeId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PortableNodeId>, ffi.Pointer<UA_PortableNodeId>)>>(
          'UA_PortableNodeId_equal');
  late final _UA_PortableNodeId_equal = _UA_PortableNodeId_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PortableNodeId>, ffi.Pointer<UA_PortableNodeId>)>();

  void UA_UnsignedRationalNumber_init(
    ffi.Pointer<UA_UnsignedRationalNumber> p,
  ) {
    return _UA_UnsignedRationalNumber_init(
      p,
    );
  }

  late final _UA_UnsignedRationalNumber_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>>(
          'UA_UnsignedRationalNumber_init');
  late final _UA_UnsignedRationalNumber_init =
      _UA_UnsignedRationalNumber_initPtr.asFunction<void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>();

  ffi.Pointer<UA_UnsignedRationalNumber> UA_UnsignedRationalNumber_new() {
    return _UA_UnsignedRationalNumber_new();
  }

  late final _UA_UnsignedRationalNumber_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UnsignedRationalNumber> Function()>>('UA_UnsignedRationalNumber_new');
  late final _UA_UnsignedRationalNumber_new =
      _UA_UnsignedRationalNumber_newPtr.asFunction<ffi.Pointer<UA_UnsignedRationalNumber> Function()>();

  int UA_UnsignedRationalNumber_copy(
    ffi.Pointer<UA_UnsignedRationalNumber> src,
    ffi.Pointer<UA_UnsignedRationalNumber> dst,
  ) {
    return _UA_UnsignedRationalNumber_copy(
      src,
      dst,
    );
  }

  late final _UA_UnsignedRationalNumber_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UnsignedRationalNumber>,
              ffi.Pointer<UA_UnsignedRationalNumber>)>>('UA_UnsignedRationalNumber_copy');
  late final _UA_UnsignedRationalNumber_copy = _UA_UnsignedRationalNumber_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UnsignedRationalNumber>, ffi.Pointer<UA_UnsignedRationalNumber>)>();

  void UA_UnsignedRationalNumber_clear(
    ffi.Pointer<UA_UnsignedRationalNumber> p,
  ) {
    return _UA_UnsignedRationalNumber_clear(
      p,
    );
  }

  late final _UA_UnsignedRationalNumber_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>>(
          'UA_UnsignedRationalNumber_clear');
  late final _UA_UnsignedRationalNumber_clear =
      _UA_UnsignedRationalNumber_clearPtr.asFunction<void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>();

  void UA_UnsignedRationalNumber_delete(
    ffi.Pointer<UA_UnsignedRationalNumber> p,
  ) {
    return _UA_UnsignedRationalNumber_delete(
      p,
    );
  }

  late final _UA_UnsignedRationalNumber_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>>(
          'UA_UnsignedRationalNumber_delete');
  late final _UA_UnsignedRationalNumber_delete =
      _UA_UnsignedRationalNumber_deletePtr.asFunction<void Function(ffi.Pointer<UA_UnsignedRationalNumber>)>();

  bool UA_UnsignedRationalNumber_equal(
    ffi.Pointer<UA_UnsignedRationalNumber> p1,
    ffi.Pointer<UA_UnsignedRationalNumber> p2,
  ) {
    return _UA_UnsignedRationalNumber_equal(
      p1,
      p2,
    );
  }

  late final _UA_UnsignedRationalNumber_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UnsignedRationalNumber>,
              ffi.Pointer<UA_UnsignedRationalNumber>)>>('UA_UnsignedRationalNumber_equal');
  late final _UA_UnsignedRationalNumber_equal = _UA_UnsignedRationalNumber_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UnsignedRationalNumber>, ffi.Pointer<UA_UnsignedRationalNumber>)>();

  void UA_PubSubState_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubState_init(
      p,
    );
  }

  late final _UA_PubSubState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PubSubState_init');
  late final _UA_PubSubState_init = _UA_PubSubState_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_PubSubState_new() {
    return _UA_PubSubState_new();
  }

  late final _UA_PubSubState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_PubSubState_new');
  late final _UA_PubSubState_new = _UA_PubSubState_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_PubSubState_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_PubSubState_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubState_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubState_copy');
  late final _UA_PubSubState_copy =
      _UA_PubSubState_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PubSubState_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubState_clear(
      p,
    );
  }

  late final _UA_PubSubState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PubSubState_clear');
  late final _UA_PubSubState_clear = _UA_PubSubState_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PubSubState_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubState_delete(
      p,
    );
  }

  late final _UA_PubSubState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PubSubState_delete');
  late final _UA_PubSubState_delete =
      _UA_PubSubState_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_PubSubState_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_PubSubState_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubState_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubState_equal');
  late final _UA_PubSubState_equal =
      _UA_PubSubState_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataSetFieldFlags_init(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_init(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_init');
  late final _UA_DataSetFieldFlags_init =
      _UA_DataSetFieldFlags_initPtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  ffi.Pointer<UA_DataSetFieldFlags> UA_DataSetFieldFlags_new() {
    return _UA_DataSetFieldFlags_new();
  }

  late final _UA_DataSetFieldFlags_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>>('UA_DataSetFieldFlags_new');
  late final _UA_DataSetFieldFlags_new =
      _UA_DataSetFieldFlags_newPtr.asFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>();

  int UA_DataSetFieldFlags_copy(
    ffi.Pointer<UA_DataSetFieldFlags> src,
    ffi.Pointer<UA_DataSetFieldFlags> dst,
  ) {
    return _UA_DataSetFieldFlags_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldFlags_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataSetFieldFlags>, ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_copy');
  late final _UA_DataSetFieldFlags_copy = _UA_DataSetFieldFlags_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetFieldFlags>, ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_clear(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_clear(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_clear');
  late final _UA_DataSetFieldFlags_clear =
      _UA_DataSetFieldFlags_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_delete(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_delete(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_delete');
  late final _UA_DataSetFieldFlags_delete =
      _UA_DataSetFieldFlags_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  bool UA_DataSetFieldFlags_equal(
    ffi.Pointer<UA_DataSetFieldFlags> p1,
    ffi.Pointer<UA_DataSetFieldFlags> p2,
  ) {
    return _UA_DataSetFieldFlags_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetFieldFlags_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataSetFieldFlags>, ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_equal');
  late final _UA_DataSetFieldFlags_equal = _UA_DataSetFieldFlags_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataSetFieldFlags>, ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_ConfigurationVersionDataType_init(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_init(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
          'UA_ConfigurationVersionDataType_init');
  late final _UA_ConfigurationVersionDataType_init = _UA_ConfigurationVersionDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  ffi.Pointer<UA_ConfigurationVersionDataType> UA_ConfigurationVersionDataType_new() {
    return _UA_ConfigurationVersionDataType_new();
  }

  late final _UA_ConfigurationVersionDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ConfigurationVersionDataType> Function()>>(
          'UA_ConfigurationVersionDataType_new');
  late final _UA_ConfigurationVersionDataType_new =
      _UA_ConfigurationVersionDataType_newPtr.asFunction<ffi.Pointer<UA_ConfigurationVersionDataType> Function()>();

  int UA_ConfigurationVersionDataType_copy(
    ffi.Pointer<UA_ConfigurationVersionDataType> src,
    ffi.Pointer<UA_ConfigurationVersionDataType> dst,
  ) {
    return _UA_ConfigurationVersionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ConfigurationVersionDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ConfigurationVersionDataType>,
              ffi.Pointer<UA_ConfigurationVersionDataType>)>>('UA_ConfigurationVersionDataType_copy');
  late final _UA_ConfigurationVersionDataType_copy = _UA_ConfigurationVersionDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ConfigurationVersionDataType>, ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_clear(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_clear(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
          'UA_ConfigurationVersionDataType_clear');
  late final _UA_ConfigurationVersionDataType_clear = _UA_ConfigurationVersionDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_delete(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_delete(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
          'UA_ConfigurationVersionDataType_delete');
  late final _UA_ConfigurationVersionDataType_delete = _UA_ConfigurationVersionDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  bool UA_ConfigurationVersionDataType_equal(
    ffi.Pointer<UA_ConfigurationVersionDataType> p1,
    ffi.Pointer<UA_ConfigurationVersionDataType> p2,
  ) {
    return _UA_ConfigurationVersionDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ConfigurationVersionDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ConfigurationVersionDataType>,
              ffi.Pointer<UA_ConfigurationVersionDataType>)>>('UA_ConfigurationVersionDataType_equal');
  late final _UA_ConfigurationVersionDataType_equal = _UA_ConfigurationVersionDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ConfigurationVersionDataType>, ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_PublishedVariableDataType_init(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_init(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
          'UA_PublishedVariableDataType_init');
  late final _UA_PublishedVariableDataType_init =
      _UA_PublishedVariableDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  ffi.Pointer<UA_PublishedVariableDataType> UA_PublishedVariableDataType_new() {
    return _UA_PublishedVariableDataType_new();
  }

  late final _UA_PublishedVariableDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishedVariableDataType> Function()>>(
          'UA_PublishedVariableDataType_new');
  late final _UA_PublishedVariableDataType_new =
      _UA_PublishedVariableDataType_newPtr.asFunction<ffi.Pointer<UA_PublishedVariableDataType> Function()>();

  int UA_PublishedVariableDataType_copy(
    ffi.Pointer<UA_PublishedVariableDataType> src,
    ffi.Pointer<UA_PublishedVariableDataType> dst,
  ) {
    return _UA_PublishedVariableDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedVariableDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishedVariableDataType>,
              ffi.Pointer<UA_PublishedVariableDataType>)>>('UA_PublishedVariableDataType_copy');
  late final _UA_PublishedVariableDataType_copy = _UA_PublishedVariableDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishedVariableDataType>, ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_clear(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_clear(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
          'UA_PublishedVariableDataType_clear');
  late final _UA_PublishedVariableDataType_clear =
      _UA_PublishedVariableDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_delete(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_delete(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
          'UA_PublishedVariableDataType_delete');
  late final _UA_PublishedVariableDataType_delete =
      _UA_PublishedVariableDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  bool UA_PublishedVariableDataType_equal(
    ffi.Pointer<UA_PublishedVariableDataType> p1,
    ffi.Pointer<UA_PublishedVariableDataType> p2,
  ) {
    return _UA_PublishedVariableDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishedVariableDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PublishedVariableDataType>,
              ffi.Pointer<UA_PublishedVariableDataType>)>>('UA_PublishedVariableDataType_equal');
  late final _UA_PublishedVariableDataType_equal = _UA_PublishedVariableDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishedVariableDataType>, ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedDataItemsDataType_init(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
          'UA_PublishedDataItemsDataType_init');
  late final _UA_PublishedDataItemsDataType_init =
      _UA_PublishedDataItemsDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  ffi.Pointer<UA_PublishedDataItemsDataType> UA_PublishedDataItemsDataType_new() {
    return _UA_PublishedDataItemsDataType_new();
  }

  late final _UA_PublishedDataItemsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishedDataItemsDataType> Function()>>(
          'UA_PublishedDataItemsDataType_new');
  late final _UA_PublishedDataItemsDataType_new =
      _UA_PublishedDataItemsDataType_newPtr.asFunction<ffi.Pointer<UA_PublishedDataItemsDataType> Function()>();

  int UA_PublishedDataItemsDataType_copy(
    ffi.Pointer<UA_PublishedDataItemsDataType> src,
    ffi.Pointer<UA_PublishedDataItemsDataType> dst,
  ) {
    return _UA_PublishedDataItemsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataItemsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
              ffi.Pointer<UA_PublishedDataItemsDataType>)>>('UA_PublishedDataItemsDataType_copy');
  late final _UA_PublishedDataItemsDataType_copy = _UA_PublishedDataItemsDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishedDataItemsDataType>, ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_clear(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
          'UA_PublishedDataItemsDataType_clear');
  late final _UA_PublishedDataItemsDataType_clear =
      _UA_PublishedDataItemsDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_delete(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
          'UA_PublishedDataItemsDataType_delete');
  late final _UA_PublishedDataItemsDataType_delete =
      _UA_PublishedDataItemsDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  bool UA_PublishedDataItemsDataType_equal(
    ffi.Pointer<UA_PublishedDataItemsDataType> p1,
    ffi.Pointer<UA_PublishedDataItemsDataType> p2,
  ) {
    return _UA_PublishedDataItemsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishedDataItemsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
              ffi.Pointer<UA_PublishedDataItemsDataType>)>>('UA_PublishedDataItemsDataType_equal');
  late final _UA_PublishedDataItemsDataType_equal = _UA_PublishedDataItemsDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishedDataItemsDataType>, ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataSetCustomSourceDataType_init(
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> p,
  ) {
    return _UA_PublishedDataSetCustomSourceDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataSetCustomSourceDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>>(
          'UA_PublishedDataSetCustomSourceDataType_init');
  late final _UA_PublishedDataSetCustomSourceDataType_init = _UA_PublishedDataSetCustomSourceDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>();

  ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> UA_PublishedDataSetCustomSourceDataType_new() {
    return _UA_PublishedDataSetCustomSourceDataType_new();
  }

  late final _UA_PublishedDataSetCustomSourceDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> Function()>>(
          'UA_PublishedDataSetCustomSourceDataType_new');
  late final _UA_PublishedDataSetCustomSourceDataType_new = _UA_PublishedDataSetCustomSourceDataType_newPtr.asFunction<
      ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> Function()>();

  int UA_PublishedDataSetCustomSourceDataType_copy(
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> src,
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> dst,
  ) {
    return _UA_PublishedDataSetCustomSourceDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataSetCustomSourceDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>,
              ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>>('UA_PublishedDataSetCustomSourceDataType_copy');
  late final _UA_PublishedDataSetCustomSourceDataType_copy =
      _UA_PublishedDataSetCustomSourceDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>,
              ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>();

  void UA_PublishedDataSetCustomSourceDataType_clear(
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> p,
  ) {
    return _UA_PublishedDataSetCustomSourceDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataSetCustomSourceDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>>(
          'UA_PublishedDataSetCustomSourceDataType_clear');
  late final _UA_PublishedDataSetCustomSourceDataType_clear = _UA_PublishedDataSetCustomSourceDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>();

  void UA_PublishedDataSetCustomSourceDataType_delete(
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> p,
  ) {
    return _UA_PublishedDataSetCustomSourceDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataSetCustomSourceDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>>(
          'UA_PublishedDataSetCustomSourceDataType_delete');
  late final _UA_PublishedDataSetCustomSourceDataType_delete = _UA_PublishedDataSetCustomSourceDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>();

  bool UA_PublishedDataSetCustomSourceDataType_equal(
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> p1,
    ffi.Pointer<UA_PublishedDataSetCustomSourceDataType> p2,
  ) {
    return _UA_PublishedDataSetCustomSourceDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishedDataSetCustomSourceDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>,
              ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>>('UA_PublishedDataSetCustomSourceDataType_equal');
  late final _UA_PublishedDataSetCustomSourceDataType_equal =
      _UA_PublishedDataSetCustomSourceDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>,
              ffi.Pointer<UA_PublishedDataSetCustomSourceDataType>)>();

  void UA_DataSetFieldContentMask_init(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_init(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
          'UA_DataSetFieldContentMask_init');
  late final _UA_DataSetFieldContentMask_init =
      _UA_DataSetFieldContentMask_initPtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  ffi.Pointer<UA_DataSetFieldContentMask> UA_DataSetFieldContentMask_new() {
    return _UA_DataSetFieldContentMask_new();
  }

  late final _UA_DataSetFieldContentMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetFieldContentMask> Function()>>('UA_DataSetFieldContentMask_new');
  late final _UA_DataSetFieldContentMask_new =
      _UA_DataSetFieldContentMask_newPtr.asFunction<ffi.Pointer<UA_DataSetFieldContentMask> Function()>();

  int UA_DataSetFieldContentMask_copy(
    ffi.Pointer<UA_DataSetFieldContentMask> src,
    ffi.Pointer<UA_DataSetFieldContentMask> dst,
  ) {
    return _UA_DataSetFieldContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldContentMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldContentMask>,
              ffi.Pointer<UA_DataSetFieldContentMask>)>>('UA_DataSetFieldContentMask_copy');
  late final _UA_DataSetFieldContentMask_copy = _UA_DataSetFieldContentMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetFieldContentMask>, ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_clear(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_clear(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
          'UA_DataSetFieldContentMask_clear');
  late final _UA_DataSetFieldContentMask_clear =
      _UA_DataSetFieldContentMask_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_delete(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_delete(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
          'UA_DataSetFieldContentMask_delete');
  late final _UA_DataSetFieldContentMask_delete =
      _UA_DataSetFieldContentMask_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  bool UA_DataSetFieldContentMask_equal(
    ffi.Pointer<UA_DataSetFieldContentMask> p1,
    ffi.Pointer<UA_DataSetFieldContentMask> p2,
  ) {
    return _UA_DataSetFieldContentMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetFieldContentMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataSetFieldContentMask>,
              ffi.Pointer<UA_DataSetFieldContentMask>)>>('UA_DataSetFieldContentMask_equal');
  late final _UA_DataSetFieldContentMask_equal = _UA_DataSetFieldContentMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataSetFieldContentMask>, ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetWriterDataType_init(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_init(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
          'UA_DataSetWriterDataType_init');
  late final _UA_DataSetWriterDataType_init =
      _UA_DataSetWriterDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  ffi.Pointer<UA_DataSetWriterDataType> UA_DataSetWriterDataType_new() {
    return _UA_DataSetWriterDataType_new();
  }

  late final _UA_DataSetWriterDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>>('UA_DataSetWriterDataType_new');
  late final _UA_DataSetWriterDataType_new =
      _UA_DataSetWriterDataType_newPtr.asFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>();

  int UA_DataSetWriterDataType_copy(
    ffi.Pointer<UA_DataSetWriterDataType> src,
    ffi.Pointer<UA_DataSetWriterDataType> dst,
  ) {
    return _UA_DataSetWriterDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetWriterDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetWriterDataType>,
              ffi.Pointer<UA_DataSetWriterDataType>)>>('UA_DataSetWriterDataType_copy');
  late final _UA_DataSetWriterDataType_copy = _UA_DataSetWriterDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetWriterDataType>, ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_clear(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_clear(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
          'UA_DataSetWriterDataType_clear');
  late final _UA_DataSetWriterDataType_clear =
      _UA_DataSetWriterDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_delete(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_delete(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
          'UA_DataSetWriterDataType_delete');
  late final _UA_DataSetWriterDataType_delete =
      _UA_DataSetWriterDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  bool UA_DataSetWriterDataType_equal(
    ffi.Pointer<UA_DataSetWriterDataType> p1,
    ffi.Pointer<UA_DataSetWriterDataType> p2,
  ) {
    return _UA_DataSetWriterDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetWriterDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataSetWriterDataType>,
              ffi.Pointer<UA_DataSetWriterDataType>)>>('UA_DataSetWriterDataType_equal');
  late final _UA_DataSetWriterDataType_equal = _UA_DataSetWriterDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataSetWriterDataType>, ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_NetworkAddressDataType_init(
    ffi.Pointer<UA_NetworkAddressDataType> p,
  ) {
    return _UA_NetworkAddressDataType_init(
      p,
    );
  }

  late final _UA_NetworkAddressDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressDataType>)>>(
          'UA_NetworkAddressDataType_init');
  late final _UA_NetworkAddressDataType_init =
      _UA_NetworkAddressDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressDataType>)>();

  ffi.Pointer<UA_NetworkAddressDataType> UA_NetworkAddressDataType_new() {
    return _UA_NetworkAddressDataType_new();
  }

  late final _UA_NetworkAddressDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NetworkAddressDataType> Function()>>('UA_NetworkAddressDataType_new');
  late final _UA_NetworkAddressDataType_new =
      _UA_NetworkAddressDataType_newPtr.asFunction<ffi.Pointer<UA_NetworkAddressDataType> Function()>();

  int UA_NetworkAddressDataType_copy(
    ffi.Pointer<UA_NetworkAddressDataType> src,
    ffi.Pointer<UA_NetworkAddressDataType> dst,
  ) {
    return _UA_NetworkAddressDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_NetworkAddressDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NetworkAddressDataType>,
              ffi.Pointer<UA_NetworkAddressDataType>)>>('UA_NetworkAddressDataType_copy');
  late final _UA_NetworkAddressDataType_copy = _UA_NetworkAddressDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkAddressDataType>, ffi.Pointer<UA_NetworkAddressDataType>)>();

  void UA_NetworkAddressDataType_clear(
    ffi.Pointer<UA_NetworkAddressDataType> p,
  ) {
    return _UA_NetworkAddressDataType_clear(
      p,
    );
  }

  late final _UA_NetworkAddressDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressDataType>)>>(
          'UA_NetworkAddressDataType_clear');
  late final _UA_NetworkAddressDataType_clear =
      _UA_NetworkAddressDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressDataType>)>();

  void UA_NetworkAddressDataType_delete(
    ffi.Pointer<UA_NetworkAddressDataType> p,
  ) {
    return _UA_NetworkAddressDataType_delete(
      p,
    );
  }

  late final _UA_NetworkAddressDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressDataType>)>>(
          'UA_NetworkAddressDataType_delete');
  late final _UA_NetworkAddressDataType_delete =
      _UA_NetworkAddressDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressDataType>)>();

  bool UA_NetworkAddressDataType_equal(
    ffi.Pointer<UA_NetworkAddressDataType> p1,
    ffi.Pointer<UA_NetworkAddressDataType> p2,
  ) {
    return _UA_NetworkAddressDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_NetworkAddressDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_NetworkAddressDataType>,
              ffi.Pointer<UA_NetworkAddressDataType>)>>('UA_NetworkAddressDataType_equal');
  late final _UA_NetworkAddressDataType_equal = _UA_NetworkAddressDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NetworkAddressDataType>, ffi.Pointer<UA_NetworkAddressDataType>)>();

  void UA_NetworkAddressUrlDataType_init(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_init(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
          'UA_NetworkAddressUrlDataType_init');
  late final _UA_NetworkAddressUrlDataType_init =
      _UA_NetworkAddressUrlDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  ffi.Pointer<UA_NetworkAddressUrlDataType> UA_NetworkAddressUrlDataType_new() {
    return _UA_NetworkAddressUrlDataType_new();
  }

  late final _UA_NetworkAddressUrlDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NetworkAddressUrlDataType> Function()>>(
          'UA_NetworkAddressUrlDataType_new');
  late final _UA_NetworkAddressUrlDataType_new =
      _UA_NetworkAddressUrlDataType_newPtr.asFunction<ffi.Pointer<UA_NetworkAddressUrlDataType> Function()>();

  int UA_NetworkAddressUrlDataType_copy(
    ffi.Pointer<UA_NetworkAddressUrlDataType> src,
    ffi.Pointer<UA_NetworkAddressUrlDataType> dst,
  ) {
    return _UA_NetworkAddressUrlDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_NetworkAddressUrlDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
              ffi.Pointer<UA_NetworkAddressUrlDataType>)>>('UA_NetworkAddressUrlDataType_copy');
  late final _UA_NetworkAddressUrlDataType_copy = _UA_NetworkAddressUrlDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkAddressUrlDataType>, ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_clear(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_clear(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
          'UA_NetworkAddressUrlDataType_clear');
  late final _UA_NetworkAddressUrlDataType_clear =
      _UA_NetworkAddressUrlDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_delete(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_delete(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
          'UA_NetworkAddressUrlDataType_delete');
  late final _UA_NetworkAddressUrlDataType_delete =
      _UA_NetworkAddressUrlDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  bool UA_NetworkAddressUrlDataType_equal(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p1,
    ffi.Pointer<UA_NetworkAddressUrlDataType> p2,
  ) {
    return _UA_NetworkAddressUrlDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_NetworkAddressUrlDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
              ffi.Pointer<UA_NetworkAddressUrlDataType>)>>('UA_NetworkAddressUrlDataType_equal');
  late final _UA_NetworkAddressUrlDataType_equal = _UA_NetworkAddressUrlDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NetworkAddressUrlDataType>, ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_OverrideValueHandling_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OverrideValueHandling_init(
      p,
    );
  }

  late final _UA_OverrideValueHandling_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OverrideValueHandling_init');
  late final _UA_OverrideValueHandling_init =
      _UA_OverrideValueHandling_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_OverrideValueHandling_new() {
    return _UA_OverrideValueHandling_new();
  }

  late final _UA_OverrideValueHandling_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_OverrideValueHandling_new');
  late final _UA_OverrideValueHandling_new =
      _UA_OverrideValueHandling_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_OverrideValueHandling_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_OverrideValueHandling_copy(
      src,
      dst,
    );
  }

  late final _UA_OverrideValueHandling_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_OverrideValueHandling_copy');
  late final _UA_OverrideValueHandling_copy = _UA_OverrideValueHandling_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_OverrideValueHandling_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OverrideValueHandling_clear(
      p,
    );
  }

  late final _UA_OverrideValueHandling_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OverrideValueHandling_clear');
  late final _UA_OverrideValueHandling_clear =
      _UA_OverrideValueHandling_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_OverrideValueHandling_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_OverrideValueHandling_delete(
      p,
    );
  }

  late final _UA_OverrideValueHandling_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_OverrideValueHandling_delete');
  late final _UA_OverrideValueHandling_delete =
      _UA_OverrideValueHandling_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_OverrideValueHandling_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_OverrideValueHandling_equal(
      p1,
      p2,
    );
  }

  late final _UA_OverrideValueHandling_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_OverrideValueHandling_equal');
  late final _UA_OverrideValueHandling_equal = _UA_OverrideValueHandling_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_StandaloneSubscribedDataSetRefDataType_init(
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetRefDataType_init(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>>(
          'UA_StandaloneSubscribedDataSetRefDataType_init');
  late final _UA_StandaloneSubscribedDataSetRefDataType_init = _UA_StandaloneSubscribedDataSetRefDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>();

  ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> UA_StandaloneSubscribedDataSetRefDataType_new() {
    return _UA_StandaloneSubscribedDataSetRefDataType_new();
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> Function()>>(
          'UA_StandaloneSubscribedDataSetRefDataType_new');
  late final _UA_StandaloneSubscribedDataSetRefDataType_new = _UA_StandaloneSubscribedDataSetRefDataType_newPtr
      .asFunction<ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> Function()>();

  int UA_StandaloneSubscribedDataSetRefDataType_copy(
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> src,
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> dst,
  ) {
    return _UA_StandaloneSubscribedDataSetRefDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>,
                  ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>>(
      'UA_StandaloneSubscribedDataSetRefDataType_copy');
  late final _UA_StandaloneSubscribedDataSetRefDataType_copy =
      _UA_StandaloneSubscribedDataSetRefDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>,
              ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>();

  void UA_StandaloneSubscribedDataSetRefDataType_clear(
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetRefDataType_clear(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>>(
          'UA_StandaloneSubscribedDataSetRefDataType_clear');
  late final _UA_StandaloneSubscribedDataSetRefDataType_clear = _UA_StandaloneSubscribedDataSetRefDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>();

  void UA_StandaloneSubscribedDataSetRefDataType_delete(
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetRefDataType_delete(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>>(
          'UA_StandaloneSubscribedDataSetRefDataType_delete');
  late final _UA_StandaloneSubscribedDataSetRefDataType_delete = _UA_StandaloneSubscribedDataSetRefDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>();

  bool UA_StandaloneSubscribedDataSetRefDataType_equal(
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> p1,
    ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType> p2,
  ) {
    return _UA_StandaloneSubscribedDataSetRefDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_StandaloneSubscribedDataSetRefDataType_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>,
                  ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>>(
      'UA_StandaloneSubscribedDataSetRefDataType_equal');
  late final _UA_StandaloneSubscribedDataSetRefDataType_equal =
      _UA_StandaloneSubscribedDataSetRefDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>,
              ffi.Pointer<UA_StandaloneSubscribedDataSetRefDataType>)>();

  void UA_DataSetOrderingType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataSetOrderingType_init(
      p,
    );
  }

  late final _UA_DataSetOrderingType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataSetOrderingType_init');
  late final _UA_DataSetOrderingType_init =
      _UA_DataSetOrderingType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_DataSetOrderingType_new() {
    return _UA_DataSetOrderingType_new();
  }

  late final _UA_DataSetOrderingType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_DataSetOrderingType_new');
  late final _UA_DataSetOrderingType_new =
      _UA_DataSetOrderingType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_DataSetOrderingType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_DataSetOrderingType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetOrderingType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DataSetOrderingType_copy');
  late final _UA_DataSetOrderingType_copy = _UA_DataSetOrderingType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataSetOrderingType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataSetOrderingType_clear(
      p,
    );
  }

  late final _UA_DataSetOrderingType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataSetOrderingType_clear');
  late final _UA_DataSetOrderingType_clear =
      _UA_DataSetOrderingType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataSetOrderingType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataSetOrderingType_delete(
      p,
    );
  }

  late final _UA_DataSetOrderingType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataSetOrderingType_delete');
  late final _UA_DataSetOrderingType_delete =
      _UA_DataSetOrderingType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_DataSetOrderingType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_DataSetOrderingType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetOrderingType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DataSetOrderingType_equal');
  late final _UA_DataSetOrderingType_equal = _UA_DataSetOrderingType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UadpNetworkMessageContentMask_init(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
          'UA_UadpNetworkMessageContentMask_init');
  late final _UA_UadpNetworkMessageContentMask_init = _UA_UadpNetworkMessageContentMask_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  ffi.Pointer<UA_UadpNetworkMessageContentMask> UA_UadpNetworkMessageContentMask_new() {
    return _UA_UadpNetworkMessageContentMask_new();
  }

  late final _UA_UadpNetworkMessageContentMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UadpNetworkMessageContentMask> Function()>>(
          'UA_UadpNetworkMessageContentMask_new');
  late final _UA_UadpNetworkMessageContentMask_new =
      _UA_UadpNetworkMessageContentMask_newPtr.asFunction<ffi.Pointer<UA_UadpNetworkMessageContentMask> Function()>();

  int UA_UadpNetworkMessageContentMask_copy(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> src,
    ffi.Pointer<UA_UadpNetworkMessageContentMask> dst,
  ) {
    return _UA_UadpNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>,
              ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>('UA_UadpNetworkMessageContentMask_copy');
  late final _UA_UadpNetworkMessageContentMask_copy = _UA_UadpNetworkMessageContentMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>, ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_clear(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
          'UA_UadpNetworkMessageContentMask_clear');
  late final _UA_UadpNetworkMessageContentMask_clear = _UA_UadpNetworkMessageContentMask_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_delete(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
          'UA_UadpNetworkMessageContentMask_delete');
  late final _UA_UadpNetworkMessageContentMask_delete = _UA_UadpNetworkMessageContentMask_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  bool UA_UadpNetworkMessageContentMask_equal(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p1,
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p2,
  ) {
    return _UA_UadpNetworkMessageContentMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>,
              ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>('UA_UadpNetworkMessageContentMask_equal');
  late final _UA_UadpNetworkMessageContentMask_equal = _UA_UadpNetworkMessageContentMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>, ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpWriterGroupMessageDataType_init(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
          'UA_UadpWriterGroupMessageDataType_init');
  late final _UA_UadpWriterGroupMessageDataType_init = _UA_UadpWriterGroupMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_UadpWriterGroupMessageDataType> UA_UadpWriterGroupMessageDataType_new() {
    return _UA_UadpWriterGroupMessageDataType_new();
  }

  late final _UA_UadpWriterGroupMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UadpWriterGroupMessageDataType> Function()>>(
          'UA_UadpWriterGroupMessageDataType_new');
  late final _UA_UadpWriterGroupMessageDataType_new =
      _UA_UadpWriterGroupMessageDataType_newPtr.asFunction<ffi.Pointer<UA_UadpWriterGroupMessageDataType> Function()>();

  int UA_UadpWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> src,
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> dst,
  ) {
    return _UA_UadpWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
              ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>('UA_UadpWriterGroupMessageDataType_copy');
  late final _UA_UadpWriterGroupMessageDataType_copy = _UA_UadpWriterGroupMessageDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>, ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
          'UA_UadpWriterGroupMessageDataType_clear');
  late final _UA_UadpWriterGroupMessageDataType_clear = _UA_UadpWriterGroupMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
          'UA_UadpWriterGroupMessageDataType_delete');
  late final _UA_UadpWriterGroupMessageDataType_delete = _UA_UadpWriterGroupMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  bool UA_UadpWriterGroupMessageDataType_equal(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p1,
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p2,
  ) {
    return _UA_UadpWriterGroupMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
              ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>('UA_UadpWriterGroupMessageDataType_equal');
  late final _UA_UadpWriterGroupMessageDataType_equal = _UA_UadpWriterGroupMessageDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>, ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpDataSetMessageContentMask_init(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
          'UA_UadpDataSetMessageContentMask_init');
  late final _UA_UadpDataSetMessageContentMask_init = _UA_UadpDataSetMessageContentMask_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  ffi.Pointer<UA_UadpDataSetMessageContentMask> UA_UadpDataSetMessageContentMask_new() {
    return _UA_UadpDataSetMessageContentMask_new();
  }

  late final _UA_UadpDataSetMessageContentMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UadpDataSetMessageContentMask> Function()>>(
          'UA_UadpDataSetMessageContentMask_new');
  late final _UA_UadpDataSetMessageContentMask_new =
      _UA_UadpDataSetMessageContentMask_newPtr.asFunction<ffi.Pointer<UA_UadpDataSetMessageContentMask> Function()>();

  int UA_UadpDataSetMessageContentMask_copy(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> src,
    ffi.Pointer<UA_UadpDataSetMessageContentMask> dst,
  ) {
    return _UA_UadpDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>,
              ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>('UA_UadpDataSetMessageContentMask_copy');
  late final _UA_UadpDataSetMessageContentMask_copy = _UA_UadpDataSetMessageContentMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>, ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_clear(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
          'UA_UadpDataSetMessageContentMask_clear');
  late final _UA_UadpDataSetMessageContentMask_clear = _UA_UadpDataSetMessageContentMask_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_delete(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
          'UA_UadpDataSetMessageContentMask_delete');
  late final _UA_UadpDataSetMessageContentMask_delete = _UA_UadpDataSetMessageContentMask_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  bool UA_UadpDataSetMessageContentMask_equal(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p1,
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p2,
  ) {
    return _UA_UadpDataSetMessageContentMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>,
              ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>('UA_UadpDataSetMessageContentMask_equal');
  late final _UA_UadpDataSetMessageContentMask_equal = _UA_UadpDataSetMessageContentMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>, ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
          'UA_UadpDataSetWriterMessageDataType_init');
  late final _UA_UadpDataSetWriterMessageDataType_init = _UA_UadpDataSetWriterMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetWriterMessageDataType> UA_UadpDataSetWriterMessageDataType_new() {
    return _UA_UadpDataSetWriterMessageDataType_new();
  }

  late final _UA_UadpDataSetWriterMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UadpDataSetWriterMessageDataType> Function()>>(
          'UA_UadpDataSetWriterMessageDataType_new');
  late final _UA_UadpDataSetWriterMessageDataType_new = _UA_UadpDataSetWriterMessageDataType_newPtr.asFunction<
      ffi.Pointer<UA_UadpDataSetWriterMessageDataType> Function()>();

  int UA_UadpDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> dst,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
              ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>('UA_UadpDataSetWriterMessageDataType_copy');
  late final _UA_UadpDataSetWriterMessageDataType_copy = _UA_UadpDataSetWriterMessageDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType>, ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
          'UA_UadpDataSetWriterMessageDataType_clear');
  late final _UA_UadpDataSetWriterMessageDataType_clear = _UA_UadpDataSetWriterMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
          'UA_UadpDataSetWriterMessageDataType_delete');
  late final _UA_UadpDataSetWriterMessageDataType_delete = _UA_UadpDataSetWriterMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  bool UA_UadpDataSetWriterMessageDataType_equal(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p1,
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p2,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
              ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>('UA_UadpDataSetWriterMessageDataType_equal');
  late final _UA_UadpDataSetWriterMessageDataType_equal = _UA_UadpDataSetWriterMessageDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType>, ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
          'UA_UadpDataSetReaderMessageDataType_init');
  late final _UA_UadpDataSetReaderMessageDataType_init = _UA_UadpDataSetReaderMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetReaderMessageDataType> UA_UadpDataSetReaderMessageDataType_new() {
    return _UA_UadpDataSetReaderMessageDataType_new();
  }

  late final _UA_UadpDataSetReaderMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UadpDataSetReaderMessageDataType> Function()>>(
          'UA_UadpDataSetReaderMessageDataType_new');
  late final _UA_UadpDataSetReaderMessageDataType_new = _UA_UadpDataSetReaderMessageDataType_newPtr.asFunction<
      ffi.Pointer<UA_UadpDataSetReaderMessageDataType> Function()>();

  int UA_UadpDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> dst,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
              ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>('UA_UadpDataSetReaderMessageDataType_copy');
  late final _UA_UadpDataSetReaderMessageDataType_copy = _UA_UadpDataSetReaderMessageDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType>, ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
          'UA_UadpDataSetReaderMessageDataType_clear');
  late final _UA_UadpDataSetReaderMessageDataType_clear = _UA_UadpDataSetReaderMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
          'UA_UadpDataSetReaderMessageDataType_delete');
  late final _UA_UadpDataSetReaderMessageDataType_delete = _UA_UadpDataSetReaderMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  bool UA_UadpDataSetReaderMessageDataType_equal(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p1,
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p2,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
              ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>('UA_UadpDataSetReaderMessageDataType_equal');
  late final _UA_UadpDataSetReaderMessageDataType_equal = _UA_UadpDataSetReaderMessageDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType>, ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_JsonNetworkMessageContentMask_init(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
          'UA_JsonNetworkMessageContentMask_init');
  late final _UA_JsonNetworkMessageContentMask_init = _UA_JsonNetworkMessageContentMask_initPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  ffi.Pointer<UA_JsonNetworkMessageContentMask> UA_JsonNetworkMessageContentMask_new() {
    return _UA_JsonNetworkMessageContentMask_new();
  }

  late final _UA_JsonNetworkMessageContentMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_JsonNetworkMessageContentMask> Function()>>(
          'UA_JsonNetworkMessageContentMask_new');
  late final _UA_JsonNetworkMessageContentMask_new =
      _UA_JsonNetworkMessageContentMask_newPtr.asFunction<ffi.Pointer<UA_JsonNetworkMessageContentMask> Function()>();

  int UA_JsonNetworkMessageContentMask_copy(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> src,
    ffi.Pointer<UA_JsonNetworkMessageContentMask> dst,
  ) {
    return _UA_JsonNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>,
              ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>('UA_JsonNetworkMessageContentMask_copy');
  late final _UA_JsonNetworkMessageContentMask_copy = _UA_JsonNetworkMessageContentMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>, ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_clear(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
          'UA_JsonNetworkMessageContentMask_clear');
  late final _UA_JsonNetworkMessageContentMask_clear = _UA_JsonNetworkMessageContentMask_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_delete(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
          'UA_JsonNetworkMessageContentMask_delete');
  late final _UA_JsonNetworkMessageContentMask_delete = _UA_JsonNetworkMessageContentMask_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  bool UA_JsonNetworkMessageContentMask_equal(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p1,
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p2,
  ) {
    return _UA_JsonNetworkMessageContentMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>,
              ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>('UA_JsonNetworkMessageContentMask_equal');
  late final _UA_JsonNetworkMessageContentMask_equal = _UA_JsonNetworkMessageContentMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>, ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonWriterGroupMessageDataType_init(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
          'UA_JsonWriterGroupMessageDataType_init');
  late final _UA_JsonWriterGroupMessageDataType_init = _UA_JsonWriterGroupMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_JsonWriterGroupMessageDataType> UA_JsonWriterGroupMessageDataType_new() {
    return _UA_JsonWriterGroupMessageDataType_new();
  }

  late final _UA_JsonWriterGroupMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_JsonWriterGroupMessageDataType> Function()>>(
          'UA_JsonWriterGroupMessageDataType_new');
  late final _UA_JsonWriterGroupMessageDataType_new =
      _UA_JsonWriterGroupMessageDataType_newPtr.asFunction<ffi.Pointer<UA_JsonWriterGroupMessageDataType> Function()>();

  int UA_JsonWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> src,
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> dst,
  ) {
    return _UA_JsonWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
              ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>('UA_JsonWriterGroupMessageDataType_copy');
  late final _UA_JsonWriterGroupMessageDataType_copy = _UA_JsonWriterGroupMessageDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>, ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
          'UA_JsonWriterGroupMessageDataType_clear');
  late final _UA_JsonWriterGroupMessageDataType_clear = _UA_JsonWriterGroupMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
          'UA_JsonWriterGroupMessageDataType_delete');
  late final _UA_JsonWriterGroupMessageDataType_delete = _UA_JsonWriterGroupMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  bool UA_JsonWriterGroupMessageDataType_equal(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p1,
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p2,
  ) {
    return _UA_JsonWriterGroupMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
              ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>('UA_JsonWriterGroupMessageDataType_equal');
  late final _UA_JsonWriterGroupMessageDataType_equal = _UA_JsonWriterGroupMessageDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>, ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonDataSetMessageContentMask_init(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
          'UA_JsonDataSetMessageContentMask_init');
  late final _UA_JsonDataSetMessageContentMask_init = _UA_JsonDataSetMessageContentMask_initPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  ffi.Pointer<UA_JsonDataSetMessageContentMask> UA_JsonDataSetMessageContentMask_new() {
    return _UA_JsonDataSetMessageContentMask_new();
  }

  late final _UA_JsonDataSetMessageContentMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_JsonDataSetMessageContentMask> Function()>>(
          'UA_JsonDataSetMessageContentMask_new');
  late final _UA_JsonDataSetMessageContentMask_new =
      _UA_JsonDataSetMessageContentMask_newPtr.asFunction<ffi.Pointer<UA_JsonDataSetMessageContentMask> Function()>();

  int UA_JsonDataSetMessageContentMask_copy(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> src,
    ffi.Pointer<UA_JsonDataSetMessageContentMask> dst,
  ) {
    return _UA_JsonDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>,
              ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>('UA_JsonDataSetMessageContentMask_copy');
  late final _UA_JsonDataSetMessageContentMask_copy = _UA_JsonDataSetMessageContentMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>, ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_clear(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
          'UA_JsonDataSetMessageContentMask_clear');
  late final _UA_JsonDataSetMessageContentMask_clear = _UA_JsonDataSetMessageContentMask_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_delete(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
          'UA_JsonDataSetMessageContentMask_delete');
  late final _UA_JsonDataSetMessageContentMask_delete = _UA_JsonDataSetMessageContentMask_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  bool UA_JsonDataSetMessageContentMask_equal(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p1,
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p2,
  ) {
    return _UA_JsonDataSetMessageContentMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>,
              ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>('UA_JsonDataSetMessageContentMask_equal');
  late final _UA_JsonDataSetMessageContentMask_equal = _UA_JsonDataSetMessageContentMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>, ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
          'UA_JsonDataSetWriterMessageDataType_init');
  late final _UA_JsonDataSetWriterMessageDataType_init = _UA_JsonDataSetWriterMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetWriterMessageDataType> UA_JsonDataSetWriterMessageDataType_new() {
    return _UA_JsonDataSetWriterMessageDataType_new();
  }

  late final _UA_JsonDataSetWriterMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_JsonDataSetWriterMessageDataType> Function()>>(
          'UA_JsonDataSetWriterMessageDataType_new');
  late final _UA_JsonDataSetWriterMessageDataType_new = _UA_JsonDataSetWriterMessageDataType_newPtr.asFunction<
      ffi.Pointer<UA_JsonDataSetWriterMessageDataType> Function()>();

  int UA_JsonDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> dst,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
              ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>('UA_JsonDataSetWriterMessageDataType_copy');
  late final _UA_JsonDataSetWriterMessageDataType_copy = _UA_JsonDataSetWriterMessageDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType>, ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
          'UA_JsonDataSetWriterMessageDataType_clear');
  late final _UA_JsonDataSetWriterMessageDataType_clear = _UA_JsonDataSetWriterMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
          'UA_JsonDataSetWriterMessageDataType_delete');
  late final _UA_JsonDataSetWriterMessageDataType_delete = _UA_JsonDataSetWriterMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  bool UA_JsonDataSetWriterMessageDataType_equal(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p1,
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p2,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
              ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>('UA_JsonDataSetWriterMessageDataType_equal');
  late final _UA_JsonDataSetWriterMessageDataType_equal = _UA_JsonDataSetWriterMessageDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType>, ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
          'UA_JsonDataSetReaderMessageDataType_init');
  late final _UA_JsonDataSetReaderMessageDataType_init = _UA_JsonDataSetReaderMessageDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetReaderMessageDataType> UA_JsonDataSetReaderMessageDataType_new() {
    return _UA_JsonDataSetReaderMessageDataType_new();
  }

  late final _UA_JsonDataSetReaderMessageDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_JsonDataSetReaderMessageDataType> Function()>>(
          'UA_JsonDataSetReaderMessageDataType_new');
  late final _UA_JsonDataSetReaderMessageDataType_new = _UA_JsonDataSetReaderMessageDataType_newPtr.asFunction<
      ffi.Pointer<UA_JsonDataSetReaderMessageDataType> Function()>();

  int UA_JsonDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> dst,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
              ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>('UA_JsonDataSetReaderMessageDataType_copy');
  late final _UA_JsonDataSetReaderMessageDataType_copy = _UA_JsonDataSetReaderMessageDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType>, ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
          'UA_JsonDataSetReaderMessageDataType_clear');
  late final _UA_JsonDataSetReaderMessageDataType_clear = _UA_JsonDataSetReaderMessageDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
          'UA_JsonDataSetReaderMessageDataType_delete');
  late final _UA_JsonDataSetReaderMessageDataType_delete = _UA_JsonDataSetReaderMessageDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  bool UA_JsonDataSetReaderMessageDataType_equal(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p1,
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p2,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
              ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>('UA_JsonDataSetReaderMessageDataType_equal');
  late final _UA_JsonDataSetReaderMessageDataType_equal = _UA_JsonDataSetReaderMessageDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType>, ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_TransmitQosPriorityDataType_init(
    ffi.Pointer<UA_TransmitQosPriorityDataType> p,
  ) {
    return _UA_TransmitQosPriorityDataType_init(
      p,
    );
  }

  late final _UA_TransmitQosPriorityDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>>(
          'UA_TransmitQosPriorityDataType_init');
  late final _UA_TransmitQosPriorityDataType_init =
      _UA_TransmitQosPriorityDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>();

  ffi.Pointer<UA_TransmitQosPriorityDataType> UA_TransmitQosPriorityDataType_new() {
    return _UA_TransmitQosPriorityDataType_new();
  }

  late final _UA_TransmitQosPriorityDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransmitQosPriorityDataType> Function()>>(
          'UA_TransmitQosPriorityDataType_new');
  late final _UA_TransmitQosPriorityDataType_new =
      _UA_TransmitQosPriorityDataType_newPtr.asFunction<ffi.Pointer<UA_TransmitQosPriorityDataType> Function()>();

  int UA_TransmitQosPriorityDataType_copy(
    ffi.Pointer<UA_TransmitQosPriorityDataType> src,
    ffi.Pointer<UA_TransmitQosPriorityDataType> dst,
  ) {
    return _UA_TransmitQosPriorityDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TransmitQosPriorityDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TransmitQosPriorityDataType>,
              ffi.Pointer<UA_TransmitQosPriorityDataType>)>>('UA_TransmitQosPriorityDataType_copy');
  late final _UA_TransmitQosPriorityDataType_copy = _UA_TransmitQosPriorityDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TransmitQosPriorityDataType>, ffi.Pointer<UA_TransmitQosPriorityDataType>)>();

  void UA_TransmitQosPriorityDataType_clear(
    ffi.Pointer<UA_TransmitQosPriorityDataType> p,
  ) {
    return _UA_TransmitQosPriorityDataType_clear(
      p,
    );
  }

  late final _UA_TransmitQosPriorityDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>>(
          'UA_TransmitQosPriorityDataType_clear');
  late final _UA_TransmitQosPriorityDataType_clear =
      _UA_TransmitQosPriorityDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>();

  void UA_TransmitQosPriorityDataType_delete(
    ffi.Pointer<UA_TransmitQosPriorityDataType> p,
  ) {
    return _UA_TransmitQosPriorityDataType_delete(
      p,
    );
  }

  late final _UA_TransmitQosPriorityDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>>(
          'UA_TransmitQosPriorityDataType_delete');
  late final _UA_TransmitQosPriorityDataType_delete = _UA_TransmitQosPriorityDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_TransmitQosPriorityDataType>)>();

  bool UA_TransmitQosPriorityDataType_equal(
    ffi.Pointer<UA_TransmitQosPriorityDataType> p1,
    ffi.Pointer<UA_TransmitQosPriorityDataType> p2,
  ) {
    return _UA_TransmitQosPriorityDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_TransmitQosPriorityDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TransmitQosPriorityDataType>,
              ffi.Pointer<UA_TransmitQosPriorityDataType>)>>('UA_TransmitQosPriorityDataType_equal');
  late final _UA_TransmitQosPriorityDataType_equal = _UA_TransmitQosPriorityDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TransmitQosPriorityDataType>, ffi.Pointer<UA_TransmitQosPriorityDataType>)>();

  void UA_ReceiveQosPriorityDataType_init(
    ffi.Pointer<UA_ReceiveQosPriorityDataType> p,
  ) {
    return _UA_ReceiveQosPriorityDataType_init(
      p,
    );
  }

  late final _UA_ReceiveQosPriorityDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>>(
          'UA_ReceiveQosPriorityDataType_init');
  late final _UA_ReceiveQosPriorityDataType_init =
      _UA_ReceiveQosPriorityDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>();

  ffi.Pointer<UA_ReceiveQosPriorityDataType> UA_ReceiveQosPriorityDataType_new() {
    return _UA_ReceiveQosPriorityDataType_new();
  }

  late final _UA_ReceiveQosPriorityDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReceiveQosPriorityDataType> Function()>>(
          'UA_ReceiveQosPriorityDataType_new');
  late final _UA_ReceiveQosPriorityDataType_new =
      _UA_ReceiveQosPriorityDataType_newPtr.asFunction<ffi.Pointer<UA_ReceiveQosPriorityDataType> Function()>();

  int UA_ReceiveQosPriorityDataType_copy(
    ffi.Pointer<UA_ReceiveQosPriorityDataType> src,
    ffi.Pointer<UA_ReceiveQosPriorityDataType> dst,
  ) {
    return _UA_ReceiveQosPriorityDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ReceiveQosPriorityDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>,
              ffi.Pointer<UA_ReceiveQosPriorityDataType>)>>('UA_ReceiveQosPriorityDataType_copy');
  late final _UA_ReceiveQosPriorityDataType_copy = _UA_ReceiveQosPriorityDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>, ffi.Pointer<UA_ReceiveQosPriorityDataType>)>();

  void UA_ReceiveQosPriorityDataType_clear(
    ffi.Pointer<UA_ReceiveQosPriorityDataType> p,
  ) {
    return _UA_ReceiveQosPriorityDataType_clear(
      p,
    );
  }

  late final _UA_ReceiveQosPriorityDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>>(
          'UA_ReceiveQosPriorityDataType_clear');
  late final _UA_ReceiveQosPriorityDataType_clear =
      _UA_ReceiveQosPriorityDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>();

  void UA_ReceiveQosPriorityDataType_delete(
    ffi.Pointer<UA_ReceiveQosPriorityDataType> p,
  ) {
    return _UA_ReceiveQosPriorityDataType_delete(
      p,
    );
  }

  late final _UA_ReceiveQosPriorityDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>>(
          'UA_ReceiveQosPriorityDataType_delete');
  late final _UA_ReceiveQosPriorityDataType_delete =
      _UA_ReceiveQosPriorityDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>)>();

  bool UA_ReceiveQosPriorityDataType_equal(
    ffi.Pointer<UA_ReceiveQosPriorityDataType> p1,
    ffi.Pointer<UA_ReceiveQosPriorityDataType> p2,
  ) {
    return _UA_ReceiveQosPriorityDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReceiveQosPriorityDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>,
              ffi.Pointer<UA_ReceiveQosPriorityDataType>)>>('UA_ReceiveQosPriorityDataType_equal');
  late final _UA_ReceiveQosPriorityDataType_equal = _UA_ReceiveQosPriorityDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReceiveQosPriorityDataType>, ffi.Pointer<UA_ReceiveQosPriorityDataType>)>();

  void UA_DatagramConnectionTransportDataType_init(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
          'UA_DatagramConnectionTransportDataType_init');
  late final _UA_DatagramConnectionTransportDataType_init = _UA_DatagramConnectionTransportDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  ffi.Pointer<UA_DatagramConnectionTransportDataType> UA_DatagramConnectionTransportDataType_new() {
    return _UA_DatagramConnectionTransportDataType_new();
  }

  late final _UA_DatagramConnectionTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DatagramConnectionTransportDataType> Function()>>(
          'UA_DatagramConnectionTransportDataType_new');
  late final _UA_DatagramConnectionTransportDataType_new = _UA_DatagramConnectionTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_DatagramConnectionTransportDataType> Function()>();

  int UA_DatagramConnectionTransportDataType_copy(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> src,
    ffi.Pointer<UA_DatagramConnectionTransportDataType> dst,
  ) {
    return _UA_DatagramConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>,
              ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>('UA_DatagramConnectionTransportDataType_copy');
  late final _UA_DatagramConnectionTransportDataType_copy = _UA_DatagramConnectionTransportDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DatagramConnectionTransportDataType>, ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_clear(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
          'UA_DatagramConnectionTransportDataType_clear');
  late final _UA_DatagramConnectionTransportDataType_clear = _UA_DatagramConnectionTransportDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_delete(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
          'UA_DatagramConnectionTransportDataType_delete');
  late final _UA_DatagramConnectionTransportDataType_delete = _UA_DatagramConnectionTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  bool UA_DatagramConnectionTransportDataType_equal(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p1,
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p2,
  ) {
    return _UA_DatagramConnectionTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>,
              ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>('UA_DatagramConnectionTransportDataType_equal');
  late final _UA_DatagramConnectionTransportDataType_equal =
      _UA_DatagramConnectionTransportDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>,
              ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransport2DataType_init(
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> p,
  ) {
    return _UA_DatagramConnectionTransport2DataType_init(
      p,
    );
  }

  late final _UA_DatagramConnectionTransport2DataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>>(
          'UA_DatagramConnectionTransport2DataType_init');
  late final _UA_DatagramConnectionTransport2DataType_init = _UA_DatagramConnectionTransport2DataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>();

  ffi.Pointer<UA_DatagramConnectionTransport2DataType> UA_DatagramConnectionTransport2DataType_new() {
    return _UA_DatagramConnectionTransport2DataType_new();
  }

  late final _UA_DatagramConnectionTransport2DataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DatagramConnectionTransport2DataType> Function()>>(
          'UA_DatagramConnectionTransport2DataType_new');
  late final _UA_DatagramConnectionTransport2DataType_new = _UA_DatagramConnectionTransport2DataType_newPtr.asFunction<
      ffi.Pointer<UA_DatagramConnectionTransport2DataType> Function()>();

  int UA_DatagramConnectionTransport2DataType_copy(
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> src,
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> dst,
  ) {
    return _UA_DatagramConnectionTransport2DataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramConnectionTransport2DataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>,
              ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>>('UA_DatagramConnectionTransport2DataType_copy');
  late final _UA_DatagramConnectionTransport2DataType_copy =
      _UA_DatagramConnectionTransport2DataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>,
              ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>();

  void UA_DatagramConnectionTransport2DataType_clear(
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> p,
  ) {
    return _UA_DatagramConnectionTransport2DataType_clear(
      p,
    );
  }

  late final _UA_DatagramConnectionTransport2DataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>>(
          'UA_DatagramConnectionTransport2DataType_clear');
  late final _UA_DatagramConnectionTransport2DataType_clear = _UA_DatagramConnectionTransport2DataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>();

  void UA_DatagramConnectionTransport2DataType_delete(
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> p,
  ) {
    return _UA_DatagramConnectionTransport2DataType_delete(
      p,
    );
  }

  late final _UA_DatagramConnectionTransport2DataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>>(
          'UA_DatagramConnectionTransport2DataType_delete');
  late final _UA_DatagramConnectionTransport2DataType_delete = _UA_DatagramConnectionTransport2DataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>();

  bool UA_DatagramConnectionTransport2DataType_equal(
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> p1,
    ffi.Pointer<UA_DatagramConnectionTransport2DataType> p2,
  ) {
    return _UA_DatagramConnectionTransport2DataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DatagramConnectionTransport2DataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>,
              ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>>('UA_DatagramConnectionTransport2DataType_equal');
  late final _UA_DatagramConnectionTransport2DataType_equal =
      _UA_DatagramConnectionTransport2DataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_DatagramConnectionTransport2DataType>,
              ffi.Pointer<UA_DatagramConnectionTransport2DataType>)>();

  void UA_DatagramWriterGroupTransportDataType_init(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
          'UA_DatagramWriterGroupTransportDataType_init');
  late final _UA_DatagramWriterGroupTransportDataType_init = _UA_DatagramWriterGroupTransportDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_DatagramWriterGroupTransportDataType> UA_DatagramWriterGroupTransportDataType_new() {
    return _UA_DatagramWriterGroupTransportDataType_new();
  }

  late final _UA_DatagramWriterGroupTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DatagramWriterGroupTransportDataType> Function()>>(
          'UA_DatagramWriterGroupTransportDataType_new');
  late final _UA_DatagramWriterGroupTransportDataType_new = _UA_DatagramWriterGroupTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_DatagramWriterGroupTransportDataType> Function()>();

  int UA_DatagramWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> src,
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> dst,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>('UA_DatagramWriterGroupTransportDataType_copy');
  late final _UA_DatagramWriterGroupTransportDataType_copy =
      _UA_DatagramWriterGroupTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
          'UA_DatagramWriterGroupTransportDataType_clear');
  late final _UA_DatagramWriterGroupTransportDataType_clear = _UA_DatagramWriterGroupTransportDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
          'UA_DatagramWriterGroupTransportDataType_delete');
  late final _UA_DatagramWriterGroupTransportDataType_delete = _UA_DatagramWriterGroupTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  bool UA_DatagramWriterGroupTransportDataType_equal(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p1,
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p2,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>('UA_DatagramWriterGroupTransportDataType_equal');
  late final _UA_DatagramWriterGroupTransportDataType_equal =
      _UA_DatagramWriterGroupTransportDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransport2DataType_init(
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> p,
  ) {
    return _UA_DatagramWriterGroupTransport2DataType_init(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransport2DataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>>(
          'UA_DatagramWriterGroupTransport2DataType_init');
  late final _UA_DatagramWriterGroupTransport2DataType_init = _UA_DatagramWriterGroupTransport2DataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>();

  ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> UA_DatagramWriterGroupTransport2DataType_new() {
    return _UA_DatagramWriterGroupTransport2DataType_new();
  }

  late final _UA_DatagramWriterGroupTransport2DataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> Function()>>(
          'UA_DatagramWriterGroupTransport2DataType_new');
  late final _UA_DatagramWriterGroupTransport2DataType_new = _UA_DatagramWriterGroupTransport2DataType_newPtr
      .asFunction<ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> Function()>();

  int UA_DatagramWriterGroupTransport2DataType_copy(
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> src,
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> dst,
  ) {
    return _UA_DatagramWriterGroupTransport2DataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramWriterGroupTransport2DataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>>('UA_DatagramWriterGroupTransport2DataType_copy');
  late final _UA_DatagramWriterGroupTransport2DataType_copy =
      _UA_DatagramWriterGroupTransport2DataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>();

  void UA_DatagramWriterGroupTransport2DataType_clear(
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> p,
  ) {
    return _UA_DatagramWriterGroupTransport2DataType_clear(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransport2DataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>>(
          'UA_DatagramWriterGroupTransport2DataType_clear');
  late final _UA_DatagramWriterGroupTransport2DataType_clear = _UA_DatagramWriterGroupTransport2DataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>();

  void UA_DatagramWriterGroupTransport2DataType_delete(
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> p,
  ) {
    return _UA_DatagramWriterGroupTransport2DataType_delete(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransport2DataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>>(
          'UA_DatagramWriterGroupTransport2DataType_delete');
  late final _UA_DatagramWriterGroupTransport2DataType_delete = _UA_DatagramWriterGroupTransport2DataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>();

  bool UA_DatagramWriterGroupTransport2DataType_equal(
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> p1,
    ffi.Pointer<UA_DatagramWriterGroupTransport2DataType> p2,
  ) {
    return _UA_DatagramWriterGroupTransport2DataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DatagramWriterGroupTransport2DataType_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>,
                  ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>>(
      'UA_DatagramWriterGroupTransport2DataType_equal');
  late final _UA_DatagramWriterGroupTransport2DataType_equal =
      _UA_DatagramWriterGroupTransport2DataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransport2DataType>)>();

  void UA_DatagramDataSetReaderTransportDataType_init(
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> p,
  ) {
    return _UA_DatagramDataSetReaderTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramDataSetReaderTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>>(
          'UA_DatagramDataSetReaderTransportDataType_init');
  late final _UA_DatagramDataSetReaderTransportDataType_init = _UA_DatagramDataSetReaderTransportDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>();

  ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> UA_DatagramDataSetReaderTransportDataType_new() {
    return _UA_DatagramDataSetReaderTransportDataType_new();
  }

  late final _UA_DatagramDataSetReaderTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> Function()>>(
          'UA_DatagramDataSetReaderTransportDataType_new');
  late final _UA_DatagramDataSetReaderTransportDataType_new = _UA_DatagramDataSetReaderTransportDataType_newPtr
      .asFunction<ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> Function()>();

  int UA_DatagramDataSetReaderTransportDataType_copy(
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> src,
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> dst,
  ) {
    return _UA_DatagramDataSetReaderTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramDataSetReaderTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>,
                  ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>>(
      'UA_DatagramDataSetReaderTransportDataType_copy');
  late final _UA_DatagramDataSetReaderTransportDataType_copy =
      _UA_DatagramDataSetReaderTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>,
              ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>();

  void UA_DatagramDataSetReaderTransportDataType_clear(
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> p,
  ) {
    return _UA_DatagramDataSetReaderTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramDataSetReaderTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>>(
          'UA_DatagramDataSetReaderTransportDataType_clear');
  late final _UA_DatagramDataSetReaderTransportDataType_clear = _UA_DatagramDataSetReaderTransportDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>();

  void UA_DatagramDataSetReaderTransportDataType_delete(
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> p,
  ) {
    return _UA_DatagramDataSetReaderTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramDataSetReaderTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>>(
          'UA_DatagramDataSetReaderTransportDataType_delete');
  late final _UA_DatagramDataSetReaderTransportDataType_delete = _UA_DatagramDataSetReaderTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>();

  bool UA_DatagramDataSetReaderTransportDataType_equal(
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> p1,
    ffi.Pointer<UA_DatagramDataSetReaderTransportDataType> p2,
  ) {
    return _UA_DatagramDataSetReaderTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DatagramDataSetReaderTransportDataType_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>,
                  ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>>(
      'UA_DatagramDataSetReaderTransportDataType_equal');
  late final _UA_DatagramDataSetReaderTransportDataType_equal =
      _UA_DatagramDataSetReaderTransportDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>,
              ffi.Pointer<UA_DatagramDataSetReaderTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_init(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
          'UA_BrokerConnectionTransportDataType_init');
  late final _UA_BrokerConnectionTransportDataType_init = _UA_BrokerConnectionTransportDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  ffi.Pointer<UA_BrokerConnectionTransportDataType> UA_BrokerConnectionTransportDataType_new() {
    return _UA_BrokerConnectionTransportDataType_new();
  }

  late final _UA_BrokerConnectionTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrokerConnectionTransportDataType> Function()>>(
          'UA_BrokerConnectionTransportDataType_new');
  late final _UA_BrokerConnectionTransportDataType_new = _UA_BrokerConnectionTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_BrokerConnectionTransportDataType> Function()>();

  int UA_BrokerConnectionTransportDataType_copy(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> src,
    ffi.Pointer<UA_BrokerConnectionTransportDataType> dst,
  ) {
    return _UA_BrokerConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>,
              ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>('UA_BrokerConnectionTransportDataType_copy');
  late final _UA_BrokerConnectionTransportDataType_copy = _UA_BrokerConnectionTransportDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrokerConnectionTransportDataType>, ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_clear(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
          'UA_BrokerConnectionTransportDataType_clear');
  late final _UA_BrokerConnectionTransportDataType_clear = _UA_BrokerConnectionTransportDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_delete(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
          'UA_BrokerConnectionTransportDataType_delete');
  late final _UA_BrokerConnectionTransportDataType_delete = _UA_BrokerConnectionTransportDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  bool UA_BrokerConnectionTransportDataType_equal(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p1,
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p2,
  ) {
    return _UA_BrokerConnectionTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>,
              ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>('UA_BrokerConnectionTransportDataType_equal');
  late final _UA_BrokerConnectionTransportDataType_equal = _UA_BrokerConnectionTransportDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_BrokerConnectionTransportDataType>, ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerTransportQualityOfService_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrokerTransportQualityOfService_init(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrokerTransportQualityOfService_init');
  late final _UA_BrokerTransportQualityOfService_init =
      _UA_BrokerTransportQualityOfService_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_BrokerTransportQualityOfService_new() {
    return _UA_BrokerTransportQualityOfService_new();
  }

  late final _UA_BrokerTransportQualityOfService_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_BrokerTransportQualityOfService_new');
  late final _UA_BrokerTransportQualityOfService_new =
      _UA_BrokerTransportQualityOfService_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_BrokerTransportQualityOfService_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_BrokerTransportQualityOfService_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerTransportQualityOfService_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrokerTransportQualityOfService_copy');
  late final _UA_BrokerTransportQualityOfService_copy = _UA_BrokerTransportQualityOfService_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrokerTransportQualityOfService_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrokerTransportQualityOfService_clear(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrokerTransportQualityOfService_clear');
  late final _UA_BrokerTransportQualityOfService_clear =
      _UA_BrokerTransportQualityOfService_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrokerTransportQualityOfService_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrokerTransportQualityOfService_delete(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrokerTransportQualityOfService_delete');
  late final _UA_BrokerTransportQualityOfService_delete =
      _UA_BrokerTransportQualityOfService_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_BrokerTransportQualityOfService_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_BrokerTransportQualityOfService_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrokerTransportQualityOfService_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrokerTransportQualityOfService_equal');
  late final _UA_BrokerTransportQualityOfService_equal = _UA_BrokerTransportQualityOfService_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrokerWriterGroupTransportDataType_init(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
          'UA_BrokerWriterGroupTransportDataType_init');
  late final _UA_BrokerWriterGroupTransportDataType_init = _UA_BrokerWriterGroupTransportDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_BrokerWriterGroupTransportDataType> UA_BrokerWriterGroupTransportDataType_new() {
    return _UA_BrokerWriterGroupTransportDataType_new();
  }

  late final _UA_BrokerWriterGroupTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrokerWriterGroupTransportDataType> Function()>>(
          'UA_BrokerWriterGroupTransportDataType_new');
  late final _UA_BrokerWriterGroupTransportDataType_new = _UA_BrokerWriterGroupTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_BrokerWriterGroupTransportDataType> Function()>();

  int UA_BrokerWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> src,
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> dst,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
              ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>('UA_BrokerWriterGroupTransportDataType_copy');
  late final _UA_BrokerWriterGroupTransportDataType_copy = _UA_BrokerWriterGroupTransportDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType>, ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
          'UA_BrokerWriterGroupTransportDataType_clear');
  late final _UA_BrokerWriterGroupTransportDataType_clear = _UA_BrokerWriterGroupTransportDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
          'UA_BrokerWriterGroupTransportDataType_delete');
  late final _UA_BrokerWriterGroupTransportDataType_delete = _UA_BrokerWriterGroupTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  bool UA_BrokerWriterGroupTransportDataType_equal(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p1,
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p2,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
              ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>('UA_BrokerWriterGroupTransportDataType_equal');
  late final _UA_BrokerWriterGroupTransportDataType_equal = _UA_BrokerWriterGroupTransportDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType>, ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
          'UA_BrokerDataSetWriterTransportDataType_init');
  late final _UA_BrokerDataSetWriterTransportDataType_init = _UA_BrokerDataSetWriterTransportDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> UA_BrokerDataSetWriterTransportDataType_new() {
    return _UA_BrokerDataSetWriterTransportDataType_new();
  }

  late final _UA_BrokerDataSetWriterTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> Function()>>(
          'UA_BrokerDataSetWriterTransportDataType_new');
  late final _UA_BrokerDataSetWriterTransportDataType_new = _UA_BrokerDataSetWriterTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> Function()>();

  int UA_BrokerDataSetWriterTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>('UA_BrokerDataSetWriterTransportDataType_copy');
  late final _UA_BrokerDataSetWriterTransportDataType_copy =
      _UA_BrokerDataSetWriterTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
          'UA_BrokerDataSetWriterTransportDataType_clear');
  late final _UA_BrokerDataSetWriterTransportDataType_clear = _UA_BrokerDataSetWriterTransportDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
          'UA_BrokerDataSetWriterTransportDataType_delete');
  late final _UA_BrokerDataSetWriterTransportDataType_delete = _UA_BrokerDataSetWriterTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  bool UA_BrokerDataSetWriterTransportDataType_equal(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p1,
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p2,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>('UA_BrokerDataSetWriterTransportDataType_equal');
  late final _UA_BrokerDataSetWriterTransportDataType_equal =
      _UA_BrokerDataSetWriterTransportDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
          'UA_BrokerDataSetReaderTransportDataType_init');
  late final _UA_BrokerDataSetReaderTransportDataType_init = _UA_BrokerDataSetReaderTransportDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> UA_BrokerDataSetReaderTransportDataType_new() {
    return _UA_BrokerDataSetReaderTransportDataType_new();
  }

  late final _UA_BrokerDataSetReaderTransportDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> Function()>>(
          'UA_BrokerDataSetReaderTransportDataType_new');
  late final _UA_BrokerDataSetReaderTransportDataType_new = _UA_BrokerDataSetReaderTransportDataType_newPtr.asFunction<
      ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> Function()>();

  int UA_BrokerDataSetReaderTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>('UA_BrokerDataSetReaderTransportDataType_copy');
  late final _UA_BrokerDataSetReaderTransportDataType_copy =
      _UA_BrokerDataSetReaderTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
          'UA_BrokerDataSetReaderTransportDataType_clear');
  late final _UA_BrokerDataSetReaderTransportDataType_clear = _UA_BrokerDataSetReaderTransportDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
          'UA_BrokerDataSetReaderTransportDataType_delete');
  late final _UA_BrokerDataSetReaderTransportDataType_delete = _UA_BrokerDataSetReaderTransportDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  bool UA_BrokerDataSetReaderTransportDataType_equal(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p1,
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p2,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>('UA_BrokerDataSetReaderTransportDataType_equal');
  late final _UA_BrokerDataSetReaderTransportDataType_equal =
      _UA_BrokerDataSetReaderTransportDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_PubSubConfigurationRefMask_init(
    ffi.Pointer<UA_PubSubConfigurationRefMask> p,
  ) {
    return _UA_PubSubConfigurationRefMask_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>>(
          'UA_PubSubConfigurationRefMask_init');
  late final _UA_PubSubConfigurationRefMask_init =
      _UA_PubSubConfigurationRefMask_initPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>();

  ffi.Pointer<UA_PubSubConfigurationRefMask> UA_PubSubConfigurationRefMask_new() {
    return _UA_PubSubConfigurationRefMask_new();
  }

  late final _UA_PubSubConfigurationRefMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConfigurationRefMask> Function()>>(
          'UA_PubSubConfigurationRefMask_new');
  late final _UA_PubSubConfigurationRefMask_new =
      _UA_PubSubConfigurationRefMask_newPtr.asFunction<ffi.Pointer<UA_PubSubConfigurationRefMask> Function()>();

  int UA_PubSubConfigurationRefMask_copy(
    ffi.Pointer<UA_PubSubConfigurationRefMask> src,
    ffi.Pointer<UA_PubSubConfigurationRefMask> dst,
  ) {
    return _UA_PubSubConfigurationRefMask_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationRefMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConfigurationRefMask>,
              ffi.Pointer<UA_PubSubConfigurationRefMask>)>>('UA_PubSubConfigurationRefMask_copy');
  late final _UA_PubSubConfigurationRefMask_copy = _UA_PubSubConfigurationRefMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConfigurationRefMask>, ffi.Pointer<UA_PubSubConfigurationRefMask>)>();

  void UA_PubSubConfigurationRefMask_clear(
    ffi.Pointer<UA_PubSubConfigurationRefMask> p,
  ) {
    return _UA_PubSubConfigurationRefMask_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>>(
          'UA_PubSubConfigurationRefMask_clear');
  late final _UA_PubSubConfigurationRefMask_clear =
      _UA_PubSubConfigurationRefMask_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>();

  void UA_PubSubConfigurationRefMask_delete(
    ffi.Pointer<UA_PubSubConfigurationRefMask> p,
  ) {
    return _UA_PubSubConfigurationRefMask_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>>(
          'UA_PubSubConfigurationRefMask_delete');
  late final _UA_PubSubConfigurationRefMask_delete =
      _UA_PubSubConfigurationRefMask_deletePtr.asFunction<void Function(ffi.Pointer<UA_PubSubConfigurationRefMask>)>();

  bool UA_PubSubConfigurationRefMask_equal(
    ffi.Pointer<UA_PubSubConfigurationRefMask> p1,
    ffi.Pointer<UA_PubSubConfigurationRefMask> p2,
  ) {
    return _UA_PubSubConfigurationRefMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConfigurationRefMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConfigurationRefMask>,
              ffi.Pointer<UA_PubSubConfigurationRefMask>)>>('UA_PubSubConfigurationRefMask_equal');
  late final _UA_PubSubConfigurationRefMask_equal = _UA_PubSubConfigurationRefMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubConfigurationRefMask>, ffi.Pointer<UA_PubSubConfigurationRefMask>)>();

  void UA_PubSubConfigurationRefDataType_init(
    ffi.Pointer<UA_PubSubConfigurationRefDataType> p,
  ) {
    return _UA_PubSubConfigurationRefDataType_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>>(
          'UA_PubSubConfigurationRefDataType_init');
  late final _UA_PubSubConfigurationRefDataType_init = _UA_PubSubConfigurationRefDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>();

  ffi.Pointer<UA_PubSubConfigurationRefDataType> UA_PubSubConfigurationRefDataType_new() {
    return _UA_PubSubConfigurationRefDataType_new();
  }

  late final _UA_PubSubConfigurationRefDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConfigurationRefDataType> Function()>>(
          'UA_PubSubConfigurationRefDataType_new');
  late final _UA_PubSubConfigurationRefDataType_new =
      _UA_PubSubConfigurationRefDataType_newPtr.asFunction<ffi.Pointer<UA_PubSubConfigurationRefDataType> Function()>();

  int UA_PubSubConfigurationRefDataType_copy(
    ffi.Pointer<UA_PubSubConfigurationRefDataType> src,
    ffi.Pointer<UA_PubSubConfigurationRefDataType> dst,
  ) {
    return _UA_PubSubConfigurationRefDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationRefDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>,
              ffi.Pointer<UA_PubSubConfigurationRefDataType>)>>('UA_PubSubConfigurationRefDataType_copy');
  late final _UA_PubSubConfigurationRefDataType_copy = _UA_PubSubConfigurationRefDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>, ffi.Pointer<UA_PubSubConfigurationRefDataType>)>();

  void UA_PubSubConfigurationRefDataType_clear(
    ffi.Pointer<UA_PubSubConfigurationRefDataType> p,
  ) {
    return _UA_PubSubConfigurationRefDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>>(
          'UA_PubSubConfigurationRefDataType_clear');
  late final _UA_PubSubConfigurationRefDataType_clear = _UA_PubSubConfigurationRefDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>();

  void UA_PubSubConfigurationRefDataType_delete(
    ffi.Pointer<UA_PubSubConfigurationRefDataType> p,
  ) {
    return _UA_PubSubConfigurationRefDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationRefDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>>(
          'UA_PubSubConfigurationRefDataType_delete');
  late final _UA_PubSubConfigurationRefDataType_delete = _UA_PubSubConfigurationRefDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>)>();

  bool UA_PubSubConfigurationRefDataType_equal(
    ffi.Pointer<UA_PubSubConfigurationRefDataType> p1,
    ffi.Pointer<UA_PubSubConfigurationRefDataType> p2,
  ) {
    return _UA_PubSubConfigurationRefDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConfigurationRefDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>,
              ffi.Pointer<UA_PubSubConfigurationRefDataType>)>>('UA_PubSubConfigurationRefDataType_equal');
  late final _UA_PubSubConfigurationRefDataType_equal = _UA_PubSubConfigurationRefDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubConfigurationRefDataType>, ffi.Pointer<UA_PubSubConfigurationRefDataType>)>();

  void UA_PubSubConfigurationValueDataType_init(
    ffi.Pointer<UA_PubSubConfigurationValueDataType> p,
  ) {
    return _UA_PubSubConfigurationValueDataType_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationValueDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>>(
          'UA_PubSubConfigurationValueDataType_init');
  late final _UA_PubSubConfigurationValueDataType_init = _UA_PubSubConfigurationValueDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>();

  ffi.Pointer<UA_PubSubConfigurationValueDataType> UA_PubSubConfigurationValueDataType_new() {
    return _UA_PubSubConfigurationValueDataType_new();
  }

  late final _UA_PubSubConfigurationValueDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConfigurationValueDataType> Function()>>(
          'UA_PubSubConfigurationValueDataType_new');
  late final _UA_PubSubConfigurationValueDataType_new = _UA_PubSubConfigurationValueDataType_newPtr.asFunction<
      ffi.Pointer<UA_PubSubConfigurationValueDataType> Function()>();

  int UA_PubSubConfigurationValueDataType_copy(
    ffi.Pointer<UA_PubSubConfigurationValueDataType> src,
    ffi.Pointer<UA_PubSubConfigurationValueDataType> dst,
  ) {
    return _UA_PubSubConfigurationValueDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationValueDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>,
              ffi.Pointer<UA_PubSubConfigurationValueDataType>)>>('UA_PubSubConfigurationValueDataType_copy');
  late final _UA_PubSubConfigurationValueDataType_copy = _UA_PubSubConfigurationValueDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PubSubConfigurationValueDataType>, ffi.Pointer<UA_PubSubConfigurationValueDataType>)>();

  void UA_PubSubConfigurationValueDataType_clear(
    ffi.Pointer<UA_PubSubConfigurationValueDataType> p,
  ) {
    return _UA_PubSubConfigurationValueDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationValueDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>>(
          'UA_PubSubConfigurationValueDataType_clear');
  late final _UA_PubSubConfigurationValueDataType_clear = _UA_PubSubConfigurationValueDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>();

  void UA_PubSubConfigurationValueDataType_delete(
    ffi.Pointer<UA_PubSubConfigurationValueDataType> p,
  ) {
    return _UA_PubSubConfigurationValueDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationValueDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>>(
          'UA_PubSubConfigurationValueDataType_delete');
  late final _UA_PubSubConfigurationValueDataType_delete = _UA_PubSubConfigurationValueDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>)>();

  bool UA_PubSubConfigurationValueDataType_equal(
    ffi.Pointer<UA_PubSubConfigurationValueDataType> p1,
    ffi.Pointer<UA_PubSubConfigurationValueDataType> p2,
  ) {
    return _UA_PubSubConfigurationValueDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConfigurationValueDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConfigurationValueDataType>,
              ffi.Pointer<UA_PubSubConfigurationValueDataType>)>>('UA_PubSubConfigurationValueDataType_equal');
  late final _UA_PubSubConfigurationValueDataType_equal = _UA_PubSubConfigurationValueDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_PubSubConfigurationValueDataType>, ffi.Pointer<UA_PubSubConfigurationValueDataType>)>();

  void UA_DiagnosticsLevel_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DiagnosticsLevel_init(
      p,
    );
  }

  late final _UA_DiagnosticsLevel_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DiagnosticsLevel_init');
  late final _UA_DiagnosticsLevel_init =
      _UA_DiagnosticsLevel_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_DiagnosticsLevel_new() {
    return _UA_DiagnosticsLevel_new();
  }

  late final _UA_DiagnosticsLevel_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_DiagnosticsLevel_new');
  late final _UA_DiagnosticsLevel_new =
      _UA_DiagnosticsLevel_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_DiagnosticsLevel_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_DiagnosticsLevel_copy(
      src,
      dst,
    );
  }

  late final _UA_DiagnosticsLevel_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DiagnosticsLevel_copy');
  late final _UA_DiagnosticsLevel_copy = _UA_DiagnosticsLevel_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DiagnosticsLevel_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DiagnosticsLevel_clear(
      p,
    );
  }

  late final _UA_DiagnosticsLevel_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DiagnosticsLevel_clear');
  late final _UA_DiagnosticsLevel_clear =
      _UA_DiagnosticsLevel_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DiagnosticsLevel_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DiagnosticsLevel_delete(
      p,
    );
  }

  late final _UA_DiagnosticsLevel_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DiagnosticsLevel_delete');
  late final _UA_DiagnosticsLevel_delete =
      _UA_DiagnosticsLevel_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_DiagnosticsLevel_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_DiagnosticsLevel_equal(
      p1,
      p2,
    );
  }

  late final _UA_DiagnosticsLevel_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DiagnosticsLevel_equal');
  late final _UA_DiagnosticsLevel_equal = _UA_DiagnosticsLevel_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PubSubDiagnosticsCounterClassification_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubDiagnosticsCounterClassification_init(
      p,
    );
  }

  late final _UA_PubSubDiagnosticsCounterClassification_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubDiagnosticsCounterClassification_init');
  late final _UA_PubSubDiagnosticsCounterClassification_init =
      _UA_PubSubDiagnosticsCounterClassification_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_PubSubDiagnosticsCounterClassification_new() {
    return _UA_PubSubDiagnosticsCounterClassification_new();
  }

  late final _UA_PubSubDiagnosticsCounterClassification_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>(
          'UA_PubSubDiagnosticsCounterClassification_new');
  late final _UA_PubSubDiagnosticsCounterClassification_new =
      _UA_PubSubDiagnosticsCounterClassification_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_PubSubDiagnosticsCounterClassification_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_PubSubDiagnosticsCounterClassification_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubDiagnosticsCounterClassification_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubDiagnosticsCounterClassification_copy');
  late final _UA_PubSubDiagnosticsCounterClassification_copy = _UA_PubSubDiagnosticsCounterClassification_copyPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PubSubDiagnosticsCounterClassification_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubDiagnosticsCounterClassification_clear(
      p,
    );
  }

  late final _UA_PubSubDiagnosticsCounterClassification_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubDiagnosticsCounterClassification_clear');
  late final _UA_PubSubDiagnosticsCounterClassification_clear =
      _UA_PubSubDiagnosticsCounterClassification_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PubSubDiagnosticsCounterClassification_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PubSubDiagnosticsCounterClassification_delete(
      p,
    );
  }

  late final _UA_PubSubDiagnosticsCounterClassification_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubDiagnosticsCounterClassification_delete');
  late final _UA_PubSubDiagnosticsCounterClassification_delete =
      _UA_PubSubDiagnosticsCounterClassification_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_PubSubDiagnosticsCounterClassification_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_PubSubDiagnosticsCounterClassification_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubDiagnosticsCounterClassification_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PubSubDiagnosticsCounterClassification_equal');
  late final _UA_PubSubDiagnosticsCounterClassification_equal = _UA_PubSubDiagnosticsCounterClassification_equalPtr
      .asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_AliasNameDataType_init(
    ffi.Pointer<UA_AliasNameDataType> p,
  ) {
    return _UA_AliasNameDataType_init(
      p,
    );
  }

  late final _UA_AliasNameDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AliasNameDataType>)>>('UA_AliasNameDataType_init');
  late final _UA_AliasNameDataType_init =
      _UA_AliasNameDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_AliasNameDataType>)>();

  ffi.Pointer<UA_AliasNameDataType> UA_AliasNameDataType_new() {
    return _UA_AliasNameDataType_new();
  }

  late final _UA_AliasNameDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AliasNameDataType> Function()>>('UA_AliasNameDataType_new');
  late final _UA_AliasNameDataType_new =
      _UA_AliasNameDataType_newPtr.asFunction<ffi.Pointer<UA_AliasNameDataType> Function()>();

  int UA_AliasNameDataType_copy(
    ffi.Pointer<UA_AliasNameDataType> src,
    ffi.Pointer<UA_AliasNameDataType> dst,
  ) {
    return _UA_AliasNameDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_AliasNameDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_AliasNameDataType>, ffi.Pointer<UA_AliasNameDataType>)>>('UA_AliasNameDataType_copy');
  late final _UA_AliasNameDataType_copy = _UA_AliasNameDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AliasNameDataType>, ffi.Pointer<UA_AliasNameDataType>)>();

  void UA_AliasNameDataType_clear(
    ffi.Pointer<UA_AliasNameDataType> p,
  ) {
    return _UA_AliasNameDataType_clear(
      p,
    );
  }

  late final _UA_AliasNameDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AliasNameDataType>)>>('UA_AliasNameDataType_clear');
  late final _UA_AliasNameDataType_clear =
      _UA_AliasNameDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AliasNameDataType>)>();

  void UA_AliasNameDataType_delete(
    ffi.Pointer<UA_AliasNameDataType> p,
  ) {
    return _UA_AliasNameDataType_delete(
      p,
    );
  }

  late final _UA_AliasNameDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AliasNameDataType>)>>('UA_AliasNameDataType_delete');
  late final _UA_AliasNameDataType_delete =
      _UA_AliasNameDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AliasNameDataType>)>();

  bool UA_AliasNameDataType_equal(
    ffi.Pointer<UA_AliasNameDataType> p1,
    ffi.Pointer<UA_AliasNameDataType> p2,
  ) {
    return _UA_AliasNameDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AliasNameDataType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AliasNameDataType>, ffi.Pointer<UA_AliasNameDataType>)>>(
      'UA_AliasNameDataType_equal');
  late final _UA_AliasNameDataType_equal = _UA_AliasNameDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AliasNameDataType>, ffi.Pointer<UA_AliasNameDataType>)>();

  void UA_PasswordOptionsMask_init(
    ffi.Pointer<UA_PasswordOptionsMask> p,
  ) {
    return _UA_PasswordOptionsMask_init(
      p,
    );
  }

  late final _UA_PasswordOptionsMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PasswordOptionsMask>)>>(
          'UA_PasswordOptionsMask_init');
  late final _UA_PasswordOptionsMask_init =
      _UA_PasswordOptionsMask_initPtr.asFunction<void Function(ffi.Pointer<UA_PasswordOptionsMask>)>();

  ffi.Pointer<UA_PasswordOptionsMask> UA_PasswordOptionsMask_new() {
    return _UA_PasswordOptionsMask_new();
  }

  late final _UA_PasswordOptionsMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PasswordOptionsMask> Function()>>('UA_PasswordOptionsMask_new');
  late final _UA_PasswordOptionsMask_new =
      _UA_PasswordOptionsMask_newPtr.asFunction<ffi.Pointer<UA_PasswordOptionsMask> Function()>();

  int UA_PasswordOptionsMask_copy(
    ffi.Pointer<UA_PasswordOptionsMask> src,
    ffi.Pointer<UA_PasswordOptionsMask> dst,
  ) {
    return _UA_PasswordOptionsMask_copy(
      src,
      dst,
    );
  }

  late final _UA_PasswordOptionsMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PasswordOptionsMask>,
              ffi.Pointer<UA_PasswordOptionsMask>)>>('UA_PasswordOptionsMask_copy');
  late final _UA_PasswordOptionsMask_copy = _UA_PasswordOptionsMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PasswordOptionsMask>, ffi.Pointer<UA_PasswordOptionsMask>)>();

  void UA_PasswordOptionsMask_clear(
    ffi.Pointer<UA_PasswordOptionsMask> p,
  ) {
    return _UA_PasswordOptionsMask_clear(
      p,
    );
  }

  late final _UA_PasswordOptionsMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PasswordOptionsMask>)>>(
          'UA_PasswordOptionsMask_clear');
  late final _UA_PasswordOptionsMask_clear =
      _UA_PasswordOptionsMask_clearPtr.asFunction<void Function(ffi.Pointer<UA_PasswordOptionsMask>)>();

  void UA_PasswordOptionsMask_delete(
    ffi.Pointer<UA_PasswordOptionsMask> p,
  ) {
    return _UA_PasswordOptionsMask_delete(
      p,
    );
  }

  late final _UA_PasswordOptionsMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PasswordOptionsMask>)>>(
          'UA_PasswordOptionsMask_delete');
  late final _UA_PasswordOptionsMask_delete =
      _UA_PasswordOptionsMask_deletePtr.asFunction<void Function(ffi.Pointer<UA_PasswordOptionsMask>)>();

  bool UA_PasswordOptionsMask_equal(
    ffi.Pointer<UA_PasswordOptionsMask> p1,
    ffi.Pointer<UA_PasswordOptionsMask> p2,
  ) {
    return _UA_PasswordOptionsMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_PasswordOptionsMask_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PasswordOptionsMask>, ffi.Pointer<UA_PasswordOptionsMask>)>>(
      'UA_PasswordOptionsMask_equal');
  late final _UA_PasswordOptionsMask_equal = _UA_PasswordOptionsMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PasswordOptionsMask>, ffi.Pointer<UA_PasswordOptionsMask>)>();

  void UA_UserConfigurationMask_init(
    ffi.Pointer<UA_UserConfigurationMask> p,
  ) {
    return _UA_UserConfigurationMask_init(
      p,
    );
  }

  late final _UA_UserConfigurationMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserConfigurationMask>)>>(
          'UA_UserConfigurationMask_init');
  late final _UA_UserConfigurationMask_init =
      _UA_UserConfigurationMask_initPtr.asFunction<void Function(ffi.Pointer<UA_UserConfigurationMask>)>();

  ffi.Pointer<UA_UserConfigurationMask> UA_UserConfigurationMask_new() {
    return _UA_UserConfigurationMask_new();
  }

  late final _UA_UserConfigurationMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserConfigurationMask> Function()>>('UA_UserConfigurationMask_new');
  late final _UA_UserConfigurationMask_new =
      _UA_UserConfigurationMask_newPtr.asFunction<ffi.Pointer<UA_UserConfigurationMask> Function()>();

  int UA_UserConfigurationMask_copy(
    ffi.Pointer<UA_UserConfigurationMask> src,
    ffi.Pointer<UA_UserConfigurationMask> dst,
  ) {
    return _UA_UserConfigurationMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UserConfigurationMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserConfigurationMask>,
              ffi.Pointer<UA_UserConfigurationMask>)>>('UA_UserConfigurationMask_copy');
  late final _UA_UserConfigurationMask_copy = _UA_UserConfigurationMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UserConfigurationMask>, ffi.Pointer<UA_UserConfigurationMask>)>();

  void UA_UserConfigurationMask_clear(
    ffi.Pointer<UA_UserConfigurationMask> p,
  ) {
    return _UA_UserConfigurationMask_clear(
      p,
    );
  }

  late final _UA_UserConfigurationMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserConfigurationMask>)>>(
          'UA_UserConfigurationMask_clear');
  late final _UA_UserConfigurationMask_clear =
      _UA_UserConfigurationMask_clearPtr.asFunction<void Function(ffi.Pointer<UA_UserConfigurationMask>)>();

  void UA_UserConfigurationMask_delete(
    ffi.Pointer<UA_UserConfigurationMask> p,
  ) {
    return _UA_UserConfigurationMask_delete(
      p,
    );
  }

  late final _UA_UserConfigurationMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserConfigurationMask>)>>(
          'UA_UserConfigurationMask_delete');
  late final _UA_UserConfigurationMask_delete =
      _UA_UserConfigurationMask_deletePtr.asFunction<void Function(ffi.Pointer<UA_UserConfigurationMask>)>();

  bool UA_UserConfigurationMask_equal(
    ffi.Pointer<UA_UserConfigurationMask> p1,
    ffi.Pointer<UA_UserConfigurationMask> p2,
  ) {
    return _UA_UserConfigurationMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserConfigurationMask_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UserConfigurationMask>,
              ffi.Pointer<UA_UserConfigurationMask>)>>('UA_UserConfigurationMask_equal');
  late final _UA_UserConfigurationMask_equal = _UA_UserConfigurationMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UserConfigurationMask>, ffi.Pointer<UA_UserConfigurationMask>)>();

  void UA_UserManagementDataType_init(
    ffi.Pointer<UA_UserManagementDataType> p,
  ) {
    return _UA_UserManagementDataType_init(
      p,
    );
  }

  late final _UA_UserManagementDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserManagementDataType>)>>(
          'UA_UserManagementDataType_init');
  late final _UA_UserManagementDataType_init =
      _UA_UserManagementDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_UserManagementDataType>)>();

  ffi.Pointer<UA_UserManagementDataType> UA_UserManagementDataType_new() {
    return _UA_UserManagementDataType_new();
  }

  late final _UA_UserManagementDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserManagementDataType> Function()>>('UA_UserManagementDataType_new');
  late final _UA_UserManagementDataType_new =
      _UA_UserManagementDataType_newPtr.asFunction<ffi.Pointer<UA_UserManagementDataType> Function()>();

  int UA_UserManagementDataType_copy(
    ffi.Pointer<UA_UserManagementDataType> src,
    ffi.Pointer<UA_UserManagementDataType> dst,
  ) {
    return _UA_UserManagementDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UserManagementDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserManagementDataType>,
              ffi.Pointer<UA_UserManagementDataType>)>>('UA_UserManagementDataType_copy');
  late final _UA_UserManagementDataType_copy = _UA_UserManagementDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UserManagementDataType>, ffi.Pointer<UA_UserManagementDataType>)>();

  void UA_UserManagementDataType_clear(
    ffi.Pointer<UA_UserManagementDataType> p,
  ) {
    return _UA_UserManagementDataType_clear(
      p,
    );
  }

  late final _UA_UserManagementDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserManagementDataType>)>>(
          'UA_UserManagementDataType_clear');
  late final _UA_UserManagementDataType_clear =
      _UA_UserManagementDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_UserManagementDataType>)>();

  void UA_UserManagementDataType_delete(
    ffi.Pointer<UA_UserManagementDataType> p,
  ) {
    return _UA_UserManagementDataType_delete(
      p,
    );
  }

  late final _UA_UserManagementDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserManagementDataType>)>>(
          'UA_UserManagementDataType_delete');
  late final _UA_UserManagementDataType_delete =
      _UA_UserManagementDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_UserManagementDataType>)>();

  bool UA_UserManagementDataType_equal(
    ffi.Pointer<UA_UserManagementDataType> p1,
    ffi.Pointer<UA_UserManagementDataType> p2,
  ) {
    return _UA_UserManagementDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserManagementDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UserManagementDataType>,
              ffi.Pointer<UA_UserManagementDataType>)>>('UA_UserManagementDataType_equal');
  late final _UA_UserManagementDataType_equal = _UA_UserManagementDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UserManagementDataType>, ffi.Pointer<UA_UserManagementDataType>)>();

  void UA_Duplex_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Duplex_init(
      p,
    );
  }

  late final _UA_Duplex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Duplex_init');
  late final _UA_Duplex_init = _UA_Duplex_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_Duplex_new() {
    return _UA_Duplex_new();
  }

  late final _UA_Duplex_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_Duplex_new');
  late final _UA_Duplex_new = _UA_Duplex_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_Duplex_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_Duplex_copy(
      src,
      dst,
    );
  }

  late final _UA_Duplex_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_Duplex_copy');
  late final _UA_Duplex_copy =
      _UA_Duplex_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_Duplex_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Duplex_clear(
      p,
    );
  }

  late final _UA_Duplex_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Duplex_clear');
  late final _UA_Duplex_clear = _UA_Duplex_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_Duplex_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_Duplex_delete(
      p,
    );
  }

  late final _UA_Duplex_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_Duplex_delete');
  late final _UA_Duplex_delete = _UA_Duplex_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_Duplex_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_Duplex_equal(
      p1,
      p2,
    );
  }

  late final _UA_Duplex_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_Duplex_equal');
  late final _UA_Duplex_equal =
      _UA_Duplex_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceAdminStatus_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceAdminStatus_init(
      p,
    );
  }

  late final _UA_InterfaceAdminStatus_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceAdminStatus_init');
  late final _UA_InterfaceAdminStatus_init =
      _UA_InterfaceAdminStatus_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_InterfaceAdminStatus_new() {
    return _UA_InterfaceAdminStatus_new();
  }

  late final _UA_InterfaceAdminStatus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_InterfaceAdminStatus_new');
  late final _UA_InterfaceAdminStatus_new =
      _UA_InterfaceAdminStatus_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_InterfaceAdminStatus_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_InterfaceAdminStatus_copy(
      src,
      dst,
    );
  }

  late final _UA_InterfaceAdminStatus_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_InterfaceAdminStatus_copy');
  late final _UA_InterfaceAdminStatus_copy = _UA_InterfaceAdminStatus_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceAdminStatus_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceAdminStatus_clear(
      p,
    );
  }

  late final _UA_InterfaceAdminStatus_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceAdminStatus_clear');
  late final _UA_InterfaceAdminStatus_clear =
      _UA_InterfaceAdminStatus_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceAdminStatus_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceAdminStatus_delete(
      p,
    );
  }

  late final _UA_InterfaceAdminStatus_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceAdminStatus_delete');
  late final _UA_InterfaceAdminStatus_delete =
      _UA_InterfaceAdminStatus_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_InterfaceAdminStatus_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_InterfaceAdminStatus_equal(
      p1,
      p2,
    );
  }

  late final _UA_InterfaceAdminStatus_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_InterfaceAdminStatus_equal');
  late final _UA_InterfaceAdminStatus_equal = _UA_InterfaceAdminStatus_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceOperStatus_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceOperStatus_init(
      p,
    );
  }

  late final _UA_InterfaceOperStatus_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceOperStatus_init');
  late final _UA_InterfaceOperStatus_init =
      _UA_InterfaceOperStatus_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_InterfaceOperStatus_new() {
    return _UA_InterfaceOperStatus_new();
  }

  late final _UA_InterfaceOperStatus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_InterfaceOperStatus_new');
  late final _UA_InterfaceOperStatus_new =
      _UA_InterfaceOperStatus_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_InterfaceOperStatus_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_InterfaceOperStatus_copy(
      src,
      dst,
    );
  }

  late final _UA_InterfaceOperStatus_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_InterfaceOperStatus_copy');
  late final _UA_InterfaceOperStatus_copy = _UA_InterfaceOperStatus_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceOperStatus_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceOperStatus_clear(
      p,
    );
  }

  late final _UA_InterfaceOperStatus_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceOperStatus_clear');
  late final _UA_InterfaceOperStatus_clear =
      _UA_InterfaceOperStatus_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_InterfaceOperStatus_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_InterfaceOperStatus_delete(
      p,
    );
  }

  late final _UA_InterfaceOperStatus_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_InterfaceOperStatus_delete');
  late final _UA_InterfaceOperStatus_delete =
      _UA_InterfaceOperStatus_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_InterfaceOperStatus_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_InterfaceOperStatus_equal(
      p1,
      p2,
    );
  }

  late final _UA_InterfaceOperStatus_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_InterfaceOperStatus_equal');
  late final _UA_InterfaceOperStatus_equal = _UA_InterfaceOperStatus_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NegotiationStatus_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NegotiationStatus_init(
      p,
    );
  }

  late final _UA_NegotiationStatus_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NegotiationStatus_init');
  late final _UA_NegotiationStatus_init =
      _UA_NegotiationStatus_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_NegotiationStatus_new() {
    return _UA_NegotiationStatus_new();
  }

  late final _UA_NegotiationStatus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_NegotiationStatus_new');
  late final _UA_NegotiationStatus_new =
      _UA_NegotiationStatus_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_NegotiationStatus_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_NegotiationStatus_copy(
      src,
      dst,
    );
  }

  late final _UA_NegotiationStatus_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NegotiationStatus_copy');
  late final _UA_NegotiationStatus_copy = _UA_NegotiationStatus_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NegotiationStatus_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NegotiationStatus_clear(
      p,
    );
  }

  late final _UA_NegotiationStatus_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NegotiationStatus_clear');
  late final _UA_NegotiationStatus_clear =
      _UA_NegotiationStatus_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NegotiationStatus_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NegotiationStatus_delete(
      p,
    );
  }

  late final _UA_NegotiationStatus_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NegotiationStatus_delete');
  late final _UA_NegotiationStatus_delete =
      _UA_NegotiationStatus_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_NegotiationStatus_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_NegotiationStatus_equal(
      p1,
      p2,
    );
  }

  late final _UA_NegotiationStatus_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NegotiationStatus_equal');
  late final _UA_NegotiationStatus_equal = _UA_NegotiationStatus_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnFailureCode_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnFailureCode_init(
      p,
    );
  }

  late final _UA_TsnFailureCode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnFailureCode_init');
  late final _UA_TsnFailureCode_init =
      _UA_TsnFailureCode_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TsnFailureCode_new() {
    return _UA_TsnFailureCode_new();
  }

  late final _UA_TsnFailureCode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TsnFailureCode_new');
  late final _UA_TsnFailureCode_new = _UA_TsnFailureCode_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TsnFailureCode_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TsnFailureCode_copy(
      src,
      dst,
    );
  }

  late final _UA_TsnFailureCode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnFailureCode_copy');
  late final _UA_TsnFailureCode_copy =
      _UA_TsnFailureCode_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnFailureCode_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnFailureCode_clear(
      p,
    );
  }

  late final _UA_TsnFailureCode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnFailureCode_clear');
  late final _UA_TsnFailureCode_clear =
      _UA_TsnFailureCode_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnFailureCode_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnFailureCode_delete(
      p,
    );
  }

  late final _UA_TsnFailureCode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnFailureCode_delete');
  late final _UA_TsnFailureCode_delete =
      _UA_TsnFailureCode_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TsnFailureCode_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TsnFailureCode_equal(
      p1,
      p2,
    );
  }

  late final _UA_TsnFailureCode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnFailureCode_equal');
  late final _UA_TsnFailureCode_equal = _UA_TsnFailureCode_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnStreamState_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnStreamState_init(
      p,
    );
  }

  late final _UA_TsnStreamState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnStreamState_init');
  late final _UA_TsnStreamState_init =
      _UA_TsnStreamState_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TsnStreamState_new() {
    return _UA_TsnStreamState_new();
  }

  late final _UA_TsnStreamState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TsnStreamState_new');
  late final _UA_TsnStreamState_new = _UA_TsnStreamState_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TsnStreamState_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TsnStreamState_copy(
      src,
      dst,
    );
  }

  late final _UA_TsnStreamState_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnStreamState_copy');
  late final _UA_TsnStreamState_copy =
      _UA_TsnStreamState_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnStreamState_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnStreamState_clear(
      p,
    );
  }

  late final _UA_TsnStreamState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnStreamState_clear');
  late final _UA_TsnStreamState_clear =
      _UA_TsnStreamState_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnStreamState_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnStreamState_delete(
      p,
    );
  }

  late final _UA_TsnStreamState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnStreamState_delete');
  late final _UA_TsnStreamState_delete =
      _UA_TsnStreamState_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TsnStreamState_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TsnStreamState_equal(
      p1,
      p2,
    );
  }

  late final _UA_TsnStreamState_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnStreamState_equal');
  late final _UA_TsnStreamState_equal = _UA_TsnStreamState_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnTalkerStatus_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnTalkerStatus_init(
      p,
    );
  }

  late final _UA_TsnTalkerStatus_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnTalkerStatus_init');
  late final _UA_TsnTalkerStatus_init =
      _UA_TsnTalkerStatus_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TsnTalkerStatus_new() {
    return _UA_TsnTalkerStatus_new();
  }

  late final _UA_TsnTalkerStatus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TsnTalkerStatus_new');
  late final _UA_TsnTalkerStatus_new = _UA_TsnTalkerStatus_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TsnTalkerStatus_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TsnTalkerStatus_copy(
      src,
      dst,
    );
  }

  late final _UA_TsnTalkerStatus_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnTalkerStatus_copy');
  late final _UA_TsnTalkerStatus_copy = _UA_TsnTalkerStatus_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnTalkerStatus_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnTalkerStatus_clear(
      p,
    );
  }

  late final _UA_TsnTalkerStatus_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnTalkerStatus_clear');
  late final _UA_TsnTalkerStatus_clear =
      _UA_TsnTalkerStatus_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnTalkerStatus_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnTalkerStatus_delete(
      p,
    );
  }

  late final _UA_TsnTalkerStatus_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnTalkerStatus_delete');
  late final _UA_TsnTalkerStatus_delete =
      _UA_TsnTalkerStatus_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TsnTalkerStatus_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TsnTalkerStatus_equal(
      p1,
      p2,
    );
  }

  late final _UA_TsnTalkerStatus_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnTalkerStatus_equal');
  late final _UA_TsnTalkerStatus_equal = _UA_TsnTalkerStatus_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnListenerStatus_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnListenerStatus_init(
      p,
    );
  }

  late final _UA_TsnListenerStatus_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnListenerStatus_init');
  late final _UA_TsnListenerStatus_init =
      _UA_TsnListenerStatus_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TsnListenerStatus_new() {
    return _UA_TsnListenerStatus_new();
  }

  late final _UA_TsnListenerStatus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TsnListenerStatus_new');
  late final _UA_TsnListenerStatus_new =
      _UA_TsnListenerStatus_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TsnListenerStatus_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TsnListenerStatus_copy(
      src,
      dst,
    );
  }

  late final _UA_TsnListenerStatus_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnListenerStatus_copy');
  late final _UA_TsnListenerStatus_copy = _UA_TsnListenerStatus_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnListenerStatus_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnListenerStatus_clear(
      p,
    );
  }

  late final _UA_TsnListenerStatus_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnListenerStatus_clear');
  late final _UA_TsnListenerStatus_clear =
      _UA_TsnListenerStatus_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TsnListenerStatus_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TsnListenerStatus_delete(
      p,
    );
  }

  late final _UA_TsnListenerStatus_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TsnListenerStatus_delete');
  late final _UA_TsnListenerStatus_delete =
      _UA_TsnListenerStatus_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TsnListenerStatus_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TsnListenerStatus_equal(
      p1,
      p2,
    );
  }

  late final _UA_TsnListenerStatus_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TsnListenerStatus_equal');
  late final _UA_TsnListenerStatus_equal = _UA_TsnListenerStatus_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PriorityMappingEntryType_init(
    ffi.Pointer<UA_PriorityMappingEntryType> p,
  ) {
    return _UA_PriorityMappingEntryType_init(
      p,
    );
  }

  late final _UA_PriorityMappingEntryType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>>(
          'UA_PriorityMappingEntryType_init');
  late final _UA_PriorityMappingEntryType_init =
      _UA_PriorityMappingEntryType_initPtr.asFunction<void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>();

  ffi.Pointer<UA_PriorityMappingEntryType> UA_PriorityMappingEntryType_new() {
    return _UA_PriorityMappingEntryType_new();
  }

  late final _UA_PriorityMappingEntryType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PriorityMappingEntryType> Function()>>(
          'UA_PriorityMappingEntryType_new');
  late final _UA_PriorityMappingEntryType_new =
      _UA_PriorityMappingEntryType_newPtr.asFunction<ffi.Pointer<UA_PriorityMappingEntryType> Function()>();

  int UA_PriorityMappingEntryType_copy(
    ffi.Pointer<UA_PriorityMappingEntryType> src,
    ffi.Pointer<UA_PriorityMappingEntryType> dst,
  ) {
    return _UA_PriorityMappingEntryType_copy(
      src,
      dst,
    );
  }

  late final _UA_PriorityMappingEntryType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PriorityMappingEntryType>,
              ffi.Pointer<UA_PriorityMappingEntryType>)>>('UA_PriorityMappingEntryType_copy');
  late final _UA_PriorityMappingEntryType_copy = _UA_PriorityMappingEntryType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PriorityMappingEntryType>, ffi.Pointer<UA_PriorityMappingEntryType>)>();

  void UA_PriorityMappingEntryType_clear(
    ffi.Pointer<UA_PriorityMappingEntryType> p,
  ) {
    return _UA_PriorityMappingEntryType_clear(
      p,
    );
  }

  late final _UA_PriorityMappingEntryType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>>(
          'UA_PriorityMappingEntryType_clear');
  late final _UA_PriorityMappingEntryType_clear =
      _UA_PriorityMappingEntryType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>();

  void UA_PriorityMappingEntryType_delete(
    ffi.Pointer<UA_PriorityMappingEntryType> p,
  ) {
    return _UA_PriorityMappingEntryType_delete(
      p,
    );
  }

  late final _UA_PriorityMappingEntryType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>>(
          'UA_PriorityMappingEntryType_delete');
  late final _UA_PriorityMappingEntryType_delete =
      _UA_PriorityMappingEntryType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PriorityMappingEntryType>)>();

  bool UA_PriorityMappingEntryType_equal(
    ffi.Pointer<UA_PriorityMappingEntryType> p1,
    ffi.Pointer<UA_PriorityMappingEntryType> p2,
  ) {
    return _UA_PriorityMappingEntryType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PriorityMappingEntryType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PriorityMappingEntryType>,
              ffi.Pointer<UA_PriorityMappingEntryType>)>>('UA_PriorityMappingEntryType_equal');
  late final _UA_PriorityMappingEntryType_equal = _UA_PriorityMappingEntryType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PriorityMappingEntryType>, ffi.Pointer<UA_PriorityMappingEntryType>)>();

  void UA_IdType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdType_init(
      p,
    );
  }

  late final _UA_IdType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdType_init');
  late final _UA_IdType_init = _UA_IdType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_IdType_new() {
    return _UA_IdType_new();
  }

  late final _UA_IdType_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_IdType_new');
  late final _UA_IdType_new = _UA_IdType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_IdType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_IdType_copy(
      src,
      dst,
    );
  }

  late final _UA_IdType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_IdType_copy');
  late final _UA_IdType_copy =
      _UA_IdType_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdType_clear(
      p,
    );
  }

  late final _UA_IdType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdType_clear');
  late final _UA_IdType_clear = _UA_IdType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_IdType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_IdType_delete(
      p,
    );
  }

  late final _UA_IdType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_IdType_delete');
  late final _UA_IdType_delete = _UA_IdType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_IdType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_IdType_equal(
      p1,
      p2,
    );
  }

  late final _UA_IdType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_IdType_equal');
  late final _UA_IdType_equal =
      _UA_IdType_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeClass_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeClass_init(
      p,
    );
  }

  late final _UA_NodeClass_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeClass_init');
  late final _UA_NodeClass_init = _UA_NodeClass_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_NodeClass_new() {
    return _UA_NodeClass_new();
  }

  late final _UA_NodeClass_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_NodeClass_new');
  late final _UA_NodeClass_new = _UA_NodeClass_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_NodeClass_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_NodeClass_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeClass_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NodeClass_copy');
  late final _UA_NodeClass_copy =
      _UA_NodeClass_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeClass_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeClass_clear(
      p,
    );
  }

  late final _UA_NodeClass_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeClass_clear');
  late final _UA_NodeClass_clear = _UA_NodeClass_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeClass_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeClass_delete(
      p,
    );
  }

  late final _UA_NodeClass_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeClass_delete');
  late final _UA_NodeClass_delete = _UA_NodeClass_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_NodeClass_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_NodeClass_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeClass_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NodeClass_equal');
  late final _UA_NodeClass_equal =
      _UA_NodeClass_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PermissionType_init(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_init(
      p,
    );
  }

  late final _UA_PermissionType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>('UA_PermissionType_init');
  late final _UA_PermissionType_init =
      _UA_PermissionType_initPtr.asFunction<void Function(ffi.Pointer<UA_PermissionType>)>();

  ffi.Pointer<UA_PermissionType> UA_PermissionType_new() {
    return _UA_PermissionType_new();
  }

  late final _UA_PermissionType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PermissionType> Function()>>('UA_PermissionType_new');
  late final _UA_PermissionType_new = _UA_PermissionType_newPtr.asFunction<ffi.Pointer<UA_PermissionType> Function()>();

  int UA_PermissionType_copy(
    ffi.Pointer<UA_PermissionType> src,
    ffi.Pointer<UA_PermissionType> dst,
  ) {
    return _UA_PermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_PermissionType_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_copy');
  late final _UA_PermissionType_copy = _UA_PermissionType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_clear(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_clear(
      p,
    );
  }

  late final _UA_PermissionType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>('UA_PermissionType_clear');
  late final _UA_PermissionType_clear =
      _UA_PermissionType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_delete(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_delete(
      p,
    );
  }

  late final _UA_PermissionType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>('UA_PermissionType_delete');
  late final _UA_PermissionType_delete =
      _UA_PermissionType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PermissionType>)>();

  bool UA_PermissionType_equal(
    ffi.Pointer<UA_PermissionType> p1,
    ffi.Pointer<UA_PermissionType> p2,
  ) {
    return _UA_PermissionType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PermissionType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>>(
          'UA_PermissionType_equal');
  late final _UA_PermissionType_equal = _UA_PermissionType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>();

  void UA_AccessLevelType_init(
    ffi.Pointer<UA_AccessLevelType> p,
  ) {
    return _UA_AccessLevelType_init(
      p,
    );
  }

  late final _UA_AccessLevelType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelType>)>>('UA_AccessLevelType_init');
  late final _UA_AccessLevelType_init =
      _UA_AccessLevelType_initPtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelType>)>();

  ffi.Pointer<UA_AccessLevelType> UA_AccessLevelType_new() {
    return _UA_AccessLevelType_new();
  }

  late final _UA_AccessLevelType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AccessLevelType> Function()>>('UA_AccessLevelType_new');
  late final _UA_AccessLevelType_new =
      _UA_AccessLevelType_newPtr.asFunction<ffi.Pointer<UA_AccessLevelType> Function()>();

  int UA_AccessLevelType_copy(
    ffi.Pointer<UA_AccessLevelType> src,
    ffi.Pointer<UA_AccessLevelType> dst,
  ) {
    return _UA_AccessLevelType_copy(
      src,
      dst,
    );
  }

  late final _UA_AccessLevelType_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AccessLevelType>, ffi.Pointer<UA_AccessLevelType>)>>(
      'UA_AccessLevelType_copy');
  late final _UA_AccessLevelType_copy = _UA_AccessLevelType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AccessLevelType>, ffi.Pointer<UA_AccessLevelType>)>();

  void UA_AccessLevelType_clear(
    ffi.Pointer<UA_AccessLevelType> p,
  ) {
    return _UA_AccessLevelType_clear(
      p,
    );
  }

  late final _UA_AccessLevelType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelType>)>>('UA_AccessLevelType_clear');
  late final _UA_AccessLevelType_clear =
      _UA_AccessLevelType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelType>)>();

  void UA_AccessLevelType_delete(
    ffi.Pointer<UA_AccessLevelType> p,
  ) {
    return _UA_AccessLevelType_delete(
      p,
    );
  }

  late final _UA_AccessLevelType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelType>)>>('UA_AccessLevelType_delete');
  late final _UA_AccessLevelType_delete =
      _UA_AccessLevelType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelType>)>();

  bool UA_AccessLevelType_equal(
    ffi.Pointer<UA_AccessLevelType> p1,
    ffi.Pointer<UA_AccessLevelType> p2,
  ) {
    return _UA_AccessLevelType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AccessLevelType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AccessLevelType>, ffi.Pointer<UA_AccessLevelType>)>>(
          'UA_AccessLevelType_equal');
  late final _UA_AccessLevelType_equal = _UA_AccessLevelType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AccessLevelType>, ffi.Pointer<UA_AccessLevelType>)>();

  void UA_AccessLevelExType_init(
    ffi.Pointer<UA_AccessLevelExType> p,
  ) {
    return _UA_AccessLevelExType_init(
      p,
    );
  }

  late final _UA_AccessLevelExType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelExType>)>>('UA_AccessLevelExType_init');
  late final _UA_AccessLevelExType_init =
      _UA_AccessLevelExType_initPtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelExType>)>();

  ffi.Pointer<UA_AccessLevelExType> UA_AccessLevelExType_new() {
    return _UA_AccessLevelExType_new();
  }

  late final _UA_AccessLevelExType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AccessLevelExType> Function()>>('UA_AccessLevelExType_new');
  late final _UA_AccessLevelExType_new =
      _UA_AccessLevelExType_newPtr.asFunction<ffi.Pointer<UA_AccessLevelExType> Function()>();

  int UA_AccessLevelExType_copy(
    ffi.Pointer<UA_AccessLevelExType> src,
    ffi.Pointer<UA_AccessLevelExType> dst,
  ) {
    return _UA_AccessLevelExType_copy(
      src,
      dst,
    );
  }

  late final _UA_AccessLevelExType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_AccessLevelExType>, ffi.Pointer<UA_AccessLevelExType>)>>('UA_AccessLevelExType_copy');
  late final _UA_AccessLevelExType_copy = _UA_AccessLevelExType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AccessLevelExType>, ffi.Pointer<UA_AccessLevelExType>)>();

  void UA_AccessLevelExType_clear(
    ffi.Pointer<UA_AccessLevelExType> p,
  ) {
    return _UA_AccessLevelExType_clear(
      p,
    );
  }

  late final _UA_AccessLevelExType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelExType>)>>('UA_AccessLevelExType_clear');
  late final _UA_AccessLevelExType_clear =
      _UA_AccessLevelExType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelExType>)>();

  void UA_AccessLevelExType_delete(
    ffi.Pointer<UA_AccessLevelExType> p,
  ) {
    return _UA_AccessLevelExType_delete(
      p,
    );
  }

  late final _UA_AccessLevelExType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessLevelExType>)>>('UA_AccessLevelExType_delete');
  late final _UA_AccessLevelExType_delete =
      _UA_AccessLevelExType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AccessLevelExType>)>();

  bool UA_AccessLevelExType_equal(
    ffi.Pointer<UA_AccessLevelExType> p1,
    ffi.Pointer<UA_AccessLevelExType> p2,
  ) {
    return _UA_AccessLevelExType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AccessLevelExType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AccessLevelExType>, ffi.Pointer<UA_AccessLevelExType>)>>(
      'UA_AccessLevelExType_equal');
  late final _UA_AccessLevelExType_equal = _UA_AccessLevelExType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AccessLevelExType>, ffi.Pointer<UA_AccessLevelExType>)>();

  void UA_EventNotifierType_init(
    ffi.Pointer<UA_EventNotifierType> p,
  ) {
    return _UA_EventNotifierType_init(
      p,
    );
  }

  late final _UA_EventNotifierType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotifierType>)>>('UA_EventNotifierType_init');
  late final _UA_EventNotifierType_init =
      _UA_EventNotifierType_initPtr.asFunction<void Function(ffi.Pointer<UA_EventNotifierType>)>();

  ffi.Pointer<UA_EventNotifierType> UA_EventNotifierType_new() {
    return _UA_EventNotifierType_new();
  }

  late final _UA_EventNotifierType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventNotifierType> Function()>>('UA_EventNotifierType_new');
  late final _UA_EventNotifierType_new =
      _UA_EventNotifierType_newPtr.asFunction<ffi.Pointer<UA_EventNotifierType> Function()>();

  int UA_EventNotifierType_copy(
    ffi.Pointer<UA_EventNotifierType> src,
    ffi.Pointer<UA_EventNotifierType> dst,
  ) {
    return _UA_EventNotifierType_copy(
      src,
      dst,
    );
  }

  late final _UA_EventNotifierType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_EventNotifierType>, ffi.Pointer<UA_EventNotifierType>)>>('UA_EventNotifierType_copy');
  late final _UA_EventNotifierType_copy = _UA_EventNotifierType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventNotifierType>, ffi.Pointer<UA_EventNotifierType>)>();

  void UA_EventNotifierType_clear(
    ffi.Pointer<UA_EventNotifierType> p,
  ) {
    return _UA_EventNotifierType_clear(
      p,
    );
  }

  late final _UA_EventNotifierType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotifierType>)>>('UA_EventNotifierType_clear');
  late final _UA_EventNotifierType_clear =
      _UA_EventNotifierType_clearPtr.asFunction<void Function(ffi.Pointer<UA_EventNotifierType>)>();

  void UA_EventNotifierType_delete(
    ffi.Pointer<UA_EventNotifierType> p,
  ) {
    return _UA_EventNotifierType_delete(
      p,
    );
  }

  late final _UA_EventNotifierType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotifierType>)>>('UA_EventNotifierType_delete');
  late final _UA_EventNotifierType_delete =
      _UA_EventNotifierType_deletePtr.asFunction<void Function(ffi.Pointer<UA_EventNotifierType>)>();

  bool UA_EventNotifierType_equal(
    ffi.Pointer<UA_EventNotifierType> p1,
    ffi.Pointer<UA_EventNotifierType> p2,
  ) {
    return _UA_EventNotifierType_equal(
      p1,
      p2,
    );
  }

  late final _UA_EventNotifierType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EventNotifierType>, ffi.Pointer<UA_EventNotifierType>)>>(
      'UA_EventNotifierType_equal');
  late final _UA_EventNotifierType_equal = _UA_EventNotifierType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EventNotifierType>, ffi.Pointer<UA_EventNotifierType>)>();

  void UA_AccessRestrictionType_init(
    ffi.Pointer<UA_AccessRestrictionType> p,
  ) {
    return _UA_AccessRestrictionType_init(
      p,
    );
  }

  late final _UA_AccessRestrictionType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessRestrictionType>)>>(
          'UA_AccessRestrictionType_init');
  late final _UA_AccessRestrictionType_init =
      _UA_AccessRestrictionType_initPtr.asFunction<void Function(ffi.Pointer<UA_AccessRestrictionType>)>();

  ffi.Pointer<UA_AccessRestrictionType> UA_AccessRestrictionType_new() {
    return _UA_AccessRestrictionType_new();
  }

  late final _UA_AccessRestrictionType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AccessRestrictionType> Function()>>('UA_AccessRestrictionType_new');
  late final _UA_AccessRestrictionType_new =
      _UA_AccessRestrictionType_newPtr.asFunction<ffi.Pointer<UA_AccessRestrictionType> Function()>();

  int UA_AccessRestrictionType_copy(
    ffi.Pointer<UA_AccessRestrictionType> src,
    ffi.Pointer<UA_AccessRestrictionType> dst,
  ) {
    return _UA_AccessRestrictionType_copy(
      src,
      dst,
    );
  }

  late final _UA_AccessRestrictionType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AccessRestrictionType>,
              ffi.Pointer<UA_AccessRestrictionType>)>>('UA_AccessRestrictionType_copy');
  late final _UA_AccessRestrictionType_copy = _UA_AccessRestrictionType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AccessRestrictionType>, ffi.Pointer<UA_AccessRestrictionType>)>();

  void UA_AccessRestrictionType_clear(
    ffi.Pointer<UA_AccessRestrictionType> p,
  ) {
    return _UA_AccessRestrictionType_clear(
      p,
    );
  }

  late final _UA_AccessRestrictionType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessRestrictionType>)>>(
          'UA_AccessRestrictionType_clear');
  late final _UA_AccessRestrictionType_clear =
      _UA_AccessRestrictionType_clearPtr.asFunction<void Function(ffi.Pointer<UA_AccessRestrictionType>)>();

  void UA_AccessRestrictionType_delete(
    ffi.Pointer<UA_AccessRestrictionType> p,
  ) {
    return _UA_AccessRestrictionType_delete(
      p,
    );
  }

  late final _UA_AccessRestrictionType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessRestrictionType>)>>(
          'UA_AccessRestrictionType_delete');
  late final _UA_AccessRestrictionType_delete =
      _UA_AccessRestrictionType_deletePtr.asFunction<void Function(ffi.Pointer<UA_AccessRestrictionType>)>();

  bool UA_AccessRestrictionType_equal(
    ffi.Pointer<UA_AccessRestrictionType> p1,
    ffi.Pointer<UA_AccessRestrictionType> p2,
  ) {
    return _UA_AccessRestrictionType_equal(
      p1,
      p2,
    );
  }

  late final _UA_AccessRestrictionType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AccessRestrictionType>,
              ffi.Pointer<UA_AccessRestrictionType>)>>('UA_AccessRestrictionType_equal');
  late final _UA_AccessRestrictionType_equal = _UA_AccessRestrictionType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AccessRestrictionType>, ffi.Pointer<UA_AccessRestrictionType>)>();

  void UA_RolePermissionType_init(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_init(
      p,
    );
  }

  late final _UA_RolePermissionType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>('UA_RolePermissionType_init');
  late final _UA_RolePermissionType_init =
      _UA_RolePermissionType_initPtr.asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  ffi.Pointer<UA_RolePermissionType> UA_RolePermissionType_new() {
    return _UA_RolePermissionType_new();
  }

  late final _UA_RolePermissionType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RolePermissionType> Function()>>('UA_RolePermissionType_new');
  late final _UA_RolePermissionType_new =
      _UA_RolePermissionType_newPtr.asFunction<ffi.Pointer<UA_RolePermissionType> Function()>();

  int UA_RolePermissionType_copy(
    ffi.Pointer<UA_RolePermissionType> src,
    ffi.Pointer<UA_RolePermissionType> dst,
  ) {
    return _UA_RolePermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_RolePermissionType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_RolePermissionType>, ffi.Pointer<UA_RolePermissionType>)>>('UA_RolePermissionType_copy');
  late final _UA_RolePermissionType_copy = _UA_RolePermissionType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RolePermissionType>, ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_clear(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_clear(
      p,
    );
  }

  late final _UA_RolePermissionType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>('UA_RolePermissionType_clear');
  late final _UA_RolePermissionType_clear =
      _UA_RolePermissionType_clearPtr.asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_delete(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_delete(
      p,
    );
  }

  late final _UA_RolePermissionType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
          'UA_RolePermissionType_delete');
  late final _UA_RolePermissionType_delete =
      _UA_RolePermissionType_deletePtr.asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  bool UA_RolePermissionType_equal(
    ffi.Pointer<UA_RolePermissionType> p1,
    ffi.Pointer<UA_RolePermissionType> p2,
  ) {
    return _UA_RolePermissionType_equal(
      p1,
      p2,
    );
  }

  late final _UA_RolePermissionType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RolePermissionType>, ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_equal');
  late final _UA_RolePermissionType_equal = _UA_RolePermissionType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RolePermissionType>, ffi.Pointer<UA_RolePermissionType>)>();

  void UA_StructureType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_StructureType_init(
      p,
    );
  }

  late final _UA_StructureType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_StructureType_init');
  late final _UA_StructureType_init =
      _UA_StructureType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_StructureType_new() {
    return _UA_StructureType_new();
  }

  late final _UA_StructureType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_StructureType_new');
  late final _UA_StructureType_new = _UA_StructureType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_StructureType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_StructureType_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_StructureType_copy');
  late final _UA_StructureType_copy =
      _UA_StructureType_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_StructureType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_StructureType_clear(
      p,
    );
  }

  late final _UA_StructureType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_StructureType_clear');
  late final _UA_StructureType_clear =
      _UA_StructureType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_StructureType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_StructureType_delete(
      p,
    );
  }

  late final _UA_StructureType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_StructureType_delete');
  late final _UA_StructureType_delete =
      _UA_StructureType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_StructureType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_StructureType_equal(
      p1,
      p2,
    );
  }

  late final _UA_StructureType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_StructureType_equal');
  late final _UA_StructureType_equal = _UA_StructureType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_StructureField_init(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_init(
      p,
    );
  }

  late final _UA_StructureField_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>('UA_StructureField_init');
  late final _UA_StructureField_init =
      _UA_StructureField_initPtr.asFunction<void Function(ffi.Pointer<UA_StructureField>)>();

  ffi.Pointer<UA_StructureField> UA_StructureField_new() {
    return _UA_StructureField_new();
  }

  late final _UA_StructureField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StructureField> Function()>>('UA_StructureField_new');
  late final _UA_StructureField_new = _UA_StructureField_newPtr.asFunction<ffi.Pointer<UA_StructureField> Function()>();

  int UA_StructureField_copy(
    ffi.Pointer<UA_StructureField> src,
    ffi.Pointer<UA_StructureField> dst,
  ) {
    return _UA_StructureField_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureField_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_copy');
  late final _UA_StructureField_copy = _UA_StructureField_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_clear(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_clear(
      p,
    );
  }

  late final _UA_StructureField_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>('UA_StructureField_clear');
  late final _UA_StructureField_clear =
      _UA_StructureField_clearPtr.asFunction<void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_delete(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_delete(
      p,
    );
  }

  late final _UA_StructureField_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>('UA_StructureField_delete');
  late final _UA_StructureField_delete =
      _UA_StructureField_deletePtr.asFunction<void Function(ffi.Pointer<UA_StructureField>)>();

  bool UA_StructureField_equal(
    ffi.Pointer<UA_StructureField> p1,
    ffi.Pointer<UA_StructureField> p2,
  ) {
    return _UA_StructureField_equal(
      p1,
      p2,
    );
  }

  late final _UA_StructureField_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>>(
          'UA_StructureField_equal');
  late final _UA_StructureField_equal = _UA_StructureField_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>();

  void UA_StructureDefinition_init(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_init(
      p,
    );
  }

  late final _UA_StructureDefinition_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
          'UA_StructureDefinition_init');
  late final _UA_StructureDefinition_init =
      _UA_StructureDefinition_initPtr.asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  ffi.Pointer<UA_StructureDefinition> UA_StructureDefinition_new() {
    return _UA_StructureDefinition_new();
  }

  late final _UA_StructureDefinition_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StructureDefinition> Function()>>('UA_StructureDefinition_new');
  late final _UA_StructureDefinition_new =
      _UA_StructureDefinition_newPtr.asFunction<ffi.Pointer<UA_StructureDefinition> Function()>();

  int UA_StructureDefinition_copy(
    ffi.Pointer<UA_StructureDefinition> src,
    ffi.Pointer<UA_StructureDefinition> dst,
  ) {
    return _UA_StructureDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDefinition_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StructureDefinition>,
              ffi.Pointer<UA_StructureDefinition>)>>('UA_StructureDefinition_copy');
  late final _UA_StructureDefinition_copy = _UA_StructureDefinition_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StructureDefinition>, ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_clear(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_clear(
      p,
    );
  }

  late final _UA_StructureDefinition_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
          'UA_StructureDefinition_clear');
  late final _UA_StructureDefinition_clear =
      _UA_StructureDefinition_clearPtr.asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_delete(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_delete(
      p,
    );
  }

  late final _UA_StructureDefinition_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
          'UA_StructureDefinition_delete');
  late final _UA_StructureDefinition_delete =
      _UA_StructureDefinition_deletePtr.asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  bool UA_StructureDefinition_equal(
    ffi.Pointer<UA_StructureDefinition> p1,
    ffi.Pointer<UA_StructureDefinition> p2,
  ) {
    return _UA_StructureDefinition_equal(
      p1,
      p2,
    );
  }

  late final _UA_StructureDefinition_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_StructureDefinition>, ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_equal');
  late final _UA_StructureDefinition_equal = _UA_StructureDefinition_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_StructureDefinition>, ffi.Pointer<UA_StructureDefinition>)>();

  void UA_ReferenceNode_init(
    ffi.Pointer<UA_ReferenceNode> p,
  ) {
    return _UA_ReferenceNode_init(
      p,
    );
  }

  late final _UA_ReferenceNode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceNode>)>>('UA_ReferenceNode_init');
  late final _UA_ReferenceNode_init =
      _UA_ReferenceNode_initPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceNode>)>();

  ffi.Pointer<UA_ReferenceNode> UA_ReferenceNode_new() {
    return _UA_ReferenceNode_new();
  }

  late final _UA_ReferenceNode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReferenceNode> Function()>>('UA_ReferenceNode_new');
  late final _UA_ReferenceNode_new = _UA_ReferenceNode_newPtr.asFunction<ffi.Pointer<UA_ReferenceNode> Function()>();

  int UA_ReferenceNode_copy(
    ffi.Pointer<UA_ReferenceNode> src,
    ffi.Pointer<UA_ReferenceNode> dst,
  ) {
    return _UA_ReferenceNode_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceNode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReferenceNode>, ffi.Pointer<UA_ReferenceNode>)>>(
          'UA_ReferenceNode_copy');
  late final _UA_ReferenceNode_copy = _UA_ReferenceNode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReferenceNode>, ffi.Pointer<UA_ReferenceNode>)>();

  void UA_ReferenceNode_clear(
    ffi.Pointer<UA_ReferenceNode> p,
  ) {
    return _UA_ReferenceNode_clear(
      p,
    );
  }

  late final _UA_ReferenceNode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceNode>)>>('UA_ReferenceNode_clear');
  late final _UA_ReferenceNode_clear =
      _UA_ReferenceNode_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceNode>)>();

  void UA_ReferenceNode_delete(
    ffi.Pointer<UA_ReferenceNode> p,
  ) {
    return _UA_ReferenceNode_delete(
      p,
    );
  }

  late final _UA_ReferenceNode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceNode>)>>('UA_ReferenceNode_delete');
  late final _UA_ReferenceNode_delete =
      _UA_ReferenceNode_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReferenceNode>)>();

  bool UA_ReferenceNode_equal(
    ffi.Pointer<UA_ReferenceNode> p1,
    ffi.Pointer<UA_ReferenceNode> p2,
  ) {
    return _UA_ReferenceNode_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReferenceNode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReferenceNode>, ffi.Pointer<UA_ReferenceNode>)>>(
          'UA_ReferenceNode_equal');
  late final _UA_ReferenceNode_equal = _UA_ReferenceNode_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReferenceNode>, ffi.Pointer<UA_ReferenceNode>)>();

  void UA_Argument_init(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_init(
      p,
    );
  }

  late final _UA_Argument_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>('UA_Argument_init');
  late final _UA_Argument_init = _UA_Argument_initPtr.asFunction<void Function(ffi.Pointer<UA_Argument>)>();

  ffi.Pointer<UA_Argument> UA_Argument_new() {
    return _UA_Argument_new();
  }

  late final _UA_Argument_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Argument> Function()>>('UA_Argument_new');
  late final _UA_Argument_new = _UA_Argument_newPtr.asFunction<ffi.Pointer<UA_Argument> Function()>();

  int UA_Argument_copy(
    ffi.Pointer<UA_Argument> src,
    ffi.Pointer<UA_Argument> dst,
  ) {
    return _UA_Argument_copy(
      src,
      dst,
    );
  }

  late final _UA_Argument_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_copy');
  late final _UA_Argument_copy =
      _UA_Argument_copyPtr.asFunction<int Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>();

  void UA_Argument_clear(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_clear(
      p,
    );
  }

  late final _UA_Argument_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>('UA_Argument_clear');
  late final _UA_Argument_clear = _UA_Argument_clearPtr.asFunction<void Function(ffi.Pointer<UA_Argument>)>();

  void UA_Argument_delete(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_delete(
      p,
    );
  }

  late final _UA_Argument_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>('UA_Argument_delete');
  late final _UA_Argument_delete = _UA_Argument_deletePtr.asFunction<void Function(ffi.Pointer<UA_Argument>)>();

  bool UA_Argument_equal(
    ffi.Pointer<UA_Argument> p1,
    ffi.Pointer<UA_Argument> p2,
  ) {
    return _UA_Argument_equal(
      p1,
      p2,
    );
  }

  late final _UA_Argument_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_equal');
  late final _UA_Argument_equal =
      _UA_Argument_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>();

  void UA_EnumValueType_init(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_init(
      p,
    );
  }

  late final _UA_EnumValueType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>('UA_EnumValueType_init');
  late final _UA_EnumValueType_init =
      _UA_EnumValueType_initPtr.asFunction<void Function(ffi.Pointer<UA_EnumValueType>)>();

  ffi.Pointer<UA_EnumValueType> UA_EnumValueType_new() {
    return _UA_EnumValueType_new();
  }

  late final _UA_EnumValueType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumValueType> Function()>>('UA_EnumValueType_new');
  late final _UA_EnumValueType_new = _UA_EnumValueType_newPtr.asFunction<ffi.Pointer<UA_EnumValueType> Function()>();

  int UA_EnumValueType_copy(
    ffi.Pointer<UA_EnumValueType> src,
    ffi.Pointer<UA_EnumValueType> dst,
  ) {
    return _UA_EnumValueType_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumValueType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>>(
          'UA_EnumValueType_copy');
  late final _UA_EnumValueType_copy = _UA_EnumValueType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_clear(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_clear(
      p,
    );
  }

  late final _UA_EnumValueType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>('UA_EnumValueType_clear');
  late final _UA_EnumValueType_clear =
      _UA_EnumValueType_clearPtr.asFunction<void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_delete(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_delete(
      p,
    );
  }

  late final _UA_EnumValueType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>('UA_EnumValueType_delete');
  late final _UA_EnumValueType_delete =
      _UA_EnumValueType_deletePtr.asFunction<void Function(ffi.Pointer<UA_EnumValueType>)>();

  bool UA_EnumValueType_equal(
    ffi.Pointer<UA_EnumValueType> p1,
    ffi.Pointer<UA_EnumValueType> p2,
  ) {
    return _UA_EnumValueType_equal(
      p1,
      p2,
    );
  }

  late final _UA_EnumValueType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>>(
          'UA_EnumValueType_equal');
  late final _UA_EnumValueType_equal = _UA_EnumValueType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumField_init(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_init(
      p,
    );
  }

  late final _UA_EnumField_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>('UA_EnumField_init');
  late final _UA_EnumField_init = _UA_EnumField_initPtr.asFunction<void Function(ffi.Pointer<UA_EnumField>)>();

  ffi.Pointer<UA_EnumField> UA_EnumField_new() {
    return _UA_EnumField_new();
  }

  late final _UA_EnumField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumField> Function()>>('UA_EnumField_new');
  late final _UA_EnumField_new = _UA_EnumField_newPtr.asFunction<ffi.Pointer<UA_EnumField> Function()>();

  int UA_EnumField_copy(
    ffi.Pointer<UA_EnumField> src,
    ffi.Pointer<UA_EnumField> dst,
  ) {
    return _UA_EnumField_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumField_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_copy');
  late final _UA_EnumField_copy =
      _UA_EnumField_copyPtr.asFunction<int Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_clear(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_clear(
      p,
    );
  }

  late final _UA_EnumField_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>('UA_EnumField_clear');
  late final _UA_EnumField_clear = _UA_EnumField_clearPtr.asFunction<void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_delete(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_delete(
      p,
    );
  }

  late final _UA_EnumField_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>('UA_EnumField_delete');
  late final _UA_EnumField_delete = _UA_EnumField_deletePtr.asFunction<void Function(ffi.Pointer<UA_EnumField>)>();

  bool UA_EnumField_equal(
    ffi.Pointer<UA_EnumField> p1,
    ffi.Pointer<UA_EnumField> p2,
  ) {
    return _UA_EnumField_equal(
      p1,
      p2,
    );
  }

  late final _UA_EnumField_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_equal');
  late final _UA_EnumField_equal =
      _UA_EnumField_equalPtr.asFunction<bool Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>();

  void UA_OptionSet_init(
    ffi.Pointer<UA_OptionSet> p,
  ) {
    return _UA_OptionSet_init(
      p,
    );
  }

  late final _UA_OptionSet_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OptionSet>)>>('UA_OptionSet_init');
  late final _UA_OptionSet_init = _UA_OptionSet_initPtr.asFunction<void Function(ffi.Pointer<UA_OptionSet>)>();

  ffi.Pointer<UA_OptionSet> UA_OptionSet_new() {
    return _UA_OptionSet_new();
  }

  late final _UA_OptionSet_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_OptionSet> Function()>>('UA_OptionSet_new');
  late final _UA_OptionSet_new = _UA_OptionSet_newPtr.asFunction<ffi.Pointer<UA_OptionSet> Function()>();

  int UA_OptionSet_copy(
    ffi.Pointer<UA_OptionSet> src,
    ffi.Pointer<UA_OptionSet> dst,
  ) {
    return _UA_OptionSet_copy(
      src,
      dst,
    );
  }

  late final _UA_OptionSet_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_OptionSet>, ffi.Pointer<UA_OptionSet>)>>(
          'UA_OptionSet_copy');
  late final _UA_OptionSet_copy =
      _UA_OptionSet_copyPtr.asFunction<int Function(ffi.Pointer<UA_OptionSet>, ffi.Pointer<UA_OptionSet>)>();

  void UA_OptionSet_clear(
    ffi.Pointer<UA_OptionSet> p,
  ) {
    return _UA_OptionSet_clear(
      p,
    );
  }

  late final _UA_OptionSet_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OptionSet>)>>('UA_OptionSet_clear');
  late final _UA_OptionSet_clear = _UA_OptionSet_clearPtr.asFunction<void Function(ffi.Pointer<UA_OptionSet>)>();

  void UA_OptionSet_delete(
    ffi.Pointer<UA_OptionSet> p,
  ) {
    return _UA_OptionSet_delete(
      p,
    );
  }

  late final _UA_OptionSet_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OptionSet>)>>('UA_OptionSet_delete');
  late final _UA_OptionSet_delete = _UA_OptionSet_deletePtr.asFunction<void Function(ffi.Pointer<UA_OptionSet>)>();

  bool UA_OptionSet_equal(
    ffi.Pointer<UA_OptionSet> p1,
    ffi.Pointer<UA_OptionSet> p2,
  ) {
    return _UA_OptionSet_equal(
      p1,
      p2,
    );
  }

  late final _UA_OptionSet_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_OptionSet>, ffi.Pointer<UA_OptionSet>)>>(
          'UA_OptionSet_equal');
  late final _UA_OptionSet_equal =
      _UA_OptionSet_equalPtr.asFunction<bool Function(ffi.Pointer<UA_OptionSet>, ffi.Pointer<UA_OptionSet>)>();

  void UA_NormalizedString_init(
    ffi.Pointer<UA_NormalizedString> p,
  ) {
    return _UA_NormalizedString_init(
      p,
    );
  }

  late final _UA_NormalizedString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NormalizedString>)>>('UA_NormalizedString_init');
  late final _UA_NormalizedString_init =
      _UA_NormalizedString_initPtr.asFunction<void Function(ffi.Pointer<UA_NormalizedString>)>();

  ffi.Pointer<UA_NormalizedString> UA_NormalizedString_new() {
    return _UA_NormalizedString_new();
  }

  late final _UA_NormalizedString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NormalizedString> Function()>>('UA_NormalizedString_new');
  late final _UA_NormalizedString_new =
      _UA_NormalizedString_newPtr.asFunction<ffi.Pointer<UA_NormalizedString> Function()>();

  int UA_NormalizedString_copy(
    ffi.Pointer<UA_NormalizedString> src,
    ffi.Pointer<UA_NormalizedString> dst,
  ) {
    return _UA_NormalizedString_copy(
      src,
      dst,
    );
  }

  late final _UA_NormalizedString_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NormalizedString>, ffi.Pointer<UA_NormalizedString>)>>(
      'UA_NormalizedString_copy');
  late final _UA_NormalizedString_copy = _UA_NormalizedString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NormalizedString>, ffi.Pointer<UA_NormalizedString>)>();

  void UA_NormalizedString_clear(
    ffi.Pointer<UA_NormalizedString> p,
  ) {
    return _UA_NormalizedString_clear(
      p,
    );
  }

  late final _UA_NormalizedString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NormalizedString>)>>('UA_NormalizedString_clear');
  late final _UA_NormalizedString_clear =
      _UA_NormalizedString_clearPtr.asFunction<void Function(ffi.Pointer<UA_NormalizedString>)>();

  void UA_NormalizedString_delete(
    ffi.Pointer<UA_NormalizedString> p,
  ) {
    return _UA_NormalizedString_delete(
      p,
    );
  }

  late final _UA_NormalizedString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NormalizedString>)>>('UA_NormalizedString_delete');
  late final _UA_NormalizedString_delete =
      _UA_NormalizedString_deletePtr.asFunction<void Function(ffi.Pointer<UA_NormalizedString>)>();

  bool UA_NormalizedString_equal(
    ffi.Pointer<UA_NormalizedString> p1,
    ffi.Pointer<UA_NormalizedString> p2,
  ) {
    return _UA_NormalizedString_equal(
      p1,
      p2,
    );
  }

  late final _UA_NormalizedString_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NormalizedString>, ffi.Pointer<UA_NormalizedString>)>>(
      'UA_NormalizedString_equal');
  late final _UA_NormalizedString_equal = _UA_NormalizedString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NormalizedString>, ffi.Pointer<UA_NormalizedString>)>();

  void UA_DecimalString_init(
    ffi.Pointer<UA_DecimalString> p,
  ) {
    return _UA_DecimalString_init(
      p,
    );
  }

  late final _UA_DecimalString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalString>)>>('UA_DecimalString_init');
  late final _UA_DecimalString_init =
      _UA_DecimalString_initPtr.asFunction<void Function(ffi.Pointer<UA_DecimalString>)>();

  ffi.Pointer<UA_DecimalString> UA_DecimalString_new() {
    return _UA_DecimalString_new();
  }

  late final _UA_DecimalString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DecimalString> Function()>>('UA_DecimalString_new');
  late final _UA_DecimalString_new = _UA_DecimalString_newPtr.asFunction<ffi.Pointer<UA_DecimalString> Function()>();

  int UA_DecimalString_copy(
    ffi.Pointer<UA_DecimalString> src,
    ffi.Pointer<UA_DecimalString> dst,
  ) {
    return _UA_DecimalString_copy(
      src,
      dst,
    );
  }

  late final _UA_DecimalString_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DecimalString>, ffi.Pointer<UA_DecimalString>)>>(
          'UA_DecimalString_copy');
  late final _UA_DecimalString_copy = _UA_DecimalString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DecimalString>, ffi.Pointer<UA_DecimalString>)>();

  void UA_DecimalString_clear(
    ffi.Pointer<UA_DecimalString> p,
  ) {
    return _UA_DecimalString_clear(
      p,
    );
  }

  late final _UA_DecimalString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalString>)>>('UA_DecimalString_clear');
  late final _UA_DecimalString_clear =
      _UA_DecimalString_clearPtr.asFunction<void Function(ffi.Pointer<UA_DecimalString>)>();

  void UA_DecimalString_delete(
    ffi.Pointer<UA_DecimalString> p,
  ) {
    return _UA_DecimalString_delete(
      p,
    );
  }

  late final _UA_DecimalString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DecimalString>)>>('UA_DecimalString_delete');
  late final _UA_DecimalString_delete =
      _UA_DecimalString_deletePtr.asFunction<void Function(ffi.Pointer<UA_DecimalString>)>();

  bool UA_DecimalString_equal(
    ffi.Pointer<UA_DecimalString> p1,
    ffi.Pointer<UA_DecimalString> p2,
  ) {
    return _UA_DecimalString_equal(
      p1,
      p2,
    );
  }

  late final _UA_DecimalString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DecimalString>, ffi.Pointer<UA_DecimalString>)>>(
          'UA_DecimalString_equal');
  late final _UA_DecimalString_equal = _UA_DecimalString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DecimalString>, ffi.Pointer<UA_DecimalString>)>();

  void UA_DurationString_init(
    ffi.Pointer<UA_DurationString> p,
  ) {
    return _UA_DurationString_init(
      p,
    );
  }

  late final _UA_DurationString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DurationString>)>>('UA_DurationString_init');
  late final _UA_DurationString_init =
      _UA_DurationString_initPtr.asFunction<void Function(ffi.Pointer<UA_DurationString>)>();

  ffi.Pointer<UA_DurationString> UA_DurationString_new() {
    return _UA_DurationString_new();
  }

  late final _UA_DurationString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DurationString> Function()>>('UA_DurationString_new');
  late final _UA_DurationString_new = _UA_DurationString_newPtr.asFunction<ffi.Pointer<UA_DurationString> Function()>();

  int UA_DurationString_copy(
    ffi.Pointer<UA_DurationString> src,
    ffi.Pointer<UA_DurationString> dst,
  ) {
    return _UA_DurationString_copy(
      src,
      dst,
    );
  }

  late final _UA_DurationString_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DurationString>, ffi.Pointer<UA_DurationString>)>>(
      'UA_DurationString_copy');
  late final _UA_DurationString_copy = _UA_DurationString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DurationString>, ffi.Pointer<UA_DurationString>)>();

  void UA_DurationString_clear(
    ffi.Pointer<UA_DurationString> p,
  ) {
    return _UA_DurationString_clear(
      p,
    );
  }

  late final _UA_DurationString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DurationString>)>>('UA_DurationString_clear');
  late final _UA_DurationString_clear =
      _UA_DurationString_clearPtr.asFunction<void Function(ffi.Pointer<UA_DurationString>)>();

  void UA_DurationString_delete(
    ffi.Pointer<UA_DurationString> p,
  ) {
    return _UA_DurationString_delete(
      p,
    );
  }

  late final _UA_DurationString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DurationString>)>>('UA_DurationString_delete');
  late final _UA_DurationString_delete =
      _UA_DurationString_deletePtr.asFunction<void Function(ffi.Pointer<UA_DurationString>)>();

  bool UA_DurationString_equal(
    ffi.Pointer<UA_DurationString> p1,
    ffi.Pointer<UA_DurationString> p2,
  ) {
    return _UA_DurationString_equal(
      p1,
      p2,
    );
  }

  late final _UA_DurationString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DurationString>, ffi.Pointer<UA_DurationString>)>>(
          'UA_DurationString_equal');
  late final _UA_DurationString_equal = _UA_DurationString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DurationString>, ffi.Pointer<UA_DurationString>)>();

  void UA_TimeString_init(
    ffi.Pointer<UA_TimeString> p,
  ) {
    return _UA_TimeString_init(
      p,
    );
  }

  late final _UA_TimeString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeString>)>>('UA_TimeString_init');
  late final _UA_TimeString_init = _UA_TimeString_initPtr.asFunction<void Function(ffi.Pointer<UA_TimeString>)>();

  ffi.Pointer<UA_TimeString> UA_TimeString_new() {
    return _UA_TimeString_new();
  }

  late final _UA_TimeString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TimeString> Function()>>('UA_TimeString_new');
  late final _UA_TimeString_new = _UA_TimeString_newPtr.asFunction<ffi.Pointer<UA_TimeString> Function()>();

  int UA_TimeString_copy(
    ffi.Pointer<UA_TimeString> src,
    ffi.Pointer<UA_TimeString> dst,
  ) {
    return _UA_TimeString_copy(
      src,
      dst,
    );
  }

  late final _UA_TimeString_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_TimeString>, ffi.Pointer<UA_TimeString>)>>(
          'UA_TimeString_copy');
  late final _UA_TimeString_copy =
      _UA_TimeString_copyPtr.asFunction<int Function(ffi.Pointer<UA_TimeString>, ffi.Pointer<UA_TimeString>)>();

  void UA_TimeString_clear(
    ffi.Pointer<UA_TimeString> p,
  ) {
    return _UA_TimeString_clear(
      p,
    );
  }

  late final _UA_TimeString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeString>)>>('UA_TimeString_clear');
  late final _UA_TimeString_clear = _UA_TimeString_clearPtr.asFunction<void Function(ffi.Pointer<UA_TimeString>)>();

  void UA_TimeString_delete(
    ffi.Pointer<UA_TimeString> p,
  ) {
    return _UA_TimeString_delete(
      p,
    );
  }

  late final _UA_TimeString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeString>)>>('UA_TimeString_delete');
  late final _UA_TimeString_delete = _UA_TimeString_deletePtr.asFunction<void Function(ffi.Pointer<UA_TimeString>)>();

  bool UA_TimeString_equal(
    ffi.Pointer<UA_TimeString> p1,
    ffi.Pointer<UA_TimeString> p2,
  ) {
    return _UA_TimeString_equal(
      p1,
      p2,
    );
  }

  late final _UA_TimeString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_TimeString>, ffi.Pointer<UA_TimeString>)>>(
          'UA_TimeString_equal');
  late final _UA_TimeString_equal =
      _UA_TimeString_equalPtr.asFunction<bool Function(ffi.Pointer<UA_TimeString>, ffi.Pointer<UA_TimeString>)>();

  void UA_DateString_init(
    ffi.Pointer<UA_DateString> p,
  ) {
    return _UA_DateString_init(
      p,
    );
  }

  late final _UA_DateString_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateString>)>>('UA_DateString_init');
  late final _UA_DateString_init = _UA_DateString_initPtr.asFunction<void Function(ffi.Pointer<UA_DateString>)>();

  ffi.Pointer<UA_DateString> UA_DateString_new() {
    return _UA_DateString_new();
  }

  late final _UA_DateString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DateString> Function()>>('UA_DateString_new');
  late final _UA_DateString_new = _UA_DateString_newPtr.asFunction<ffi.Pointer<UA_DateString> Function()>();

  int UA_DateString_copy(
    ffi.Pointer<UA_DateString> src,
    ffi.Pointer<UA_DateString> dst,
  ) {
    return _UA_DateString_copy(
      src,
      dst,
    );
  }

  late final _UA_DateString_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DateString>, ffi.Pointer<UA_DateString>)>>(
          'UA_DateString_copy');
  late final _UA_DateString_copy =
      _UA_DateString_copyPtr.asFunction<int Function(ffi.Pointer<UA_DateString>, ffi.Pointer<UA_DateString>)>();

  void UA_DateString_clear(
    ffi.Pointer<UA_DateString> p,
  ) {
    return _UA_DateString_clear(
      p,
    );
  }

  late final _UA_DateString_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateString>)>>('UA_DateString_clear');
  late final _UA_DateString_clear = _UA_DateString_clearPtr.asFunction<void Function(ffi.Pointer<UA_DateString>)>();

  void UA_DateString_delete(
    ffi.Pointer<UA_DateString> p,
  ) {
    return _UA_DateString_delete(
      p,
    );
  }

  late final _UA_DateString_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateString>)>>('UA_DateString_delete');
  late final _UA_DateString_delete = _UA_DateString_deletePtr.asFunction<void Function(ffi.Pointer<UA_DateString>)>();

  bool UA_DateString_equal(
    ffi.Pointer<UA_DateString> p1,
    ffi.Pointer<UA_DateString> p2,
  ) {
    return _UA_DateString_equal(
      p1,
      p2,
    );
  }

  late final _UA_DateString_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DateString>, ffi.Pointer<UA_DateString>)>>(
          'UA_DateString_equal');
  late final _UA_DateString_equal =
      _UA_DateString_equalPtr.asFunction<bool Function(ffi.Pointer<UA_DateString>, ffi.Pointer<UA_DateString>)>();

  void UA_Duration_init(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_init(
      p,
    );
  }

  late final _UA_Duration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>('UA_Duration_init');
  late final _UA_Duration_init = _UA_Duration_initPtr.asFunction<void Function(ffi.Pointer<UA_Duration>)>();

  ffi.Pointer<UA_Duration> UA_Duration_new() {
    return _UA_Duration_new();
  }

  late final _UA_Duration_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Duration> Function()>>('UA_Duration_new');
  late final _UA_Duration_new = _UA_Duration_newPtr.asFunction<ffi.Pointer<UA_Duration> Function()>();

  int UA_Duration_copy(
    ffi.Pointer<UA_Duration> src,
    ffi.Pointer<UA_Duration> dst,
  ) {
    return _UA_Duration_copy(
      src,
      dst,
    );
  }

  late final _UA_Duration_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_copy');
  late final _UA_Duration_copy =
      _UA_Duration_copyPtr.asFunction<int Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>();

  void UA_Duration_clear(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_clear(
      p,
    );
  }

  late final _UA_Duration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>('UA_Duration_clear');
  late final _UA_Duration_clear = _UA_Duration_clearPtr.asFunction<void Function(ffi.Pointer<UA_Duration>)>();

  void UA_Duration_delete(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_delete(
      p,
    );
  }

  late final _UA_Duration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>('UA_Duration_delete');
  late final _UA_Duration_delete = _UA_Duration_deletePtr.asFunction<void Function(ffi.Pointer<UA_Duration>)>();

  bool UA_Duration_equal(
    ffi.Pointer<UA_Duration> p1,
    ffi.Pointer<UA_Duration> p2,
  ) {
    return _UA_Duration_equal(
      p1,
      p2,
    );
  }

  late final _UA_Duration_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_equal');
  late final _UA_Duration_equal =
      _UA_Duration_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>();

  void UA_UtcTime_init(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_init(
      p,
    );
  }

  late final _UA_UtcTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>('UA_UtcTime_init');
  late final _UA_UtcTime_init = _UA_UtcTime_initPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  ffi.Pointer<UA_UtcTime> UA_UtcTime_new() {
    return _UA_UtcTime_new();
  }

  late final _UA_UtcTime_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_UtcTime> Function()>>('UA_UtcTime_new');
  late final _UA_UtcTime_new = _UA_UtcTime_newPtr.asFunction<ffi.Pointer<UA_UtcTime> Function()>();

  int UA_UtcTime_copy(
    ffi.Pointer<UA_UtcTime> src,
    ffi.Pointer<UA_UtcTime> dst,
  ) {
    return _UA_UtcTime_copy(
      src,
      dst,
    );
  }

  late final _UA_UtcTime_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_copy');
  late final _UA_UtcTime_copy =
      _UA_UtcTime_copyPtr.asFunction<int Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_clear(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_clear(
      p,
    );
  }

  late final _UA_UtcTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>('UA_UtcTime_clear');
  late final _UA_UtcTime_clear = _UA_UtcTime_clearPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_delete(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_delete(
      p,
    );
  }

  late final _UA_UtcTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>('UA_UtcTime_delete');
  late final _UA_UtcTime_delete = _UA_UtcTime_deletePtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  bool UA_UtcTime_equal(
    ffi.Pointer<UA_UtcTime> p1,
    ffi.Pointer<UA_UtcTime> p2,
  ) {
    return _UA_UtcTime_equal(
      p1,
      p2,
    );
  }

  late final _UA_UtcTime_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_equal');
  late final _UA_UtcTime_equal =
      _UA_UtcTime_equalPtr.asFunction<bool Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>();

  void UA_LocaleId_init(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_init(
      p,
    );
  }

  late final _UA_LocaleId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>('UA_LocaleId_init');
  late final _UA_LocaleId_init = _UA_LocaleId_initPtr.asFunction<void Function(ffi.Pointer<UA_LocaleId>)>();

  ffi.Pointer<UA_LocaleId> UA_LocaleId_new() {
    return _UA_LocaleId_new();
  }

  late final _UA_LocaleId_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocaleId> Function()>>('UA_LocaleId_new');
  late final _UA_LocaleId_new = _UA_LocaleId_newPtr.asFunction<ffi.Pointer<UA_LocaleId> Function()>();

  int UA_LocaleId_copy(
    ffi.Pointer<UA_LocaleId> src,
    ffi.Pointer<UA_LocaleId> dst,
  ) {
    return _UA_LocaleId_copy(
      src,
      dst,
    );
  }

  late final _UA_LocaleId_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_copy');
  late final _UA_LocaleId_copy =
      _UA_LocaleId_copyPtr.asFunction<int Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_clear(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_clear(
      p,
    );
  }

  late final _UA_LocaleId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>('UA_LocaleId_clear');
  late final _UA_LocaleId_clear = _UA_LocaleId_clearPtr.asFunction<void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_delete(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_delete(
      p,
    );
  }

  late final _UA_LocaleId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>('UA_LocaleId_delete');
  late final _UA_LocaleId_delete = _UA_LocaleId_deletePtr.asFunction<void Function(ffi.Pointer<UA_LocaleId>)>();

  bool UA_LocaleId_equal(
    ffi.Pointer<UA_LocaleId> p1,
    ffi.Pointer<UA_LocaleId> p2,
  ) {
    return _UA_LocaleId_equal(
      p1,
      p2,
    );
  }

  late final _UA_LocaleId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_equal');
  late final _UA_LocaleId_equal =
      _UA_LocaleId_equalPtr.asFunction<bool Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>();

  void UA_TimeZoneDataType_init(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_init(
      p,
    );
  }

  late final _UA_TimeZoneDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>('UA_TimeZoneDataType_init');
  late final _UA_TimeZoneDataType_init =
      _UA_TimeZoneDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  ffi.Pointer<UA_TimeZoneDataType> UA_TimeZoneDataType_new() {
    return _UA_TimeZoneDataType_new();
  }

  late final _UA_TimeZoneDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TimeZoneDataType> Function()>>('UA_TimeZoneDataType_new');
  late final _UA_TimeZoneDataType_new =
      _UA_TimeZoneDataType_newPtr.asFunction<ffi.Pointer<UA_TimeZoneDataType> Function()>();

  int UA_TimeZoneDataType_copy(
    ffi.Pointer<UA_TimeZoneDataType> src,
    ffi.Pointer<UA_TimeZoneDataType> dst,
  ) {
    return _UA_TimeZoneDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TimeZoneDataType_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_TimeZoneDataType>, ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_copy');
  late final _UA_TimeZoneDataType_copy = _UA_TimeZoneDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TimeZoneDataType>, ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_clear(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_clear(
      p,
    );
  }

  late final _UA_TimeZoneDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>('UA_TimeZoneDataType_clear');
  late final _UA_TimeZoneDataType_clear =
      _UA_TimeZoneDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_delete(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_delete(
      p,
    );
  }

  late final _UA_TimeZoneDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>('UA_TimeZoneDataType_delete');
  late final _UA_TimeZoneDataType_delete =
      _UA_TimeZoneDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  bool UA_TimeZoneDataType_equal(
    ffi.Pointer<UA_TimeZoneDataType> p1,
    ffi.Pointer<UA_TimeZoneDataType> p2,
  ) {
    return _UA_TimeZoneDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_TimeZoneDataType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_TimeZoneDataType>, ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_equal');
  late final _UA_TimeZoneDataType_equal = _UA_TimeZoneDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TimeZoneDataType>, ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_Index_init(
    ffi.Pointer<UA_Index> p,
  ) {
    return _UA_Index_init(
      p,
    );
  }

  late final _UA_Index_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Index>)>>('UA_Index_init');
  late final _UA_Index_init = _UA_Index_initPtr.asFunction<void Function(ffi.Pointer<UA_Index>)>();

  ffi.Pointer<UA_Index> UA_Index_new() {
    return _UA_Index_new();
  }

  late final _UA_Index_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Index> Function()>>('UA_Index_new');
  late final _UA_Index_new = _UA_Index_newPtr.asFunction<ffi.Pointer<UA_Index> Function()>();

  int UA_Index_copy(
    ffi.Pointer<UA_Index> src,
    ffi.Pointer<UA_Index> dst,
  ) {
    return _UA_Index_copy(
      src,
      dst,
    );
  }

  late final _UA_Index_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Index>, ffi.Pointer<UA_Index>)>>(
          'UA_Index_copy');
  late final _UA_Index_copy =
      _UA_Index_copyPtr.asFunction<int Function(ffi.Pointer<UA_Index>, ffi.Pointer<UA_Index>)>();

  void UA_Index_clear(
    ffi.Pointer<UA_Index> p,
  ) {
    return _UA_Index_clear(
      p,
    );
  }

  late final _UA_Index_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Index>)>>('UA_Index_clear');
  late final _UA_Index_clear = _UA_Index_clearPtr.asFunction<void Function(ffi.Pointer<UA_Index>)>();

  void UA_Index_delete(
    ffi.Pointer<UA_Index> p,
  ) {
    return _UA_Index_delete(
      p,
    );
  }

  late final _UA_Index_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Index>)>>('UA_Index_delete');
  late final _UA_Index_delete = _UA_Index_deletePtr.asFunction<void Function(ffi.Pointer<UA_Index>)>();

  bool UA_Index_equal(
    ffi.Pointer<UA_Index> p1,
    ffi.Pointer<UA_Index> p2,
  ) {
    return _UA_Index_equal(
      p1,
      p2,
    );
  }

  late final _UA_Index_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Index>, ffi.Pointer<UA_Index>)>>('UA_Index_equal');
  late final _UA_Index_equal =
      _UA_Index_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Index>, ffi.Pointer<UA_Index>)>();

  void UA_IntegerId_init(
    ffi.Pointer<UA_IntegerId> p,
  ) {
    return _UA_IntegerId_init(
      p,
    );
  }

  late final _UA_IntegerId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IntegerId>)>>('UA_IntegerId_init');
  late final _UA_IntegerId_init = _UA_IntegerId_initPtr.asFunction<void Function(ffi.Pointer<UA_IntegerId>)>();

  ffi.Pointer<UA_IntegerId> UA_IntegerId_new() {
    return _UA_IntegerId_new();
  }

  late final _UA_IntegerId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_IntegerId> Function()>>('UA_IntegerId_new');
  late final _UA_IntegerId_new = _UA_IntegerId_newPtr.asFunction<ffi.Pointer<UA_IntegerId> Function()>();

  int UA_IntegerId_copy(
    ffi.Pointer<UA_IntegerId> src,
    ffi.Pointer<UA_IntegerId> dst,
  ) {
    return _UA_IntegerId_copy(
      src,
      dst,
    );
  }

  late final _UA_IntegerId_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_IntegerId>, ffi.Pointer<UA_IntegerId>)>>(
          'UA_IntegerId_copy');
  late final _UA_IntegerId_copy =
      _UA_IntegerId_copyPtr.asFunction<int Function(ffi.Pointer<UA_IntegerId>, ffi.Pointer<UA_IntegerId>)>();

  void UA_IntegerId_clear(
    ffi.Pointer<UA_IntegerId> p,
  ) {
    return _UA_IntegerId_clear(
      p,
    );
  }

  late final _UA_IntegerId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IntegerId>)>>('UA_IntegerId_clear');
  late final _UA_IntegerId_clear = _UA_IntegerId_clearPtr.asFunction<void Function(ffi.Pointer<UA_IntegerId>)>();

  void UA_IntegerId_delete(
    ffi.Pointer<UA_IntegerId> p,
  ) {
    return _UA_IntegerId_delete(
      p,
    );
  }

  late final _UA_IntegerId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IntegerId>)>>('UA_IntegerId_delete');
  late final _UA_IntegerId_delete = _UA_IntegerId_deletePtr.asFunction<void Function(ffi.Pointer<UA_IntegerId>)>();

  bool UA_IntegerId_equal(
    ffi.Pointer<UA_IntegerId> p1,
    ffi.Pointer<UA_IntegerId> p2,
  ) {
    return _UA_IntegerId_equal(
      p1,
      p2,
    );
  }

  late final _UA_IntegerId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_IntegerId>, ffi.Pointer<UA_IntegerId>)>>(
          'UA_IntegerId_equal');
  late final _UA_IntegerId_equal =
      _UA_IntegerId_equalPtr.asFunction<bool Function(ffi.Pointer<UA_IntegerId>, ffi.Pointer<UA_IntegerId>)>();

  void UA_ApplicationType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ApplicationType_init(
      p,
    );
  }

  late final _UA_ApplicationType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ApplicationType_init');
  late final _UA_ApplicationType_init =
      _UA_ApplicationType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_ApplicationType_new() {
    return _UA_ApplicationType_new();
  }

  late final _UA_ApplicationType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_ApplicationType_new');
  late final _UA_ApplicationType_new = _UA_ApplicationType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_ApplicationType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_ApplicationType_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ApplicationType_copy');
  late final _UA_ApplicationType_copy = _UA_ApplicationType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ApplicationType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ApplicationType_clear(
      p,
    );
  }

  late final _UA_ApplicationType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ApplicationType_clear');
  late final _UA_ApplicationType_clear =
      _UA_ApplicationType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ApplicationType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ApplicationType_delete(
      p,
    );
  }

  late final _UA_ApplicationType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ApplicationType_delete');
  late final _UA_ApplicationType_delete =
      _UA_ApplicationType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_ApplicationType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_ApplicationType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ApplicationType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ApplicationType_equal');
  late final _UA_ApplicationType_equal = _UA_ApplicationType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ApplicationDescription_init(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_init(
      p,
    );
  }

  late final _UA_ApplicationDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
          'UA_ApplicationDescription_init');
  late final _UA_ApplicationDescription_init =
      _UA_ApplicationDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  ffi.Pointer<UA_ApplicationDescription> UA_ApplicationDescription_new() {
    return _UA_ApplicationDescription_new();
  }

  late final _UA_ApplicationDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ApplicationDescription> Function()>>('UA_ApplicationDescription_new');
  late final _UA_ApplicationDescription_new =
      _UA_ApplicationDescription_newPtr.asFunction<ffi.Pointer<UA_ApplicationDescription> Function()>();

  int UA_ApplicationDescription_copy(
    ffi.Pointer<UA_ApplicationDescription> src,
    ffi.Pointer<UA_ApplicationDescription> dst,
  ) {
    return _UA_ApplicationDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ApplicationDescription>,
              ffi.Pointer<UA_ApplicationDescription>)>>('UA_ApplicationDescription_copy');
  late final _UA_ApplicationDescription_copy = _UA_ApplicationDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ApplicationDescription>, ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_clear(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_clear(
      p,
    );
  }

  late final _UA_ApplicationDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
          'UA_ApplicationDescription_clear');
  late final _UA_ApplicationDescription_clear =
      _UA_ApplicationDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_delete(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_delete(
      p,
    );
  }

  late final _UA_ApplicationDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
          'UA_ApplicationDescription_delete');
  late final _UA_ApplicationDescription_delete =
      _UA_ApplicationDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  bool UA_ApplicationDescription_equal(
    ffi.Pointer<UA_ApplicationDescription> p1,
    ffi.Pointer<UA_ApplicationDescription> p2,
  ) {
    return _UA_ApplicationDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_ApplicationDescription_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ApplicationDescription>,
              ffi.Pointer<UA_ApplicationDescription>)>>('UA_ApplicationDescription_equal');
  late final _UA_ApplicationDescription_equal = _UA_ApplicationDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ApplicationDescription>, ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_RequestHeader_init(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_init(
      p,
    );
  }

  late final _UA_RequestHeader_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>('UA_RequestHeader_init');
  late final _UA_RequestHeader_init =
      _UA_RequestHeader_initPtr.asFunction<void Function(ffi.Pointer<UA_RequestHeader>)>();

  ffi.Pointer<UA_RequestHeader> UA_RequestHeader_new() {
    return _UA_RequestHeader_new();
  }

  late final _UA_RequestHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RequestHeader> Function()>>('UA_RequestHeader_new');
  late final _UA_RequestHeader_new = _UA_RequestHeader_newPtr.asFunction<ffi.Pointer<UA_RequestHeader> Function()>();

  int UA_RequestHeader_copy(
    ffi.Pointer<UA_RequestHeader> src,
    ffi.Pointer<UA_RequestHeader> dst,
  ) {
    return _UA_RequestHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_RequestHeader_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>>(
          'UA_RequestHeader_copy');
  late final _UA_RequestHeader_copy = _UA_RequestHeader_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_clear(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_clear(
      p,
    );
  }

  late final _UA_RequestHeader_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>('UA_RequestHeader_clear');
  late final _UA_RequestHeader_clear =
      _UA_RequestHeader_clearPtr.asFunction<void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_delete(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_delete(
      p,
    );
  }

  late final _UA_RequestHeader_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>('UA_RequestHeader_delete');
  late final _UA_RequestHeader_delete =
      _UA_RequestHeader_deletePtr.asFunction<void Function(ffi.Pointer<UA_RequestHeader>)>();

  bool UA_RequestHeader_equal(
    ffi.Pointer<UA_RequestHeader> p1,
    ffi.Pointer<UA_RequestHeader> p2,
  ) {
    return _UA_RequestHeader_equal(
      p1,
      p2,
    );
  }

  late final _UA_RequestHeader_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>>(
          'UA_RequestHeader_equal');
  late final _UA_RequestHeader_equal = _UA_RequestHeader_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>();

  void UA_ResponseHeader_init(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_init(
      p,
    );
  }

  late final _UA_ResponseHeader_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>('UA_ResponseHeader_init');
  late final _UA_ResponseHeader_init =
      _UA_ResponseHeader_initPtr.asFunction<void Function(ffi.Pointer<UA_ResponseHeader>)>();

  ffi.Pointer<UA_ResponseHeader> UA_ResponseHeader_new() {
    return _UA_ResponseHeader_new();
  }

  late final _UA_ResponseHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ResponseHeader> Function()>>('UA_ResponseHeader_new');
  late final _UA_ResponseHeader_new = _UA_ResponseHeader_newPtr.asFunction<ffi.Pointer<UA_ResponseHeader> Function()>();

  int UA_ResponseHeader_copy(
    ffi.Pointer<UA_ResponseHeader> src,
    ffi.Pointer<UA_ResponseHeader> dst,
  ) {
    return _UA_ResponseHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_ResponseHeader_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_copy');
  late final _UA_ResponseHeader_copy = _UA_ResponseHeader_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_clear(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_clear(
      p,
    );
  }

  late final _UA_ResponseHeader_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>('UA_ResponseHeader_clear');
  late final _UA_ResponseHeader_clear =
      _UA_ResponseHeader_clearPtr.asFunction<void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_delete(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_delete(
      p,
    );
  }

  late final _UA_ResponseHeader_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>('UA_ResponseHeader_delete');
  late final _UA_ResponseHeader_delete =
      _UA_ResponseHeader_deletePtr.asFunction<void Function(ffi.Pointer<UA_ResponseHeader>)>();

  bool UA_ResponseHeader_equal(
    ffi.Pointer<UA_ResponseHeader> p1,
    ffi.Pointer<UA_ResponseHeader> p2,
  ) {
    return _UA_ResponseHeader_equal(
      p1,
      p2,
    );
  }

  late final _UA_ResponseHeader_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>>(
          'UA_ResponseHeader_equal');
  late final _UA_ResponseHeader_equal = _UA_ResponseHeader_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>();

  void UA_VersionTime_init(
    ffi.Pointer<UA_VersionTime> p,
  ) {
    return _UA_VersionTime_init(
      p,
    );
  }

  late final _UA_VersionTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VersionTime>)>>('UA_VersionTime_init');
  late final _UA_VersionTime_init = _UA_VersionTime_initPtr.asFunction<void Function(ffi.Pointer<UA_VersionTime>)>();

  ffi.Pointer<UA_VersionTime> UA_VersionTime_new() {
    return _UA_VersionTime_new();
  }

  late final _UA_VersionTime_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_VersionTime> Function()>>('UA_VersionTime_new');
  late final _UA_VersionTime_new = _UA_VersionTime_newPtr.asFunction<ffi.Pointer<UA_VersionTime> Function()>();

  int UA_VersionTime_copy(
    ffi.Pointer<UA_VersionTime> src,
    ffi.Pointer<UA_VersionTime> dst,
  ) {
    return _UA_VersionTime_copy(
      src,
      dst,
    );
  }

  late final _UA_VersionTime_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_VersionTime>, ffi.Pointer<UA_VersionTime>)>>(
          'UA_VersionTime_copy');
  late final _UA_VersionTime_copy =
      _UA_VersionTime_copyPtr.asFunction<int Function(ffi.Pointer<UA_VersionTime>, ffi.Pointer<UA_VersionTime>)>();

  void UA_VersionTime_clear(
    ffi.Pointer<UA_VersionTime> p,
  ) {
    return _UA_VersionTime_clear(
      p,
    );
  }

  late final _UA_VersionTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VersionTime>)>>('UA_VersionTime_clear');
  late final _UA_VersionTime_clear = _UA_VersionTime_clearPtr.asFunction<void Function(ffi.Pointer<UA_VersionTime>)>();

  void UA_VersionTime_delete(
    ffi.Pointer<UA_VersionTime> p,
  ) {
    return _UA_VersionTime_delete(
      p,
    );
  }

  late final _UA_VersionTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VersionTime>)>>('UA_VersionTime_delete');
  late final _UA_VersionTime_delete =
      _UA_VersionTime_deletePtr.asFunction<void Function(ffi.Pointer<UA_VersionTime>)>();

  bool UA_VersionTime_equal(
    ffi.Pointer<UA_VersionTime> p1,
    ffi.Pointer<UA_VersionTime> p2,
  ) {
    return _UA_VersionTime_equal(
      p1,
      p2,
    );
  }

  late final _UA_VersionTime_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_VersionTime>, ffi.Pointer<UA_VersionTime>)>>(
          'UA_VersionTime_equal');
  late final _UA_VersionTime_equal =
      _UA_VersionTime_equalPtr.asFunction<bool Function(ffi.Pointer<UA_VersionTime>, ffi.Pointer<UA_VersionTime>)>();

  void UA_ServiceFault_init(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_init(
      p,
    );
  }

  late final _UA_ServiceFault_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>('UA_ServiceFault_init');
  late final _UA_ServiceFault_init = _UA_ServiceFault_initPtr.asFunction<void Function(ffi.Pointer<UA_ServiceFault>)>();

  ffi.Pointer<UA_ServiceFault> UA_ServiceFault_new() {
    return _UA_ServiceFault_new();
  }

  late final _UA_ServiceFault_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServiceFault> Function()>>('UA_ServiceFault_new');
  late final _UA_ServiceFault_new = _UA_ServiceFault_newPtr.asFunction<ffi.Pointer<UA_ServiceFault> Function()>();

  int UA_ServiceFault_copy(
    ffi.Pointer<UA_ServiceFault> src,
    ffi.Pointer<UA_ServiceFault> dst,
  ) {
    return _UA_ServiceFault_copy(
      src,
      dst,
    );
  }

  late final _UA_ServiceFault_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>>(
          'UA_ServiceFault_copy');
  late final _UA_ServiceFault_copy =
      _UA_ServiceFault_copyPtr.asFunction<int Function(ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_clear(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_clear(
      p,
    );
  }

  late final _UA_ServiceFault_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>('UA_ServiceFault_clear');
  late final _UA_ServiceFault_clear =
      _UA_ServiceFault_clearPtr.asFunction<void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_delete(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_delete(
      p,
    );
  }

  late final _UA_ServiceFault_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>('UA_ServiceFault_delete');
  late final _UA_ServiceFault_delete =
      _UA_ServiceFault_deletePtr.asFunction<void Function(ffi.Pointer<UA_ServiceFault>)>();

  bool UA_ServiceFault_equal(
    ffi.Pointer<UA_ServiceFault> p1,
    ffi.Pointer<UA_ServiceFault> p2,
  ) {
    return _UA_ServiceFault_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServiceFault_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>>(
          'UA_ServiceFault_equal');
  late final _UA_ServiceFault_equal =
      _UA_ServiceFault_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>();

  void UA_SessionlessInvokeRequestType_init(
    ffi.Pointer<UA_SessionlessInvokeRequestType> p,
  ) {
    return _UA_SessionlessInvokeRequestType_init(
      p,
    );
  }

  late final _UA_SessionlessInvokeRequestType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>>(
          'UA_SessionlessInvokeRequestType_init');
  late final _UA_SessionlessInvokeRequestType_init = _UA_SessionlessInvokeRequestType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>();

  ffi.Pointer<UA_SessionlessInvokeRequestType> UA_SessionlessInvokeRequestType_new() {
    return _UA_SessionlessInvokeRequestType_new();
  }

  late final _UA_SessionlessInvokeRequestType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SessionlessInvokeRequestType> Function()>>(
          'UA_SessionlessInvokeRequestType_new');
  late final _UA_SessionlessInvokeRequestType_new =
      _UA_SessionlessInvokeRequestType_newPtr.asFunction<ffi.Pointer<UA_SessionlessInvokeRequestType> Function()>();

  int UA_SessionlessInvokeRequestType_copy(
    ffi.Pointer<UA_SessionlessInvokeRequestType> src,
    ffi.Pointer<UA_SessionlessInvokeRequestType> dst,
  ) {
    return _UA_SessionlessInvokeRequestType_copy(
      src,
      dst,
    );
  }

  late final _UA_SessionlessInvokeRequestType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SessionlessInvokeRequestType>,
              ffi.Pointer<UA_SessionlessInvokeRequestType>)>>('UA_SessionlessInvokeRequestType_copy');
  late final _UA_SessionlessInvokeRequestType_copy = _UA_SessionlessInvokeRequestType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SessionlessInvokeRequestType>, ffi.Pointer<UA_SessionlessInvokeRequestType>)>();

  void UA_SessionlessInvokeRequestType_clear(
    ffi.Pointer<UA_SessionlessInvokeRequestType> p,
  ) {
    return _UA_SessionlessInvokeRequestType_clear(
      p,
    );
  }

  late final _UA_SessionlessInvokeRequestType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>>(
          'UA_SessionlessInvokeRequestType_clear');
  late final _UA_SessionlessInvokeRequestType_clear = _UA_SessionlessInvokeRequestType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>();

  void UA_SessionlessInvokeRequestType_delete(
    ffi.Pointer<UA_SessionlessInvokeRequestType> p,
  ) {
    return _UA_SessionlessInvokeRequestType_delete(
      p,
    );
  }

  late final _UA_SessionlessInvokeRequestType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>>(
          'UA_SessionlessInvokeRequestType_delete');
  late final _UA_SessionlessInvokeRequestType_delete = _UA_SessionlessInvokeRequestType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeRequestType>)>();

  bool UA_SessionlessInvokeRequestType_equal(
    ffi.Pointer<UA_SessionlessInvokeRequestType> p1,
    ffi.Pointer<UA_SessionlessInvokeRequestType> p2,
  ) {
    return _UA_SessionlessInvokeRequestType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SessionlessInvokeRequestType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SessionlessInvokeRequestType>,
              ffi.Pointer<UA_SessionlessInvokeRequestType>)>>('UA_SessionlessInvokeRequestType_equal');
  late final _UA_SessionlessInvokeRequestType_equal = _UA_SessionlessInvokeRequestType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SessionlessInvokeRequestType>, ffi.Pointer<UA_SessionlessInvokeRequestType>)>();

  void UA_SessionlessInvokeResponseType_init(
    ffi.Pointer<UA_SessionlessInvokeResponseType> p,
  ) {
    return _UA_SessionlessInvokeResponseType_init(
      p,
    );
  }

  late final _UA_SessionlessInvokeResponseType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>>(
          'UA_SessionlessInvokeResponseType_init');
  late final _UA_SessionlessInvokeResponseType_init = _UA_SessionlessInvokeResponseType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>();

  ffi.Pointer<UA_SessionlessInvokeResponseType> UA_SessionlessInvokeResponseType_new() {
    return _UA_SessionlessInvokeResponseType_new();
  }

  late final _UA_SessionlessInvokeResponseType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SessionlessInvokeResponseType> Function()>>(
          'UA_SessionlessInvokeResponseType_new');
  late final _UA_SessionlessInvokeResponseType_new =
      _UA_SessionlessInvokeResponseType_newPtr.asFunction<ffi.Pointer<UA_SessionlessInvokeResponseType> Function()>();

  int UA_SessionlessInvokeResponseType_copy(
    ffi.Pointer<UA_SessionlessInvokeResponseType> src,
    ffi.Pointer<UA_SessionlessInvokeResponseType> dst,
  ) {
    return _UA_SessionlessInvokeResponseType_copy(
      src,
      dst,
    );
  }

  late final _UA_SessionlessInvokeResponseType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SessionlessInvokeResponseType>,
              ffi.Pointer<UA_SessionlessInvokeResponseType>)>>('UA_SessionlessInvokeResponseType_copy');
  late final _UA_SessionlessInvokeResponseType_copy = _UA_SessionlessInvokeResponseType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SessionlessInvokeResponseType>, ffi.Pointer<UA_SessionlessInvokeResponseType>)>();

  void UA_SessionlessInvokeResponseType_clear(
    ffi.Pointer<UA_SessionlessInvokeResponseType> p,
  ) {
    return _UA_SessionlessInvokeResponseType_clear(
      p,
    );
  }

  late final _UA_SessionlessInvokeResponseType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>>(
          'UA_SessionlessInvokeResponseType_clear');
  late final _UA_SessionlessInvokeResponseType_clear = _UA_SessionlessInvokeResponseType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>();

  void UA_SessionlessInvokeResponseType_delete(
    ffi.Pointer<UA_SessionlessInvokeResponseType> p,
  ) {
    return _UA_SessionlessInvokeResponseType_delete(
      p,
    );
  }

  late final _UA_SessionlessInvokeResponseType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>>(
          'UA_SessionlessInvokeResponseType_delete');
  late final _UA_SessionlessInvokeResponseType_delete = _UA_SessionlessInvokeResponseType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SessionlessInvokeResponseType>)>();

  bool UA_SessionlessInvokeResponseType_equal(
    ffi.Pointer<UA_SessionlessInvokeResponseType> p1,
    ffi.Pointer<UA_SessionlessInvokeResponseType> p2,
  ) {
    return _UA_SessionlessInvokeResponseType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SessionlessInvokeResponseType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SessionlessInvokeResponseType>,
              ffi.Pointer<UA_SessionlessInvokeResponseType>)>>('UA_SessionlessInvokeResponseType_equal');
  late final _UA_SessionlessInvokeResponseType_equal = _UA_SessionlessInvokeResponseType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SessionlessInvokeResponseType>, ffi.Pointer<UA_SessionlessInvokeResponseType>)>();

  void UA_FindServersRequest_init(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_init(
      p,
    );
  }

  late final _UA_FindServersRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>('UA_FindServersRequest_init');
  late final _UA_FindServersRequest_init =
      _UA_FindServersRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  ffi.Pointer<UA_FindServersRequest> UA_FindServersRequest_new() {
    return _UA_FindServersRequest_new();
  }

  late final _UA_FindServersRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FindServersRequest> Function()>>('UA_FindServersRequest_new');
  late final _UA_FindServersRequest_new =
      _UA_FindServersRequest_newPtr.asFunction<ffi.Pointer<UA_FindServersRequest> Function()>();

  int UA_FindServersRequest_copy(
    ffi.Pointer<UA_FindServersRequest> src,
    ffi.Pointer<UA_FindServersRequest> dst,
  ) {
    return _UA_FindServersRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_FindServersRequest>, ffi.Pointer<UA_FindServersRequest>)>>('UA_FindServersRequest_copy');
  late final _UA_FindServersRequest_copy = _UA_FindServersRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FindServersRequest>, ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_clear(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_clear(
      p,
    );
  }

  late final _UA_FindServersRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>('UA_FindServersRequest_clear');
  late final _UA_FindServersRequest_clear =
      _UA_FindServersRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_delete(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_delete(
      p,
    );
  }

  late final _UA_FindServersRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
          'UA_FindServersRequest_delete');
  late final _UA_FindServersRequest_delete =
      _UA_FindServersRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  bool UA_FindServersRequest_equal(
    ffi.Pointer<UA_FindServersRequest> p1,
    ffi.Pointer<UA_FindServersRequest> p2,
  ) {
    return _UA_FindServersRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_FindServersRequest_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_FindServersRequest>, ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_equal');
  late final _UA_FindServersRequest_equal = _UA_FindServersRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FindServersRequest>, ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersResponse_init(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_init(
      p,
    );
  }

  late final _UA_FindServersResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
          'UA_FindServersResponse_init');
  late final _UA_FindServersResponse_init =
      _UA_FindServersResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  ffi.Pointer<UA_FindServersResponse> UA_FindServersResponse_new() {
    return _UA_FindServersResponse_new();
  }

  late final _UA_FindServersResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FindServersResponse> Function()>>('UA_FindServersResponse_new');
  late final _UA_FindServersResponse_new =
      _UA_FindServersResponse_newPtr.asFunction<ffi.Pointer<UA_FindServersResponse> Function()>();

  int UA_FindServersResponse_copy(
    ffi.Pointer<UA_FindServersResponse> src,
    ffi.Pointer<UA_FindServersResponse> dst,
  ) {
    return _UA_FindServersResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FindServersResponse>,
              ffi.Pointer<UA_FindServersResponse>)>>('UA_FindServersResponse_copy');
  late final _UA_FindServersResponse_copy = _UA_FindServersResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FindServersResponse>, ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_clear(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_clear(
      p,
    );
  }

  late final _UA_FindServersResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
          'UA_FindServersResponse_clear');
  late final _UA_FindServersResponse_clear =
      _UA_FindServersResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_delete(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_delete(
      p,
    );
  }

  late final _UA_FindServersResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
          'UA_FindServersResponse_delete');
  late final _UA_FindServersResponse_delete =
      _UA_FindServersResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  bool UA_FindServersResponse_equal(
    ffi.Pointer<UA_FindServersResponse> p1,
    ffi.Pointer<UA_FindServersResponse> p2,
  ) {
    return _UA_FindServersResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_FindServersResponse_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_FindServersResponse>, ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_equal');
  late final _UA_FindServersResponse_equal = _UA_FindServersResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FindServersResponse>, ffi.Pointer<UA_FindServersResponse>)>();

  void UA_ServerOnNetwork_init(
    ffi.Pointer<UA_ServerOnNetwork> p,
  ) {
    return _UA_ServerOnNetwork_init(
      p,
    );
  }

  late final _UA_ServerOnNetwork_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerOnNetwork>)>>('UA_ServerOnNetwork_init');
  late final _UA_ServerOnNetwork_init =
      _UA_ServerOnNetwork_initPtr.asFunction<void Function(ffi.Pointer<UA_ServerOnNetwork>)>();

  ffi.Pointer<UA_ServerOnNetwork> UA_ServerOnNetwork_new() {
    return _UA_ServerOnNetwork_new();
  }

  late final _UA_ServerOnNetwork_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServerOnNetwork> Function()>>('UA_ServerOnNetwork_new');
  late final _UA_ServerOnNetwork_new =
      _UA_ServerOnNetwork_newPtr.asFunction<ffi.Pointer<UA_ServerOnNetwork> Function()>();

  int UA_ServerOnNetwork_copy(
    ffi.Pointer<UA_ServerOnNetwork> src,
    ffi.Pointer<UA_ServerOnNetwork> dst,
  ) {
    return _UA_ServerOnNetwork_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerOnNetwork_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerOnNetwork>, ffi.Pointer<UA_ServerOnNetwork>)>>(
      'UA_ServerOnNetwork_copy');
  late final _UA_ServerOnNetwork_copy = _UA_ServerOnNetwork_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerOnNetwork>, ffi.Pointer<UA_ServerOnNetwork>)>();

  void UA_ServerOnNetwork_clear(
    ffi.Pointer<UA_ServerOnNetwork> p,
  ) {
    return _UA_ServerOnNetwork_clear(
      p,
    );
  }

  late final _UA_ServerOnNetwork_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerOnNetwork>)>>('UA_ServerOnNetwork_clear');
  late final _UA_ServerOnNetwork_clear =
      _UA_ServerOnNetwork_clearPtr.asFunction<void Function(ffi.Pointer<UA_ServerOnNetwork>)>();

  void UA_ServerOnNetwork_delete(
    ffi.Pointer<UA_ServerOnNetwork> p,
  ) {
    return _UA_ServerOnNetwork_delete(
      p,
    );
  }

  late final _UA_ServerOnNetwork_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerOnNetwork>)>>('UA_ServerOnNetwork_delete');
  late final _UA_ServerOnNetwork_delete =
      _UA_ServerOnNetwork_deletePtr.asFunction<void Function(ffi.Pointer<UA_ServerOnNetwork>)>();

  bool UA_ServerOnNetwork_equal(
    ffi.Pointer<UA_ServerOnNetwork> p1,
    ffi.Pointer<UA_ServerOnNetwork> p2,
  ) {
    return _UA_ServerOnNetwork_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServerOnNetwork_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ServerOnNetwork>, ffi.Pointer<UA_ServerOnNetwork>)>>(
          'UA_ServerOnNetwork_equal');
  late final _UA_ServerOnNetwork_equal = _UA_ServerOnNetwork_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ServerOnNetwork>, ffi.Pointer<UA_ServerOnNetwork>)>();

  void UA_FindServersOnNetworkRequest_init(
    ffi.Pointer<UA_FindServersOnNetworkRequest> p,
  ) {
    return _UA_FindServersOnNetworkRequest_init(
      p,
    );
  }

  late final _UA_FindServersOnNetworkRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>>(
          'UA_FindServersOnNetworkRequest_init');
  late final _UA_FindServersOnNetworkRequest_init =
      _UA_FindServersOnNetworkRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>();

  ffi.Pointer<UA_FindServersOnNetworkRequest> UA_FindServersOnNetworkRequest_new() {
    return _UA_FindServersOnNetworkRequest_new();
  }

  late final _UA_FindServersOnNetworkRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FindServersOnNetworkRequest> Function()>>(
          'UA_FindServersOnNetworkRequest_new');
  late final _UA_FindServersOnNetworkRequest_new =
      _UA_FindServersOnNetworkRequest_newPtr.asFunction<ffi.Pointer<UA_FindServersOnNetworkRequest> Function()>();

  int UA_FindServersOnNetworkRequest_copy(
    ffi.Pointer<UA_FindServersOnNetworkRequest> src,
    ffi.Pointer<UA_FindServersOnNetworkRequest> dst,
  ) {
    return _UA_FindServersOnNetworkRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersOnNetworkRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FindServersOnNetworkRequest>,
              ffi.Pointer<UA_FindServersOnNetworkRequest>)>>('UA_FindServersOnNetworkRequest_copy');
  late final _UA_FindServersOnNetworkRequest_copy = _UA_FindServersOnNetworkRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FindServersOnNetworkRequest>, ffi.Pointer<UA_FindServersOnNetworkRequest>)>();

  void UA_FindServersOnNetworkRequest_clear(
    ffi.Pointer<UA_FindServersOnNetworkRequest> p,
  ) {
    return _UA_FindServersOnNetworkRequest_clear(
      p,
    );
  }

  late final _UA_FindServersOnNetworkRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>>(
          'UA_FindServersOnNetworkRequest_clear');
  late final _UA_FindServersOnNetworkRequest_clear =
      _UA_FindServersOnNetworkRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>();

  void UA_FindServersOnNetworkRequest_delete(
    ffi.Pointer<UA_FindServersOnNetworkRequest> p,
  ) {
    return _UA_FindServersOnNetworkRequest_delete(
      p,
    );
  }

  late final _UA_FindServersOnNetworkRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>>(
          'UA_FindServersOnNetworkRequest_delete');
  late final _UA_FindServersOnNetworkRequest_delete = _UA_FindServersOnNetworkRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_FindServersOnNetworkRequest>)>();

  bool UA_FindServersOnNetworkRequest_equal(
    ffi.Pointer<UA_FindServersOnNetworkRequest> p1,
    ffi.Pointer<UA_FindServersOnNetworkRequest> p2,
  ) {
    return _UA_FindServersOnNetworkRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_FindServersOnNetworkRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_FindServersOnNetworkRequest>,
              ffi.Pointer<UA_FindServersOnNetworkRequest>)>>('UA_FindServersOnNetworkRequest_equal');
  late final _UA_FindServersOnNetworkRequest_equal = _UA_FindServersOnNetworkRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FindServersOnNetworkRequest>, ffi.Pointer<UA_FindServersOnNetworkRequest>)>();

  void UA_FindServersOnNetworkResponse_init(
    ffi.Pointer<UA_FindServersOnNetworkResponse> p,
  ) {
    return _UA_FindServersOnNetworkResponse_init(
      p,
    );
  }

  late final _UA_FindServersOnNetworkResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>>(
          'UA_FindServersOnNetworkResponse_init');
  late final _UA_FindServersOnNetworkResponse_init = _UA_FindServersOnNetworkResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>();

  ffi.Pointer<UA_FindServersOnNetworkResponse> UA_FindServersOnNetworkResponse_new() {
    return _UA_FindServersOnNetworkResponse_new();
  }

  late final _UA_FindServersOnNetworkResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FindServersOnNetworkResponse> Function()>>(
          'UA_FindServersOnNetworkResponse_new');
  late final _UA_FindServersOnNetworkResponse_new =
      _UA_FindServersOnNetworkResponse_newPtr.asFunction<ffi.Pointer<UA_FindServersOnNetworkResponse> Function()>();

  int UA_FindServersOnNetworkResponse_copy(
    ffi.Pointer<UA_FindServersOnNetworkResponse> src,
    ffi.Pointer<UA_FindServersOnNetworkResponse> dst,
  ) {
    return _UA_FindServersOnNetworkResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersOnNetworkResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FindServersOnNetworkResponse>,
              ffi.Pointer<UA_FindServersOnNetworkResponse>)>>('UA_FindServersOnNetworkResponse_copy');
  late final _UA_FindServersOnNetworkResponse_copy = _UA_FindServersOnNetworkResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FindServersOnNetworkResponse>, ffi.Pointer<UA_FindServersOnNetworkResponse>)>();

  void UA_FindServersOnNetworkResponse_clear(
    ffi.Pointer<UA_FindServersOnNetworkResponse> p,
  ) {
    return _UA_FindServersOnNetworkResponse_clear(
      p,
    );
  }

  late final _UA_FindServersOnNetworkResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>>(
          'UA_FindServersOnNetworkResponse_clear');
  late final _UA_FindServersOnNetworkResponse_clear = _UA_FindServersOnNetworkResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>();

  void UA_FindServersOnNetworkResponse_delete(
    ffi.Pointer<UA_FindServersOnNetworkResponse> p,
  ) {
    return _UA_FindServersOnNetworkResponse_delete(
      p,
    );
  }

  late final _UA_FindServersOnNetworkResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>>(
          'UA_FindServersOnNetworkResponse_delete');
  late final _UA_FindServersOnNetworkResponse_delete = _UA_FindServersOnNetworkResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_FindServersOnNetworkResponse>)>();

  bool UA_FindServersOnNetworkResponse_equal(
    ffi.Pointer<UA_FindServersOnNetworkResponse> p1,
    ffi.Pointer<UA_FindServersOnNetworkResponse> p2,
  ) {
    return _UA_FindServersOnNetworkResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_FindServersOnNetworkResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_FindServersOnNetworkResponse>,
              ffi.Pointer<UA_FindServersOnNetworkResponse>)>>('UA_FindServersOnNetworkResponse_equal');
  late final _UA_FindServersOnNetworkResponse_equal = _UA_FindServersOnNetworkResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FindServersOnNetworkResponse>, ffi.Pointer<UA_FindServersOnNetworkResponse>)>();

  void UA_ApplicationInstanceCertificate_init(
    ffi.Pointer<UA_ApplicationInstanceCertificate> p,
  ) {
    return _UA_ApplicationInstanceCertificate_init(
      p,
    );
  }

  late final _UA_ApplicationInstanceCertificate_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>>(
          'UA_ApplicationInstanceCertificate_init');
  late final _UA_ApplicationInstanceCertificate_init = _UA_ApplicationInstanceCertificate_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>();

  ffi.Pointer<UA_ApplicationInstanceCertificate> UA_ApplicationInstanceCertificate_new() {
    return _UA_ApplicationInstanceCertificate_new();
  }

  late final _UA_ApplicationInstanceCertificate_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ApplicationInstanceCertificate> Function()>>(
          'UA_ApplicationInstanceCertificate_new');
  late final _UA_ApplicationInstanceCertificate_new =
      _UA_ApplicationInstanceCertificate_newPtr.asFunction<ffi.Pointer<UA_ApplicationInstanceCertificate> Function()>();

  int UA_ApplicationInstanceCertificate_copy(
    ffi.Pointer<UA_ApplicationInstanceCertificate> src,
    ffi.Pointer<UA_ApplicationInstanceCertificate> dst,
  ) {
    return _UA_ApplicationInstanceCertificate_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationInstanceCertificate_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ApplicationInstanceCertificate>,
              ffi.Pointer<UA_ApplicationInstanceCertificate>)>>('UA_ApplicationInstanceCertificate_copy');
  late final _UA_ApplicationInstanceCertificate_copy = _UA_ApplicationInstanceCertificate_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ApplicationInstanceCertificate>, ffi.Pointer<UA_ApplicationInstanceCertificate>)>();

  void UA_ApplicationInstanceCertificate_clear(
    ffi.Pointer<UA_ApplicationInstanceCertificate> p,
  ) {
    return _UA_ApplicationInstanceCertificate_clear(
      p,
    );
  }

  late final _UA_ApplicationInstanceCertificate_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>>(
          'UA_ApplicationInstanceCertificate_clear');
  late final _UA_ApplicationInstanceCertificate_clear = _UA_ApplicationInstanceCertificate_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>();

  void UA_ApplicationInstanceCertificate_delete(
    ffi.Pointer<UA_ApplicationInstanceCertificate> p,
  ) {
    return _UA_ApplicationInstanceCertificate_delete(
      p,
    );
  }

  late final _UA_ApplicationInstanceCertificate_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>>(
          'UA_ApplicationInstanceCertificate_delete');
  late final _UA_ApplicationInstanceCertificate_delete = _UA_ApplicationInstanceCertificate_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ApplicationInstanceCertificate>)>();

  bool UA_ApplicationInstanceCertificate_equal(
    ffi.Pointer<UA_ApplicationInstanceCertificate> p1,
    ffi.Pointer<UA_ApplicationInstanceCertificate> p2,
  ) {
    return _UA_ApplicationInstanceCertificate_equal(
      p1,
      p2,
    );
  }

  late final _UA_ApplicationInstanceCertificate_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ApplicationInstanceCertificate>,
              ffi.Pointer<UA_ApplicationInstanceCertificate>)>>('UA_ApplicationInstanceCertificate_equal');
  late final _UA_ApplicationInstanceCertificate_equal = _UA_ApplicationInstanceCertificate_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ApplicationInstanceCertificate>, ffi.Pointer<UA_ApplicationInstanceCertificate>)>();

  void UA_MessageSecurityMode_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MessageSecurityMode_init(
      p,
    );
  }

  late final _UA_MessageSecurityMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MessageSecurityMode_init');
  late final _UA_MessageSecurityMode_init =
      _UA_MessageSecurityMode_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_MessageSecurityMode_new() {
    return _UA_MessageSecurityMode_new();
  }

  late final _UA_MessageSecurityMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_MessageSecurityMode_new');
  late final _UA_MessageSecurityMode_new =
      _UA_MessageSecurityMode_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_MessageSecurityMode_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_MessageSecurityMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MessageSecurityMode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_MessageSecurityMode_copy');
  late final _UA_MessageSecurityMode_copy = _UA_MessageSecurityMode_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_MessageSecurityMode_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MessageSecurityMode_clear(
      p,
    );
  }

  late final _UA_MessageSecurityMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MessageSecurityMode_clear');
  late final _UA_MessageSecurityMode_clear =
      _UA_MessageSecurityMode_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_MessageSecurityMode_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MessageSecurityMode_delete(
      p,
    );
  }

  late final _UA_MessageSecurityMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MessageSecurityMode_delete');
  late final _UA_MessageSecurityMode_delete =
      _UA_MessageSecurityMode_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_MessageSecurityMode_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_MessageSecurityMode_equal(
      p1,
      p2,
    );
  }

  late final _UA_MessageSecurityMode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_MessageSecurityMode_equal');
  late final _UA_MessageSecurityMode_equal = _UA_MessageSecurityMode_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UserTokenType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_UserTokenType_init(
      p,
    );
  }

  late final _UA_UserTokenType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_UserTokenType_init');
  late final _UA_UserTokenType_init =
      _UA_UserTokenType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_UserTokenType_new() {
    return _UA_UserTokenType_new();
  }

  late final _UA_UserTokenType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_UserTokenType_new');
  late final _UA_UserTokenType_new = _UA_UserTokenType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_UserTokenType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_UserTokenType_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_UserTokenType_copy');
  late final _UA_UserTokenType_copy =
      _UA_UserTokenType_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UserTokenType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_UserTokenType_clear(
      p,
    );
  }

  late final _UA_UserTokenType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_UserTokenType_clear');
  late final _UA_UserTokenType_clear =
      _UA_UserTokenType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UserTokenType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_UserTokenType_delete(
      p,
    );
  }

  late final _UA_UserTokenType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_UserTokenType_delete');
  late final _UA_UserTokenType_delete =
      _UA_UserTokenType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_UserTokenType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_UserTokenType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserTokenType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_UserTokenType_equal');
  late final _UA_UserTokenType_equal = _UA_UserTokenType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UserTokenPolicy_init(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_init(
      p,
    );
  }

  late final _UA_UserTokenPolicy_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>('UA_UserTokenPolicy_init');
  late final _UA_UserTokenPolicy_init =
      _UA_UserTokenPolicy_initPtr.asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  ffi.Pointer<UA_UserTokenPolicy> UA_UserTokenPolicy_new() {
    return _UA_UserTokenPolicy_new();
  }

  late final _UA_UserTokenPolicy_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserTokenPolicy> Function()>>('UA_UserTokenPolicy_new');
  late final _UA_UserTokenPolicy_new =
      _UA_UserTokenPolicy_newPtr.asFunction<ffi.Pointer<UA_UserTokenPolicy> Function()>();

  int UA_UserTokenPolicy_copy(
    ffi.Pointer<UA_UserTokenPolicy> src,
    ffi.Pointer<UA_UserTokenPolicy> dst,
  ) {
    return _UA_UserTokenPolicy_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenPolicy_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_copy');
  late final _UA_UserTokenPolicy_copy = _UA_UserTokenPolicy_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_clear(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_clear(
      p,
    );
  }

  late final _UA_UserTokenPolicy_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>('UA_UserTokenPolicy_clear');
  late final _UA_UserTokenPolicy_clear =
      _UA_UserTokenPolicy_clearPtr.asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_delete(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_delete(
      p,
    );
  }

  late final _UA_UserTokenPolicy_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>('UA_UserTokenPolicy_delete');
  late final _UA_UserTokenPolicy_delete =
      _UA_UserTokenPolicy_deletePtr.asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  bool UA_UserTokenPolicy_equal(
    ffi.Pointer<UA_UserTokenPolicy> p1,
    ffi.Pointer<UA_UserTokenPolicy> p2,
  ) {
    return _UA_UserTokenPolicy_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserTokenPolicy_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>>(
          'UA_UserTokenPolicy_equal');
  late final _UA_UserTokenPolicy_equal = _UA_UserTokenPolicy_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_EndpointDescription_init(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_init(
      p,
    );
  }

  late final _UA_EndpointDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
          'UA_EndpointDescription_init');
  late final _UA_EndpointDescription_init =
      _UA_EndpointDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  ffi.Pointer<UA_EndpointDescription> UA_EndpointDescription_new() {
    return _UA_EndpointDescription_new();
  }

  late final _UA_EndpointDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EndpointDescription> Function()>>('UA_EndpointDescription_new');
  late final _UA_EndpointDescription_new =
      _UA_EndpointDescription_newPtr.asFunction<ffi.Pointer<UA_EndpointDescription> Function()>();

  int UA_EndpointDescription_copy(
    ffi.Pointer<UA_EndpointDescription> src,
    ffi.Pointer<UA_EndpointDescription> dst,
  ) {
    return _UA_EndpointDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EndpointDescription>,
              ffi.Pointer<UA_EndpointDescription>)>>('UA_EndpointDescription_copy');
  late final _UA_EndpointDescription_copy = _UA_EndpointDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EndpointDescription>, ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_clear(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_clear(
      p,
    );
  }

  late final _UA_EndpointDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
          'UA_EndpointDescription_clear');
  late final _UA_EndpointDescription_clear =
      _UA_EndpointDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_delete(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_delete(
      p,
    );
  }

  late final _UA_EndpointDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
          'UA_EndpointDescription_delete');
  late final _UA_EndpointDescription_delete =
      _UA_EndpointDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  bool UA_EndpointDescription_equal(
    ffi.Pointer<UA_EndpointDescription> p1,
    ffi.Pointer<UA_EndpointDescription> p2,
  ) {
    return _UA_EndpointDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_EndpointDescription_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EndpointDescription>, ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_equal');
  late final _UA_EndpointDescription_equal = _UA_EndpointDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EndpointDescription>, ffi.Pointer<UA_EndpointDescription>)>();

  void UA_GetEndpointsRequest_init(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_init(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
          'UA_GetEndpointsRequest_init');
  late final _UA_GetEndpointsRequest_init =
      _UA_GetEndpointsRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  ffi.Pointer<UA_GetEndpointsRequest> UA_GetEndpointsRequest_new() {
    return _UA_GetEndpointsRequest_new();
  }

  late final _UA_GetEndpointsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>>('UA_GetEndpointsRequest_new');
  late final _UA_GetEndpointsRequest_new =
      _UA_GetEndpointsRequest_newPtr.asFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>();

  int UA_GetEndpointsRequest_copy(
    ffi.Pointer<UA_GetEndpointsRequest> src,
    ffi.Pointer<UA_GetEndpointsRequest> dst,
  ) {
    return _UA_GetEndpointsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsRequest>,
              ffi.Pointer<UA_GetEndpointsRequest>)>>('UA_GetEndpointsRequest_copy');
  late final _UA_GetEndpointsRequest_copy = _UA_GetEndpointsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_GetEndpointsRequest>, ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_clear(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_clear(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
          'UA_GetEndpointsRequest_clear');
  late final _UA_GetEndpointsRequest_clear =
      _UA_GetEndpointsRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_delete(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_delete(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
          'UA_GetEndpointsRequest_delete');
  late final _UA_GetEndpointsRequest_delete =
      _UA_GetEndpointsRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  bool UA_GetEndpointsRequest_equal(
    ffi.Pointer<UA_GetEndpointsRequest> p1,
    ffi.Pointer<UA_GetEndpointsRequest> p2,
  ) {
    return _UA_GetEndpointsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_GetEndpointsRequest_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_GetEndpointsRequest>, ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_equal');
  late final _UA_GetEndpointsRequest_equal = _UA_GetEndpointsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_GetEndpointsRequest>, ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsResponse_init(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_init(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
          'UA_GetEndpointsResponse_init');
  late final _UA_GetEndpointsResponse_init =
      _UA_GetEndpointsResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  ffi.Pointer<UA_GetEndpointsResponse> UA_GetEndpointsResponse_new() {
    return _UA_GetEndpointsResponse_new();
  }

  late final _UA_GetEndpointsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>>('UA_GetEndpointsResponse_new');
  late final _UA_GetEndpointsResponse_new =
      _UA_GetEndpointsResponse_newPtr.asFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>();

  int UA_GetEndpointsResponse_copy(
    ffi.Pointer<UA_GetEndpointsResponse> src,
    ffi.Pointer<UA_GetEndpointsResponse> dst,
  ) {
    return _UA_GetEndpointsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsResponse>,
              ffi.Pointer<UA_GetEndpointsResponse>)>>('UA_GetEndpointsResponse_copy');
  late final _UA_GetEndpointsResponse_copy = _UA_GetEndpointsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_GetEndpointsResponse>, ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_clear(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_clear(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
          'UA_GetEndpointsResponse_clear');
  late final _UA_GetEndpointsResponse_clear =
      _UA_GetEndpointsResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_delete(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_delete(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
          'UA_GetEndpointsResponse_delete');
  late final _UA_GetEndpointsResponse_delete =
      _UA_GetEndpointsResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  bool UA_GetEndpointsResponse_equal(
    ffi.Pointer<UA_GetEndpointsResponse> p1,
    ffi.Pointer<UA_GetEndpointsResponse> p2,
  ) {
    return _UA_GetEndpointsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_GetEndpointsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_GetEndpointsResponse>,
              ffi.Pointer<UA_GetEndpointsResponse>)>>('UA_GetEndpointsResponse_equal');
  late final _UA_GetEndpointsResponse_equal = _UA_GetEndpointsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_GetEndpointsResponse>, ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_RegisteredServer_init(
    ffi.Pointer<UA_RegisteredServer> p,
  ) {
    return _UA_RegisteredServer_init(
      p,
    );
  }

  late final _UA_RegisteredServer_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisteredServer>)>>('UA_RegisteredServer_init');
  late final _UA_RegisteredServer_init =
      _UA_RegisteredServer_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisteredServer>)>();

  ffi.Pointer<UA_RegisteredServer> UA_RegisteredServer_new() {
    return _UA_RegisteredServer_new();
  }

  late final _UA_RegisteredServer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisteredServer> Function()>>('UA_RegisteredServer_new');
  late final _UA_RegisteredServer_new =
      _UA_RegisteredServer_newPtr.asFunction<ffi.Pointer<UA_RegisteredServer> Function()>();

  int UA_RegisteredServer_copy(
    ffi.Pointer<UA_RegisteredServer> src,
    ffi.Pointer<UA_RegisteredServer> dst,
  ) {
    return _UA_RegisteredServer_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisteredServer_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RegisteredServer>, ffi.Pointer<UA_RegisteredServer>)>>(
      'UA_RegisteredServer_copy');
  late final _UA_RegisteredServer_copy = _UA_RegisteredServer_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisteredServer>, ffi.Pointer<UA_RegisteredServer>)>();

  void UA_RegisteredServer_clear(
    ffi.Pointer<UA_RegisteredServer> p,
  ) {
    return _UA_RegisteredServer_clear(
      p,
    );
  }

  late final _UA_RegisteredServer_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisteredServer>)>>('UA_RegisteredServer_clear');
  late final _UA_RegisteredServer_clear =
      _UA_RegisteredServer_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisteredServer>)>();

  void UA_RegisteredServer_delete(
    ffi.Pointer<UA_RegisteredServer> p,
  ) {
    return _UA_RegisteredServer_delete(
      p,
    );
  }

  late final _UA_RegisteredServer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisteredServer>)>>('UA_RegisteredServer_delete');
  late final _UA_RegisteredServer_delete =
      _UA_RegisteredServer_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisteredServer>)>();

  bool UA_RegisteredServer_equal(
    ffi.Pointer<UA_RegisteredServer> p1,
    ffi.Pointer<UA_RegisteredServer> p2,
  ) {
    return _UA_RegisteredServer_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisteredServer_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RegisteredServer>, ffi.Pointer<UA_RegisteredServer>)>>(
      'UA_RegisteredServer_equal');
  late final _UA_RegisteredServer_equal = _UA_RegisteredServer_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisteredServer>, ffi.Pointer<UA_RegisteredServer>)>();

  void UA_RegisterServerRequest_init(
    ffi.Pointer<UA_RegisterServerRequest> p,
  ) {
    return _UA_RegisterServerRequest_init(
      p,
    );
  }

  late final _UA_RegisterServerRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerRequest>)>>(
          'UA_RegisterServerRequest_init');
  late final _UA_RegisterServerRequest_init =
      _UA_RegisterServerRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerRequest>)>();

  ffi.Pointer<UA_RegisterServerRequest> UA_RegisterServerRequest_new() {
    return _UA_RegisterServerRequest_new();
  }

  late final _UA_RegisterServerRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterServerRequest> Function()>>('UA_RegisterServerRequest_new');
  late final _UA_RegisterServerRequest_new =
      _UA_RegisterServerRequest_newPtr.asFunction<ffi.Pointer<UA_RegisterServerRequest> Function()>();

  int UA_RegisterServerRequest_copy(
    ffi.Pointer<UA_RegisterServerRequest> src,
    ffi.Pointer<UA_RegisterServerRequest> dst,
  ) {
    return _UA_RegisterServerRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterServerRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterServerRequest>,
              ffi.Pointer<UA_RegisterServerRequest>)>>('UA_RegisterServerRequest_copy');
  late final _UA_RegisterServerRequest_copy = _UA_RegisterServerRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterServerRequest>, ffi.Pointer<UA_RegisterServerRequest>)>();

  void UA_RegisterServerRequest_clear(
    ffi.Pointer<UA_RegisterServerRequest> p,
  ) {
    return _UA_RegisterServerRequest_clear(
      p,
    );
  }

  late final _UA_RegisterServerRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerRequest>)>>(
          'UA_RegisterServerRequest_clear');
  late final _UA_RegisterServerRequest_clear =
      _UA_RegisterServerRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerRequest>)>();

  void UA_RegisterServerRequest_delete(
    ffi.Pointer<UA_RegisterServerRequest> p,
  ) {
    return _UA_RegisterServerRequest_delete(
      p,
    );
  }

  late final _UA_RegisterServerRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerRequest>)>>(
          'UA_RegisterServerRequest_delete');
  late final _UA_RegisterServerRequest_delete =
      _UA_RegisterServerRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerRequest>)>();

  bool UA_RegisterServerRequest_equal(
    ffi.Pointer<UA_RegisterServerRequest> p1,
    ffi.Pointer<UA_RegisterServerRequest> p2,
  ) {
    return _UA_RegisterServerRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterServerRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterServerRequest>,
              ffi.Pointer<UA_RegisterServerRequest>)>>('UA_RegisterServerRequest_equal');
  late final _UA_RegisterServerRequest_equal = _UA_RegisterServerRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterServerRequest>, ffi.Pointer<UA_RegisterServerRequest>)>();

  void UA_RegisterServerResponse_init(
    ffi.Pointer<UA_RegisterServerResponse> p,
  ) {
    return _UA_RegisterServerResponse_init(
      p,
    );
  }

  late final _UA_RegisterServerResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerResponse>)>>(
          'UA_RegisterServerResponse_init');
  late final _UA_RegisterServerResponse_init =
      _UA_RegisterServerResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerResponse>)>();

  ffi.Pointer<UA_RegisterServerResponse> UA_RegisterServerResponse_new() {
    return _UA_RegisterServerResponse_new();
  }

  late final _UA_RegisterServerResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterServerResponse> Function()>>('UA_RegisterServerResponse_new');
  late final _UA_RegisterServerResponse_new =
      _UA_RegisterServerResponse_newPtr.asFunction<ffi.Pointer<UA_RegisterServerResponse> Function()>();

  int UA_RegisterServerResponse_copy(
    ffi.Pointer<UA_RegisterServerResponse> src,
    ffi.Pointer<UA_RegisterServerResponse> dst,
  ) {
    return _UA_RegisterServerResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterServerResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterServerResponse>,
              ffi.Pointer<UA_RegisterServerResponse>)>>('UA_RegisterServerResponse_copy');
  late final _UA_RegisterServerResponse_copy = _UA_RegisterServerResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterServerResponse>, ffi.Pointer<UA_RegisterServerResponse>)>();

  void UA_RegisterServerResponse_clear(
    ffi.Pointer<UA_RegisterServerResponse> p,
  ) {
    return _UA_RegisterServerResponse_clear(
      p,
    );
  }

  late final _UA_RegisterServerResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerResponse>)>>(
          'UA_RegisterServerResponse_clear');
  late final _UA_RegisterServerResponse_clear =
      _UA_RegisterServerResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerResponse>)>();

  void UA_RegisterServerResponse_delete(
    ffi.Pointer<UA_RegisterServerResponse> p,
  ) {
    return _UA_RegisterServerResponse_delete(
      p,
    );
  }

  late final _UA_RegisterServerResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServerResponse>)>>(
          'UA_RegisterServerResponse_delete');
  late final _UA_RegisterServerResponse_delete =
      _UA_RegisterServerResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterServerResponse>)>();

  bool UA_RegisterServerResponse_equal(
    ffi.Pointer<UA_RegisterServerResponse> p1,
    ffi.Pointer<UA_RegisterServerResponse> p2,
  ) {
    return _UA_RegisterServerResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterServerResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterServerResponse>,
              ffi.Pointer<UA_RegisterServerResponse>)>>('UA_RegisterServerResponse_equal');
  late final _UA_RegisterServerResponse_equal = _UA_RegisterServerResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterServerResponse>, ffi.Pointer<UA_RegisterServerResponse>)>();

  void UA_MdnsDiscoveryConfiguration_init(
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> p,
  ) {
    return _UA_MdnsDiscoveryConfiguration_init(
      p,
    );
  }

  late final _UA_MdnsDiscoveryConfiguration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>>(
          'UA_MdnsDiscoveryConfiguration_init');
  late final _UA_MdnsDiscoveryConfiguration_init =
      _UA_MdnsDiscoveryConfiguration_initPtr.asFunction<void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>();

  ffi.Pointer<UA_MdnsDiscoveryConfiguration> UA_MdnsDiscoveryConfiguration_new() {
    return _UA_MdnsDiscoveryConfiguration_new();
  }

  late final _UA_MdnsDiscoveryConfiguration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MdnsDiscoveryConfiguration> Function()>>(
          'UA_MdnsDiscoveryConfiguration_new');
  late final _UA_MdnsDiscoveryConfiguration_new =
      _UA_MdnsDiscoveryConfiguration_newPtr.asFunction<ffi.Pointer<UA_MdnsDiscoveryConfiguration> Function()>();

  int UA_MdnsDiscoveryConfiguration_copy(
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> src,
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> dst,
  ) {
    return _UA_MdnsDiscoveryConfiguration_copy(
      src,
      dst,
    );
  }

  late final _UA_MdnsDiscoveryConfiguration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>,
              ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>>('UA_MdnsDiscoveryConfiguration_copy');
  late final _UA_MdnsDiscoveryConfiguration_copy = _UA_MdnsDiscoveryConfiguration_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>, ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>();

  void UA_MdnsDiscoveryConfiguration_clear(
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> p,
  ) {
    return _UA_MdnsDiscoveryConfiguration_clear(
      p,
    );
  }

  late final _UA_MdnsDiscoveryConfiguration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>>(
          'UA_MdnsDiscoveryConfiguration_clear');
  late final _UA_MdnsDiscoveryConfiguration_clear =
      _UA_MdnsDiscoveryConfiguration_clearPtr.asFunction<void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>();

  void UA_MdnsDiscoveryConfiguration_delete(
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> p,
  ) {
    return _UA_MdnsDiscoveryConfiguration_delete(
      p,
    );
  }

  late final _UA_MdnsDiscoveryConfiguration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>>(
          'UA_MdnsDiscoveryConfiguration_delete');
  late final _UA_MdnsDiscoveryConfiguration_delete =
      _UA_MdnsDiscoveryConfiguration_deletePtr.asFunction<void Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>();

  bool UA_MdnsDiscoveryConfiguration_equal(
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> p1,
    ffi.Pointer<UA_MdnsDiscoveryConfiguration> p2,
  ) {
    return _UA_MdnsDiscoveryConfiguration_equal(
      p1,
      p2,
    );
  }

  late final _UA_MdnsDiscoveryConfiguration_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>,
              ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>>('UA_MdnsDiscoveryConfiguration_equal');
  late final _UA_MdnsDiscoveryConfiguration_equal = _UA_MdnsDiscoveryConfiguration_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MdnsDiscoveryConfiguration>, ffi.Pointer<UA_MdnsDiscoveryConfiguration>)>();

  void UA_RegisterServer2Request_init(
    ffi.Pointer<UA_RegisterServer2Request> p,
  ) {
    return _UA_RegisterServer2Request_init(
      p,
    );
  }

  late final _UA_RegisterServer2Request_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Request>)>>(
          'UA_RegisterServer2Request_init');
  late final _UA_RegisterServer2Request_init =
      _UA_RegisterServer2Request_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Request>)>();

  ffi.Pointer<UA_RegisterServer2Request> UA_RegisterServer2Request_new() {
    return _UA_RegisterServer2Request_new();
  }

  late final _UA_RegisterServer2Request_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterServer2Request> Function()>>('UA_RegisterServer2Request_new');
  late final _UA_RegisterServer2Request_new =
      _UA_RegisterServer2Request_newPtr.asFunction<ffi.Pointer<UA_RegisterServer2Request> Function()>();

  int UA_RegisterServer2Request_copy(
    ffi.Pointer<UA_RegisterServer2Request> src,
    ffi.Pointer<UA_RegisterServer2Request> dst,
  ) {
    return _UA_RegisterServer2Request_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterServer2Request_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterServer2Request>,
              ffi.Pointer<UA_RegisterServer2Request>)>>('UA_RegisterServer2Request_copy');
  late final _UA_RegisterServer2Request_copy = _UA_RegisterServer2Request_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterServer2Request>, ffi.Pointer<UA_RegisterServer2Request>)>();

  void UA_RegisterServer2Request_clear(
    ffi.Pointer<UA_RegisterServer2Request> p,
  ) {
    return _UA_RegisterServer2Request_clear(
      p,
    );
  }

  late final _UA_RegisterServer2Request_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Request>)>>(
          'UA_RegisterServer2Request_clear');
  late final _UA_RegisterServer2Request_clear =
      _UA_RegisterServer2Request_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Request>)>();

  void UA_RegisterServer2Request_delete(
    ffi.Pointer<UA_RegisterServer2Request> p,
  ) {
    return _UA_RegisterServer2Request_delete(
      p,
    );
  }

  late final _UA_RegisterServer2Request_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Request>)>>(
          'UA_RegisterServer2Request_delete');
  late final _UA_RegisterServer2Request_delete =
      _UA_RegisterServer2Request_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Request>)>();

  bool UA_RegisterServer2Request_equal(
    ffi.Pointer<UA_RegisterServer2Request> p1,
    ffi.Pointer<UA_RegisterServer2Request> p2,
  ) {
    return _UA_RegisterServer2Request_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterServer2Request_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterServer2Request>,
              ffi.Pointer<UA_RegisterServer2Request>)>>('UA_RegisterServer2Request_equal');
  late final _UA_RegisterServer2Request_equal = _UA_RegisterServer2Request_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterServer2Request>, ffi.Pointer<UA_RegisterServer2Request>)>();

  void UA_RegisterServer2Response_init(
    ffi.Pointer<UA_RegisterServer2Response> p,
  ) {
    return _UA_RegisterServer2Response_init(
      p,
    );
  }

  late final _UA_RegisterServer2Response_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Response>)>>(
          'UA_RegisterServer2Response_init');
  late final _UA_RegisterServer2Response_init =
      _UA_RegisterServer2Response_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Response>)>();

  ffi.Pointer<UA_RegisterServer2Response> UA_RegisterServer2Response_new() {
    return _UA_RegisterServer2Response_new();
  }

  late final _UA_RegisterServer2Response_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterServer2Response> Function()>>('UA_RegisterServer2Response_new');
  late final _UA_RegisterServer2Response_new =
      _UA_RegisterServer2Response_newPtr.asFunction<ffi.Pointer<UA_RegisterServer2Response> Function()>();

  int UA_RegisterServer2Response_copy(
    ffi.Pointer<UA_RegisterServer2Response> src,
    ffi.Pointer<UA_RegisterServer2Response> dst,
  ) {
    return _UA_RegisterServer2Response_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterServer2Response_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterServer2Response>,
              ffi.Pointer<UA_RegisterServer2Response>)>>('UA_RegisterServer2Response_copy');
  late final _UA_RegisterServer2Response_copy = _UA_RegisterServer2Response_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterServer2Response>, ffi.Pointer<UA_RegisterServer2Response>)>();

  void UA_RegisterServer2Response_clear(
    ffi.Pointer<UA_RegisterServer2Response> p,
  ) {
    return _UA_RegisterServer2Response_clear(
      p,
    );
  }

  late final _UA_RegisterServer2Response_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Response>)>>(
          'UA_RegisterServer2Response_clear');
  late final _UA_RegisterServer2Response_clear =
      _UA_RegisterServer2Response_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Response>)>();

  void UA_RegisterServer2Response_delete(
    ffi.Pointer<UA_RegisterServer2Response> p,
  ) {
    return _UA_RegisterServer2Response_delete(
      p,
    );
  }

  late final _UA_RegisterServer2Response_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterServer2Response>)>>(
          'UA_RegisterServer2Response_delete');
  late final _UA_RegisterServer2Response_delete =
      _UA_RegisterServer2Response_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterServer2Response>)>();

  bool UA_RegisterServer2Response_equal(
    ffi.Pointer<UA_RegisterServer2Response> p1,
    ffi.Pointer<UA_RegisterServer2Response> p2,
  ) {
    return _UA_RegisterServer2Response_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterServer2Response_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterServer2Response>,
              ffi.Pointer<UA_RegisterServer2Response>)>>('UA_RegisterServer2Response_equal');
  late final _UA_RegisterServer2Response_equal = _UA_RegisterServer2Response_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterServer2Response>, ffi.Pointer<UA_RegisterServer2Response>)>();

  void UA_SecurityTokenRequestType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_SecurityTokenRequestType_init(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_SecurityTokenRequestType_init');
  late final _UA_SecurityTokenRequestType_init =
      _UA_SecurityTokenRequestType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_SecurityTokenRequestType_new() {
    return _UA_SecurityTokenRequestType_new();
  }

  late final _UA_SecurityTokenRequestType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_SecurityTokenRequestType_new');
  late final _UA_SecurityTokenRequestType_new =
      _UA_SecurityTokenRequestType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_SecurityTokenRequestType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_SecurityTokenRequestType_copy(
      src,
      dst,
    );
  }

  late final _UA_SecurityTokenRequestType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_SecurityTokenRequestType_copy');
  late final _UA_SecurityTokenRequestType_copy = _UA_SecurityTokenRequestType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_SecurityTokenRequestType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_SecurityTokenRequestType_clear(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_SecurityTokenRequestType_clear');
  late final _UA_SecurityTokenRequestType_clear =
      _UA_SecurityTokenRequestType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_SecurityTokenRequestType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_SecurityTokenRequestType_delete(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_SecurityTokenRequestType_delete');
  late final _UA_SecurityTokenRequestType_delete =
      _UA_SecurityTokenRequestType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_SecurityTokenRequestType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_SecurityTokenRequestType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SecurityTokenRequestType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_SecurityTokenRequestType_equal');
  late final _UA_SecurityTokenRequestType_equal = _UA_SecurityTokenRequestType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ChannelSecurityToken_init(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_init(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
          'UA_ChannelSecurityToken_init');
  late final _UA_ChannelSecurityToken_init =
      _UA_ChannelSecurityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  ffi.Pointer<UA_ChannelSecurityToken> UA_ChannelSecurityToken_new() {
    return _UA_ChannelSecurityToken_new();
  }

  late final _UA_ChannelSecurityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>>('UA_ChannelSecurityToken_new');
  late final _UA_ChannelSecurityToken_new =
      _UA_ChannelSecurityToken_newPtr.asFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>();

  int UA_ChannelSecurityToken_copy(
    ffi.Pointer<UA_ChannelSecurityToken> src,
    ffi.Pointer<UA_ChannelSecurityToken> dst,
  ) {
    return _UA_ChannelSecurityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_ChannelSecurityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ChannelSecurityToken>,
              ffi.Pointer<UA_ChannelSecurityToken>)>>('UA_ChannelSecurityToken_copy');
  late final _UA_ChannelSecurityToken_copy = _UA_ChannelSecurityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ChannelSecurityToken>, ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_clear(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_clear(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
          'UA_ChannelSecurityToken_clear');
  late final _UA_ChannelSecurityToken_clear =
      _UA_ChannelSecurityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_delete(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_delete(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
          'UA_ChannelSecurityToken_delete');
  late final _UA_ChannelSecurityToken_delete =
      _UA_ChannelSecurityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  bool UA_ChannelSecurityToken_equal(
    ffi.Pointer<UA_ChannelSecurityToken> p1,
    ffi.Pointer<UA_ChannelSecurityToken> p2,
  ) {
    return _UA_ChannelSecurityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_ChannelSecurityToken_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ChannelSecurityToken>,
              ffi.Pointer<UA_ChannelSecurityToken>)>>('UA_ChannelSecurityToken_equal');
  late final _UA_ChannelSecurityToken_equal = _UA_ChannelSecurityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ChannelSecurityToken>, ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_OpenSecureChannelRequest_init(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
          'UA_OpenSecureChannelRequest_init');
  late final _UA_OpenSecureChannelRequest_init =
      _UA_OpenSecureChannelRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  ffi.Pointer<UA_OpenSecureChannelRequest> UA_OpenSecureChannelRequest_new() {
    return _UA_OpenSecureChannelRequest_new();
  }

  late final _UA_OpenSecureChannelRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_OpenSecureChannelRequest> Function()>>(
          'UA_OpenSecureChannelRequest_new');
  late final _UA_OpenSecureChannelRequest_new =
      _UA_OpenSecureChannelRequest_newPtr.asFunction<ffi.Pointer<UA_OpenSecureChannelRequest> Function()>();

  int UA_OpenSecureChannelRequest_copy(
    ffi.Pointer<UA_OpenSecureChannelRequest> src,
    ffi.Pointer<UA_OpenSecureChannelRequest> dst,
  ) {
    return _UA_OpenSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelRequest>)>>('UA_OpenSecureChannelRequest_copy');
  late final _UA_OpenSecureChannelRequest_copy = _UA_OpenSecureChannelRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_OpenSecureChannelRequest>, ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_clear(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
          'UA_OpenSecureChannelRequest_clear');
  late final _UA_OpenSecureChannelRequest_clear =
      _UA_OpenSecureChannelRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_delete(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
          'UA_OpenSecureChannelRequest_delete');
  late final _UA_OpenSecureChannelRequest_delete =
      _UA_OpenSecureChannelRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  bool UA_OpenSecureChannelRequest_equal(
    ffi.Pointer<UA_OpenSecureChannelRequest> p1,
    ffi.Pointer<UA_OpenSecureChannelRequest> p2,
  ) {
    return _UA_OpenSecureChannelRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_OpenSecureChannelRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelRequest>)>>('UA_OpenSecureChannelRequest_equal');
  late final _UA_OpenSecureChannelRequest_equal = _UA_OpenSecureChannelRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_OpenSecureChannelRequest>, ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelResponse_init(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
          'UA_OpenSecureChannelResponse_init');
  late final _UA_OpenSecureChannelResponse_init =
      _UA_OpenSecureChannelResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  ffi.Pointer<UA_OpenSecureChannelResponse> UA_OpenSecureChannelResponse_new() {
    return _UA_OpenSecureChannelResponse_new();
  }

  late final _UA_OpenSecureChannelResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_OpenSecureChannelResponse> Function()>>(
          'UA_OpenSecureChannelResponse_new');
  late final _UA_OpenSecureChannelResponse_new =
      _UA_OpenSecureChannelResponse_newPtr.asFunction<ffi.Pointer<UA_OpenSecureChannelResponse> Function()>();

  int UA_OpenSecureChannelResponse_copy(
    ffi.Pointer<UA_OpenSecureChannelResponse> src,
    ffi.Pointer<UA_OpenSecureChannelResponse> dst,
  ) {
    return _UA_OpenSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>>('UA_OpenSecureChannelResponse_copy');
  late final _UA_OpenSecureChannelResponse_copy = _UA_OpenSecureChannelResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_OpenSecureChannelResponse>, ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_clear(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
          'UA_OpenSecureChannelResponse_clear');
  late final _UA_OpenSecureChannelResponse_clear =
      _UA_OpenSecureChannelResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_delete(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
          'UA_OpenSecureChannelResponse_delete');
  late final _UA_OpenSecureChannelResponse_delete =
      _UA_OpenSecureChannelResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  bool UA_OpenSecureChannelResponse_equal(
    ffi.Pointer<UA_OpenSecureChannelResponse> p1,
    ffi.Pointer<UA_OpenSecureChannelResponse> p2,
  ) {
    return _UA_OpenSecureChannelResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_OpenSecureChannelResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>>('UA_OpenSecureChannelResponse_equal');
  late final _UA_OpenSecureChannelResponse_equal = _UA_OpenSecureChannelResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_OpenSecureChannelResponse>, ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_CloseSecureChannelRequest_init(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
          'UA_CloseSecureChannelRequest_init');
  late final _UA_CloseSecureChannelRequest_init =
      _UA_CloseSecureChannelRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  ffi.Pointer<UA_CloseSecureChannelRequest> UA_CloseSecureChannelRequest_new() {
    return _UA_CloseSecureChannelRequest_new();
  }

  late final _UA_CloseSecureChannelRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CloseSecureChannelRequest> Function()>>(
          'UA_CloseSecureChannelRequest_new');
  late final _UA_CloseSecureChannelRequest_new =
      _UA_CloseSecureChannelRequest_newPtr.asFunction<ffi.Pointer<UA_CloseSecureChannelRequest> Function()>();

  int UA_CloseSecureChannelRequest_copy(
    ffi.Pointer<UA_CloseSecureChannelRequest> src,
    ffi.Pointer<UA_CloseSecureChannelRequest> dst,
  ) {
    return _UA_CloseSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
              ffi.Pointer<UA_CloseSecureChannelRequest>)>>('UA_CloseSecureChannelRequest_copy');
  late final _UA_CloseSecureChannelRequest_copy = _UA_CloseSecureChannelRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CloseSecureChannelRequest>, ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_clear(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
          'UA_CloseSecureChannelRequest_clear');
  late final _UA_CloseSecureChannelRequest_clear =
      _UA_CloseSecureChannelRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_delete(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
          'UA_CloseSecureChannelRequest_delete');
  late final _UA_CloseSecureChannelRequest_delete =
      _UA_CloseSecureChannelRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  bool UA_CloseSecureChannelRequest_equal(
    ffi.Pointer<UA_CloseSecureChannelRequest> p1,
    ffi.Pointer<UA_CloseSecureChannelRequest> p2,
  ) {
    return _UA_CloseSecureChannelRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CloseSecureChannelRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
              ffi.Pointer<UA_CloseSecureChannelRequest>)>>('UA_CloseSecureChannelRequest_equal');
  late final _UA_CloseSecureChannelRequest_equal = _UA_CloseSecureChannelRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CloseSecureChannelRequest>, ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelResponse_init(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
          'UA_CloseSecureChannelResponse_init');
  late final _UA_CloseSecureChannelResponse_init =
      _UA_CloseSecureChannelResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  ffi.Pointer<UA_CloseSecureChannelResponse> UA_CloseSecureChannelResponse_new() {
    return _UA_CloseSecureChannelResponse_new();
  }

  late final _UA_CloseSecureChannelResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CloseSecureChannelResponse> Function()>>(
          'UA_CloseSecureChannelResponse_new');
  late final _UA_CloseSecureChannelResponse_new =
      _UA_CloseSecureChannelResponse_newPtr.asFunction<ffi.Pointer<UA_CloseSecureChannelResponse> Function()>();

  int UA_CloseSecureChannelResponse_copy(
    ffi.Pointer<UA_CloseSecureChannelResponse> src,
    ffi.Pointer<UA_CloseSecureChannelResponse> dst,
  ) {
    return _UA_CloseSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
              ffi.Pointer<UA_CloseSecureChannelResponse>)>>('UA_CloseSecureChannelResponse_copy');
  late final _UA_CloseSecureChannelResponse_copy = _UA_CloseSecureChannelResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CloseSecureChannelResponse>, ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_clear(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
          'UA_CloseSecureChannelResponse_clear');
  late final _UA_CloseSecureChannelResponse_clear =
      _UA_CloseSecureChannelResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_delete(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
          'UA_CloseSecureChannelResponse_delete');
  late final _UA_CloseSecureChannelResponse_delete =
      _UA_CloseSecureChannelResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  bool UA_CloseSecureChannelResponse_equal(
    ffi.Pointer<UA_CloseSecureChannelResponse> p1,
    ffi.Pointer<UA_CloseSecureChannelResponse> p2,
  ) {
    return _UA_CloseSecureChannelResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CloseSecureChannelResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
              ffi.Pointer<UA_CloseSecureChannelResponse>)>>('UA_CloseSecureChannelResponse_equal');
  late final _UA_CloseSecureChannelResponse_equal = _UA_CloseSecureChannelResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CloseSecureChannelResponse>, ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_SignedSoftwareCertificate_init(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_init(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
          'UA_SignedSoftwareCertificate_init');
  late final _UA_SignedSoftwareCertificate_init =
      _UA_SignedSoftwareCertificate_initPtr.asFunction<void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  ffi.Pointer<UA_SignedSoftwareCertificate> UA_SignedSoftwareCertificate_new() {
    return _UA_SignedSoftwareCertificate_new();
  }

  late final _UA_SignedSoftwareCertificate_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SignedSoftwareCertificate> Function()>>(
          'UA_SignedSoftwareCertificate_new');
  late final _UA_SignedSoftwareCertificate_new =
      _UA_SignedSoftwareCertificate_newPtr.asFunction<ffi.Pointer<UA_SignedSoftwareCertificate> Function()>();

  int UA_SignedSoftwareCertificate_copy(
    ffi.Pointer<UA_SignedSoftwareCertificate> src,
    ffi.Pointer<UA_SignedSoftwareCertificate> dst,
  ) {
    return _UA_SignedSoftwareCertificate_copy(
      src,
      dst,
    );
  }

  late final _UA_SignedSoftwareCertificate_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
              ffi.Pointer<UA_SignedSoftwareCertificate>)>>('UA_SignedSoftwareCertificate_copy');
  late final _UA_SignedSoftwareCertificate_copy = _UA_SignedSoftwareCertificate_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SignedSoftwareCertificate>, ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_clear(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_clear(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
          'UA_SignedSoftwareCertificate_clear');
  late final _UA_SignedSoftwareCertificate_clear =
      _UA_SignedSoftwareCertificate_clearPtr.asFunction<void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_delete(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_delete(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
          'UA_SignedSoftwareCertificate_delete');
  late final _UA_SignedSoftwareCertificate_delete =
      _UA_SignedSoftwareCertificate_deletePtr.asFunction<void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  bool UA_SignedSoftwareCertificate_equal(
    ffi.Pointer<UA_SignedSoftwareCertificate> p1,
    ffi.Pointer<UA_SignedSoftwareCertificate> p2,
  ) {
    return _UA_SignedSoftwareCertificate_equal(
      p1,
      p2,
    );
  }

  late final _UA_SignedSoftwareCertificate_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
              ffi.Pointer<UA_SignedSoftwareCertificate>)>>('UA_SignedSoftwareCertificate_equal');
  late final _UA_SignedSoftwareCertificate_equal = _UA_SignedSoftwareCertificate_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SignedSoftwareCertificate>, ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SessionAuthenticationToken_init(
    ffi.Pointer<UA_SessionAuthenticationToken> p,
  ) {
    return _UA_SessionAuthenticationToken_init(
      p,
    );
  }

  late final _UA_SessionAuthenticationToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>>(
          'UA_SessionAuthenticationToken_init');
  late final _UA_SessionAuthenticationToken_init =
      _UA_SessionAuthenticationToken_initPtr.asFunction<void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>();

  ffi.Pointer<UA_SessionAuthenticationToken> UA_SessionAuthenticationToken_new() {
    return _UA_SessionAuthenticationToken_new();
  }

  late final _UA_SessionAuthenticationToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SessionAuthenticationToken> Function()>>(
          'UA_SessionAuthenticationToken_new');
  late final _UA_SessionAuthenticationToken_new =
      _UA_SessionAuthenticationToken_newPtr.asFunction<ffi.Pointer<UA_SessionAuthenticationToken> Function()>();

  int UA_SessionAuthenticationToken_copy(
    ffi.Pointer<UA_SessionAuthenticationToken> src,
    ffi.Pointer<UA_SessionAuthenticationToken> dst,
  ) {
    return _UA_SessionAuthenticationToken_copy(
      src,
      dst,
    );
  }

  late final _UA_SessionAuthenticationToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SessionAuthenticationToken>,
              ffi.Pointer<UA_SessionAuthenticationToken>)>>('UA_SessionAuthenticationToken_copy');
  late final _UA_SessionAuthenticationToken_copy = _UA_SessionAuthenticationToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SessionAuthenticationToken>, ffi.Pointer<UA_SessionAuthenticationToken>)>();

  void UA_SessionAuthenticationToken_clear(
    ffi.Pointer<UA_SessionAuthenticationToken> p,
  ) {
    return _UA_SessionAuthenticationToken_clear(
      p,
    );
  }

  late final _UA_SessionAuthenticationToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>>(
          'UA_SessionAuthenticationToken_clear');
  late final _UA_SessionAuthenticationToken_clear =
      _UA_SessionAuthenticationToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>();

  void UA_SessionAuthenticationToken_delete(
    ffi.Pointer<UA_SessionAuthenticationToken> p,
  ) {
    return _UA_SessionAuthenticationToken_delete(
      p,
    );
  }

  late final _UA_SessionAuthenticationToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>>(
          'UA_SessionAuthenticationToken_delete');
  late final _UA_SessionAuthenticationToken_delete =
      _UA_SessionAuthenticationToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_SessionAuthenticationToken>)>();

  bool UA_SessionAuthenticationToken_equal(
    ffi.Pointer<UA_SessionAuthenticationToken> p1,
    ffi.Pointer<UA_SessionAuthenticationToken> p2,
  ) {
    return _UA_SessionAuthenticationToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_SessionAuthenticationToken_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SessionAuthenticationToken>,
              ffi.Pointer<UA_SessionAuthenticationToken>)>>('UA_SessionAuthenticationToken_equal');
  late final _UA_SessionAuthenticationToken_equal = _UA_SessionAuthenticationToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SessionAuthenticationToken>, ffi.Pointer<UA_SessionAuthenticationToken>)>();

  void UA_SignatureData_init(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_init(
      p,
    );
  }

  late final _UA_SignatureData_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>('UA_SignatureData_init');
  late final _UA_SignatureData_init =
      _UA_SignatureData_initPtr.asFunction<void Function(ffi.Pointer<UA_SignatureData>)>();

  ffi.Pointer<UA_SignatureData> UA_SignatureData_new() {
    return _UA_SignatureData_new();
  }

  late final _UA_SignatureData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SignatureData> Function()>>('UA_SignatureData_new');
  late final _UA_SignatureData_new = _UA_SignatureData_newPtr.asFunction<ffi.Pointer<UA_SignatureData> Function()>();

  int UA_SignatureData_copy(
    ffi.Pointer<UA_SignatureData> src,
    ffi.Pointer<UA_SignatureData> dst,
  ) {
    return _UA_SignatureData_copy(
      src,
      dst,
    );
  }

  late final _UA_SignatureData_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>>(
          'UA_SignatureData_copy');
  late final _UA_SignatureData_copy = _UA_SignatureData_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_clear(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_clear(
      p,
    );
  }

  late final _UA_SignatureData_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>('UA_SignatureData_clear');
  late final _UA_SignatureData_clear =
      _UA_SignatureData_clearPtr.asFunction<void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_delete(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_delete(
      p,
    );
  }

  late final _UA_SignatureData_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>('UA_SignatureData_delete');
  late final _UA_SignatureData_delete =
      _UA_SignatureData_deletePtr.asFunction<void Function(ffi.Pointer<UA_SignatureData>)>();

  bool UA_SignatureData_equal(
    ffi.Pointer<UA_SignatureData> p1,
    ffi.Pointer<UA_SignatureData> p2,
  ) {
    return _UA_SignatureData_equal(
      p1,
      p2,
    );
  }

  late final _UA_SignatureData_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>>(
          'UA_SignatureData_equal');
  late final _UA_SignatureData_equal = _UA_SignatureData_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>();

  void UA_CreateSessionRequest_init(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_init(
      p,
    );
  }

  late final _UA_CreateSessionRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
          'UA_CreateSessionRequest_init');
  late final _UA_CreateSessionRequest_init =
      _UA_CreateSessionRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  ffi.Pointer<UA_CreateSessionRequest> UA_CreateSessionRequest_new() {
    return _UA_CreateSessionRequest_new();
  }

  late final _UA_CreateSessionRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>>('UA_CreateSessionRequest_new');
  late final _UA_CreateSessionRequest_new =
      _UA_CreateSessionRequest_newPtr.asFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>();

  int UA_CreateSessionRequest_copy(
    ffi.Pointer<UA_CreateSessionRequest> src,
    ffi.Pointer<UA_CreateSessionRequest> dst,
  ) {
    return _UA_CreateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateSessionRequest>,
              ffi.Pointer<UA_CreateSessionRequest>)>>('UA_CreateSessionRequest_copy');
  late final _UA_CreateSessionRequest_copy = _UA_CreateSessionRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateSessionRequest>, ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_clear(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSessionRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
          'UA_CreateSessionRequest_clear');
  late final _UA_CreateSessionRequest_clear =
      _UA_CreateSessionRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_delete(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSessionRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
          'UA_CreateSessionRequest_delete');
  late final _UA_CreateSessionRequest_delete =
      _UA_CreateSessionRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  bool UA_CreateSessionRequest_equal(
    ffi.Pointer<UA_CreateSessionRequest> p1,
    ffi.Pointer<UA_CreateSessionRequest> p2,
  ) {
    return _UA_CreateSessionRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateSessionRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateSessionRequest>,
              ffi.Pointer<UA_CreateSessionRequest>)>>('UA_CreateSessionRequest_equal');
  late final _UA_CreateSessionRequest_equal = _UA_CreateSessionRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateSessionRequest>, ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionResponse_init(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_init(
      p,
    );
  }

  late final _UA_CreateSessionResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
          'UA_CreateSessionResponse_init');
  late final _UA_CreateSessionResponse_init =
      _UA_CreateSessionResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  ffi.Pointer<UA_CreateSessionResponse> UA_CreateSessionResponse_new() {
    return _UA_CreateSessionResponse_new();
  }

  late final _UA_CreateSessionResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>>('UA_CreateSessionResponse_new');
  late final _UA_CreateSessionResponse_new =
      _UA_CreateSessionResponse_newPtr.asFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>();

  int UA_CreateSessionResponse_copy(
    ffi.Pointer<UA_CreateSessionResponse> src,
    ffi.Pointer<UA_CreateSessionResponse> dst,
  ) {
    return _UA_CreateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateSessionResponse>,
              ffi.Pointer<UA_CreateSessionResponse>)>>('UA_CreateSessionResponse_copy');
  late final _UA_CreateSessionResponse_copy = _UA_CreateSessionResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateSessionResponse>, ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_clear(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSessionResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
          'UA_CreateSessionResponse_clear');
  late final _UA_CreateSessionResponse_clear =
      _UA_CreateSessionResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_delete(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSessionResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
          'UA_CreateSessionResponse_delete');
  late final _UA_CreateSessionResponse_delete =
      _UA_CreateSessionResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  bool UA_CreateSessionResponse_equal(
    ffi.Pointer<UA_CreateSessionResponse> p1,
    ffi.Pointer<UA_CreateSessionResponse> p2,
  ) {
    return _UA_CreateSessionResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateSessionResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateSessionResponse>,
              ffi.Pointer<UA_CreateSessionResponse>)>>('UA_CreateSessionResponse_equal');
  late final _UA_CreateSessionResponse_equal = _UA_CreateSessionResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateSessionResponse>, ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_UserIdentityToken_init(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_init(
      p,
    );
  }

  late final _UA_UserIdentityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_init');
  late final _UA_UserIdentityToken_init =
      _UA_UserIdentityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  ffi.Pointer<UA_UserIdentityToken> UA_UserIdentityToken_new() {
    return _UA_UserIdentityToken_new();
  }

  late final _UA_UserIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserIdentityToken> Function()>>('UA_UserIdentityToken_new');
  late final _UA_UserIdentityToken_new =
      _UA_UserIdentityToken_newPtr.asFunction<ffi.Pointer<UA_UserIdentityToken> Function()>();

  int UA_UserIdentityToken_copy(
    ffi.Pointer<UA_UserIdentityToken> src,
    ffi.Pointer<UA_UserIdentityToken> dst,
  ) {
    return _UA_UserIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UserIdentityToken>, ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_copy');
  late final _UA_UserIdentityToken_copy = _UA_UserIdentityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UserIdentityToken>, ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_clear(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserIdentityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_clear');
  late final _UA_UserIdentityToken_clear =
      _UA_UserIdentityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_delete(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserIdentityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_delete');
  late final _UA_UserIdentityToken_delete =
      _UA_UserIdentityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  bool UA_UserIdentityToken_equal(
    ffi.Pointer<UA_UserIdentityToken> p1,
    ffi.Pointer<UA_UserIdentityToken> p2,
  ) {
    return _UA_UserIdentityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserIdentityToken_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UserIdentityToken>, ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_equal');
  late final _UA_UserIdentityToken_equal = _UA_UserIdentityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UserIdentityToken>, ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_AnonymousIdentityToken_init(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_init(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
          'UA_AnonymousIdentityToken_init');
  late final _UA_AnonymousIdentityToken_init =
      _UA_AnonymousIdentityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  ffi.Pointer<UA_AnonymousIdentityToken> UA_AnonymousIdentityToken_new() {
    return _UA_AnonymousIdentityToken_new();
  }

  late final _UA_AnonymousIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>>('UA_AnonymousIdentityToken_new');
  late final _UA_AnonymousIdentityToken_new =
      _UA_AnonymousIdentityToken_newPtr.asFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>();

  int UA_AnonymousIdentityToken_copy(
    ffi.Pointer<UA_AnonymousIdentityToken> src,
    ffi.Pointer<UA_AnonymousIdentityToken> dst,
  ) {
    return _UA_AnonymousIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_AnonymousIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AnonymousIdentityToken>,
              ffi.Pointer<UA_AnonymousIdentityToken>)>>('UA_AnonymousIdentityToken_copy');
  late final _UA_AnonymousIdentityToken_copy = _UA_AnonymousIdentityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AnonymousIdentityToken>, ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_clear(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_clear(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
          'UA_AnonymousIdentityToken_clear');
  late final _UA_AnonymousIdentityToken_clear =
      _UA_AnonymousIdentityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_delete(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_delete(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
          'UA_AnonymousIdentityToken_delete');
  late final _UA_AnonymousIdentityToken_delete =
      _UA_AnonymousIdentityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  bool UA_AnonymousIdentityToken_equal(
    ffi.Pointer<UA_AnonymousIdentityToken> p1,
    ffi.Pointer<UA_AnonymousIdentityToken> p2,
  ) {
    return _UA_AnonymousIdentityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_AnonymousIdentityToken_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AnonymousIdentityToken>,
              ffi.Pointer<UA_AnonymousIdentityToken>)>>('UA_AnonymousIdentityToken_equal');
  late final _UA_AnonymousIdentityToken_equal = _UA_AnonymousIdentityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AnonymousIdentityToken>, ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_UserNameIdentityToken_init(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_init(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
          'UA_UserNameIdentityToken_init');
  late final _UA_UserNameIdentityToken_init =
      _UA_UserNameIdentityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  ffi.Pointer<UA_UserNameIdentityToken> UA_UserNameIdentityToken_new() {
    return _UA_UserNameIdentityToken_new();
  }

  late final _UA_UserNameIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>>('UA_UserNameIdentityToken_new');
  late final _UA_UserNameIdentityToken_new =
      _UA_UserNameIdentityToken_newPtr.asFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>();

  int UA_UserNameIdentityToken_copy(
    ffi.Pointer<UA_UserNameIdentityToken> src,
    ffi.Pointer<UA_UserNameIdentityToken> dst,
  ) {
    return _UA_UserNameIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserNameIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserNameIdentityToken>,
              ffi.Pointer<UA_UserNameIdentityToken>)>>('UA_UserNameIdentityToken_copy');
  late final _UA_UserNameIdentityToken_copy = _UA_UserNameIdentityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UserNameIdentityToken>, ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_clear(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
          'UA_UserNameIdentityToken_clear');
  late final _UA_UserNameIdentityToken_clear =
      _UA_UserNameIdentityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_delete(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
          'UA_UserNameIdentityToken_delete');
  late final _UA_UserNameIdentityToken_delete =
      _UA_UserNameIdentityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  bool UA_UserNameIdentityToken_equal(
    ffi.Pointer<UA_UserNameIdentityToken> p1,
    ffi.Pointer<UA_UserNameIdentityToken> p2,
  ) {
    return _UA_UserNameIdentityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_UserNameIdentityToken_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UserNameIdentityToken>,
              ffi.Pointer<UA_UserNameIdentityToken>)>>('UA_UserNameIdentityToken_equal');
  late final _UA_UserNameIdentityToken_equal = _UA_UserNameIdentityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UserNameIdentityToken>, ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_X509IdentityToken_init(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_init(
      p,
    );
  }

  late final _UA_X509IdentityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_init');
  late final _UA_X509IdentityToken_init =
      _UA_X509IdentityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  ffi.Pointer<UA_X509IdentityToken> UA_X509IdentityToken_new() {
    return _UA_X509IdentityToken_new();
  }

  late final _UA_X509IdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_X509IdentityToken> Function()>>('UA_X509IdentityToken_new');
  late final _UA_X509IdentityToken_new =
      _UA_X509IdentityToken_newPtr.asFunction<ffi.Pointer<UA_X509IdentityToken> Function()>();

  int UA_X509IdentityToken_copy(
    ffi.Pointer<UA_X509IdentityToken> src,
    ffi.Pointer<UA_X509IdentityToken> dst,
  ) {
    return _UA_X509IdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_X509IdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_X509IdentityToken>, ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_copy');
  late final _UA_X509IdentityToken_copy = _UA_X509IdentityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_X509IdentityToken>, ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_clear(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_clear(
      p,
    );
  }

  late final _UA_X509IdentityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_clear');
  late final _UA_X509IdentityToken_clear =
      _UA_X509IdentityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_delete(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_delete(
      p,
    );
  }

  late final _UA_X509IdentityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_delete');
  late final _UA_X509IdentityToken_delete =
      _UA_X509IdentityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  bool UA_X509IdentityToken_equal(
    ffi.Pointer<UA_X509IdentityToken> p1,
    ffi.Pointer<UA_X509IdentityToken> p2,
  ) {
    return _UA_X509IdentityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_X509IdentityToken_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_X509IdentityToken>, ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_equal');
  late final _UA_X509IdentityToken_equal = _UA_X509IdentityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_X509IdentityToken>, ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_IssuedIdentityToken_init(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_init(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
          'UA_IssuedIdentityToken_init');
  late final _UA_IssuedIdentityToken_init =
      _UA_IssuedIdentityToken_initPtr.asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  ffi.Pointer<UA_IssuedIdentityToken> UA_IssuedIdentityToken_new() {
    return _UA_IssuedIdentityToken_new();
  }

  late final _UA_IssuedIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>>('UA_IssuedIdentityToken_new');
  late final _UA_IssuedIdentityToken_new =
      _UA_IssuedIdentityToken_newPtr.asFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>();

  int UA_IssuedIdentityToken_copy(
    ffi.Pointer<UA_IssuedIdentityToken> src,
    ffi.Pointer<UA_IssuedIdentityToken> dst,
  ) {
    return _UA_IssuedIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_IssuedIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_IssuedIdentityToken>,
              ffi.Pointer<UA_IssuedIdentityToken>)>>('UA_IssuedIdentityToken_copy');
  late final _UA_IssuedIdentityToken_copy = _UA_IssuedIdentityToken_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_IssuedIdentityToken>, ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_clear(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_clear(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
          'UA_IssuedIdentityToken_clear');
  late final _UA_IssuedIdentityToken_clear =
      _UA_IssuedIdentityToken_clearPtr.asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_delete(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_delete(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
          'UA_IssuedIdentityToken_delete');
  late final _UA_IssuedIdentityToken_delete =
      _UA_IssuedIdentityToken_deletePtr.asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  bool UA_IssuedIdentityToken_equal(
    ffi.Pointer<UA_IssuedIdentityToken> p1,
    ffi.Pointer<UA_IssuedIdentityToken> p2,
  ) {
    return _UA_IssuedIdentityToken_equal(
      p1,
      p2,
    );
  }

  late final _UA_IssuedIdentityToken_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_IssuedIdentityToken>, ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_equal');
  late final _UA_IssuedIdentityToken_equal = _UA_IssuedIdentityToken_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_IssuedIdentityToken>, ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_RsaEncryptedSecret_init(
    ffi.Pointer<UA_RsaEncryptedSecret> p,
  ) {
    return _UA_RsaEncryptedSecret_init(
      p,
    );
  }

  late final _UA_RsaEncryptedSecret_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>>('UA_RsaEncryptedSecret_init');
  late final _UA_RsaEncryptedSecret_init =
      _UA_RsaEncryptedSecret_initPtr.asFunction<void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>();

  ffi.Pointer<UA_RsaEncryptedSecret> UA_RsaEncryptedSecret_new() {
    return _UA_RsaEncryptedSecret_new();
  }

  late final _UA_RsaEncryptedSecret_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RsaEncryptedSecret> Function()>>('UA_RsaEncryptedSecret_new');
  late final _UA_RsaEncryptedSecret_new =
      _UA_RsaEncryptedSecret_newPtr.asFunction<ffi.Pointer<UA_RsaEncryptedSecret> Function()>();

  int UA_RsaEncryptedSecret_copy(
    ffi.Pointer<UA_RsaEncryptedSecret> src,
    ffi.Pointer<UA_RsaEncryptedSecret> dst,
  ) {
    return _UA_RsaEncryptedSecret_copy(
      src,
      dst,
    );
  }

  late final _UA_RsaEncryptedSecret_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_RsaEncryptedSecret>, ffi.Pointer<UA_RsaEncryptedSecret>)>>('UA_RsaEncryptedSecret_copy');
  late final _UA_RsaEncryptedSecret_copy = _UA_RsaEncryptedSecret_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RsaEncryptedSecret>, ffi.Pointer<UA_RsaEncryptedSecret>)>();

  void UA_RsaEncryptedSecret_clear(
    ffi.Pointer<UA_RsaEncryptedSecret> p,
  ) {
    return _UA_RsaEncryptedSecret_clear(
      p,
    );
  }

  late final _UA_RsaEncryptedSecret_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>>('UA_RsaEncryptedSecret_clear');
  late final _UA_RsaEncryptedSecret_clear =
      _UA_RsaEncryptedSecret_clearPtr.asFunction<void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>();

  void UA_RsaEncryptedSecret_delete(
    ffi.Pointer<UA_RsaEncryptedSecret> p,
  ) {
    return _UA_RsaEncryptedSecret_delete(
      p,
    );
  }

  late final _UA_RsaEncryptedSecret_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>>(
          'UA_RsaEncryptedSecret_delete');
  late final _UA_RsaEncryptedSecret_delete =
      _UA_RsaEncryptedSecret_deletePtr.asFunction<void Function(ffi.Pointer<UA_RsaEncryptedSecret>)>();

  bool UA_RsaEncryptedSecret_equal(
    ffi.Pointer<UA_RsaEncryptedSecret> p1,
    ffi.Pointer<UA_RsaEncryptedSecret> p2,
  ) {
    return _UA_RsaEncryptedSecret_equal(
      p1,
      p2,
    );
  }

  late final _UA_RsaEncryptedSecret_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RsaEncryptedSecret>, ffi.Pointer<UA_RsaEncryptedSecret>)>>(
      'UA_RsaEncryptedSecret_equal');
  late final _UA_RsaEncryptedSecret_equal = _UA_RsaEncryptedSecret_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RsaEncryptedSecret>, ffi.Pointer<UA_RsaEncryptedSecret>)>();

  void UA_EccEncryptedSecret_init(
    ffi.Pointer<UA_EccEncryptedSecret> p,
  ) {
    return _UA_EccEncryptedSecret_init(
      p,
    );
  }

  late final _UA_EccEncryptedSecret_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EccEncryptedSecret>)>>('UA_EccEncryptedSecret_init');
  late final _UA_EccEncryptedSecret_init =
      _UA_EccEncryptedSecret_initPtr.asFunction<void Function(ffi.Pointer<UA_EccEncryptedSecret>)>();

  ffi.Pointer<UA_EccEncryptedSecret> UA_EccEncryptedSecret_new() {
    return _UA_EccEncryptedSecret_new();
  }

  late final _UA_EccEncryptedSecret_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EccEncryptedSecret> Function()>>('UA_EccEncryptedSecret_new');
  late final _UA_EccEncryptedSecret_new =
      _UA_EccEncryptedSecret_newPtr.asFunction<ffi.Pointer<UA_EccEncryptedSecret> Function()>();

  int UA_EccEncryptedSecret_copy(
    ffi.Pointer<UA_EccEncryptedSecret> src,
    ffi.Pointer<UA_EccEncryptedSecret> dst,
  ) {
    return _UA_EccEncryptedSecret_copy(
      src,
      dst,
    );
  }

  late final _UA_EccEncryptedSecret_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_EccEncryptedSecret>, ffi.Pointer<UA_EccEncryptedSecret>)>>('UA_EccEncryptedSecret_copy');
  late final _UA_EccEncryptedSecret_copy = _UA_EccEncryptedSecret_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EccEncryptedSecret>, ffi.Pointer<UA_EccEncryptedSecret>)>();

  void UA_EccEncryptedSecret_clear(
    ffi.Pointer<UA_EccEncryptedSecret> p,
  ) {
    return _UA_EccEncryptedSecret_clear(
      p,
    );
  }

  late final _UA_EccEncryptedSecret_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EccEncryptedSecret>)>>('UA_EccEncryptedSecret_clear');
  late final _UA_EccEncryptedSecret_clear =
      _UA_EccEncryptedSecret_clearPtr.asFunction<void Function(ffi.Pointer<UA_EccEncryptedSecret>)>();

  void UA_EccEncryptedSecret_delete(
    ffi.Pointer<UA_EccEncryptedSecret> p,
  ) {
    return _UA_EccEncryptedSecret_delete(
      p,
    );
  }

  late final _UA_EccEncryptedSecret_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EccEncryptedSecret>)>>(
          'UA_EccEncryptedSecret_delete');
  late final _UA_EccEncryptedSecret_delete =
      _UA_EccEncryptedSecret_deletePtr.asFunction<void Function(ffi.Pointer<UA_EccEncryptedSecret>)>();

  bool UA_EccEncryptedSecret_equal(
    ffi.Pointer<UA_EccEncryptedSecret> p1,
    ffi.Pointer<UA_EccEncryptedSecret> p2,
  ) {
    return _UA_EccEncryptedSecret_equal(
      p1,
      p2,
    );
  }

  late final _UA_EccEncryptedSecret_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EccEncryptedSecret>, ffi.Pointer<UA_EccEncryptedSecret>)>>(
      'UA_EccEncryptedSecret_equal');
  late final _UA_EccEncryptedSecret_equal = _UA_EccEncryptedSecret_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EccEncryptedSecret>, ffi.Pointer<UA_EccEncryptedSecret>)>();

  void UA_ActivateSessionRequest_init(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_init(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
          'UA_ActivateSessionRequest_init');
  late final _UA_ActivateSessionRequest_init =
      _UA_ActivateSessionRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  ffi.Pointer<UA_ActivateSessionRequest> UA_ActivateSessionRequest_new() {
    return _UA_ActivateSessionRequest_new();
  }

  late final _UA_ActivateSessionRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>>('UA_ActivateSessionRequest_new');
  late final _UA_ActivateSessionRequest_new =
      _UA_ActivateSessionRequest_newPtr.asFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>();

  int UA_ActivateSessionRequest_copy(
    ffi.Pointer<UA_ActivateSessionRequest> src,
    ffi.Pointer<UA_ActivateSessionRequest> dst,
  ) {
    return _UA_ActivateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionRequest>,
              ffi.Pointer<UA_ActivateSessionRequest>)>>('UA_ActivateSessionRequest_copy');
  late final _UA_ActivateSessionRequest_copy = _UA_ActivateSessionRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ActivateSessionRequest>, ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_clear(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_clear(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
          'UA_ActivateSessionRequest_clear');
  late final _UA_ActivateSessionRequest_clear =
      _UA_ActivateSessionRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_delete(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_delete(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
          'UA_ActivateSessionRequest_delete');
  late final _UA_ActivateSessionRequest_delete =
      _UA_ActivateSessionRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  bool UA_ActivateSessionRequest_equal(
    ffi.Pointer<UA_ActivateSessionRequest> p1,
    ffi.Pointer<UA_ActivateSessionRequest> p2,
  ) {
    return _UA_ActivateSessionRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_ActivateSessionRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ActivateSessionRequest>,
              ffi.Pointer<UA_ActivateSessionRequest>)>>('UA_ActivateSessionRequest_equal');
  late final _UA_ActivateSessionRequest_equal = _UA_ActivateSessionRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ActivateSessionRequest>, ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionResponse_init(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_init(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
          'UA_ActivateSessionResponse_init');
  late final _UA_ActivateSessionResponse_init =
      _UA_ActivateSessionResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  ffi.Pointer<UA_ActivateSessionResponse> UA_ActivateSessionResponse_new() {
    return _UA_ActivateSessionResponse_new();
  }

  late final _UA_ActivateSessionResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ActivateSessionResponse> Function()>>('UA_ActivateSessionResponse_new');
  late final _UA_ActivateSessionResponse_new =
      _UA_ActivateSessionResponse_newPtr.asFunction<ffi.Pointer<UA_ActivateSessionResponse> Function()>();

  int UA_ActivateSessionResponse_copy(
    ffi.Pointer<UA_ActivateSessionResponse> src,
    ffi.Pointer<UA_ActivateSessionResponse> dst,
  ) {
    return _UA_ActivateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionResponse>,
              ffi.Pointer<UA_ActivateSessionResponse>)>>('UA_ActivateSessionResponse_copy');
  late final _UA_ActivateSessionResponse_copy = _UA_ActivateSessionResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ActivateSessionResponse>, ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_clear(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_clear(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
          'UA_ActivateSessionResponse_clear');
  late final _UA_ActivateSessionResponse_clear =
      _UA_ActivateSessionResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_delete(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_delete(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
          'UA_ActivateSessionResponse_delete');
  late final _UA_ActivateSessionResponse_delete =
      _UA_ActivateSessionResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  bool UA_ActivateSessionResponse_equal(
    ffi.Pointer<UA_ActivateSessionResponse> p1,
    ffi.Pointer<UA_ActivateSessionResponse> p2,
  ) {
    return _UA_ActivateSessionResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_ActivateSessionResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ActivateSessionResponse>,
              ffi.Pointer<UA_ActivateSessionResponse>)>>('UA_ActivateSessionResponse_equal');
  late final _UA_ActivateSessionResponse_equal = _UA_ActivateSessionResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ActivateSessionResponse>, ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_CloseSessionRequest_init(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_init(
      p,
    );
  }

  late final _UA_CloseSessionRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
          'UA_CloseSessionRequest_init');
  late final _UA_CloseSessionRequest_init =
      _UA_CloseSessionRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  ffi.Pointer<UA_CloseSessionRequest> UA_CloseSessionRequest_new() {
    return _UA_CloseSessionRequest_new();
  }

  late final _UA_CloseSessionRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>>('UA_CloseSessionRequest_new');
  late final _UA_CloseSessionRequest_new =
      _UA_CloseSessionRequest_newPtr.asFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>();

  int UA_CloseSessionRequest_copy(
    ffi.Pointer<UA_CloseSessionRequest> src,
    ffi.Pointer<UA_CloseSessionRequest> dst,
  ) {
    return _UA_CloseSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CloseSessionRequest>,
              ffi.Pointer<UA_CloseSessionRequest>)>>('UA_CloseSessionRequest_copy');
  late final _UA_CloseSessionRequest_copy = _UA_CloseSessionRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CloseSessionRequest>, ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_clear(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_clear(
      p,
    );
  }

  late final _UA_CloseSessionRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
          'UA_CloseSessionRequest_clear');
  late final _UA_CloseSessionRequest_clear =
      _UA_CloseSessionRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_delete(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_delete(
      p,
    );
  }

  late final _UA_CloseSessionRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
          'UA_CloseSessionRequest_delete');
  late final _UA_CloseSessionRequest_delete =
      _UA_CloseSessionRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  bool UA_CloseSessionRequest_equal(
    ffi.Pointer<UA_CloseSessionRequest> p1,
    ffi.Pointer<UA_CloseSessionRequest> p2,
  ) {
    return _UA_CloseSessionRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CloseSessionRequest_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CloseSessionRequest>, ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_equal');
  late final _UA_CloseSessionRequest_equal = _UA_CloseSessionRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CloseSessionRequest>, ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionResponse_init(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_init(
      p,
    );
  }

  late final _UA_CloseSessionResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
          'UA_CloseSessionResponse_init');
  late final _UA_CloseSessionResponse_init =
      _UA_CloseSessionResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  ffi.Pointer<UA_CloseSessionResponse> UA_CloseSessionResponse_new() {
    return _UA_CloseSessionResponse_new();
  }

  late final _UA_CloseSessionResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>>('UA_CloseSessionResponse_new');
  late final _UA_CloseSessionResponse_new =
      _UA_CloseSessionResponse_newPtr.asFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>();

  int UA_CloseSessionResponse_copy(
    ffi.Pointer<UA_CloseSessionResponse> src,
    ffi.Pointer<UA_CloseSessionResponse> dst,
  ) {
    return _UA_CloseSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CloseSessionResponse>,
              ffi.Pointer<UA_CloseSessionResponse>)>>('UA_CloseSessionResponse_copy');
  late final _UA_CloseSessionResponse_copy = _UA_CloseSessionResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CloseSessionResponse>, ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_clear(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_clear(
      p,
    );
  }

  late final _UA_CloseSessionResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
          'UA_CloseSessionResponse_clear');
  late final _UA_CloseSessionResponse_clear =
      _UA_CloseSessionResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_delete(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_delete(
      p,
    );
  }

  late final _UA_CloseSessionResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
          'UA_CloseSessionResponse_delete');
  late final _UA_CloseSessionResponse_delete =
      _UA_CloseSessionResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  bool UA_CloseSessionResponse_equal(
    ffi.Pointer<UA_CloseSessionResponse> p1,
    ffi.Pointer<UA_CloseSessionResponse> p2,
  ) {
    return _UA_CloseSessionResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CloseSessionResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CloseSessionResponse>,
              ffi.Pointer<UA_CloseSessionResponse>)>>('UA_CloseSessionResponse_equal');
  late final _UA_CloseSessionResponse_equal = _UA_CloseSessionResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CloseSessionResponse>, ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CancelRequest_init(
    ffi.Pointer<UA_CancelRequest> p,
  ) {
    return _UA_CancelRequest_init(
      p,
    );
  }

  late final _UA_CancelRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelRequest>)>>('UA_CancelRequest_init');
  late final _UA_CancelRequest_init =
      _UA_CancelRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CancelRequest>)>();

  ffi.Pointer<UA_CancelRequest> UA_CancelRequest_new() {
    return _UA_CancelRequest_new();
  }

  late final _UA_CancelRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CancelRequest> Function()>>('UA_CancelRequest_new');
  late final _UA_CancelRequest_new = _UA_CancelRequest_newPtr.asFunction<ffi.Pointer<UA_CancelRequest> Function()>();

  int UA_CancelRequest_copy(
    ffi.Pointer<UA_CancelRequest> src,
    ffi.Pointer<UA_CancelRequest> dst,
  ) {
    return _UA_CancelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CancelRequest_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CancelRequest>, ffi.Pointer<UA_CancelRequest>)>>(
          'UA_CancelRequest_copy');
  late final _UA_CancelRequest_copy = _UA_CancelRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CancelRequest>, ffi.Pointer<UA_CancelRequest>)>();

  void UA_CancelRequest_clear(
    ffi.Pointer<UA_CancelRequest> p,
  ) {
    return _UA_CancelRequest_clear(
      p,
    );
  }

  late final _UA_CancelRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelRequest>)>>('UA_CancelRequest_clear');
  late final _UA_CancelRequest_clear =
      _UA_CancelRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CancelRequest>)>();

  void UA_CancelRequest_delete(
    ffi.Pointer<UA_CancelRequest> p,
  ) {
    return _UA_CancelRequest_delete(
      p,
    );
  }

  late final _UA_CancelRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelRequest>)>>('UA_CancelRequest_delete');
  late final _UA_CancelRequest_delete =
      _UA_CancelRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CancelRequest>)>();

  bool UA_CancelRequest_equal(
    ffi.Pointer<UA_CancelRequest> p1,
    ffi.Pointer<UA_CancelRequest> p2,
  ) {
    return _UA_CancelRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CancelRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CancelRequest>, ffi.Pointer<UA_CancelRequest>)>>(
          'UA_CancelRequest_equal');
  late final _UA_CancelRequest_equal = _UA_CancelRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CancelRequest>, ffi.Pointer<UA_CancelRequest>)>();

  void UA_CancelResponse_init(
    ffi.Pointer<UA_CancelResponse> p,
  ) {
    return _UA_CancelResponse_init(
      p,
    );
  }

  late final _UA_CancelResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelResponse>)>>('UA_CancelResponse_init');
  late final _UA_CancelResponse_init =
      _UA_CancelResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CancelResponse>)>();

  ffi.Pointer<UA_CancelResponse> UA_CancelResponse_new() {
    return _UA_CancelResponse_new();
  }

  late final _UA_CancelResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CancelResponse> Function()>>('UA_CancelResponse_new');
  late final _UA_CancelResponse_new = _UA_CancelResponse_newPtr.asFunction<ffi.Pointer<UA_CancelResponse> Function()>();

  int UA_CancelResponse_copy(
    ffi.Pointer<UA_CancelResponse> src,
    ffi.Pointer<UA_CancelResponse> dst,
  ) {
    return _UA_CancelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CancelResponse_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CancelResponse>, ffi.Pointer<UA_CancelResponse>)>>(
      'UA_CancelResponse_copy');
  late final _UA_CancelResponse_copy = _UA_CancelResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CancelResponse>, ffi.Pointer<UA_CancelResponse>)>();

  void UA_CancelResponse_clear(
    ffi.Pointer<UA_CancelResponse> p,
  ) {
    return _UA_CancelResponse_clear(
      p,
    );
  }

  late final _UA_CancelResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelResponse>)>>('UA_CancelResponse_clear');
  late final _UA_CancelResponse_clear =
      _UA_CancelResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CancelResponse>)>();

  void UA_CancelResponse_delete(
    ffi.Pointer<UA_CancelResponse> p,
  ) {
    return _UA_CancelResponse_delete(
      p,
    );
  }

  late final _UA_CancelResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CancelResponse>)>>('UA_CancelResponse_delete');
  late final _UA_CancelResponse_delete =
      _UA_CancelResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CancelResponse>)>();

  bool UA_CancelResponse_equal(
    ffi.Pointer<UA_CancelResponse> p1,
    ffi.Pointer<UA_CancelResponse> p2,
  ) {
    return _UA_CancelResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CancelResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CancelResponse>, ffi.Pointer<UA_CancelResponse>)>>(
          'UA_CancelResponse_equal');
  late final _UA_CancelResponse_equal = _UA_CancelResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CancelResponse>, ffi.Pointer<UA_CancelResponse>)>();

  void UA_NodeAttributesMask_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeAttributesMask_init(
      p,
    );
  }

  late final _UA_NodeAttributesMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeAttributesMask_init');
  late final _UA_NodeAttributesMask_init =
      _UA_NodeAttributesMask_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_NodeAttributesMask_new() {
    return _UA_NodeAttributesMask_new();
  }

  late final _UA_NodeAttributesMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_NodeAttributesMask_new');
  late final _UA_NodeAttributesMask_new =
      _UA_NodeAttributesMask_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_NodeAttributesMask_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_NodeAttributesMask_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributesMask_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NodeAttributesMask_copy');
  late final _UA_NodeAttributesMask_copy = _UA_NodeAttributesMask_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeAttributesMask_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeAttributesMask_clear(
      p,
    );
  }

  late final _UA_NodeAttributesMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeAttributesMask_clear');
  late final _UA_NodeAttributesMask_clear =
      _UA_NodeAttributesMask_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeAttributesMask_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_NodeAttributesMask_delete(
      p,
    );
  }

  late final _UA_NodeAttributesMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_NodeAttributesMask_delete');
  late final _UA_NodeAttributesMask_delete =
      _UA_NodeAttributesMask_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_NodeAttributesMask_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_NodeAttributesMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeAttributesMask_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_NodeAttributesMask_equal');
  late final _UA_NodeAttributesMask_equal = _UA_NodeAttributesMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_NodeAttributes_init(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_init(
      p,
    );
  }

  late final _UA_NodeAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>('UA_NodeAttributes_init');
  late final _UA_NodeAttributes_init =
      _UA_NodeAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeAttributes>)>();

  ffi.Pointer<UA_NodeAttributes> UA_NodeAttributes_new() {
    return _UA_NodeAttributes_new();
  }

  late final _UA_NodeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeAttributes> Function()>>('UA_NodeAttributes_new');
  late final _UA_NodeAttributes_new = _UA_NodeAttributes_newPtr.asFunction<ffi.Pointer<UA_NodeAttributes> Function()>();

  int UA_NodeAttributes_copy(
    ffi.Pointer<UA_NodeAttributes> src,
    ffi.Pointer<UA_NodeAttributes> dst,
  ) {
    return _UA_NodeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_copy');
  late final _UA_NodeAttributes_copy = _UA_NodeAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_clear(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_clear(
      p,
    );
  }

  late final _UA_NodeAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>('UA_NodeAttributes_clear');
  late final _UA_NodeAttributes_clear =
      _UA_NodeAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_delete(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_delete(
      p,
    );
  }

  late final _UA_NodeAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>('UA_NodeAttributes_delete');
  late final _UA_NodeAttributes_delete =
      _UA_NodeAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeAttributes>)>();

  bool UA_NodeAttributes_equal(
    ffi.Pointer<UA_NodeAttributes> p1,
    ffi.Pointer<UA_NodeAttributes> p2,
  ) {
    return _UA_NodeAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeAttributes_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>>(
          'UA_NodeAttributes_equal');
  late final _UA_NodeAttributes_equal = _UA_NodeAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>();

  void UA_ObjectAttributes_init(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_init(
      p,
    );
  }

  late final _UA_ObjectAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>('UA_ObjectAttributes_init');
  late final _UA_ObjectAttributes_init =
      _UA_ObjectAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  ffi.Pointer<UA_ObjectAttributes> UA_ObjectAttributes_new() {
    return _UA_ObjectAttributes_new();
  }

  late final _UA_ObjectAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ObjectAttributes> Function()>>('UA_ObjectAttributes_new');
  late final _UA_ObjectAttributes_new =
      _UA_ObjectAttributes_newPtr.asFunction<ffi.Pointer<UA_ObjectAttributes> Function()>();

  int UA_ObjectAttributes_copy(
    ffi.Pointer<UA_ObjectAttributes> src,
    ffi.Pointer<UA_ObjectAttributes> dst,
  ) {
    return _UA_ObjectAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectAttributes_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ObjectAttributes>, ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_copy');
  late final _UA_ObjectAttributes_copy = _UA_ObjectAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ObjectAttributes>, ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_clear(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>('UA_ObjectAttributes_clear');
  late final _UA_ObjectAttributes_clear =
      _UA_ObjectAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_delete(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>('UA_ObjectAttributes_delete');
  late final _UA_ObjectAttributes_delete =
      _UA_ObjectAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  bool UA_ObjectAttributes_equal(
    ffi.Pointer<UA_ObjectAttributes> p1,
    ffi.Pointer<UA_ObjectAttributes> p2,
  ) {
    return _UA_ObjectAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_ObjectAttributes_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ObjectAttributes>, ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_equal');
  late final _UA_ObjectAttributes_equal = _UA_ObjectAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ObjectAttributes>, ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_VariableAttributes_init(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_init(
      p,
    );
  }

  late final _UA_VariableAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>('UA_VariableAttributes_init');
  late final _UA_VariableAttributes_init =
      _UA_VariableAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  ffi.Pointer<UA_VariableAttributes> UA_VariableAttributes_new() {
    return _UA_VariableAttributes_new();
  }

  late final _UA_VariableAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_VariableAttributes> Function()>>('UA_VariableAttributes_new');
  late final _UA_VariableAttributes_new =
      _UA_VariableAttributes_newPtr.asFunction<ffi.Pointer<UA_VariableAttributes> Function()>();

  int UA_VariableAttributes_copy(
    ffi.Pointer<UA_VariableAttributes> src,
    ffi.Pointer<UA_VariableAttributes> dst,
  ) {
    return _UA_VariableAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_VariableAttributes>, ffi.Pointer<UA_VariableAttributes>)>>('UA_VariableAttributes_copy');
  late final _UA_VariableAttributes_copy = _UA_VariableAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_VariableAttributes>, ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_clear(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_clear(
      p,
    );
  }

  late final _UA_VariableAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>('UA_VariableAttributes_clear');
  late final _UA_VariableAttributes_clear =
      _UA_VariableAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_delete(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_delete(
      p,
    );
  }

  late final _UA_VariableAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
          'UA_VariableAttributes_delete');
  late final _UA_VariableAttributes_delete =
      _UA_VariableAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  bool UA_VariableAttributes_equal(
    ffi.Pointer<UA_VariableAttributes> p1,
    ffi.Pointer<UA_VariableAttributes> p2,
  ) {
    return _UA_VariableAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_VariableAttributes_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_VariableAttributes>, ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_equal');
  late final _UA_VariableAttributes_equal = _UA_VariableAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_VariableAttributes>, ffi.Pointer<UA_VariableAttributes>)>();

  void UA_MethodAttributes_init(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_init(
      p,
    );
  }

  late final _UA_MethodAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>('UA_MethodAttributes_init');
  late final _UA_MethodAttributes_init =
      _UA_MethodAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  ffi.Pointer<UA_MethodAttributes> UA_MethodAttributes_new() {
    return _UA_MethodAttributes_new();
  }

  late final _UA_MethodAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MethodAttributes> Function()>>('UA_MethodAttributes_new');
  late final _UA_MethodAttributes_new =
      _UA_MethodAttributes_newPtr.asFunction<ffi.Pointer<UA_MethodAttributes> Function()>();

  int UA_MethodAttributes_copy(
    ffi.Pointer<UA_MethodAttributes> src,
    ffi.Pointer<UA_MethodAttributes> dst,
  ) {
    return _UA_MethodAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_MethodAttributes_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_MethodAttributes>, ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_copy');
  late final _UA_MethodAttributes_copy = _UA_MethodAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MethodAttributes>, ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_clear(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_clear(
      p,
    );
  }

  late final _UA_MethodAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>('UA_MethodAttributes_clear');
  late final _UA_MethodAttributes_clear =
      _UA_MethodAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_delete(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_delete(
      p,
    );
  }

  late final _UA_MethodAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>('UA_MethodAttributes_delete');
  late final _UA_MethodAttributes_delete =
      _UA_MethodAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  bool UA_MethodAttributes_equal(
    ffi.Pointer<UA_MethodAttributes> p1,
    ffi.Pointer<UA_MethodAttributes> p2,
  ) {
    return _UA_MethodAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_MethodAttributes_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_MethodAttributes>, ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_equal');
  late final _UA_MethodAttributes_equal = _UA_MethodAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MethodAttributes>, ffi.Pointer<UA_MethodAttributes>)>();

  void UA_ObjectTypeAttributes_init(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_init(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
          'UA_ObjectTypeAttributes_init');
  late final _UA_ObjectTypeAttributes_init =
      _UA_ObjectTypeAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  ffi.Pointer<UA_ObjectTypeAttributes> UA_ObjectTypeAttributes_new() {
    return _UA_ObjectTypeAttributes_new();
  }

  late final _UA_ObjectTypeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>>('UA_ObjectTypeAttributes_new');
  late final _UA_ObjectTypeAttributes_new =
      _UA_ObjectTypeAttributes_newPtr.asFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>();

  int UA_ObjectTypeAttributes_copy(
    ffi.Pointer<UA_ObjectTypeAttributes> src,
    ffi.Pointer<UA_ObjectTypeAttributes> dst,
  ) {
    return _UA_ObjectTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectTypeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ObjectTypeAttributes>,
              ffi.Pointer<UA_ObjectTypeAttributes>)>>('UA_ObjectTypeAttributes_copy');
  late final _UA_ObjectTypeAttributes_copy = _UA_ObjectTypeAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ObjectTypeAttributes>, ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_clear(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
          'UA_ObjectTypeAttributes_clear');
  late final _UA_ObjectTypeAttributes_clear =
      _UA_ObjectTypeAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_delete(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
          'UA_ObjectTypeAttributes_delete');
  late final _UA_ObjectTypeAttributes_delete =
      _UA_ObjectTypeAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  bool UA_ObjectTypeAttributes_equal(
    ffi.Pointer<UA_ObjectTypeAttributes> p1,
    ffi.Pointer<UA_ObjectTypeAttributes> p2,
  ) {
    return _UA_ObjectTypeAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_ObjectTypeAttributes_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ObjectTypeAttributes>,
              ffi.Pointer<UA_ObjectTypeAttributes>)>>('UA_ObjectTypeAttributes_equal');
  late final _UA_ObjectTypeAttributes_equal = _UA_ObjectTypeAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ObjectTypeAttributes>, ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_VariableTypeAttributes_init(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_init(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
          'UA_VariableTypeAttributes_init');
  late final _UA_VariableTypeAttributes_init =
      _UA_VariableTypeAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  ffi.Pointer<UA_VariableTypeAttributes> UA_VariableTypeAttributes_new() {
    return _UA_VariableTypeAttributes_new();
  }

  late final _UA_VariableTypeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>>('UA_VariableTypeAttributes_new');
  late final _UA_VariableTypeAttributes_new =
      _UA_VariableTypeAttributes_newPtr.asFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>();

  int UA_VariableTypeAttributes_copy(
    ffi.Pointer<UA_VariableTypeAttributes> src,
    ffi.Pointer<UA_VariableTypeAttributes> dst,
  ) {
    return _UA_VariableTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableTypeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_VariableTypeAttributes>,
              ffi.Pointer<UA_VariableTypeAttributes>)>>('UA_VariableTypeAttributes_copy');
  late final _UA_VariableTypeAttributes_copy = _UA_VariableTypeAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_VariableTypeAttributes>, ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_clear(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_clear(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
          'UA_VariableTypeAttributes_clear');
  late final _UA_VariableTypeAttributes_clear =
      _UA_VariableTypeAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_delete(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_delete(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
          'UA_VariableTypeAttributes_delete');
  late final _UA_VariableTypeAttributes_delete =
      _UA_VariableTypeAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  bool UA_VariableTypeAttributes_equal(
    ffi.Pointer<UA_VariableTypeAttributes> p1,
    ffi.Pointer<UA_VariableTypeAttributes> p2,
  ) {
    return _UA_VariableTypeAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_VariableTypeAttributes_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_VariableTypeAttributes>,
              ffi.Pointer<UA_VariableTypeAttributes>)>>('UA_VariableTypeAttributes_equal');
  late final _UA_VariableTypeAttributes_equal = _UA_VariableTypeAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_VariableTypeAttributes>, ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_init(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_init(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
          'UA_ReferenceTypeAttributes_init');
  late final _UA_ReferenceTypeAttributes_init =
      _UA_ReferenceTypeAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  ffi.Pointer<UA_ReferenceTypeAttributes> UA_ReferenceTypeAttributes_new() {
    return _UA_ReferenceTypeAttributes_new();
  }

  late final _UA_ReferenceTypeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReferenceTypeAttributes> Function()>>('UA_ReferenceTypeAttributes_new');
  late final _UA_ReferenceTypeAttributes_new =
      _UA_ReferenceTypeAttributes_newPtr.asFunction<ffi.Pointer<UA_ReferenceTypeAttributes> Function()>();

  int UA_ReferenceTypeAttributes_copy(
    ffi.Pointer<UA_ReferenceTypeAttributes> src,
    ffi.Pointer<UA_ReferenceTypeAttributes> dst,
  ) {
    return _UA_ReferenceTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceTypeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
              ffi.Pointer<UA_ReferenceTypeAttributes>)>>('UA_ReferenceTypeAttributes_copy');
  late final _UA_ReferenceTypeAttributes_copy = _UA_ReferenceTypeAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReferenceTypeAttributes>, ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_clear(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
          'UA_ReferenceTypeAttributes_clear');
  late final _UA_ReferenceTypeAttributes_clear =
      _UA_ReferenceTypeAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_delete(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
          'UA_ReferenceTypeAttributes_delete');
  late final _UA_ReferenceTypeAttributes_delete =
      _UA_ReferenceTypeAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  bool UA_ReferenceTypeAttributes_equal(
    ffi.Pointer<UA_ReferenceTypeAttributes> p1,
    ffi.Pointer<UA_ReferenceTypeAttributes> p2,
  ) {
    return _UA_ReferenceTypeAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReferenceTypeAttributes_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
              ffi.Pointer<UA_ReferenceTypeAttributes>)>>('UA_ReferenceTypeAttributes_equal');
  late final _UA_ReferenceTypeAttributes_equal = _UA_ReferenceTypeAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReferenceTypeAttributes>, ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_DataTypeAttributes_init(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_init(
      p,
    );
  }

  late final _UA_DataTypeAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>('UA_DataTypeAttributes_init');
  late final _UA_DataTypeAttributes_init =
      _UA_DataTypeAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  ffi.Pointer<UA_DataTypeAttributes> UA_DataTypeAttributes_new() {
    return _UA_DataTypeAttributes_new();
  }

  late final _UA_DataTypeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>>('UA_DataTypeAttributes_new');
  late final _UA_DataTypeAttributes_new =
      _UA_DataTypeAttributes_newPtr.asFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>();

  int UA_DataTypeAttributes_copy(
    ffi.Pointer<UA_DataTypeAttributes> src,
    ffi.Pointer<UA_DataTypeAttributes> dst,
  ) {
    return _UA_DataTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataTypeAttributes>, ffi.Pointer<UA_DataTypeAttributes>)>>('UA_DataTypeAttributes_copy');
  late final _UA_DataTypeAttributes_copy = _UA_DataTypeAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataTypeAttributes>, ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_clear(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_clear(
      p,
    );
  }

  late final _UA_DataTypeAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>('UA_DataTypeAttributes_clear');
  late final _UA_DataTypeAttributes_clear =
      _UA_DataTypeAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_delete(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_delete(
      p,
    );
  }

  late final _UA_DataTypeAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
          'UA_DataTypeAttributes_delete');
  late final _UA_DataTypeAttributes_delete =
      _UA_DataTypeAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  bool UA_DataTypeAttributes_equal(
    ffi.Pointer<UA_DataTypeAttributes> p1,
    ffi.Pointer<UA_DataTypeAttributes> p2,
  ) {
    return _UA_DataTypeAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataTypeAttributes_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataTypeAttributes>, ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_equal');
  late final _UA_DataTypeAttributes_equal = _UA_DataTypeAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataTypeAttributes>, ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_ViewAttributes_init(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_init(
      p,
    );
  }

  late final _UA_ViewAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>('UA_ViewAttributes_init');
  late final _UA_ViewAttributes_init =
      _UA_ViewAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_ViewAttributes>)>();

  ffi.Pointer<UA_ViewAttributes> UA_ViewAttributes_new() {
    return _UA_ViewAttributes_new();
  }

  late final _UA_ViewAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewAttributes> Function()>>('UA_ViewAttributes_new');
  late final _UA_ViewAttributes_new = _UA_ViewAttributes_newPtr.asFunction<ffi.Pointer<UA_ViewAttributes> Function()>();

  int UA_ViewAttributes_copy(
    ffi.Pointer<UA_ViewAttributes> src,
    ffi.Pointer<UA_ViewAttributes> dst,
  ) {
    return _UA_ViewAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewAttributes_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_copy');
  late final _UA_ViewAttributes_copy = _UA_ViewAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_clear(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_clear(
      p,
    );
  }

  late final _UA_ViewAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>('UA_ViewAttributes_clear');
  late final _UA_ViewAttributes_clear =
      _UA_ViewAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_delete(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_delete(
      p,
    );
  }

  late final _UA_ViewAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>('UA_ViewAttributes_delete');
  late final _UA_ViewAttributes_delete =
      _UA_ViewAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_ViewAttributes>)>();

  bool UA_ViewAttributes_equal(
    ffi.Pointer<UA_ViewAttributes> p1,
    ffi.Pointer<UA_ViewAttributes> p2,
  ) {
    return _UA_ViewAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_ViewAttributes_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>>(
          'UA_ViewAttributes_equal');
  late final _UA_ViewAttributes_equal = _UA_ViewAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>();

  void UA_GenericAttributeValue_init(
    ffi.Pointer<UA_GenericAttributeValue> p,
  ) {
    return _UA_GenericAttributeValue_init(
      p,
    );
  }

  late final _UA_GenericAttributeValue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributeValue>)>>(
          'UA_GenericAttributeValue_init');
  late final _UA_GenericAttributeValue_init =
      _UA_GenericAttributeValue_initPtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributeValue>)>();

  ffi.Pointer<UA_GenericAttributeValue> UA_GenericAttributeValue_new() {
    return _UA_GenericAttributeValue_new();
  }

  late final _UA_GenericAttributeValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_GenericAttributeValue> Function()>>('UA_GenericAttributeValue_new');
  late final _UA_GenericAttributeValue_new =
      _UA_GenericAttributeValue_newPtr.asFunction<ffi.Pointer<UA_GenericAttributeValue> Function()>();

  int UA_GenericAttributeValue_copy(
    ffi.Pointer<UA_GenericAttributeValue> src,
    ffi.Pointer<UA_GenericAttributeValue> dst,
  ) {
    return _UA_GenericAttributeValue_copy(
      src,
      dst,
    );
  }

  late final _UA_GenericAttributeValue_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_GenericAttributeValue>,
              ffi.Pointer<UA_GenericAttributeValue>)>>('UA_GenericAttributeValue_copy');
  late final _UA_GenericAttributeValue_copy = _UA_GenericAttributeValue_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_GenericAttributeValue>, ffi.Pointer<UA_GenericAttributeValue>)>();

  void UA_GenericAttributeValue_clear(
    ffi.Pointer<UA_GenericAttributeValue> p,
  ) {
    return _UA_GenericAttributeValue_clear(
      p,
    );
  }

  late final _UA_GenericAttributeValue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributeValue>)>>(
          'UA_GenericAttributeValue_clear');
  late final _UA_GenericAttributeValue_clear =
      _UA_GenericAttributeValue_clearPtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributeValue>)>();

  void UA_GenericAttributeValue_delete(
    ffi.Pointer<UA_GenericAttributeValue> p,
  ) {
    return _UA_GenericAttributeValue_delete(
      p,
    );
  }

  late final _UA_GenericAttributeValue_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributeValue>)>>(
          'UA_GenericAttributeValue_delete');
  late final _UA_GenericAttributeValue_delete =
      _UA_GenericAttributeValue_deletePtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributeValue>)>();

  bool UA_GenericAttributeValue_equal(
    ffi.Pointer<UA_GenericAttributeValue> p1,
    ffi.Pointer<UA_GenericAttributeValue> p2,
  ) {
    return _UA_GenericAttributeValue_equal(
      p1,
      p2,
    );
  }

  late final _UA_GenericAttributeValue_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_GenericAttributeValue>,
              ffi.Pointer<UA_GenericAttributeValue>)>>('UA_GenericAttributeValue_equal');
  late final _UA_GenericAttributeValue_equal = _UA_GenericAttributeValue_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_GenericAttributeValue>, ffi.Pointer<UA_GenericAttributeValue>)>();

  void UA_GenericAttributes_init(
    ffi.Pointer<UA_GenericAttributes> p,
  ) {
    return _UA_GenericAttributes_init(
      p,
    );
  }

  late final _UA_GenericAttributes_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributes>)>>('UA_GenericAttributes_init');
  late final _UA_GenericAttributes_init =
      _UA_GenericAttributes_initPtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributes>)>();

  ffi.Pointer<UA_GenericAttributes> UA_GenericAttributes_new() {
    return _UA_GenericAttributes_new();
  }

  late final _UA_GenericAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_GenericAttributes> Function()>>('UA_GenericAttributes_new');
  late final _UA_GenericAttributes_new =
      _UA_GenericAttributes_newPtr.asFunction<ffi.Pointer<UA_GenericAttributes> Function()>();

  int UA_GenericAttributes_copy(
    ffi.Pointer<UA_GenericAttributes> src,
    ffi.Pointer<UA_GenericAttributes> dst,
  ) {
    return _UA_GenericAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_GenericAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_GenericAttributes>, ffi.Pointer<UA_GenericAttributes>)>>('UA_GenericAttributes_copy');
  late final _UA_GenericAttributes_copy = _UA_GenericAttributes_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_GenericAttributes>, ffi.Pointer<UA_GenericAttributes>)>();

  void UA_GenericAttributes_clear(
    ffi.Pointer<UA_GenericAttributes> p,
  ) {
    return _UA_GenericAttributes_clear(
      p,
    );
  }

  late final _UA_GenericAttributes_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributes>)>>('UA_GenericAttributes_clear');
  late final _UA_GenericAttributes_clear =
      _UA_GenericAttributes_clearPtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributes>)>();

  void UA_GenericAttributes_delete(
    ffi.Pointer<UA_GenericAttributes> p,
  ) {
    return _UA_GenericAttributes_delete(
      p,
    );
  }

  late final _UA_GenericAttributes_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_GenericAttributes>)>>('UA_GenericAttributes_delete');
  late final _UA_GenericAttributes_delete =
      _UA_GenericAttributes_deletePtr.asFunction<void Function(ffi.Pointer<UA_GenericAttributes>)>();

  bool UA_GenericAttributes_equal(
    ffi.Pointer<UA_GenericAttributes> p1,
    ffi.Pointer<UA_GenericAttributes> p2,
  ) {
    return _UA_GenericAttributes_equal(
      p1,
      p2,
    );
  }

  late final _UA_GenericAttributes_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_GenericAttributes>, ffi.Pointer<UA_GenericAttributes>)>>(
      'UA_GenericAttributes_equal');
  late final _UA_GenericAttributes_equal = _UA_GenericAttributes_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_GenericAttributes>, ffi.Pointer<UA_GenericAttributes>)>();

  void UA_AddNodesItem_init(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_init(
      p,
    );
  }

  late final _UA_AddNodesItem_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>('UA_AddNodesItem_init');
  late final _UA_AddNodesItem_init = _UA_AddNodesItem_initPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesItem>)>();

  ffi.Pointer<UA_AddNodesItem> UA_AddNodesItem_new() {
    return _UA_AddNodesItem_new();
  }

  late final _UA_AddNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesItem> Function()>>('UA_AddNodesItem_new');
  late final _UA_AddNodesItem_new = _UA_AddNodesItem_newPtr.asFunction<ffi.Pointer<UA_AddNodesItem> Function()>();

  int UA_AddNodesItem_copy(
    ffi.Pointer<UA_AddNodesItem> src,
    ffi.Pointer<UA_AddNodesItem> dst,
  ) {
    return _UA_AddNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesItem_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>>(
          'UA_AddNodesItem_copy');
  late final _UA_AddNodesItem_copy =
      _UA_AddNodesItem_copyPtr.asFunction<int Function(ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_clear(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_clear(
      p,
    );
  }

  late final _UA_AddNodesItem_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>('UA_AddNodesItem_clear');
  late final _UA_AddNodesItem_clear =
      _UA_AddNodesItem_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_delete(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_delete(
      p,
    );
  }

  late final _UA_AddNodesItem_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>('UA_AddNodesItem_delete');
  late final _UA_AddNodesItem_delete =
      _UA_AddNodesItem_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddNodesItem>)>();

  bool UA_AddNodesItem_equal(
    ffi.Pointer<UA_AddNodesItem> p1,
    ffi.Pointer<UA_AddNodesItem> p2,
  ) {
    return _UA_AddNodesItem_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddNodesItem_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>>(
          'UA_AddNodesItem_equal');
  late final _UA_AddNodesItem_equal =
      _UA_AddNodesItem_equalPtr.asFunction<bool Function(ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesResult_init(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_init(
      p,
    );
  }

  late final _UA_AddNodesResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>('UA_AddNodesResult_init');
  late final _UA_AddNodesResult_init =
      _UA_AddNodesResult_initPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResult>)>();

  ffi.Pointer<UA_AddNodesResult> UA_AddNodesResult_new() {
    return _UA_AddNodesResult_new();
  }

  late final _UA_AddNodesResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResult> Function()>>('UA_AddNodesResult_new');
  late final _UA_AddNodesResult_new = _UA_AddNodesResult_newPtr.asFunction<ffi.Pointer<UA_AddNodesResult> Function()>();

  int UA_AddNodesResult_copy(
    ffi.Pointer<UA_AddNodesResult> src,
    ffi.Pointer<UA_AddNodesResult> dst,
  ) {
    return _UA_AddNodesResult_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResult_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_copy');
  late final _UA_AddNodesResult_copy = _UA_AddNodesResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_clear(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_clear(
      p,
    );
  }

  late final _UA_AddNodesResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>('UA_AddNodesResult_clear');
  late final _UA_AddNodesResult_clear =
      _UA_AddNodesResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_delete(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_delete(
      p,
    );
  }

  late final _UA_AddNodesResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>('UA_AddNodesResult_delete');
  late final _UA_AddNodesResult_delete =
      _UA_AddNodesResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResult>)>();

  bool UA_AddNodesResult_equal(
    ffi.Pointer<UA_AddNodesResult> p1,
    ffi.Pointer<UA_AddNodesResult> p2,
  ) {
    return _UA_AddNodesResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddNodesResult_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>>(
          'UA_AddNodesResult_equal');
  late final _UA_AddNodesResult_equal = _UA_AddNodesResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesRequest_init(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_init(
      p,
    );
  }

  late final _UA_AddNodesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>('UA_AddNodesRequest_init');
  late final _UA_AddNodesRequest_init =
      _UA_AddNodesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  ffi.Pointer<UA_AddNodesRequest> UA_AddNodesRequest_new() {
    return _UA_AddNodesRequest_new();
  }

  late final _UA_AddNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesRequest> Function()>>('UA_AddNodesRequest_new');
  late final _UA_AddNodesRequest_new =
      _UA_AddNodesRequest_newPtr.asFunction<ffi.Pointer<UA_AddNodesRequest> Function()>();

  int UA_AddNodesRequest_copy(
    ffi.Pointer<UA_AddNodesRequest> src,
    ffi.Pointer<UA_AddNodesRequest> dst,
  ) {
    return _UA_AddNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_copy');
  late final _UA_AddNodesRequest_copy = _UA_AddNodesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_clear(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_clear(
      p,
    );
  }

  late final _UA_AddNodesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>('UA_AddNodesRequest_clear');
  late final _UA_AddNodesRequest_clear =
      _UA_AddNodesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_delete(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_delete(
      p,
    );
  }

  late final _UA_AddNodesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>('UA_AddNodesRequest_delete');
  late final _UA_AddNodesRequest_delete =
      _UA_AddNodesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  bool UA_AddNodesRequest_equal(
    ffi.Pointer<UA_AddNodesRequest> p1,
    ffi.Pointer<UA_AddNodesRequest> p2,
  ) {
    return _UA_AddNodesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddNodesRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>>(
          'UA_AddNodesRequest_equal');
  late final _UA_AddNodesRequest_equal = _UA_AddNodesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesResponse_init(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_init(
      p,
    );
  }

  late final _UA_AddNodesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>('UA_AddNodesResponse_init');
  late final _UA_AddNodesResponse_init =
      _UA_AddNodesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  ffi.Pointer<UA_AddNodesResponse> UA_AddNodesResponse_new() {
    return _UA_AddNodesResponse_new();
  }

  late final _UA_AddNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResponse> Function()>>('UA_AddNodesResponse_new');
  late final _UA_AddNodesResponse_new =
      _UA_AddNodesResponse_newPtr.asFunction<ffi.Pointer<UA_AddNodesResponse> Function()>();

  int UA_AddNodesResponse_copy(
    ffi.Pointer<UA_AddNodesResponse> src,
    ffi.Pointer<UA_AddNodesResponse> dst,
  ) {
    return _UA_AddNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResponse_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AddNodesResponse>, ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_copy');
  late final _UA_AddNodesResponse_copy = _UA_AddNodesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddNodesResponse>, ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_clear(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_clear(
      p,
    );
  }

  late final _UA_AddNodesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>('UA_AddNodesResponse_clear');
  late final _UA_AddNodesResponse_clear =
      _UA_AddNodesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_delete(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_delete(
      p,
    );
  }

  late final _UA_AddNodesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>('UA_AddNodesResponse_delete');
  late final _UA_AddNodesResponse_delete =
      _UA_AddNodesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  bool UA_AddNodesResponse_equal(
    ffi.Pointer<UA_AddNodesResponse> p1,
    ffi.Pointer<UA_AddNodesResponse> p2,
  ) {
    return _UA_AddNodesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddNodesResponse_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AddNodesResponse>, ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_equal');
  late final _UA_AddNodesResponse_equal = _UA_AddNodesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddNodesResponse>, ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddReferencesItem_init(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_init(
      p,
    );
  }

  late final _UA_AddReferencesItem_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_init');
  late final _UA_AddReferencesItem_init =
      _UA_AddReferencesItem_initPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  ffi.Pointer<UA_AddReferencesItem> UA_AddReferencesItem_new() {
    return _UA_AddReferencesItem_new();
  }

  late final _UA_AddReferencesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddReferencesItem> Function()>>('UA_AddReferencesItem_new');
  late final _UA_AddReferencesItem_new =
      _UA_AddReferencesItem_newPtr.asFunction<ffi.Pointer<UA_AddReferencesItem> Function()>();

  int UA_AddReferencesItem_copy(
    ffi.Pointer<UA_AddReferencesItem> src,
    ffi.Pointer<UA_AddReferencesItem> dst,
  ) {
    return _UA_AddReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_AddReferencesItem>, ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_copy');
  late final _UA_AddReferencesItem_copy = _UA_AddReferencesItem_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddReferencesItem>, ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_clear(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_clear(
      p,
    );
  }

  late final _UA_AddReferencesItem_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_clear');
  late final _UA_AddReferencesItem_clear =
      _UA_AddReferencesItem_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_delete(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_delete(
      p,
    );
  }

  late final _UA_AddReferencesItem_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_delete');
  late final _UA_AddReferencesItem_delete =
      _UA_AddReferencesItem_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  bool UA_AddReferencesItem_equal(
    ffi.Pointer<UA_AddReferencesItem> p1,
    ffi.Pointer<UA_AddReferencesItem> p2,
  ) {
    return _UA_AddReferencesItem_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddReferencesItem_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AddReferencesItem>, ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_equal');
  late final _UA_AddReferencesItem_equal = _UA_AddReferencesItem_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddReferencesItem>, ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesRequest_init(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_init(
      p,
    );
  }

  late final _UA_AddReferencesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
          'UA_AddReferencesRequest_init');
  late final _UA_AddReferencesRequest_init =
      _UA_AddReferencesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  ffi.Pointer<UA_AddReferencesRequest> UA_AddReferencesRequest_new() {
    return _UA_AddReferencesRequest_new();
  }

  late final _UA_AddReferencesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>>('UA_AddReferencesRequest_new');
  late final _UA_AddReferencesRequest_new =
      _UA_AddReferencesRequest_newPtr.asFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>();

  int UA_AddReferencesRequest_copy(
    ffi.Pointer<UA_AddReferencesRequest> src,
    ffi.Pointer<UA_AddReferencesRequest> dst,
  ) {
    return _UA_AddReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddReferencesRequest>,
              ffi.Pointer<UA_AddReferencesRequest>)>>('UA_AddReferencesRequest_copy');
  late final _UA_AddReferencesRequest_copy = _UA_AddReferencesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddReferencesRequest>, ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_clear(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_clear(
      p,
    );
  }

  late final _UA_AddReferencesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
          'UA_AddReferencesRequest_clear');
  late final _UA_AddReferencesRequest_clear =
      _UA_AddReferencesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_delete(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_delete(
      p,
    );
  }

  late final _UA_AddReferencesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
          'UA_AddReferencesRequest_delete');
  late final _UA_AddReferencesRequest_delete =
      _UA_AddReferencesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  bool UA_AddReferencesRequest_equal(
    ffi.Pointer<UA_AddReferencesRequest> p1,
    ffi.Pointer<UA_AddReferencesRequest> p2,
  ) {
    return _UA_AddReferencesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddReferencesRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AddReferencesRequest>,
              ffi.Pointer<UA_AddReferencesRequest>)>>('UA_AddReferencesRequest_equal');
  late final _UA_AddReferencesRequest_equal = _UA_AddReferencesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddReferencesRequest>, ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesResponse_init(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_init(
      p,
    );
  }

  late final _UA_AddReferencesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
          'UA_AddReferencesResponse_init');
  late final _UA_AddReferencesResponse_init =
      _UA_AddReferencesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  ffi.Pointer<UA_AddReferencesResponse> UA_AddReferencesResponse_new() {
    return _UA_AddReferencesResponse_new();
  }

  late final _UA_AddReferencesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>>('UA_AddReferencesResponse_new');
  late final _UA_AddReferencesResponse_new =
      _UA_AddReferencesResponse_newPtr.asFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>();

  int UA_AddReferencesResponse_copy(
    ffi.Pointer<UA_AddReferencesResponse> src,
    ffi.Pointer<UA_AddReferencesResponse> dst,
  ) {
    return _UA_AddReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddReferencesResponse>,
              ffi.Pointer<UA_AddReferencesResponse>)>>('UA_AddReferencesResponse_copy');
  late final _UA_AddReferencesResponse_copy = _UA_AddReferencesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AddReferencesResponse>, ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_clear(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_clear(
      p,
    );
  }

  late final _UA_AddReferencesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
          'UA_AddReferencesResponse_clear');
  late final _UA_AddReferencesResponse_clear =
      _UA_AddReferencesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_delete(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_delete(
      p,
    );
  }

  late final _UA_AddReferencesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
          'UA_AddReferencesResponse_delete');
  late final _UA_AddReferencesResponse_delete =
      _UA_AddReferencesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  bool UA_AddReferencesResponse_equal(
    ffi.Pointer<UA_AddReferencesResponse> p1,
    ffi.Pointer<UA_AddReferencesResponse> p2,
  ) {
    return _UA_AddReferencesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_AddReferencesResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AddReferencesResponse>,
              ffi.Pointer<UA_AddReferencesResponse>)>>('UA_AddReferencesResponse_equal');
  late final _UA_AddReferencesResponse_equal = _UA_AddReferencesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AddReferencesResponse>, ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_DeleteNodesItem_init(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_init(
      p,
    );
  }

  late final _UA_DeleteNodesItem_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>('UA_DeleteNodesItem_init');
  late final _UA_DeleteNodesItem_init =
      _UA_DeleteNodesItem_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  ffi.Pointer<UA_DeleteNodesItem> UA_DeleteNodesItem_new() {
    return _UA_DeleteNodesItem_new();
  }

  late final _UA_DeleteNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesItem> Function()>>('UA_DeleteNodesItem_new');
  late final _UA_DeleteNodesItem_new =
      _UA_DeleteNodesItem_newPtr.asFunction<ffi.Pointer<UA_DeleteNodesItem> Function()>();

  int UA_DeleteNodesItem_copy(
    ffi.Pointer<UA_DeleteNodesItem> src,
    ffi.Pointer<UA_DeleteNodesItem> dst,
  ) {
    return _UA_DeleteNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesItem_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_copy');
  late final _UA_DeleteNodesItem_copy = _UA_DeleteNodesItem_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_clear(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_clear(
      p,
    );
  }

  late final _UA_DeleteNodesItem_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>('UA_DeleteNodesItem_clear');
  late final _UA_DeleteNodesItem_clear =
      _UA_DeleteNodesItem_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_delete(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_delete(
      p,
    );
  }

  late final _UA_DeleteNodesItem_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>('UA_DeleteNodesItem_delete');
  late final _UA_DeleteNodesItem_delete =
      _UA_DeleteNodesItem_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  bool UA_DeleteNodesItem_equal(
    ffi.Pointer<UA_DeleteNodesItem> p1,
    ffi.Pointer<UA_DeleteNodesItem> p2,
  ) {
    return _UA_DeleteNodesItem_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteNodesItem_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>>(
          'UA_DeleteNodesItem_equal');
  late final _UA_DeleteNodesItem_equal = _UA_DeleteNodesItem_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesRequest_init(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_init(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>('UA_DeleteNodesRequest_init');
  late final _UA_DeleteNodesRequest_init =
      _UA_DeleteNodesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  ffi.Pointer<UA_DeleteNodesRequest> UA_DeleteNodesRequest_new() {
    return _UA_DeleteNodesRequest_new();
  }

  late final _UA_DeleteNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>>('UA_DeleteNodesRequest_new');
  late final _UA_DeleteNodesRequest_new =
      _UA_DeleteNodesRequest_newPtr.asFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>();

  int UA_DeleteNodesRequest_copy(
    ffi.Pointer<UA_DeleteNodesRequest> src,
    ffi.Pointer<UA_DeleteNodesRequest> dst,
  ) {
    return _UA_DeleteNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DeleteNodesRequest>, ffi.Pointer<UA_DeleteNodesRequest>)>>('UA_DeleteNodesRequest_copy');
  late final _UA_DeleteNodesRequest_copy = _UA_DeleteNodesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteNodesRequest>, ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_clear(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>('UA_DeleteNodesRequest_clear');
  late final _UA_DeleteNodesRequest_clear =
      _UA_DeleteNodesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_delete(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
          'UA_DeleteNodesRequest_delete');
  late final _UA_DeleteNodesRequest_delete =
      _UA_DeleteNodesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  bool UA_DeleteNodesRequest_equal(
    ffi.Pointer<UA_DeleteNodesRequest> p1,
    ffi.Pointer<UA_DeleteNodesRequest> p2,
  ) {
    return _UA_DeleteNodesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteNodesRequest_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DeleteNodesRequest>, ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_equal');
  late final _UA_DeleteNodesRequest_equal = _UA_DeleteNodesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteNodesRequest>, ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesResponse_init(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_init(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
          'UA_DeleteNodesResponse_init');
  late final _UA_DeleteNodesResponse_init =
      _UA_DeleteNodesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  ffi.Pointer<UA_DeleteNodesResponse> UA_DeleteNodesResponse_new() {
    return _UA_DeleteNodesResponse_new();
  }

  late final _UA_DeleteNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>>('UA_DeleteNodesResponse_new');
  late final _UA_DeleteNodesResponse_new =
      _UA_DeleteNodesResponse_newPtr.asFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>();

  int UA_DeleteNodesResponse_copy(
    ffi.Pointer<UA_DeleteNodesResponse> src,
    ffi.Pointer<UA_DeleteNodesResponse> dst,
  ) {
    return _UA_DeleteNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesResponse>,
              ffi.Pointer<UA_DeleteNodesResponse>)>>('UA_DeleteNodesResponse_copy');
  late final _UA_DeleteNodesResponse_copy = _UA_DeleteNodesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteNodesResponse>, ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_clear(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
          'UA_DeleteNodesResponse_clear');
  late final _UA_DeleteNodesResponse_clear =
      _UA_DeleteNodesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_delete(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
          'UA_DeleteNodesResponse_delete');
  late final _UA_DeleteNodesResponse_delete =
      _UA_DeleteNodesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  bool UA_DeleteNodesResponse_equal(
    ffi.Pointer<UA_DeleteNodesResponse> p1,
    ffi.Pointer<UA_DeleteNodesResponse> p2,
  ) {
    return _UA_DeleteNodesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteNodesResponse_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DeleteNodesResponse>, ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_equal');
  late final _UA_DeleteNodesResponse_equal = _UA_DeleteNodesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteNodesResponse>, ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteReferencesItem_init(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_init(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
          'UA_DeleteReferencesItem_init');
  late final _UA_DeleteReferencesItem_init =
      _UA_DeleteReferencesItem_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  ffi.Pointer<UA_DeleteReferencesItem> UA_DeleteReferencesItem_new() {
    return _UA_DeleteReferencesItem_new();
  }

  late final _UA_DeleteReferencesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>>('UA_DeleteReferencesItem_new');
  late final _UA_DeleteReferencesItem_new =
      _UA_DeleteReferencesItem_newPtr.asFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>();

  int UA_DeleteReferencesItem_copy(
    ffi.Pointer<UA_DeleteReferencesItem> src,
    ffi.Pointer<UA_DeleteReferencesItem> dst,
  ) {
    return _UA_DeleteReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesItem>,
              ffi.Pointer<UA_DeleteReferencesItem>)>>('UA_DeleteReferencesItem_copy');
  late final _UA_DeleteReferencesItem_copy = _UA_DeleteReferencesItem_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteReferencesItem>, ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_clear(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
          'UA_DeleteReferencesItem_clear');
  late final _UA_DeleteReferencesItem_clear =
      _UA_DeleteReferencesItem_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_delete(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
          'UA_DeleteReferencesItem_delete');
  late final _UA_DeleteReferencesItem_delete =
      _UA_DeleteReferencesItem_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  bool UA_DeleteReferencesItem_equal(
    ffi.Pointer<UA_DeleteReferencesItem> p1,
    ffi.Pointer<UA_DeleteReferencesItem> p2,
  ) {
    return _UA_DeleteReferencesItem_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteReferencesItem_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteReferencesItem>,
              ffi.Pointer<UA_DeleteReferencesItem>)>>('UA_DeleteReferencesItem_equal');
  late final _UA_DeleteReferencesItem_equal = _UA_DeleteReferencesItem_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteReferencesItem>, ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesRequest_init(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_init(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
          'UA_DeleteReferencesRequest_init');
  late final _UA_DeleteReferencesRequest_init =
      _UA_DeleteReferencesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  ffi.Pointer<UA_DeleteReferencesRequest> UA_DeleteReferencesRequest_new() {
    return _UA_DeleteReferencesRequest_new();
  }

  late final _UA_DeleteReferencesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteReferencesRequest> Function()>>('UA_DeleteReferencesRequest_new');
  late final _UA_DeleteReferencesRequest_new =
      _UA_DeleteReferencesRequest_newPtr.asFunction<ffi.Pointer<UA_DeleteReferencesRequest> Function()>();

  int UA_DeleteReferencesRequest_copy(
    ffi.Pointer<UA_DeleteReferencesRequest> src,
    ffi.Pointer<UA_DeleteReferencesRequest> dst,
  ) {
    return _UA_DeleteReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesRequest>,
              ffi.Pointer<UA_DeleteReferencesRequest>)>>('UA_DeleteReferencesRequest_copy');
  late final _UA_DeleteReferencesRequest_copy = _UA_DeleteReferencesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteReferencesRequest>, ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_clear(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
          'UA_DeleteReferencesRequest_clear');
  late final _UA_DeleteReferencesRequest_clear =
      _UA_DeleteReferencesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_delete(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
          'UA_DeleteReferencesRequest_delete');
  late final _UA_DeleteReferencesRequest_delete =
      _UA_DeleteReferencesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  bool UA_DeleteReferencesRequest_equal(
    ffi.Pointer<UA_DeleteReferencesRequest> p1,
    ffi.Pointer<UA_DeleteReferencesRequest> p2,
  ) {
    return _UA_DeleteReferencesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteReferencesRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteReferencesRequest>,
              ffi.Pointer<UA_DeleteReferencesRequest>)>>('UA_DeleteReferencesRequest_equal');
  late final _UA_DeleteReferencesRequest_equal = _UA_DeleteReferencesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteReferencesRequest>, ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesResponse_init(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_init(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
          'UA_DeleteReferencesResponse_init');
  late final _UA_DeleteReferencesResponse_init =
      _UA_DeleteReferencesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  ffi.Pointer<UA_DeleteReferencesResponse> UA_DeleteReferencesResponse_new() {
    return _UA_DeleteReferencesResponse_new();
  }

  late final _UA_DeleteReferencesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteReferencesResponse> Function()>>(
          'UA_DeleteReferencesResponse_new');
  late final _UA_DeleteReferencesResponse_new =
      _UA_DeleteReferencesResponse_newPtr.asFunction<ffi.Pointer<UA_DeleteReferencesResponse> Function()>();

  int UA_DeleteReferencesResponse_copy(
    ffi.Pointer<UA_DeleteReferencesResponse> src,
    ffi.Pointer<UA_DeleteReferencesResponse> dst,
  ) {
    return _UA_DeleteReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesResponse>,
              ffi.Pointer<UA_DeleteReferencesResponse>)>>('UA_DeleteReferencesResponse_copy');
  late final _UA_DeleteReferencesResponse_copy = _UA_DeleteReferencesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteReferencesResponse>, ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_clear(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
          'UA_DeleteReferencesResponse_clear');
  late final _UA_DeleteReferencesResponse_clear =
      _UA_DeleteReferencesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_delete(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
          'UA_DeleteReferencesResponse_delete');
  late final _UA_DeleteReferencesResponse_delete =
      _UA_DeleteReferencesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  bool UA_DeleteReferencesResponse_equal(
    ffi.Pointer<UA_DeleteReferencesResponse> p1,
    ffi.Pointer<UA_DeleteReferencesResponse> p2,
  ) {
    return _UA_DeleteReferencesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteReferencesResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteReferencesResponse>,
              ffi.Pointer<UA_DeleteReferencesResponse>)>>('UA_DeleteReferencesResponse_equal');
  late final _UA_DeleteReferencesResponse_equal = _UA_DeleteReferencesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteReferencesResponse>, ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_AttributeWriteMask_init(
    ffi.Pointer<UA_AttributeWriteMask> p,
  ) {
    return _UA_AttributeWriteMask_init(
      p,
    );
  }

  late final _UA_AttributeWriteMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeWriteMask>)>>('UA_AttributeWriteMask_init');
  late final _UA_AttributeWriteMask_init =
      _UA_AttributeWriteMask_initPtr.asFunction<void Function(ffi.Pointer<UA_AttributeWriteMask>)>();

  ffi.Pointer<UA_AttributeWriteMask> UA_AttributeWriteMask_new() {
    return _UA_AttributeWriteMask_new();
  }

  late final _UA_AttributeWriteMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AttributeWriteMask> Function()>>('UA_AttributeWriteMask_new');
  late final _UA_AttributeWriteMask_new =
      _UA_AttributeWriteMask_newPtr.asFunction<ffi.Pointer<UA_AttributeWriteMask> Function()>();

  int UA_AttributeWriteMask_copy(
    ffi.Pointer<UA_AttributeWriteMask> src,
    ffi.Pointer<UA_AttributeWriteMask> dst,
  ) {
    return _UA_AttributeWriteMask_copy(
      src,
      dst,
    );
  }

  late final _UA_AttributeWriteMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_AttributeWriteMask>, ffi.Pointer<UA_AttributeWriteMask>)>>('UA_AttributeWriteMask_copy');
  late final _UA_AttributeWriteMask_copy = _UA_AttributeWriteMask_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AttributeWriteMask>, ffi.Pointer<UA_AttributeWriteMask>)>();

  void UA_AttributeWriteMask_clear(
    ffi.Pointer<UA_AttributeWriteMask> p,
  ) {
    return _UA_AttributeWriteMask_clear(
      p,
    );
  }

  late final _UA_AttributeWriteMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeWriteMask>)>>('UA_AttributeWriteMask_clear');
  late final _UA_AttributeWriteMask_clear =
      _UA_AttributeWriteMask_clearPtr.asFunction<void Function(ffi.Pointer<UA_AttributeWriteMask>)>();

  void UA_AttributeWriteMask_delete(
    ffi.Pointer<UA_AttributeWriteMask> p,
  ) {
    return _UA_AttributeWriteMask_delete(
      p,
    );
  }

  late final _UA_AttributeWriteMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeWriteMask>)>>(
          'UA_AttributeWriteMask_delete');
  late final _UA_AttributeWriteMask_delete =
      _UA_AttributeWriteMask_deletePtr.asFunction<void Function(ffi.Pointer<UA_AttributeWriteMask>)>();

  bool UA_AttributeWriteMask_equal(
    ffi.Pointer<UA_AttributeWriteMask> p1,
    ffi.Pointer<UA_AttributeWriteMask> p2,
  ) {
    return _UA_AttributeWriteMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_AttributeWriteMask_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AttributeWriteMask>, ffi.Pointer<UA_AttributeWriteMask>)>>(
      'UA_AttributeWriteMask_equal');
  late final _UA_AttributeWriteMask_equal = _UA_AttributeWriteMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AttributeWriteMask>, ffi.Pointer<UA_AttributeWriteMask>)>();

  void UA_BrowseDirection_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseDirection_init(
      p,
    );
  }

  late final _UA_BrowseDirection_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseDirection_init');
  late final _UA_BrowseDirection_init =
      _UA_BrowseDirection_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_BrowseDirection_new() {
    return _UA_BrowseDirection_new();
  }

  late final _UA_BrowseDirection_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_BrowseDirection_new');
  late final _UA_BrowseDirection_new = _UA_BrowseDirection_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_BrowseDirection_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_BrowseDirection_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDirection_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrowseDirection_copy');
  late final _UA_BrowseDirection_copy = _UA_BrowseDirection_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrowseDirection_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseDirection_clear(
      p,
    );
  }

  late final _UA_BrowseDirection_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseDirection_clear');
  late final _UA_BrowseDirection_clear =
      _UA_BrowseDirection_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrowseDirection_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseDirection_delete(
      p,
    );
  }

  late final _UA_BrowseDirection_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseDirection_delete');
  late final _UA_BrowseDirection_delete =
      _UA_BrowseDirection_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_BrowseDirection_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_BrowseDirection_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseDirection_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrowseDirection_equal');
  late final _UA_BrowseDirection_equal = _UA_BrowseDirection_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ViewDescription_init(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_init(
      p,
    );
  }

  late final _UA_ViewDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>('UA_ViewDescription_init');
  late final _UA_ViewDescription_init =
      _UA_ViewDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  ffi.Pointer<UA_ViewDescription> UA_ViewDescription_new() {
    return _UA_ViewDescription_new();
  }

  late final _UA_ViewDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewDescription> Function()>>('UA_ViewDescription_new');
  late final _UA_ViewDescription_new =
      _UA_ViewDescription_newPtr.asFunction<ffi.Pointer<UA_ViewDescription> Function()>();

  int UA_ViewDescription_copy(
    ffi.Pointer<UA_ViewDescription> src,
    ffi.Pointer<UA_ViewDescription> dst,
  ) {
    return _UA_ViewDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewDescription_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_copy');
  late final _UA_ViewDescription_copy = _UA_ViewDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_clear(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_clear(
      p,
    );
  }

  late final _UA_ViewDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>('UA_ViewDescription_clear');
  late final _UA_ViewDescription_clear =
      _UA_ViewDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_delete(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_delete(
      p,
    );
  }

  late final _UA_ViewDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>('UA_ViewDescription_delete');
  late final _UA_ViewDescription_delete =
      _UA_ViewDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  bool UA_ViewDescription_equal(
    ffi.Pointer<UA_ViewDescription> p1,
    ffi.Pointer<UA_ViewDescription> p2,
  ) {
    return _UA_ViewDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_ViewDescription_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>>(
          'UA_ViewDescription_equal');
  late final _UA_ViewDescription_equal = _UA_ViewDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>();

  void UA_BrowseDescription_init(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_init(
      p,
    );
  }

  late final _UA_BrowseDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_init');
  late final _UA_BrowseDescription_init =
      _UA_BrowseDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  ffi.Pointer<UA_BrowseDescription> UA_BrowseDescription_new() {
    return _UA_BrowseDescription_new();
  }

  late final _UA_BrowseDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseDescription> Function()>>('UA_BrowseDescription_new');
  late final _UA_BrowseDescription_new =
      _UA_BrowseDescription_newPtr.asFunction<ffi.Pointer<UA_BrowseDescription> Function()>();

  int UA_BrowseDescription_copy(
    ffi.Pointer<UA_BrowseDescription> src,
    ffi.Pointer<UA_BrowseDescription> dst,
  ) {
    return _UA_BrowseDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_copy');
  late final _UA_BrowseDescription_copy = _UA_BrowseDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_clear(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_clear(
      p,
    );
  }

  late final _UA_BrowseDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_clear');
  late final _UA_BrowseDescription_clear =
      _UA_BrowseDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_delete(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_delete(
      p,
    );
  }

  late final _UA_BrowseDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_delete');
  late final _UA_BrowseDescription_delete =
      _UA_BrowseDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  bool UA_BrowseDescription_equal(
    ffi.Pointer<UA_BrowseDescription> p1,
    ffi.Pointer<UA_BrowseDescription> p2,
  ) {
    return _UA_BrowseDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseDescription_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_equal');
  late final _UA_BrowseDescription_equal = _UA_BrowseDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseResultMask_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseResultMask_init(
      p,
    );
  }

  late final _UA_BrowseResultMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseResultMask_init');
  late final _UA_BrowseResultMask_init =
      _UA_BrowseResultMask_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_BrowseResultMask_new() {
    return _UA_BrowseResultMask_new();
  }

  late final _UA_BrowseResultMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_BrowseResultMask_new');
  late final _UA_BrowseResultMask_new =
      _UA_BrowseResultMask_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_BrowseResultMask_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_BrowseResultMask_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResultMask_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrowseResultMask_copy');
  late final _UA_BrowseResultMask_copy = _UA_BrowseResultMask_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrowseResultMask_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseResultMask_clear(
      p,
    );
  }

  late final _UA_BrowseResultMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseResultMask_clear');
  late final _UA_BrowseResultMask_clear =
      _UA_BrowseResultMask_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_BrowseResultMask_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_BrowseResultMask_delete(
      p,
    );
  }

  late final _UA_BrowseResultMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_BrowseResultMask_delete');
  late final _UA_BrowseResultMask_delete =
      _UA_BrowseResultMask_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_BrowseResultMask_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_BrowseResultMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseResultMask_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_BrowseResultMask_equal');
  late final _UA_BrowseResultMask_equal = _UA_BrowseResultMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ReferenceDescription_init(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_init(
      p,
    );
  }

  late final _UA_ReferenceDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
          'UA_ReferenceDescription_init');
  late final _UA_ReferenceDescription_init =
      _UA_ReferenceDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  ffi.Pointer<UA_ReferenceDescription> UA_ReferenceDescription_new() {
    return _UA_ReferenceDescription_new();
  }

  late final _UA_ReferenceDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReferenceDescription> Function()>>('UA_ReferenceDescription_new');
  late final _UA_ReferenceDescription_new =
      _UA_ReferenceDescription_newPtr.asFunction<ffi.Pointer<UA_ReferenceDescription> Function()>();

  int UA_ReferenceDescription_copy(
    ffi.Pointer<UA_ReferenceDescription> src,
    ffi.Pointer<UA_ReferenceDescription> dst,
  ) {
    return _UA_ReferenceDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReferenceDescription>,
              ffi.Pointer<UA_ReferenceDescription>)>>('UA_ReferenceDescription_copy');
  late final _UA_ReferenceDescription_copy = _UA_ReferenceDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReferenceDescription>, ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_clear(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_clear(
      p,
    );
  }

  late final _UA_ReferenceDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
          'UA_ReferenceDescription_clear');
  late final _UA_ReferenceDescription_clear =
      _UA_ReferenceDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_delete(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_delete(
      p,
    );
  }

  late final _UA_ReferenceDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
          'UA_ReferenceDescription_delete');
  late final _UA_ReferenceDescription_delete =
      _UA_ReferenceDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  bool UA_ReferenceDescription_equal(
    ffi.Pointer<UA_ReferenceDescription> p1,
    ffi.Pointer<UA_ReferenceDescription> p2,
  ) {
    return _UA_ReferenceDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReferenceDescription_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReferenceDescription>,
              ffi.Pointer<UA_ReferenceDescription>)>>('UA_ReferenceDescription_equal');
  late final _UA_ReferenceDescription_equal = _UA_ReferenceDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReferenceDescription>, ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ContinuationPoint_init(
    ffi.Pointer<UA_ContinuationPoint> p,
  ) {
    return _UA_ContinuationPoint_init(
      p,
    );
  }

  late final _UA_ContinuationPoint_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContinuationPoint>)>>('UA_ContinuationPoint_init');
  late final _UA_ContinuationPoint_init =
      _UA_ContinuationPoint_initPtr.asFunction<void Function(ffi.Pointer<UA_ContinuationPoint>)>();

  ffi.Pointer<UA_ContinuationPoint> UA_ContinuationPoint_new() {
    return _UA_ContinuationPoint_new();
  }

  late final _UA_ContinuationPoint_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContinuationPoint> Function()>>('UA_ContinuationPoint_new');
  late final _UA_ContinuationPoint_new =
      _UA_ContinuationPoint_newPtr.asFunction<ffi.Pointer<UA_ContinuationPoint> Function()>();

  int UA_ContinuationPoint_copy(
    ffi.Pointer<UA_ContinuationPoint> src,
    ffi.Pointer<UA_ContinuationPoint> dst,
  ) {
    return _UA_ContinuationPoint_copy(
      src,
      dst,
    );
  }

  late final _UA_ContinuationPoint_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ContinuationPoint>, ffi.Pointer<UA_ContinuationPoint>)>>('UA_ContinuationPoint_copy');
  late final _UA_ContinuationPoint_copy = _UA_ContinuationPoint_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ContinuationPoint>, ffi.Pointer<UA_ContinuationPoint>)>();

  void UA_ContinuationPoint_clear(
    ffi.Pointer<UA_ContinuationPoint> p,
  ) {
    return _UA_ContinuationPoint_clear(
      p,
    );
  }

  late final _UA_ContinuationPoint_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContinuationPoint>)>>('UA_ContinuationPoint_clear');
  late final _UA_ContinuationPoint_clear =
      _UA_ContinuationPoint_clearPtr.asFunction<void Function(ffi.Pointer<UA_ContinuationPoint>)>();

  void UA_ContinuationPoint_delete(
    ffi.Pointer<UA_ContinuationPoint> p,
  ) {
    return _UA_ContinuationPoint_delete(
      p,
    );
  }

  late final _UA_ContinuationPoint_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContinuationPoint>)>>('UA_ContinuationPoint_delete');
  late final _UA_ContinuationPoint_delete =
      _UA_ContinuationPoint_deletePtr.asFunction<void Function(ffi.Pointer<UA_ContinuationPoint>)>();

  bool UA_ContinuationPoint_equal(
    ffi.Pointer<UA_ContinuationPoint> p1,
    ffi.Pointer<UA_ContinuationPoint> p2,
  ) {
    return _UA_ContinuationPoint_equal(
      p1,
      p2,
    );
  }

  late final _UA_ContinuationPoint_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ContinuationPoint>, ffi.Pointer<UA_ContinuationPoint>)>>(
      'UA_ContinuationPoint_equal');
  late final _UA_ContinuationPoint_equal = _UA_ContinuationPoint_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ContinuationPoint>, ffi.Pointer<UA_ContinuationPoint>)>();

  void UA_BrowseResult_init(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_init(
      p,
    );
  }

  late final _UA_BrowseResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>('UA_BrowseResult_init');
  late final _UA_BrowseResult_init = _UA_BrowseResult_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseResult>)>();

  ffi.Pointer<UA_BrowseResult> UA_BrowseResult_new() {
    return _UA_BrowseResult_new();
  }

  late final _UA_BrowseResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResult> Function()>>('UA_BrowseResult_new');
  late final _UA_BrowseResult_new = _UA_BrowseResult_newPtr.asFunction<ffi.Pointer<UA_BrowseResult> Function()>();

  int UA_BrowseResult_copy(
    ffi.Pointer<UA_BrowseResult> src,
    ffi.Pointer<UA_BrowseResult> dst,
  ) {
    return _UA_BrowseResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResult_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>>(
          'UA_BrowseResult_copy');
  late final _UA_BrowseResult_copy =
      _UA_BrowseResult_copyPtr.asFunction<int Function(ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_clear(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_clear(
      p,
    );
  }

  late final _UA_BrowseResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>('UA_BrowseResult_clear');
  late final _UA_BrowseResult_clear =
      _UA_BrowseResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_delete(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_delete(
      p,
    );
  }

  late final _UA_BrowseResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>('UA_BrowseResult_delete');
  late final _UA_BrowseResult_delete =
      _UA_BrowseResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseResult>)>();

  bool UA_BrowseResult_equal(
    ffi.Pointer<UA_BrowseResult> p1,
    ffi.Pointer<UA_BrowseResult> p2,
  ) {
    return _UA_BrowseResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseResult_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>>(
          'UA_BrowseResult_equal');
  late final _UA_BrowseResult_equal =
      _UA_BrowseResult_equalPtr.asFunction<bool Function(ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseRequest_init(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_init(
      p,
    );
  }

  late final _UA_BrowseRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>('UA_BrowseRequest_init');
  late final _UA_BrowseRequest_init =
      _UA_BrowseRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseRequest>)>();

  ffi.Pointer<UA_BrowseRequest> UA_BrowseRequest_new() {
    return _UA_BrowseRequest_new();
  }

  late final _UA_BrowseRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseRequest> Function()>>('UA_BrowseRequest_new');
  late final _UA_BrowseRequest_new = _UA_BrowseRequest_newPtr.asFunction<ffi.Pointer<UA_BrowseRequest> Function()>();

  int UA_BrowseRequest_copy(
    ffi.Pointer<UA_BrowseRequest> src,
    ffi.Pointer<UA_BrowseRequest> dst,
  ) {
    return _UA_BrowseRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseRequest_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>>(
          'UA_BrowseRequest_copy');
  late final _UA_BrowseRequest_copy = _UA_BrowseRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_clear(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_clear(
      p,
    );
  }

  late final _UA_BrowseRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>('UA_BrowseRequest_clear');
  late final _UA_BrowseRequest_clear =
      _UA_BrowseRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_delete(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_delete(
      p,
    );
  }

  late final _UA_BrowseRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>('UA_BrowseRequest_delete');
  late final _UA_BrowseRequest_delete =
      _UA_BrowseRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseRequest>)>();

  bool UA_BrowseRequest_equal(
    ffi.Pointer<UA_BrowseRequest> p1,
    ffi.Pointer<UA_BrowseRequest> p2,
  ) {
    return _UA_BrowseRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>>(
          'UA_BrowseRequest_equal');
  late final _UA_BrowseRequest_equal = _UA_BrowseRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseResponse_init(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_init(
      p,
    );
  }

  late final _UA_BrowseResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>('UA_BrowseResponse_init');
  late final _UA_BrowseResponse_init =
      _UA_BrowseResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseResponse>)>();

  ffi.Pointer<UA_BrowseResponse> UA_BrowseResponse_new() {
    return _UA_BrowseResponse_new();
  }

  late final _UA_BrowseResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResponse> Function()>>('UA_BrowseResponse_new');
  late final _UA_BrowseResponse_new = _UA_BrowseResponse_newPtr.asFunction<ffi.Pointer<UA_BrowseResponse> Function()>();

  int UA_BrowseResponse_copy(
    ffi.Pointer<UA_BrowseResponse> src,
    ffi.Pointer<UA_BrowseResponse> dst,
  ) {
    return _UA_BrowseResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResponse_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_copy');
  late final _UA_BrowseResponse_copy = _UA_BrowseResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_clear(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_clear(
      p,
    );
  }

  late final _UA_BrowseResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>('UA_BrowseResponse_clear');
  late final _UA_BrowseResponse_clear =
      _UA_BrowseResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_delete(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_delete(
      p,
    );
  }

  late final _UA_BrowseResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>('UA_BrowseResponse_delete');
  late final _UA_BrowseResponse_delete =
      _UA_BrowseResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseResponse>)>();

  bool UA_BrowseResponse_equal(
    ffi.Pointer<UA_BrowseResponse> p1,
    ffi.Pointer<UA_BrowseResponse> p2,
  ) {
    return _UA_BrowseResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>>(
          'UA_BrowseResponse_equal');
  late final _UA_BrowseResponse_equal = _UA_BrowseResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseNextRequest_init(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_init(
      p,
    );
  }

  late final _UA_BrowseNextRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_init');
  late final _UA_BrowseNextRequest_init =
      _UA_BrowseNextRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  ffi.Pointer<UA_BrowseNextRequest> UA_BrowseNextRequest_new() {
    return _UA_BrowseNextRequest_new();
  }

  late final _UA_BrowseNextRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>>('UA_BrowseNextRequest_new');
  late final _UA_BrowseNextRequest_new =
      _UA_BrowseNextRequest_newPtr.asFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>();

  int UA_BrowseNextRequest_copy(
    ffi.Pointer<UA_BrowseNextRequest> src,
    ffi.Pointer<UA_BrowseNextRequest> dst,
  ) {
    return _UA_BrowseNextRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_BrowseNextRequest>, ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_copy');
  late final _UA_BrowseNextRequest_copy = _UA_BrowseNextRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowseNextRequest>, ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_clear(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_clear(
      p,
    );
  }

  late final _UA_BrowseNextRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_clear');
  late final _UA_BrowseNextRequest_clear =
      _UA_BrowseNextRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_delete(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_delete(
      p,
    );
  }

  late final _UA_BrowseNextRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_delete');
  late final _UA_BrowseNextRequest_delete =
      _UA_BrowseNextRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  bool UA_BrowseNextRequest_equal(
    ffi.Pointer<UA_BrowseNextRequest> p1,
    ffi.Pointer<UA_BrowseNextRequest> p2,
  ) {
    return _UA_BrowseNextRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseNextRequest_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseNextRequest>, ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_equal');
  late final _UA_BrowseNextRequest_equal = _UA_BrowseNextRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowseNextRequest>, ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextResponse_init(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_init(
      p,
    );
  }

  late final _UA_BrowseNextResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>('UA_BrowseNextResponse_init');
  late final _UA_BrowseNextResponse_init =
      _UA_BrowseNextResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  ffi.Pointer<UA_BrowseNextResponse> UA_BrowseNextResponse_new() {
    return _UA_BrowseNextResponse_new();
  }

  late final _UA_BrowseNextResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>>('UA_BrowseNextResponse_new');
  late final _UA_BrowseNextResponse_new =
      _UA_BrowseNextResponse_newPtr.asFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>();

  int UA_BrowseNextResponse_copy(
    ffi.Pointer<UA_BrowseNextResponse> src,
    ffi.Pointer<UA_BrowseNextResponse> dst,
  ) {
    return _UA_BrowseNextResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_BrowseNextResponse>, ffi.Pointer<UA_BrowseNextResponse>)>>('UA_BrowseNextResponse_copy');
  late final _UA_BrowseNextResponse_copy = _UA_BrowseNextResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowseNextResponse>, ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_clear(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_clear(
      p,
    );
  }

  late final _UA_BrowseNextResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>('UA_BrowseNextResponse_clear');
  late final _UA_BrowseNextResponse_clear =
      _UA_BrowseNextResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_delete(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_delete(
      p,
    );
  }

  late final _UA_BrowseNextResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
          'UA_BrowseNextResponse_delete');
  late final _UA_BrowseNextResponse_delete =
      _UA_BrowseNextResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  bool UA_BrowseNextResponse_equal(
    ffi.Pointer<UA_BrowseNextResponse> p1,
    ffi.Pointer<UA_BrowseNextResponse> p2,
  ) {
    return _UA_BrowseNextResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowseNextResponse_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowseNextResponse>, ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_equal');
  late final _UA_BrowseNextResponse_equal = _UA_BrowseNextResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowseNextResponse>, ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_RelativePathElement_init(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_init(
      p,
    );
  }

  late final _UA_RelativePathElement_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
          'UA_RelativePathElement_init');
  late final _UA_RelativePathElement_init =
      _UA_RelativePathElement_initPtr.asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  ffi.Pointer<UA_RelativePathElement> UA_RelativePathElement_new() {
    return _UA_RelativePathElement_new();
  }

  late final _UA_RelativePathElement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RelativePathElement> Function()>>('UA_RelativePathElement_new');
  late final _UA_RelativePathElement_new =
      _UA_RelativePathElement_newPtr.asFunction<ffi.Pointer<UA_RelativePathElement> Function()>();

  int UA_RelativePathElement_copy(
    ffi.Pointer<UA_RelativePathElement> src,
    ffi.Pointer<UA_RelativePathElement> dst,
  ) {
    return _UA_RelativePathElement_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePathElement_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RelativePathElement>,
              ffi.Pointer<UA_RelativePathElement>)>>('UA_RelativePathElement_copy');
  late final _UA_RelativePathElement_copy = _UA_RelativePathElement_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RelativePathElement>, ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_clear(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_clear(
      p,
    );
  }

  late final _UA_RelativePathElement_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
          'UA_RelativePathElement_clear');
  late final _UA_RelativePathElement_clear =
      _UA_RelativePathElement_clearPtr.asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_delete(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_delete(
      p,
    );
  }

  late final _UA_RelativePathElement_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
          'UA_RelativePathElement_delete');
  late final _UA_RelativePathElement_delete =
      _UA_RelativePathElement_deletePtr.asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  bool UA_RelativePathElement_equal(
    ffi.Pointer<UA_RelativePathElement> p1,
    ffi.Pointer<UA_RelativePathElement> p2,
  ) {
    return _UA_RelativePathElement_equal(
      p1,
      p2,
    );
  }

  late final _UA_RelativePathElement_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RelativePathElement>, ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_equal');
  late final _UA_RelativePathElement_equal = _UA_RelativePathElement_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RelativePathElement>, ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePath_init(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_init(
      p,
    );
  }

  late final _UA_RelativePath_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>('UA_RelativePath_init');
  late final _UA_RelativePath_init = _UA_RelativePath_initPtr.asFunction<void Function(ffi.Pointer<UA_RelativePath>)>();

  ffi.Pointer<UA_RelativePath> UA_RelativePath_new() {
    return _UA_RelativePath_new();
  }

  late final _UA_RelativePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RelativePath> Function()>>('UA_RelativePath_new');
  late final _UA_RelativePath_new = _UA_RelativePath_newPtr.asFunction<ffi.Pointer<UA_RelativePath> Function()>();

  int UA_RelativePath_copy(
    ffi.Pointer<UA_RelativePath> src,
    ffi.Pointer<UA_RelativePath> dst,
  ) {
    return _UA_RelativePath_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePath_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>>(
          'UA_RelativePath_copy');
  late final _UA_RelativePath_copy =
      _UA_RelativePath_copyPtr.asFunction<int Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_clear(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_clear(
      p,
    );
  }

  late final _UA_RelativePath_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>('UA_RelativePath_clear');
  late final _UA_RelativePath_clear =
      _UA_RelativePath_clearPtr.asFunction<void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_delete(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_delete(
      p,
    );
  }

  late final _UA_RelativePath_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>('UA_RelativePath_delete');
  late final _UA_RelativePath_delete =
      _UA_RelativePath_deletePtr.asFunction<void Function(ffi.Pointer<UA_RelativePath>)>();

  bool UA_RelativePath_equal(
    ffi.Pointer<UA_RelativePath> p1,
    ffi.Pointer<UA_RelativePath> p2,
  ) {
    return _UA_RelativePath_equal(
      p1,
      p2,
    );
  }

  late final _UA_RelativePath_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>>(
          'UA_RelativePath_equal');
  late final _UA_RelativePath_equal =
      _UA_RelativePath_equalPtr.asFunction<bool Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>();

  void UA_BrowsePath_init(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_init(
      p,
    );
  }

  late final _UA_BrowsePath_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>('UA_BrowsePath_init');
  late final _UA_BrowsePath_init = _UA_BrowsePath_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePath>)>();

  ffi.Pointer<UA_BrowsePath> UA_BrowsePath_new() {
    return _UA_BrowsePath_new();
  }

  late final _UA_BrowsePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePath> Function()>>('UA_BrowsePath_new');
  late final _UA_BrowsePath_new = _UA_BrowsePath_newPtr.asFunction<ffi.Pointer<UA_BrowsePath> Function()>();

  int UA_BrowsePath_copy(
    ffi.Pointer<UA_BrowsePath> src,
    ffi.Pointer<UA_BrowsePath> dst,
  ) {
    return _UA_BrowsePath_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePath_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>>(
          'UA_BrowsePath_copy');
  late final _UA_BrowsePath_copy =
      _UA_BrowsePath_copyPtr.asFunction<int Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_clear(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_clear(
      p,
    );
  }

  late final _UA_BrowsePath_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>('UA_BrowsePath_clear');
  late final _UA_BrowsePath_clear = _UA_BrowsePath_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_delete(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_delete(
      p,
    );
  }

  late final _UA_BrowsePath_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>('UA_BrowsePath_delete');
  late final _UA_BrowsePath_delete = _UA_BrowsePath_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowsePath>)>();

  bool UA_BrowsePath_equal(
    ffi.Pointer<UA_BrowsePath> p1,
    ffi.Pointer<UA_BrowsePath> p2,
  ) {
    return _UA_BrowsePath_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowsePath_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>>(
          'UA_BrowsePath_equal');
  late final _UA_BrowsePath_equal =
      _UA_BrowsePath_equalPtr.asFunction<bool Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePathTarget_init(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_init(
      p,
    );
  }

  late final _UA_BrowsePathTarget_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>('UA_BrowsePathTarget_init');
  late final _UA_BrowsePathTarget_init =
      _UA_BrowsePathTarget_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  ffi.Pointer<UA_BrowsePathTarget> UA_BrowsePathTarget_new() {
    return _UA_BrowsePathTarget_new();
  }

  late final _UA_BrowsePathTarget_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathTarget> Function()>>('UA_BrowsePathTarget_new');
  late final _UA_BrowsePathTarget_new =
      _UA_BrowsePathTarget_newPtr.asFunction<ffi.Pointer<UA_BrowsePathTarget> Function()>();

  int UA_BrowsePathTarget_copy(
    ffi.Pointer<UA_BrowsePathTarget> src,
    ffi.Pointer<UA_BrowsePathTarget> dst,
  ) {
    return _UA_BrowsePathTarget_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathTarget_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowsePathTarget>, ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_copy');
  late final _UA_BrowsePathTarget_copy = _UA_BrowsePathTarget_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowsePathTarget>, ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_clear(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_clear(
      p,
    );
  }

  late final _UA_BrowsePathTarget_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>('UA_BrowsePathTarget_clear');
  late final _UA_BrowsePathTarget_clear =
      _UA_BrowsePathTarget_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_delete(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_delete(
      p,
    );
  }

  late final _UA_BrowsePathTarget_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>('UA_BrowsePathTarget_delete');
  late final _UA_BrowsePathTarget_delete =
      _UA_BrowsePathTarget_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  bool UA_BrowsePathTarget_equal(
    ffi.Pointer<UA_BrowsePathTarget> p1,
    ffi.Pointer<UA_BrowsePathTarget> p2,
  ) {
    return _UA_BrowsePathTarget_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowsePathTarget_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowsePathTarget>, ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_equal');
  late final _UA_BrowsePathTarget_equal = _UA_BrowsePathTarget_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowsePathTarget>, ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathResult_init(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_init(
      p,
    );
  }

  late final _UA_BrowsePathResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>('UA_BrowsePathResult_init');
  late final _UA_BrowsePathResult_init =
      _UA_BrowsePathResult_initPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  ffi.Pointer<UA_BrowsePathResult> UA_BrowsePathResult_new() {
    return _UA_BrowsePathResult_new();
  }

  late final _UA_BrowsePathResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathResult> Function()>>('UA_BrowsePathResult_new');
  late final _UA_BrowsePathResult_new =
      _UA_BrowsePathResult_newPtr.asFunction<ffi.Pointer<UA_BrowsePathResult> Function()>();

  int UA_BrowsePathResult_copy(
    ffi.Pointer<UA_BrowsePathResult> src,
    ffi.Pointer<UA_BrowsePathResult> dst,
  ) {
    return _UA_BrowsePathResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathResult_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BrowsePathResult>, ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_copy');
  late final _UA_BrowsePathResult_copy = _UA_BrowsePathResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowsePathResult>, ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_clear(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_clear(
      p,
    );
  }

  late final _UA_BrowsePathResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>('UA_BrowsePathResult_clear');
  late final _UA_BrowsePathResult_clear =
      _UA_BrowsePathResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_delete(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_delete(
      p,
    );
  }

  late final _UA_BrowsePathResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>('UA_BrowsePathResult_delete');
  late final _UA_BrowsePathResult_delete =
      _UA_BrowsePathResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  bool UA_BrowsePathResult_equal(
    ffi.Pointer<UA_BrowsePathResult> p1,
    ffi.Pointer<UA_BrowsePathResult> p2,
  ) {
    return _UA_BrowsePathResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_BrowsePathResult_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BrowsePathResult>, ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_equal');
  late final _UA_BrowsePathResult_equal = _UA_BrowsePathResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_BrowsePathResult>, ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_init');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_init = _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> UA_TranslateBrowsePathsToNodeIdsRequest_new() {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> Function()>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_new');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_new = _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr.asFunction<
      ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsRequest_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>('UA_TranslateBrowsePathsToNodeIdsRequest_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copy =
      _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clear = _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_delete = _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  bool UA_TranslateBrowsePathsToNodeIdsRequest_equal(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p1,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p2,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>('UA_TranslateBrowsePathsToNodeIdsRequest_equal');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_equal =
      _UA_TranslateBrowsePathsToNodeIdsRequest_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_init');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_init = _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> UA_TranslateBrowsePathsToNodeIdsResponse_new() {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> Function()>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_new');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_new = _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr
      .asFunction<ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsResponse_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>('UA_TranslateBrowsePathsToNodeIdsResponse_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copy =
      _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clear = _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_delete = _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  bool UA_TranslateBrowsePathsToNodeIdsResponse_equal(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p1,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p2,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_equal');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_equal =
      _UA_TranslateBrowsePathsToNodeIdsResponse_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_RegisterNodesRequest_init(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_init(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
          'UA_RegisterNodesRequest_init');
  late final _UA_RegisterNodesRequest_init =
      _UA_RegisterNodesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  ffi.Pointer<UA_RegisterNodesRequest> UA_RegisterNodesRequest_new() {
    return _UA_RegisterNodesRequest_new();
  }

  late final _UA_RegisterNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>>('UA_RegisterNodesRequest_new');
  late final _UA_RegisterNodesRequest_new =
      _UA_RegisterNodesRequest_newPtr.asFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>();

  int UA_RegisterNodesRequest_copy(
    ffi.Pointer<UA_RegisterNodesRequest> src,
    ffi.Pointer<UA_RegisterNodesRequest> dst,
  ) {
    return _UA_RegisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesRequest>,
              ffi.Pointer<UA_RegisterNodesRequest>)>>('UA_RegisterNodesRequest_copy');
  late final _UA_RegisterNodesRequest_copy = _UA_RegisterNodesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterNodesRequest>, ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_clear(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
          'UA_RegisterNodesRequest_clear');
  late final _UA_RegisterNodesRequest_clear =
      _UA_RegisterNodesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_delete(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
          'UA_RegisterNodesRequest_delete');
  late final _UA_RegisterNodesRequest_delete =
      _UA_RegisterNodesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  bool UA_RegisterNodesRequest_equal(
    ffi.Pointer<UA_RegisterNodesRequest> p1,
    ffi.Pointer<UA_RegisterNodesRequest> p2,
  ) {
    return _UA_RegisterNodesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterNodesRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterNodesRequest>,
              ffi.Pointer<UA_RegisterNodesRequest>)>>('UA_RegisterNodesRequest_equal');
  late final _UA_RegisterNodesRequest_equal = _UA_RegisterNodesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterNodesRequest>, ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesResponse_init(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_init(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
          'UA_RegisterNodesResponse_init');
  late final _UA_RegisterNodesResponse_init =
      _UA_RegisterNodesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  ffi.Pointer<UA_RegisterNodesResponse> UA_RegisterNodesResponse_new() {
    return _UA_RegisterNodesResponse_new();
  }

  late final _UA_RegisterNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>>('UA_RegisterNodesResponse_new');
  late final _UA_RegisterNodesResponse_new =
      _UA_RegisterNodesResponse_newPtr.asFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>();

  int UA_RegisterNodesResponse_copy(
    ffi.Pointer<UA_RegisterNodesResponse> src,
    ffi.Pointer<UA_RegisterNodesResponse> dst,
  ) {
    return _UA_RegisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesResponse>,
              ffi.Pointer<UA_RegisterNodesResponse>)>>('UA_RegisterNodesResponse_copy');
  late final _UA_RegisterNodesResponse_copy = _UA_RegisterNodesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RegisterNodesResponse>, ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_clear(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
          'UA_RegisterNodesResponse_clear');
  late final _UA_RegisterNodesResponse_clear =
      _UA_RegisterNodesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_delete(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
          'UA_RegisterNodesResponse_delete');
  late final _UA_RegisterNodesResponse_delete =
      _UA_RegisterNodesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  bool UA_RegisterNodesResponse_equal(
    ffi.Pointer<UA_RegisterNodesResponse> p1,
    ffi.Pointer<UA_RegisterNodesResponse> p2,
  ) {
    return _UA_RegisterNodesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_RegisterNodesResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RegisterNodesResponse>,
              ffi.Pointer<UA_RegisterNodesResponse>)>>('UA_RegisterNodesResponse_equal');
  late final _UA_RegisterNodesResponse_equal = _UA_RegisterNodesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RegisterNodesResponse>, ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_UnregisterNodesRequest_init(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_init(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
          'UA_UnregisterNodesRequest_init');
  late final _UA_UnregisterNodesRequest_init =
      _UA_UnregisterNodesRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  ffi.Pointer<UA_UnregisterNodesRequest> UA_UnregisterNodesRequest_new() {
    return _UA_UnregisterNodesRequest_new();
  }

  late final _UA_UnregisterNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>>('UA_UnregisterNodesRequest_new');
  late final _UA_UnregisterNodesRequest_new =
      _UA_UnregisterNodesRequest_newPtr.asFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>();

  int UA_UnregisterNodesRequest_copy(
    ffi.Pointer<UA_UnregisterNodesRequest> src,
    ffi.Pointer<UA_UnregisterNodesRequest> dst,
  ) {
    return _UA_UnregisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesRequest>,
              ffi.Pointer<UA_UnregisterNodesRequest>)>>('UA_UnregisterNodesRequest_copy');
  late final _UA_UnregisterNodesRequest_copy = _UA_UnregisterNodesRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UnregisterNodesRequest>, ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_clear(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
          'UA_UnregisterNodesRequest_clear');
  late final _UA_UnregisterNodesRequest_clear =
      _UA_UnregisterNodesRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_delete(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
          'UA_UnregisterNodesRequest_delete');
  late final _UA_UnregisterNodesRequest_delete =
      _UA_UnregisterNodesRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  bool UA_UnregisterNodesRequest_equal(
    ffi.Pointer<UA_UnregisterNodesRequest> p1,
    ffi.Pointer<UA_UnregisterNodesRequest> p2,
  ) {
    return _UA_UnregisterNodesRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_UnregisterNodesRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UnregisterNodesRequest>,
              ffi.Pointer<UA_UnregisterNodesRequest>)>>('UA_UnregisterNodesRequest_equal');
  late final _UA_UnregisterNodesRequest_equal = _UA_UnregisterNodesRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UnregisterNodesRequest>, ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesResponse_init(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_init(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
          'UA_UnregisterNodesResponse_init');
  late final _UA_UnregisterNodesResponse_init =
      _UA_UnregisterNodesResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  ffi.Pointer<UA_UnregisterNodesResponse> UA_UnregisterNodesResponse_new() {
    return _UA_UnregisterNodesResponse_new();
  }

  late final _UA_UnregisterNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UnregisterNodesResponse> Function()>>('UA_UnregisterNodesResponse_new');
  late final _UA_UnregisterNodesResponse_new =
      _UA_UnregisterNodesResponse_newPtr.asFunction<ffi.Pointer<UA_UnregisterNodesResponse> Function()>();

  int UA_UnregisterNodesResponse_copy(
    ffi.Pointer<UA_UnregisterNodesResponse> src,
    ffi.Pointer<UA_UnregisterNodesResponse> dst,
  ) {
    return _UA_UnregisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesResponse>,
              ffi.Pointer<UA_UnregisterNodesResponse>)>>('UA_UnregisterNodesResponse_copy');
  late final _UA_UnregisterNodesResponse_copy = _UA_UnregisterNodesResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UnregisterNodesResponse>, ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_clear(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
          'UA_UnregisterNodesResponse_clear');
  late final _UA_UnregisterNodesResponse_clear =
      _UA_UnregisterNodesResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_delete(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
          'UA_UnregisterNodesResponse_delete');
  late final _UA_UnregisterNodesResponse_delete =
      _UA_UnregisterNodesResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  bool UA_UnregisterNodesResponse_equal(
    ffi.Pointer<UA_UnregisterNodesResponse> p1,
    ffi.Pointer<UA_UnregisterNodesResponse> p2,
  ) {
    return _UA_UnregisterNodesResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_UnregisterNodesResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UnregisterNodesResponse>,
              ffi.Pointer<UA_UnregisterNodesResponse>)>>('UA_UnregisterNodesResponse_equal');
  late final _UA_UnregisterNodesResponse_equal = _UA_UnregisterNodesResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UnregisterNodesResponse>, ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_Counter_init(
    ffi.Pointer<UA_Counter> p,
  ) {
    return _UA_Counter_init(
      p,
    );
  }

  late final _UA_Counter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Counter>)>>('UA_Counter_init');
  late final _UA_Counter_init = _UA_Counter_initPtr.asFunction<void Function(ffi.Pointer<UA_Counter>)>();

  ffi.Pointer<UA_Counter> UA_Counter_new() {
    return _UA_Counter_new();
  }

  late final _UA_Counter_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Counter> Function()>>('UA_Counter_new');
  late final _UA_Counter_new = _UA_Counter_newPtr.asFunction<ffi.Pointer<UA_Counter> Function()>();

  int UA_Counter_copy(
    ffi.Pointer<UA_Counter> src,
    ffi.Pointer<UA_Counter> dst,
  ) {
    return _UA_Counter_copy(
      src,
      dst,
    );
  }

  late final _UA_Counter_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Counter>, ffi.Pointer<UA_Counter>)>>(
          'UA_Counter_copy');
  late final _UA_Counter_copy =
      _UA_Counter_copyPtr.asFunction<int Function(ffi.Pointer<UA_Counter>, ffi.Pointer<UA_Counter>)>();

  void UA_Counter_clear(
    ffi.Pointer<UA_Counter> p,
  ) {
    return _UA_Counter_clear(
      p,
    );
  }

  late final _UA_Counter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Counter>)>>('UA_Counter_clear');
  late final _UA_Counter_clear = _UA_Counter_clearPtr.asFunction<void Function(ffi.Pointer<UA_Counter>)>();

  void UA_Counter_delete(
    ffi.Pointer<UA_Counter> p,
  ) {
    return _UA_Counter_delete(
      p,
    );
  }

  late final _UA_Counter_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Counter>)>>('UA_Counter_delete');
  late final _UA_Counter_delete = _UA_Counter_deletePtr.asFunction<void Function(ffi.Pointer<UA_Counter>)>();

  bool UA_Counter_equal(
    ffi.Pointer<UA_Counter> p1,
    ffi.Pointer<UA_Counter> p2,
  ) {
    return _UA_Counter_equal(
      p1,
      p2,
    );
  }

  late final _UA_Counter_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Counter>, ffi.Pointer<UA_Counter>)>>(
          'UA_Counter_equal');
  late final _UA_Counter_equal =
      _UA_Counter_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Counter>, ffi.Pointer<UA_Counter>)>();

  void UA_OpaqueNumericRange_init(
    ffi.Pointer<UA_OpaqueNumericRange> p,
  ) {
    return _UA_OpaqueNumericRange_init(
      p,
    );
  }

  late final _UA_OpaqueNumericRange_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpaqueNumericRange>)>>('UA_OpaqueNumericRange_init');
  late final _UA_OpaqueNumericRange_init =
      _UA_OpaqueNumericRange_initPtr.asFunction<void Function(ffi.Pointer<UA_OpaqueNumericRange>)>();

  ffi.Pointer<UA_OpaqueNumericRange> UA_OpaqueNumericRange_new() {
    return _UA_OpaqueNumericRange_new();
  }

  late final _UA_OpaqueNumericRange_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_OpaqueNumericRange> Function()>>('UA_OpaqueNumericRange_new');
  late final _UA_OpaqueNumericRange_new =
      _UA_OpaqueNumericRange_newPtr.asFunction<ffi.Pointer<UA_OpaqueNumericRange> Function()>();

  int UA_OpaqueNumericRange_copy(
    ffi.Pointer<UA_OpaqueNumericRange> src,
    ffi.Pointer<UA_OpaqueNumericRange> dst,
  ) {
    return _UA_OpaqueNumericRange_copy(
      src,
      dst,
    );
  }

  late final _UA_OpaqueNumericRange_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_OpaqueNumericRange>, ffi.Pointer<UA_OpaqueNumericRange>)>>('UA_OpaqueNumericRange_copy');
  late final _UA_OpaqueNumericRange_copy = _UA_OpaqueNumericRange_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_OpaqueNumericRange>, ffi.Pointer<UA_OpaqueNumericRange>)>();

  void UA_OpaqueNumericRange_clear(
    ffi.Pointer<UA_OpaqueNumericRange> p,
  ) {
    return _UA_OpaqueNumericRange_clear(
      p,
    );
  }

  late final _UA_OpaqueNumericRange_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpaqueNumericRange>)>>('UA_OpaqueNumericRange_clear');
  late final _UA_OpaqueNumericRange_clear =
      _UA_OpaqueNumericRange_clearPtr.asFunction<void Function(ffi.Pointer<UA_OpaqueNumericRange>)>();

  void UA_OpaqueNumericRange_delete(
    ffi.Pointer<UA_OpaqueNumericRange> p,
  ) {
    return _UA_OpaqueNumericRange_delete(
      p,
    );
  }

  late final _UA_OpaqueNumericRange_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_OpaqueNumericRange>)>>(
          'UA_OpaqueNumericRange_delete');
  late final _UA_OpaqueNumericRange_delete =
      _UA_OpaqueNumericRange_deletePtr.asFunction<void Function(ffi.Pointer<UA_OpaqueNumericRange>)>();

  bool UA_OpaqueNumericRange_equal(
    ffi.Pointer<UA_OpaqueNumericRange> p1,
    ffi.Pointer<UA_OpaqueNumericRange> p2,
  ) {
    return _UA_OpaqueNumericRange_equal(
      p1,
      p2,
    );
  }

  late final _UA_OpaqueNumericRange_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_OpaqueNumericRange>, ffi.Pointer<UA_OpaqueNumericRange>)>>(
      'UA_OpaqueNumericRange_equal');
  late final _UA_OpaqueNumericRange_equal = _UA_OpaqueNumericRange_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_OpaqueNumericRange>, ffi.Pointer<UA_OpaqueNumericRange>)>();

  void UA_EndpointConfiguration_init(
    ffi.Pointer<UA_EndpointConfiguration> p,
  ) {
    return _UA_EndpointConfiguration_init(
      p,
    );
  }

  late final _UA_EndpointConfiguration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointConfiguration>)>>(
          'UA_EndpointConfiguration_init');
  late final _UA_EndpointConfiguration_init =
      _UA_EndpointConfiguration_initPtr.asFunction<void Function(ffi.Pointer<UA_EndpointConfiguration>)>();

  ffi.Pointer<UA_EndpointConfiguration> UA_EndpointConfiguration_new() {
    return _UA_EndpointConfiguration_new();
  }

  late final _UA_EndpointConfiguration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EndpointConfiguration> Function()>>('UA_EndpointConfiguration_new');
  late final _UA_EndpointConfiguration_new =
      _UA_EndpointConfiguration_newPtr.asFunction<ffi.Pointer<UA_EndpointConfiguration> Function()>();

  int UA_EndpointConfiguration_copy(
    ffi.Pointer<UA_EndpointConfiguration> src,
    ffi.Pointer<UA_EndpointConfiguration> dst,
  ) {
    return _UA_EndpointConfiguration_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointConfiguration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EndpointConfiguration>,
              ffi.Pointer<UA_EndpointConfiguration>)>>('UA_EndpointConfiguration_copy');
  late final _UA_EndpointConfiguration_copy = _UA_EndpointConfiguration_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EndpointConfiguration>, ffi.Pointer<UA_EndpointConfiguration>)>();

  void UA_EndpointConfiguration_clear(
    ffi.Pointer<UA_EndpointConfiguration> p,
  ) {
    return _UA_EndpointConfiguration_clear(
      p,
    );
  }

  late final _UA_EndpointConfiguration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointConfiguration>)>>(
          'UA_EndpointConfiguration_clear');
  late final _UA_EndpointConfiguration_clear =
      _UA_EndpointConfiguration_clearPtr.asFunction<void Function(ffi.Pointer<UA_EndpointConfiguration>)>();

  void UA_EndpointConfiguration_delete(
    ffi.Pointer<UA_EndpointConfiguration> p,
  ) {
    return _UA_EndpointConfiguration_delete(
      p,
    );
  }

  late final _UA_EndpointConfiguration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointConfiguration>)>>(
          'UA_EndpointConfiguration_delete');
  late final _UA_EndpointConfiguration_delete =
      _UA_EndpointConfiguration_deletePtr.asFunction<void Function(ffi.Pointer<UA_EndpointConfiguration>)>();

  bool UA_EndpointConfiguration_equal(
    ffi.Pointer<UA_EndpointConfiguration> p1,
    ffi.Pointer<UA_EndpointConfiguration> p2,
  ) {
    return _UA_EndpointConfiguration_equal(
      p1,
      p2,
    );
  }

  late final _UA_EndpointConfiguration_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_EndpointConfiguration>,
              ffi.Pointer<UA_EndpointConfiguration>)>>('UA_EndpointConfiguration_equal');
  late final _UA_EndpointConfiguration_equal = _UA_EndpointConfiguration_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EndpointConfiguration>, ffi.Pointer<UA_EndpointConfiguration>)>();

  void UA_QueryDataDescription_init(
    ffi.Pointer<UA_QueryDataDescription> p,
  ) {
    return _UA_QueryDataDescription_init(
      p,
    );
  }

  late final _UA_QueryDataDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataDescription>)>>(
          'UA_QueryDataDescription_init');
  late final _UA_QueryDataDescription_init =
      _UA_QueryDataDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryDataDescription>)>();

  ffi.Pointer<UA_QueryDataDescription> UA_QueryDataDescription_new() {
    return _UA_QueryDataDescription_new();
  }

  late final _UA_QueryDataDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryDataDescription> Function()>>('UA_QueryDataDescription_new');
  late final _UA_QueryDataDescription_new =
      _UA_QueryDataDescription_newPtr.asFunction<ffi.Pointer<UA_QueryDataDescription> Function()>();

  int UA_QueryDataDescription_copy(
    ffi.Pointer<UA_QueryDataDescription> src,
    ffi.Pointer<UA_QueryDataDescription> dst,
  ) {
    return _UA_QueryDataDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryDataDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_QueryDataDescription>,
              ffi.Pointer<UA_QueryDataDescription>)>>('UA_QueryDataDescription_copy');
  late final _UA_QueryDataDescription_copy = _UA_QueryDataDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QueryDataDescription>, ffi.Pointer<UA_QueryDataDescription>)>();

  void UA_QueryDataDescription_clear(
    ffi.Pointer<UA_QueryDataDescription> p,
  ) {
    return _UA_QueryDataDescription_clear(
      p,
    );
  }

  late final _UA_QueryDataDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataDescription>)>>(
          'UA_QueryDataDescription_clear');
  late final _UA_QueryDataDescription_clear =
      _UA_QueryDataDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryDataDescription>)>();

  void UA_QueryDataDescription_delete(
    ffi.Pointer<UA_QueryDataDescription> p,
  ) {
    return _UA_QueryDataDescription_delete(
      p,
    );
  }

  late final _UA_QueryDataDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataDescription>)>>(
          'UA_QueryDataDescription_delete');
  late final _UA_QueryDataDescription_delete =
      _UA_QueryDataDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryDataDescription>)>();

  bool UA_QueryDataDescription_equal(
    ffi.Pointer<UA_QueryDataDescription> p1,
    ffi.Pointer<UA_QueryDataDescription> p2,
  ) {
    return _UA_QueryDataDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryDataDescription_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_QueryDataDescription>,
              ffi.Pointer<UA_QueryDataDescription>)>>('UA_QueryDataDescription_equal');
  late final _UA_QueryDataDescription_equal = _UA_QueryDataDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QueryDataDescription>, ffi.Pointer<UA_QueryDataDescription>)>();

  void UA_NodeTypeDescription_init(
    ffi.Pointer<UA_NodeTypeDescription> p,
  ) {
    return _UA_NodeTypeDescription_init(
      p,
    );
  }

  late final _UA_NodeTypeDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeTypeDescription>)>>(
          'UA_NodeTypeDescription_init');
  late final _UA_NodeTypeDescription_init =
      _UA_NodeTypeDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeTypeDescription>)>();

  ffi.Pointer<UA_NodeTypeDescription> UA_NodeTypeDescription_new() {
    return _UA_NodeTypeDescription_new();
  }

  late final _UA_NodeTypeDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeTypeDescription> Function()>>('UA_NodeTypeDescription_new');
  late final _UA_NodeTypeDescription_new =
      _UA_NodeTypeDescription_newPtr.asFunction<ffi.Pointer<UA_NodeTypeDescription> Function()>();

  int UA_NodeTypeDescription_copy(
    ffi.Pointer<UA_NodeTypeDescription> src,
    ffi.Pointer<UA_NodeTypeDescription> dst,
  ) {
    return _UA_NodeTypeDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeTypeDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeTypeDescription>,
              ffi.Pointer<UA_NodeTypeDescription>)>>('UA_NodeTypeDescription_copy');
  late final _UA_NodeTypeDescription_copy = _UA_NodeTypeDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeTypeDescription>, ffi.Pointer<UA_NodeTypeDescription>)>();

  void UA_NodeTypeDescription_clear(
    ffi.Pointer<UA_NodeTypeDescription> p,
  ) {
    return _UA_NodeTypeDescription_clear(
      p,
    );
  }

  late final _UA_NodeTypeDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeTypeDescription>)>>(
          'UA_NodeTypeDescription_clear');
  late final _UA_NodeTypeDescription_clear =
      _UA_NodeTypeDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeTypeDescription>)>();

  void UA_NodeTypeDescription_delete(
    ffi.Pointer<UA_NodeTypeDescription> p,
  ) {
    return _UA_NodeTypeDescription_delete(
      p,
    );
  }

  late final _UA_NodeTypeDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeTypeDescription>)>>(
          'UA_NodeTypeDescription_delete');
  late final _UA_NodeTypeDescription_delete =
      _UA_NodeTypeDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeTypeDescription>)>();

  bool UA_NodeTypeDescription_equal(
    ffi.Pointer<UA_NodeTypeDescription> p1,
    ffi.Pointer<UA_NodeTypeDescription> p2,
  ) {
    return _UA_NodeTypeDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeTypeDescription_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeTypeDescription>, ffi.Pointer<UA_NodeTypeDescription>)>>(
      'UA_NodeTypeDescription_equal');
  late final _UA_NodeTypeDescription_equal = _UA_NodeTypeDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NodeTypeDescription>, ffi.Pointer<UA_NodeTypeDescription>)>();

  void UA_FilterOperator_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_FilterOperator_init(
      p,
    );
  }

  late final _UA_FilterOperator_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_FilterOperator_init');
  late final _UA_FilterOperator_init =
      _UA_FilterOperator_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_FilterOperator_new() {
    return _UA_FilterOperator_new();
  }

  late final _UA_FilterOperator_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_FilterOperator_new');
  late final _UA_FilterOperator_new = _UA_FilterOperator_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_FilterOperator_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_FilterOperator_copy(
      src,
      dst,
    );
  }

  late final _UA_FilterOperator_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_FilterOperator_copy');
  late final _UA_FilterOperator_copy =
      _UA_FilterOperator_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_FilterOperator_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_FilterOperator_clear(
      p,
    );
  }

  late final _UA_FilterOperator_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_FilterOperator_clear');
  late final _UA_FilterOperator_clear =
      _UA_FilterOperator_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_FilterOperator_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_FilterOperator_delete(
      p,
    );
  }

  late final _UA_FilterOperator_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_FilterOperator_delete');
  late final _UA_FilterOperator_delete =
      _UA_FilterOperator_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_FilterOperator_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_FilterOperator_equal(
      p1,
      p2,
    );
  }

  late final _UA_FilterOperator_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_FilterOperator_equal');
  late final _UA_FilterOperator_equal = _UA_FilterOperator_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_QueryDataSet_init(
    ffi.Pointer<UA_QueryDataSet> p,
  ) {
    return _UA_QueryDataSet_init(
      p,
    );
  }

  late final _UA_QueryDataSet_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataSet>)>>('UA_QueryDataSet_init');
  late final _UA_QueryDataSet_init = _UA_QueryDataSet_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryDataSet>)>();

  ffi.Pointer<UA_QueryDataSet> UA_QueryDataSet_new() {
    return _UA_QueryDataSet_new();
  }

  late final _UA_QueryDataSet_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryDataSet> Function()>>('UA_QueryDataSet_new');
  late final _UA_QueryDataSet_new = _UA_QueryDataSet_newPtr.asFunction<ffi.Pointer<UA_QueryDataSet> Function()>();

  int UA_QueryDataSet_copy(
    ffi.Pointer<UA_QueryDataSet> src,
    ffi.Pointer<UA_QueryDataSet> dst,
  ) {
    return _UA_QueryDataSet_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryDataSet_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_QueryDataSet>, ffi.Pointer<UA_QueryDataSet>)>>(
          'UA_QueryDataSet_copy');
  late final _UA_QueryDataSet_copy =
      _UA_QueryDataSet_copyPtr.asFunction<int Function(ffi.Pointer<UA_QueryDataSet>, ffi.Pointer<UA_QueryDataSet>)>();

  void UA_QueryDataSet_clear(
    ffi.Pointer<UA_QueryDataSet> p,
  ) {
    return _UA_QueryDataSet_clear(
      p,
    );
  }

  late final _UA_QueryDataSet_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataSet>)>>('UA_QueryDataSet_clear');
  late final _UA_QueryDataSet_clear =
      _UA_QueryDataSet_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryDataSet>)>();

  void UA_QueryDataSet_delete(
    ffi.Pointer<UA_QueryDataSet> p,
  ) {
    return _UA_QueryDataSet_delete(
      p,
    );
  }

  late final _UA_QueryDataSet_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryDataSet>)>>('UA_QueryDataSet_delete');
  late final _UA_QueryDataSet_delete =
      _UA_QueryDataSet_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryDataSet>)>();

  bool UA_QueryDataSet_equal(
    ffi.Pointer<UA_QueryDataSet> p1,
    ffi.Pointer<UA_QueryDataSet> p2,
  ) {
    return _UA_QueryDataSet_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryDataSet_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QueryDataSet>, ffi.Pointer<UA_QueryDataSet>)>>(
          'UA_QueryDataSet_equal');
  late final _UA_QueryDataSet_equal =
      _UA_QueryDataSet_equalPtr.asFunction<bool Function(ffi.Pointer<UA_QueryDataSet>, ffi.Pointer<UA_QueryDataSet>)>();

  void UA_NodeReference_init(
    ffi.Pointer<UA_NodeReference> p,
  ) {
    return _UA_NodeReference_init(
      p,
    );
  }

  late final _UA_NodeReference_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeReference>)>>('UA_NodeReference_init');
  late final _UA_NodeReference_init =
      _UA_NodeReference_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeReference>)>();

  ffi.Pointer<UA_NodeReference> UA_NodeReference_new() {
    return _UA_NodeReference_new();
  }

  late final _UA_NodeReference_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeReference> Function()>>('UA_NodeReference_new');
  late final _UA_NodeReference_new = _UA_NodeReference_newPtr.asFunction<ffi.Pointer<UA_NodeReference> Function()>();

  int UA_NodeReference_copy(
    ffi.Pointer<UA_NodeReference> src,
    ffi.Pointer<UA_NodeReference> dst,
  ) {
    return _UA_NodeReference_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeReference_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeReference>, ffi.Pointer<UA_NodeReference>)>>(
          'UA_NodeReference_copy');
  late final _UA_NodeReference_copy = _UA_NodeReference_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeReference>, ffi.Pointer<UA_NodeReference>)>();

  void UA_NodeReference_clear(
    ffi.Pointer<UA_NodeReference> p,
  ) {
    return _UA_NodeReference_clear(
      p,
    );
  }

  late final _UA_NodeReference_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeReference>)>>('UA_NodeReference_clear');
  late final _UA_NodeReference_clear =
      _UA_NodeReference_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeReference>)>();

  void UA_NodeReference_delete(
    ffi.Pointer<UA_NodeReference> p,
  ) {
    return _UA_NodeReference_delete(
      p,
    );
  }

  late final _UA_NodeReference_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeReference>)>>('UA_NodeReference_delete');
  late final _UA_NodeReference_delete =
      _UA_NodeReference_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeReference>)>();

  bool UA_NodeReference_equal(
    ffi.Pointer<UA_NodeReference> p1,
    ffi.Pointer<UA_NodeReference> p2,
  ) {
    return _UA_NodeReference_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodeReference_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeReference>, ffi.Pointer<UA_NodeReference>)>>(
          'UA_NodeReference_equal');
  late final _UA_NodeReference_equal = _UA_NodeReference_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NodeReference>, ffi.Pointer<UA_NodeReference>)>();

  void UA_ContentFilterElement_init(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_init(
      p,
    );
  }

  late final _UA_ContentFilterElement_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
          'UA_ContentFilterElement_init');
  late final _UA_ContentFilterElement_init =
      _UA_ContentFilterElement_initPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  ffi.Pointer<UA_ContentFilterElement> UA_ContentFilterElement_new() {
    return _UA_ContentFilterElement_new();
  }

  late final _UA_ContentFilterElement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilterElement> Function()>>('UA_ContentFilterElement_new');
  late final _UA_ContentFilterElement_new =
      _UA_ContentFilterElement_newPtr.asFunction<ffi.Pointer<UA_ContentFilterElement> Function()>();

  int UA_ContentFilterElement_copy(
    ffi.Pointer<UA_ContentFilterElement> src,
    ffi.Pointer<UA_ContentFilterElement> dst,
  ) {
    return _UA_ContentFilterElement_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElement_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElement>,
              ffi.Pointer<UA_ContentFilterElement>)>>('UA_ContentFilterElement_copy');
  late final _UA_ContentFilterElement_copy = _UA_ContentFilterElement_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ContentFilterElement>, ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_clear(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_clear(
      p,
    );
  }

  late final _UA_ContentFilterElement_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
          'UA_ContentFilterElement_clear');
  late final _UA_ContentFilterElement_clear =
      _UA_ContentFilterElement_clearPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_delete(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_delete(
      p,
    );
  }

  late final _UA_ContentFilterElement_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
          'UA_ContentFilterElement_delete');
  late final _UA_ContentFilterElement_delete =
      _UA_ContentFilterElement_deletePtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  bool UA_ContentFilterElement_equal(
    ffi.Pointer<UA_ContentFilterElement> p1,
    ffi.Pointer<UA_ContentFilterElement> p2,
  ) {
    return _UA_ContentFilterElement_equal(
      p1,
      p2,
    );
  }

  late final _UA_ContentFilterElement_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ContentFilterElement>,
              ffi.Pointer<UA_ContentFilterElement>)>>('UA_ContentFilterElement_equal');
  late final _UA_ContentFilterElement_equal = _UA_ContentFilterElement_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ContentFilterElement>, ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilter_init(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_init(
      p,
    );
  }

  late final _UA_ContentFilter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>('UA_ContentFilter_init');
  late final _UA_ContentFilter_init =
      _UA_ContentFilter_initPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilter>)>();

  ffi.Pointer<UA_ContentFilter> UA_ContentFilter_new() {
    return _UA_ContentFilter_new();
  }

  late final _UA_ContentFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilter> Function()>>('UA_ContentFilter_new');
  late final _UA_ContentFilter_new = _UA_ContentFilter_newPtr.asFunction<ffi.Pointer<UA_ContentFilter> Function()>();

  int UA_ContentFilter_copy(
    ffi.Pointer<UA_ContentFilter> src,
    ffi.Pointer<UA_ContentFilter> dst,
  ) {
    return _UA_ContentFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilter_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>>(
          'UA_ContentFilter_copy');
  late final _UA_ContentFilter_copy = _UA_ContentFilter_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_clear(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_clear(
      p,
    );
  }

  late final _UA_ContentFilter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>('UA_ContentFilter_clear');
  late final _UA_ContentFilter_clear =
      _UA_ContentFilter_clearPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_delete(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_delete(
      p,
    );
  }

  late final _UA_ContentFilter_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>('UA_ContentFilter_delete');
  late final _UA_ContentFilter_delete =
      _UA_ContentFilter_deletePtr.asFunction<void Function(ffi.Pointer<UA_ContentFilter>)>();

  bool UA_ContentFilter_equal(
    ffi.Pointer<UA_ContentFilter> p1,
    ffi.Pointer<UA_ContentFilter> p2,
  ) {
    return _UA_ContentFilter_equal(
      p1,
      p2,
    );
  }

  late final _UA_ContentFilter_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>>(
          'UA_ContentFilter_equal');
  late final _UA_ContentFilter_equal = _UA_ContentFilter_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>();

  void UA_ElementOperand_init(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_init(
      p,
    );
  }

  late final _UA_ElementOperand_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>('UA_ElementOperand_init');
  late final _UA_ElementOperand_init =
      _UA_ElementOperand_initPtr.asFunction<void Function(ffi.Pointer<UA_ElementOperand>)>();

  ffi.Pointer<UA_ElementOperand> UA_ElementOperand_new() {
    return _UA_ElementOperand_new();
  }

  late final _UA_ElementOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ElementOperand> Function()>>('UA_ElementOperand_new');
  late final _UA_ElementOperand_new = _UA_ElementOperand_newPtr.asFunction<ffi.Pointer<UA_ElementOperand> Function()>();

  int UA_ElementOperand_copy(
    ffi.Pointer<UA_ElementOperand> src,
    ffi.Pointer<UA_ElementOperand> dst,
  ) {
    return _UA_ElementOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_ElementOperand_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_copy');
  late final _UA_ElementOperand_copy = _UA_ElementOperand_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_clear(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_clear(
      p,
    );
  }

  late final _UA_ElementOperand_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>('UA_ElementOperand_clear');
  late final _UA_ElementOperand_clear =
      _UA_ElementOperand_clearPtr.asFunction<void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_delete(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_delete(
      p,
    );
  }

  late final _UA_ElementOperand_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>('UA_ElementOperand_delete');
  late final _UA_ElementOperand_delete =
      _UA_ElementOperand_deletePtr.asFunction<void Function(ffi.Pointer<UA_ElementOperand>)>();

  bool UA_ElementOperand_equal(
    ffi.Pointer<UA_ElementOperand> p1,
    ffi.Pointer<UA_ElementOperand> p2,
  ) {
    return _UA_ElementOperand_equal(
      p1,
      p2,
    );
  }

  late final _UA_ElementOperand_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>>(
          'UA_ElementOperand_equal');
  late final _UA_ElementOperand_equal = _UA_ElementOperand_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>();

  void UA_LiteralOperand_init(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_init(
      p,
    );
  }

  late final _UA_LiteralOperand_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>('UA_LiteralOperand_init');
  late final _UA_LiteralOperand_init =
      _UA_LiteralOperand_initPtr.asFunction<void Function(ffi.Pointer<UA_LiteralOperand>)>();

  ffi.Pointer<UA_LiteralOperand> UA_LiteralOperand_new() {
    return _UA_LiteralOperand_new();
  }

  late final _UA_LiteralOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LiteralOperand> Function()>>('UA_LiteralOperand_new');
  late final _UA_LiteralOperand_new = _UA_LiteralOperand_newPtr.asFunction<ffi.Pointer<UA_LiteralOperand> Function()>();

  int UA_LiteralOperand_copy(
    ffi.Pointer<UA_LiteralOperand> src,
    ffi.Pointer<UA_LiteralOperand> dst,
  ) {
    return _UA_LiteralOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_LiteralOperand_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_copy');
  late final _UA_LiteralOperand_copy = _UA_LiteralOperand_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_clear(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_clear(
      p,
    );
  }

  late final _UA_LiteralOperand_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>('UA_LiteralOperand_clear');
  late final _UA_LiteralOperand_clear =
      _UA_LiteralOperand_clearPtr.asFunction<void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_delete(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_delete(
      p,
    );
  }

  late final _UA_LiteralOperand_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>('UA_LiteralOperand_delete');
  late final _UA_LiteralOperand_delete =
      _UA_LiteralOperand_deletePtr.asFunction<void Function(ffi.Pointer<UA_LiteralOperand>)>();

  bool UA_LiteralOperand_equal(
    ffi.Pointer<UA_LiteralOperand> p1,
    ffi.Pointer<UA_LiteralOperand> p2,
  ) {
    return _UA_LiteralOperand_equal(
      p1,
      p2,
    );
  }

  late final _UA_LiteralOperand_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>>(
          'UA_LiteralOperand_equal');
  late final _UA_LiteralOperand_equal = _UA_LiteralOperand_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>();

  void UA_AttributeOperand_init(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_init(
      p,
    );
  }

  late final _UA_AttributeOperand_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>('UA_AttributeOperand_init');
  late final _UA_AttributeOperand_init =
      _UA_AttributeOperand_initPtr.asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  ffi.Pointer<UA_AttributeOperand> UA_AttributeOperand_new() {
    return _UA_AttributeOperand_new();
  }

  late final _UA_AttributeOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AttributeOperand> Function()>>('UA_AttributeOperand_new');
  late final _UA_AttributeOperand_new =
      _UA_AttributeOperand_newPtr.asFunction<ffi.Pointer<UA_AttributeOperand> Function()>();

  int UA_AttributeOperand_copy(
    ffi.Pointer<UA_AttributeOperand> src,
    ffi.Pointer<UA_AttributeOperand> dst,
  ) {
    return _UA_AttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_AttributeOperand_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_copy');
  late final _UA_AttributeOperand_copy = _UA_AttributeOperand_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_clear(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_clear(
      p,
    );
  }

  late final _UA_AttributeOperand_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>('UA_AttributeOperand_clear');
  late final _UA_AttributeOperand_clear =
      _UA_AttributeOperand_clearPtr.asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_delete(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_delete(
      p,
    );
  }

  late final _UA_AttributeOperand_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>('UA_AttributeOperand_delete');
  late final _UA_AttributeOperand_delete =
      _UA_AttributeOperand_deletePtr.asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  bool UA_AttributeOperand_equal(
    ffi.Pointer<UA_AttributeOperand> p1,
    ffi.Pointer<UA_AttributeOperand> p2,
  ) {
    return _UA_AttributeOperand_equal(
      p1,
      p2,
    );
  }

  late final _UA_AttributeOperand_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_equal');
  late final _UA_AttributeOperand_equal = _UA_AttributeOperand_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_AttributeOperand>)>();

  void UA_SimpleAttributeOperand_init(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_init(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
          'UA_SimpleAttributeOperand_init');
  late final _UA_SimpleAttributeOperand_init =
      _UA_SimpleAttributeOperand_initPtr.asFunction<void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  ffi.Pointer<UA_SimpleAttributeOperand> UA_SimpleAttributeOperand_new() {
    return _UA_SimpleAttributeOperand_new();
  }

  late final _UA_SimpleAttributeOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>>('UA_SimpleAttributeOperand_new');
  late final _UA_SimpleAttributeOperand_new =
      _UA_SimpleAttributeOperand_newPtr.asFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>();

  int UA_SimpleAttributeOperand_copy(
    ffi.Pointer<UA_SimpleAttributeOperand> src,
    ffi.Pointer<UA_SimpleAttributeOperand> dst,
  ) {
    return _UA_SimpleAttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleAttributeOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SimpleAttributeOperand>,
              ffi.Pointer<UA_SimpleAttributeOperand>)>>('UA_SimpleAttributeOperand_copy');
  late final _UA_SimpleAttributeOperand_copy = _UA_SimpleAttributeOperand_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SimpleAttributeOperand>, ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_clear(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_clear(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
          'UA_SimpleAttributeOperand_clear');
  late final _UA_SimpleAttributeOperand_clear =
      _UA_SimpleAttributeOperand_clearPtr.asFunction<void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_delete(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_delete(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
          'UA_SimpleAttributeOperand_delete');
  late final _UA_SimpleAttributeOperand_delete =
      _UA_SimpleAttributeOperand_deletePtr.asFunction<void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  bool UA_SimpleAttributeOperand_equal(
    ffi.Pointer<UA_SimpleAttributeOperand> p1,
    ffi.Pointer<UA_SimpleAttributeOperand> p2,
  ) {
    return _UA_SimpleAttributeOperand_equal(
      p1,
      p2,
    );
  }

  late final _UA_SimpleAttributeOperand_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SimpleAttributeOperand>,
              ffi.Pointer<UA_SimpleAttributeOperand>)>>('UA_SimpleAttributeOperand_equal');
  late final _UA_SimpleAttributeOperand_equal = _UA_SimpleAttributeOperand_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SimpleAttributeOperand>, ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_ContentFilterElementResult_init(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_init(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
          'UA_ContentFilterElementResult_init');
  late final _UA_ContentFilterElementResult_init =
      _UA_ContentFilterElementResult_initPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  ffi.Pointer<UA_ContentFilterElementResult> UA_ContentFilterElementResult_new() {
    return _UA_ContentFilterElementResult_new();
  }

  late final _UA_ContentFilterElementResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilterElementResult> Function()>>(
          'UA_ContentFilterElementResult_new');
  late final _UA_ContentFilterElementResult_new =
      _UA_ContentFilterElementResult_newPtr.asFunction<ffi.Pointer<UA_ContentFilterElementResult> Function()>();

  int UA_ContentFilterElementResult_copy(
    ffi.Pointer<UA_ContentFilterElementResult> src,
    ffi.Pointer<UA_ContentFilterElementResult> dst,
  ) {
    return _UA_ContentFilterElementResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElementResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElementResult>,
              ffi.Pointer<UA_ContentFilterElementResult>)>>('UA_ContentFilterElementResult_copy');
  late final _UA_ContentFilterElementResult_copy = _UA_ContentFilterElementResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ContentFilterElementResult>, ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_clear(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
          'UA_ContentFilterElementResult_clear');
  late final _UA_ContentFilterElementResult_clear =
      _UA_ContentFilterElementResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_delete(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
          'UA_ContentFilterElementResult_delete');
  late final _UA_ContentFilterElementResult_delete =
      _UA_ContentFilterElementResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  bool UA_ContentFilterElementResult_equal(
    ffi.Pointer<UA_ContentFilterElementResult> p1,
    ffi.Pointer<UA_ContentFilterElementResult> p2,
  ) {
    return _UA_ContentFilterElementResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_ContentFilterElementResult_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ContentFilterElementResult>,
              ffi.Pointer<UA_ContentFilterElementResult>)>>('UA_ContentFilterElementResult_equal');
  late final _UA_ContentFilterElementResult_equal = _UA_ContentFilterElementResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ContentFilterElementResult>, ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterResult_init(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_init(
      p,
    );
  }

  late final _UA_ContentFilterResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
          'UA_ContentFilterResult_init');
  late final _UA_ContentFilterResult_init =
      _UA_ContentFilterResult_initPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  ffi.Pointer<UA_ContentFilterResult> UA_ContentFilterResult_new() {
    return _UA_ContentFilterResult_new();
  }

  late final _UA_ContentFilterResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilterResult> Function()>>('UA_ContentFilterResult_new');
  late final _UA_ContentFilterResult_new =
      _UA_ContentFilterResult_newPtr.asFunction<ffi.Pointer<UA_ContentFilterResult> Function()>();

  int UA_ContentFilterResult_copy(
    ffi.Pointer<UA_ContentFilterResult> src,
    ffi.Pointer<UA_ContentFilterResult> dst,
  ) {
    return _UA_ContentFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ContentFilterResult>,
              ffi.Pointer<UA_ContentFilterResult>)>>('UA_ContentFilterResult_copy');
  late final _UA_ContentFilterResult_copy = _UA_ContentFilterResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ContentFilterResult>, ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_clear(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
          'UA_ContentFilterResult_clear');
  late final _UA_ContentFilterResult_clear =
      _UA_ContentFilterResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_delete(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
          'UA_ContentFilterResult_delete');
  late final _UA_ContentFilterResult_delete =
      _UA_ContentFilterResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  bool UA_ContentFilterResult_equal(
    ffi.Pointer<UA_ContentFilterResult> p1,
    ffi.Pointer<UA_ContentFilterResult> p2,
  ) {
    return _UA_ContentFilterResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_ContentFilterResult_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ContentFilterResult>, ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_equal');
  late final _UA_ContentFilterResult_equal = _UA_ContentFilterResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ContentFilterResult>, ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ParsingResult_init(
    ffi.Pointer<UA_ParsingResult> p,
  ) {
    return _UA_ParsingResult_init(
      p,
    );
  }

  late final _UA_ParsingResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ParsingResult>)>>('UA_ParsingResult_init');
  late final _UA_ParsingResult_init =
      _UA_ParsingResult_initPtr.asFunction<void Function(ffi.Pointer<UA_ParsingResult>)>();

  ffi.Pointer<UA_ParsingResult> UA_ParsingResult_new() {
    return _UA_ParsingResult_new();
  }

  late final _UA_ParsingResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ParsingResult> Function()>>('UA_ParsingResult_new');
  late final _UA_ParsingResult_new = _UA_ParsingResult_newPtr.asFunction<ffi.Pointer<UA_ParsingResult> Function()>();

  int UA_ParsingResult_copy(
    ffi.Pointer<UA_ParsingResult> src,
    ffi.Pointer<UA_ParsingResult> dst,
  ) {
    return _UA_ParsingResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ParsingResult_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ParsingResult>, ffi.Pointer<UA_ParsingResult>)>>(
          'UA_ParsingResult_copy');
  late final _UA_ParsingResult_copy = _UA_ParsingResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ParsingResult>, ffi.Pointer<UA_ParsingResult>)>();

  void UA_ParsingResult_clear(
    ffi.Pointer<UA_ParsingResult> p,
  ) {
    return _UA_ParsingResult_clear(
      p,
    );
  }

  late final _UA_ParsingResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ParsingResult>)>>('UA_ParsingResult_clear');
  late final _UA_ParsingResult_clear =
      _UA_ParsingResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_ParsingResult>)>();

  void UA_ParsingResult_delete(
    ffi.Pointer<UA_ParsingResult> p,
  ) {
    return _UA_ParsingResult_delete(
      p,
    );
  }

  late final _UA_ParsingResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ParsingResult>)>>('UA_ParsingResult_delete');
  late final _UA_ParsingResult_delete =
      _UA_ParsingResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_ParsingResult>)>();

  bool UA_ParsingResult_equal(
    ffi.Pointer<UA_ParsingResult> p1,
    ffi.Pointer<UA_ParsingResult> p2,
  ) {
    return _UA_ParsingResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_ParsingResult_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ParsingResult>, ffi.Pointer<UA_ParsingResult>)>>(
          'UA_ParsingResult_equal');
  late final _UA_ParsingResult_equal = _UA_ParsingResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ParsingResult>, ffi.Pointer<UA_ParsingResult>)>();

  void UA_QueryFirstRequest_init(
    ffi.Pointer<UA_QueryFirstRequest> p,
  ) {
    return _UA_QueryFirstRequest_init(
      p,
    );
  }

  late final _UA_QueryFirstRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstRequest>)>>('UA_QueryFirstRequest_init');
  late final _UA_QueryFirstRequest_init =
      _UA_QueryFirstRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstRequest>)>();

  ffi.Pointer<UA_QueryFirstRequest> UA_QueryFirstRequest_new() {
    return _UA_QueryFirstRequest_new();
  }

  late final _UA_QueryFirstRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryFirstRequest> Function()>>('UA_QueryFirstRequest_new');
  late final _UA_QueryFirstRequest_new =
      _UA_QueryFirstRequest_newPtr.asFunction<ffi.Pointer<UA_QueryFirstRequest> Function()>();

  int UA_QueryFirstRequest_copy(
    ffi.Pointer<UA_QueryFirstRequest> src,
    ffi.Pointer<UA_QueryFirstRequest> dst,
  ) {
    return _UA_QueryFirstRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryFirstRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_QueryFirstRequest>, ffi.Pointer<UA_QueryFirstRequest>)>>('UA_QueryFirstRequest_copy');
  late final _UA_QueryFirstRequest_copy = _UA_QueryFirstRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QueryFirstRequest>, ffi.Pointer<UA_QueryFirstRequest>)>();

  void UA_QueryFirstRequest_clear(
    ffi.Pointer<UA_QueryFirstRequest> p,
  ) {
    return _UA_QueryFirstRequest_clear(
      p,
    );
  }

  late final _UA_QueryFirstRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstRequest>)>>('UA_QueryFirstRequest_clear');
  late final _UA_QueryFirstRequest_clear =
      _UA_QueryFirstRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstRequest>)>();

  void UA_QueryFirstRequest_delete(
    ffi.Pointer<UA_QueryFirstRequest> p,
  ) {
    return _UA_QueryFirstRequest_delete(
      p,
    );
  }

  late final _UA_QueryFirstRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstRequest>)>>('UA_QueryFirstRequest_delete');
  late final _UA_QueryFirstRequest_delete =
      _UA_QueryFirstRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstRequest>)>();

  bool UA_QueryFirstRequest_equal(
    ffi.Pointer<UA_QueryFirstRequest> p1,
    ffi.Pointer<UA_QueryFirstRequest> p2,
  ) {
    return _UA_QueryFirstRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryFirstRequest_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QueryFirstRequest>, ffi.Pointer<UA_QueryFirstRequest>)>>(
      'UA_QueryFirstRequest_equal');
  late final _UA_QueryFirstRequest_equal = _UA_QueryFirstRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QueryFirstRequest>, ffi.Pointer<UA_QueryFirstRequest>)>();

  void UA_QueryFirstResponse_init(
    ffi.Pointer<UA_QueryFirstResponse> p,
  ) {
    return _UA_QueryFirstResponse_init(
      p,
    );
  }

  late final _UA_QueryFirstResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstResponse>)>>('UA_QueryFirstResponse_init');
  late final _UA_QueryFirstResponse_init =
      _UA_QueryFirstResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstResponse>)>();

  ffi.Pointer<UA_QueryFirstResponse> UA_QueryFirstResponse_new() {
    return _UA_QueryFirstResponse_new();
  }

  late final _UA_QueryFirstResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryFirstResponse> Function()>>('UA_QueryFirstResponse_new');
  late final _UA_QueryFirstResponse_new =
      _UA_QueryFirstResponse_newPtr.asFunction<ffi.Pointer<UA_QueryFirstResponse> Function()>();

  int UA_QueryFirstResponse_copy(
    ffi.Pointer<UA_QueryFirstResponse> src,
    ffi.Pointer<UA_QueryFirstResponse> dst,
  ) {
    return _UA_QueryFirstResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryFirstResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_QueryFirstResponse>, ffi.Pointer<UA_QueryFirstResponse>)>>('UA_QueryFirstResponse_copy');
  late final _UA_QueryFirstResponse_copy = _UA_QueryFirstResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QueryFirstResponse>, ffi.Pointer<UA_QueryFirstResponse>)>();

  void UA_QueryFirstResponse_clear(
    ffi.Pointer<UA_QueryFirstResponse> p,
  ) {
    return _UA_QueryFirstResponse_clear(
      p,
    );
  }

  late final _UA_QueryFirstResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstResponse>)>>('UA_QueryFirstResponse_clear');
  late final _UA_QueryFirstResponse_clear =
      _UA_QueryFirstResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstResponse>)>();

  void UA_QueryFirstResponse_delete(
    ffi.Pointer<UA_QueryFirstResponse> p,
  ) {
    return _UA_QueryFirstResponse_delete(
      p,
    );
  }

  late final _UA_QueryFirstResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryFirstResponse>)>>(
          'UA_QueryFirstResponse_delete');
  late final _UA_QueryFirstResponse_delete =
      _UA_QueryFirstResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryFirstResponse>)>();

  bool UA_QueryFirstResponse_equal(
    ffi.Pointer<UA_QueryFirstResponse> p1,
    ffi.Pointer<UA_QueryFirstResponse> p2,
  ) {
    return _UA_QueryFirstResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryFirstResponse_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QueryFirstResponse>, ffi.Pointer<UA_QueryFirstResponse>)>>(
      'UA_QueryFirstResponse_equal');
  late final _UA_QueryFirstResponse_equal = _UA_QueryFirstResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QueryFirstResponse>, ffi.Pointer<UA_QueryFirstResponse>)>();

  void UA_QueryNextRequest_init(
    ffi.Pointer<UA_QueryNextRequest> p,
  ) {
    return _UA_QueryNextRequest_init(
      p,
    );
  }

  late final _UA_QueryNextRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextRequest>)>>('UA_QueryNextRequest_init');
  late final _UA_QueryNextRequest_init =
      _UA_QueryNextRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryNextRequest>)>();

  ffi.Pointer<UA_QueryNextRequest> UA_QueryNextRequest_new() {
    return _UA_QueryNextRequest_new();
  }

  late final _UA_QueryNextRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryNextRequest> Function()>>('UA_QueryNextRequest_new');
  late final _UA_QueryNextRequest_new =
      _UA_QueryNextRequest_newPtr.asFunction<ffi.Pointer<UA_QueryNextRequest> Function()>();

  int UA_QueryNextRequest_copy(
    ffi.Pointer<UA_QueryNextRequest> src,
    ffi.Pointer<UA_QueryNextRequest> dst,
  ) {
    return _UA_QueryNextRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryNextRequest_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_QueryNextRequest>, ffi.Pointer<UA_QueryNextRequest>)>>(
      'UA_QueryNextRequest_copy');
  late final _UA_QueryNextRequest_copy = _UA_QueryNextRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QueryNextRequest>, ffi.Pointer<UA_QueryNextRequest>)>();

  void UA_QueryNextRequest_clear(
    ffi.Pointer<UA_QueryNextRequest> p,
  ) {
    return _UA_QueryNextRequest_clear(
      p,
    );
  }

  late final _UA_QueryNextRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextRequest>)>>('UA_QueryNextRequest_clear');
  late final _UA_QueryNextRequest_clear =
      _UA_QueryNextRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryNextRequest>)>();

  void UA_QueryNextRequest_delete(
    ffi.Pointer<UA_QueryNextRequest> p,
  ) {
    return _UA_QueryNextRequest_delete(
      p,
    );
  }

  late final _UA_QueryNextRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextRequest>)>>('UA_QueryNextRequest_delete');
  late final _UA_QueryNextRequest_delete =
      _UA_QueryNextRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryNextRequest>)>();

  bool UA_QueryNextRequest_equal(
    ffi.Pointer<UA_QueryNextRequest> p1,
    ffi.Pointer<UA_QueryNextRequest> p2,
  ) {
    return _UA_QueryNextRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryNextRequest_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QueryNextRequest>, ffi.Pointer<UA_QueryNextRequest>)>>(
      'UA_QueryNextRequest_equal');
  late final _UA_QueryNextRequest_equal = _UA_QueryNextRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QueryNextRequest>, ffi.Pointer<UA_QueryNextRequest>)>();

  void UA_QueryNextResponse_init(
    ffi.Pointer<UA_QueryNextResponse> p,
  ) {
    return _UA_QueryNextResponse_init(
      p,
    );
  }

  late final _UA_QueryNextResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextResponse>)>>('UA_QueryNextResponse_init');
  late final _UA_QueryNextResponse_init =
      _UA_QueryNextResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_QueryNextResponse>)>();

  ffi.Pointer<UA_QueryNextResponse> UA_QueryNextResponse_new() {
    return _UA_QueryNextResponse_new();
  }

  late final _UA_QueryNextResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QueryNextResponse> Function()>>('UA_QueryNextResponse_new');
  late final _UA_QueryNextResponse_new =
      _UA_QueryNextResponse_newPtr.asFunction<ffi.Pointer<UA_QueryNextResponse> Function()>();

  int UA_QueryNextResponse_copy(
    ffi.Pointer<UA_QueryNextResponse> src,
    ffi.Pointer<UA_QueryNextResponse> dst,
  ) {
    return _UA_QueryNextResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_QueryNextResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_QueryNextResponse>, ffi.Pointer<UA_QueryNextResponse>)>>('UA_QueryNextResponse_copy');
  late final _UA_QueryNextResponse_copy = _UA_QueryNextResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_QueryNextResponse>, ffi.Pointer<UA_QueryNextResponse>)>();

  void UA_QueryNextResponse_clear(
    ffi.Pointer<UA_QueryNextResponse> p,
  ) {
    return _UA_QueryNextResponse_clear(
      p,
    );
  }

  late final _UA_QueryNextResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextResponse>)>>('UA_QueryNextResponse_clear');
  late final _UA_QueryNextResponse_clear =
      _UA_QueryNextResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_QueryNextResponse>)>();

  void UA_QueryNextResponse_delete(
    ffi.Pointer<UA_QueryNextResponse> p,
  ) {
    return _UA_QueryNextResponse_delete(
      p,
    );
  }

  late final _UA_QueryNextResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QueryNextResponse>)>>('UA_QueryNextResponse_delete');
  late final _UA_QueryNextResponse_delete =
      _UA_QueryNextResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_QueryNextResponse>)>();

  bool UA_QueryNextResponse_equal(
    ffi.Pointer<UA_QueryNextResponse> p1,
    ffi.Pointer<UA_QueryNextResponse> p2,
  ) {
    return _UA_QueryNextResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_QueryNextResponse_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QueryNextResponse>, ffi.Pointer<UA_QueryNextResponse>)>>(
      'UA_QueryNextResponse_equal');
  late final _UA_QueryNextResponse_equal = _UA_QueryNextResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_QueryNextResponse>, ffi.Pointer<UA_QueryNextResponse>)>();

  void UA_TimestampsToReturn_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TimestampsToReturn_init(
      p,
    );
  }

  late final _UA_TimestampsToReturn_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TimestampsToReturn_init');
  late final _UA_TimestampsToReturn_init =
      _UA_TimestampsToReturn_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_TimestampsToReturn_new() {
    return _UA_TimestampsToReturn_new();
  }

  late final _UA_TimestampsToReturn_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_TimestampsToReturn_new');
  late final _UA_TimestampsToReturn_new =
      _UA_TimestampsToReturn_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_TimestampsToReturn_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_TimestampsToReturn_copy(
      src,
      dst,
    );
  }

  late final _UA_TimestampsToReturn_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TimestampsToReturn_copy');
  late final _UA_TimestampsToReturn_copy = _UA_TimestampsToReturn_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TimestampsToReturn_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TimestampsToReturn_clear(
      p,
    );
  }

  late final _UA_TimestampsToReturn_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TimestampsToReturn_clear');
  late final _UA_TimestampsToReturn_clear =
      _UA_TimestampsToReturn_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_TimestampsToReturn_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_TimestampsToReturn_delete(
      p,
    );
  }

  late final _UA_TimestampsToReturn_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_TimestampsToReturn_delete');
  late final _UA_TimestampsToReturn_delete =
      _UA_TimestampsToReturn_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_TimestampsToReturn_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_TimestampsToReturn_equal(
      p1,
      p2,
    );
  }

  late final _UA_TimestampsToReturn_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_TimestampsToReturn_equal');
  late final _UA_TimestampsToReturn_equal = _UA_TimestampsToReturn_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ReadValueId_init(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_init(
      p,
    );
  }

  late final _UA_ReadValueId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>('UA_ReadValueId_init');
  late final _UA_ReadValueId_init = _UA_ReadValueId_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadValueId>)>();

  ffi.Pointer<UA_ReadValueId> UA_ReadValueId_new() {
    return _UA_ReadValueId_new();
  }

  late final _UA_ReadValueId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadValueId> Function()>>('UA_ReadValueId_new');
  late final _UA_ReadValueId_new = _UA_ReadValueId_newPtr.asFunction<ffi.Pointer<UA_ReadValueId> Function()>();

  int UA_ReadValueId_copy(
    ffi.Pointer<UA_ReadValueId> src,
    ffi.Pointer<UA_ReadValueId> dst,
  ) {
    return _UA_ReadValueId_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadValueId_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>>(
          'UA_ReadValueId_copy');
  late final _UA_ReadValueId_copy =
      _UA_ReadValueId_copyPtr.asFunction<int Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_clear(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_clear(
      p,
    );
  }

  late final _UA_ReadValueId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>('UA_ReadValueId_clear');
  late final _UA_ReadValueId_clear = _UA_ReadValueId_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_delete(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_delete(
      p,
    );
  }

  late final _UA_ReadValueId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>('UA_ReadValueId_delete');
  late final _UA_ReadValueId_delete =
      _UA_ReadValueId_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadValueId>)>();

  bool UA_ReadValueId_equal(
    ffi.Pointer<UA_ReadValueId> p1,
    ffi.Pointer<UA_ReadValueId> p2,
  ) {
    return _UA_ReadValueId_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadValueId_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>>(
          'UA_ReadValueId_equal');
  late final _UA_ReadValueId_equal =
      _UA_ReadValueId_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadRequest_init(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_init(
      p,
    );
  }

  late final _UA_ReadRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>('UA_ReadRequest_init');
  late final _UA_ReadRequest_init = _UA_ReadRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadRequest>)>();

  ffi.Pointer<UA_ReadRequest> UA_ReadRequest_new() {
    return _UA_ReadRequest_new();
  }

  late final _UA_ReadRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadRequest> Function()>>('UA_ReadRequest_new');
  late final _UA_ReadRequest_new = _UA_ReadRequest_newPtr.asFunction<ffi.Pointer<UA_ReadRequest> Function()>();

  int UA_ReadRequest_copy(
    ffi.Pointer<UA_ReadRequest> src,
    ffi.Pointer<UA_ReadRequest> dst,
  ) {
    return _UA_ReadRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadRequest_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>>(
          'UA_ReadRequest_copy');
  late final _UA_ReadRequest_copy =
      _UA_ReadRequest_copyPtr.asFunction<int Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_clear(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_clear(
      p,
    );
  }

  late final _UA_ReadRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>('UA_ReadRequest_clear');
  late final _UA_ReadRequest_clear = _UA_ReadRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_delete(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_delete(
      p,
    );
  }

  late final _UA_ReadRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>('UA_ReadRequest_delete');
  late final _UA_ReadRequest_delete =
      _UA_ReadRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadRequest>)>();

  bool UA_ReadRequest_equal(
    ffi.Pointer<UA_ReadRequest> p1,
    ffi.Pointer<UA_ReadRequest> p2,
  ) {
    return _UA_ReadRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>>(
          'UA_ReadRequest_equal');
  late final _UA_ReadRequest_equal =
      _UA_ReadRequest_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadResponse_init(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_init(
      p,
    );
  }

  late final _UA_ReadResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>('UA_ReadResponse_init');
  late final _UA_ReadResponse_init = _UA_ReadResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadResponse>)>();

  ffi.Pointer<UA_ReadResponse> UA_ReadResponse_new() {
    return _UA_ReadResponse_new();
  }

  late final _UA_ReadResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadResponse> Function()>>('UA_ReadResponse_new');
  late final _UA_ReadResponse_new = _UA_ReadResponse_newPtr.asFunction<ffi.Pointer<UA_ReadResponse> Function()>();

  int UA_ReadResponse_copy(
    ffi.Pointer<UA_ReadResponse> src,
    ffi.Pointer<UA_ReadResponse> dst,
  ) {
    return _UA_ReadResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadResponse_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>>(
          'UA_ReadResponse_copy');
  late final _UA_ReadResponse_copy =
      _UA_ReadResponse_copyPtr.asFunction<int Function(ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_clear(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_clear(
      p,
    );
  }

  late final _UA_ReadResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>('UA_ReadResponse_clear');
  late final _UA_ReadResponse_clear =
      _UA_ReadResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_delete(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_delete(
      p,
    );
  }

  late final _UA_ReadResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>('UA_ReadResponse_delete');
  late final _UA_ReadResponse_delete =
      _UA_ReadResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadResponse>)>();

  bool UA_ReadResponse_equal(
    ffi.Pointer<UA_ReadResponse> p1,
    ffi.Pointer<UA_ReadResponse> p2,
  ) {
    return _UA_ReadResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>>(
          'UA_ReadResponse_equal');
  late final _UA_ReadResponse_equal =
      _UA_ReadResponse_equalPtr.asFunction<bool Function(ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>();

  void UA_HistoryReadValueId_init(
    ffi.Pointer<UA_HistoryReadValueId> p,
  ) {
    return _UA_HistoryReadValueId_init(
      p,
    );
  }

  late final _UA_HistoryReadValueId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadValueId>)>>('UA_HistoryReadValueId_init');
  late final _UA_HistoryReadValueId_init =
      _UA_HistoryReadValueId_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadValueId>)>();

  ffi.Pointer<UA_HistoryReadValueId> UA_HistoryReadValueId_new() {
    return _UA_HistoryReadValueId_new();
  }

  late final _UA_HistoryReadValueId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryReadValueId> Function()>>('UA_HistoryReadValueId_new');
  late final _UA_HistoryReadValueId_new =
      _UA_HistoryReadValueId_newPtr.asFunction<ffi.Pointer<UA_HistoryReadValueId> Function()>();

  int UA_HistoryReadValueId_copy(
    ffi.Pointer<UA_HistoryReadValueId> src,
    ffi.Pointer<UA_HistoryReadValueId> dst,
  ) {
    return _UA_HistoryReadValueId_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryReadValueId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_HistoryReadValueId>, ffi.Pointer<UA_HistoryReadValueId>)>>('UA_HistoryReadValueId_copy');
  late final _UA_HistoryReadValueId_copy = _UA_HistoryReadValueId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryReadValueId>, ffi.Pointer<UA_HistoryReadValueId>)>();

  void UA_HistoryReadValueId_clear(
    ffi.Pointer<UA_HistoryReadValueId> p,
  ) {
    return _UA_HistoryReadValueId_clear(
      p,
    );
  }

  late final _UA_HistoryReadValueId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadValueId>)>>('UA_HistoryReadValueId_clear');
  late final _UA_HistoryReadValueId_clear =
      _UA_HistoryReadValueId_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadValueId>)>();

  void UA_HistoryReadValueId_delete(
    ffi.Pointer<UA_HistoryReadValueId> p,
  ) {
    return _UA_HistoryReadValueId_delete(
      p,
    );
  }

  late final _UA_HistoryReadValueId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadValueId>)>>(
          'UA_HistoryReadValueId_delete');
  late final _UA_HistoryReadValueId_delete =
      _UA_HistoryReadValueId_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadValueId>)>();

  bool UA_HistoryReadValueId_equal(
    ffi.Pointer<UA_HistoryReadValueId> p1,
    ffi.Pointer<UA_HistoryReadValueId> p2,
  ) {
    return _UA_HistoryReadValueId_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryReadValueId_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryReadValueId>, ffi.Pointer<UA_HistoryReadValueId>)>>(
      'UA_HistoryReadValueId_equal');
  late final _UA_HistoryReadValueId_equal = _UA_HistoryReadValueId_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryReadValueId>, ffi.Pointer<UA_HistoryReadValueId>)>();

  void UA_HistoryReadResult_init(
    ffi.Pointer<UA_HistoryReadResult> p,
  ) {
    return _UA_HistoryReadResult_init(
      p,
    );
  }

  late final _UA_HistoryReadResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResult>)>>('UA_HistoryReadResult_init');
  late final _UA_HistoryReadResult_init =
      _UA_HistoryReadResult_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResult>)>();

  ffi.Pointer<UA_HistoryReadResult> UA_HistoryReadResult_new() {
    return _UA_HistoryReadResult_new();
  }

  late final _UA_HistoryReadResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryReadResult> Function()>>('UA_HistoryReadResult_new');
  late final _UA_HistoryReadResult_new =
      _UA_HistoryReadResult_newPtr.asFunction<ffi.Pointer<UA_HistoryReadResult> Function()>();

  int UA_HistoryReadResult_copy(
    ffi.Pointer<UA_HistoryReadResult> src,
    ffi.Pointer<UA_HistoryReadResult> dst,
  ) {
    return _UA_HistoryReadResult_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryReadResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_HistoryReadResult>, ffi.Pointer<UA_HistoryReadResult>)>>('UA_HistoryReadResult_copy');
  late final _UA_HistoryReadResult_copy = _UA_HistoryReadResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryReadResult>, ffi.Pointer<UA_HistoryReadResult>)>();

  void UA_HistoryReadResult_clear(
    ffi.Pointer<UA_HistoryReadResult> p,
  ) {
    return _UA_HistoryReadResult_clear(
      p,
    );
  }

  late final _UA_HistoryReadResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResult>)>>('UA_HistoryReadResult_clear');
  late final _UA_HistoryReadResult_clear =
      _UA_HistoryReadResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResult>)>();

  void UA_HistoryReadResult_delete(
    ffi.Pointer<UA_HistoryReadResult> p,
  ) {
    return _UA_HistoryReadResult_delete(
      p,
    );
  }

  late final _UA_HistoryReadResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResult>)>>('UA_HistoryReadResult_delete');
  late final _UA_HistoryReadResult_delete =
      _UA_HistoryReadResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResult>)>();

  bool UA_HistoryReadResult_equal(
    ffi.Pointer<UA_HistoryReadResult> p1,
    ffi.Pointer<UA_HistoryReadResult> p2,
  ) {
    return _UA_HistoryReadResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryReadResult_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryReadResult>, ffi.Pointer<UA_HistoryReadResult>)>>(
      'UA_HistoryReadResult_equal');
  late final _UA_HistoryReadResult_equal = _UA_HistoryReadResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryReadResult>, ffi.Pointer<UA_HistoryReadResult>)>();

  void UA_ReadRawModifiedDetails_init(
    ffi.Pointer<UA_ReadRawModifiedDetails> p,
  ) {
    return _UA_ReadRawModifiedDetails_init(
      p,
    );
  }

  late final _UA_ReadRawModifiedDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>>(
          'UA_ReadRawModifiedDetails_init');
  late final _UA_ReadRawModifiedDetails_init =
      _UA_ReadRawModifiedDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>();

  ffi.Pointer<UA_ReadRawModifiedDetails> UA_ReadRawModifiedDetails_new() {
    return _UA_ReadRawModifiedDetails_new();
  }

  late final _UA_ReadRawModifiedDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadRawModifiedDetails> Function()>>('UA_ReadRawModifiedDetails_new');
  late final _UA_ReadRawModifiedDetails_new =
      _UA_ReadRawModifiedDetails_newPtr.asFunction<ffi.Pointer<UA_ReadRawModifiedDetails> Function()>();

  int UA_ReadRawModifiedDetails_copy(
    ffi.Pointer<UA_ReadRawModifiedDetails> src,
    ffi.Pointer<UA_ReadRawModifiedDetails> dst,
  ) {
    return _UA_ReadRawModifiedDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadRawModifiedDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadRawModifiedDetails>,
              ffi.Pointer<UA_ReadRawModifiedDetails>)>>('UA_ReadRawModifiedDetails_copy');
  late final _UA_ReadRawModifiedDetails_copy = _UA_ReadRawModifiedDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadRawModifiedDetails>, ffi.Pointer<UA_ReadRawModifiedDetails>)>();

  void UA_ReadRawModifiedDetails_clear(
    ffi.Pointer<UA_ReadRawModifiedDetails> p,
  ) {
    return _UA_ReadRawModifiedDetails_clear(
      p,
    );
  }

  late final _UA_ReadRawModifiedDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>>(
          'UA_ReadRawModifiedDetails_clear');
  late final _UA_ReadRawModifiedDetails_clear =
      _UA_ReadRawModifiedDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>();

  void UA_ReadRawModifiedDetails_delete(
    ffi.Pointer<UA_ReadRawModifiedDetails> p,
  ) {
    return _UA_ReadRawModifiedDetails_delete(
      p,
    );
  }

  late final _UA_ReadRawModifiedDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>>(
          'UA_ReadRawModifiedDetails_delete');
  late final _UA_ReadRawModifiedDetails_delete =
      _UA_ReadRawModifiedDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadRawModifiedDetails>)>();

  bool UA_ReadRawModifiedDetails_equal(
    ffi.Pointer<UA_ReadRawModifiedDetails> p1,
    ffi.Pointer<UA_ReadRawModifiedDetails> p2,
  ) {
    return _UA_ReadRawModifiedDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadRawModifiedDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReadRawModifiedDetails>,
              ffi.Pointer<UA_ReadRawModifiedDetails>)>>('UA_ReadRawModifiedDetails_equal');
  late final _UA_ReadRawModifiedDetails_equal = _UA_ReadRawModifiedDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReadRawModifiedDetails>, ffi.Pointer<UA_ReadRawModifiedDetails>)>();

  void UA_ReadAtTimeDetails_init(
    ffi.Pointer<UA_ReadAtTimeDetails> p,
  ) {
    return _UA_ReadAtTimeDetails_init(
      p,
    );
  }

  late final _UA_ReadAtTimeDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>>('UA_ReadAtTimeDetails_init');
  late final _UA_ReadAtTimeDetails_init =
      _UA_ReadAtTimeDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>();

  ffi.Pointer<UA_ReadAtTimeDetails> UA_ReadAtTimeDetails_new() {
    return _UA_ReadAtTimeDetails_new();
  }

  late final _UA_ReadAtTimeDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadAtTimeDetails> Function()>>('UA_ReadAtTimeDetails_new');
  late final _UA_ReadAtTimeDetails_new =
      _UA_ReadAtTimeDetails_newPtr.asFunction<ffi.Pointer<UA_ReadAtTimeDetails> Function()>();

  int UA_ReadAtTimeDetails_copy(
    ffi.Pointer<UA_ReadAtTimeDetails> src,
    ffi.Pointer<UA_ReadAtTimeDetails> dst,
  ) {
    return _UA_ReadAtTimeDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadAtTimeDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ReadAtTimeDetails>, ffi.Pointer<UA_ReadAtTimeDetails>)>>('UA_ReadAtTimeDetails_copy');
  late final _UA_ReadAtTimeDetails_copy = _UA_ReadAtTimeDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadAtTimeDetails>, ffi.Pointer<UA_ReadAtTimeDetails>)>();

  void UA_ReadAtTimeDetails_clear(
    ffi.Pointer<UA_ReadAtTimeDetails> p,
  ) {
    return _UA_ReadAtTimeDetails_clear(
      p,
    );
  }

  late final _UA_ReadAtTimeDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>>('UA_ReadAtTimeDetails_clear');
  late final _UA_ReadAtTimeDetails_clear =
      _UA_ReadAtTimeDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>();

  void UA_ReadAtTimeDetails_delete(
    ffi.Pointer<UA_ReadAtTimeDetails> p,
  ) {
    return _UA_ReadAtTimeDetails_delete(
      p,
    );
  }

  late final _UA_ReadAtTimeDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>>('UA_ReadAtTimeDetails_delete');
  late final _UA_ReadAtTimeDetails_delete =
      _UA_ReadAtTimeDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadAtTimeDetails>)>();

  bool UA_ReadAtTimeDetails_equal(
    ffi.Pointer<UA_ReadAtTimeDetails> p1,
    ffi.Pointer<UA_ReadAtTimeDetails> p2,
  ) {
    return _UA_ReadAtTimeDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadAtTimeDetails_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReadAtTimeDetails>, ffi.Pointer<UA_ReadAtTimeDetails>)>>(
      'UA_ReadAtTimeDetails_equal');
  late final _UA_ReadAtTimeDetails_equal = _UA_ReadAtTimeDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReadAtTimeDetails>, ffi.Pointer<UA_ReadAtTimeDetails>)>();

  void UA_ReadAnnotationDataDetails_init(
    ffi.Pointer<UA_ReadAnnotationDataDetails> p,
  ) {
    return _UA_ReadAnnotationDataDetails_init(
      p,
    );
  }

  late final _UA_ReadAnnotationDataDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>>(
          'UA_ReadAnnotationDataDetails_init');
  late final _UA_ReadAnnotationDataDetails_init =
      _UA_ReadAnnotationDataDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>();

  ffi.Pointer<UA_ReadAnnotationDataDetails> UA_ReadAnnotationDataDetails_new() {
    return _UA_ReadAnnotationDataDetails_new();
  }

  late final _UA_ReadAnnotationDataDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadAnnotationDataDetails> Function()>>(
          'UA_ReadAnnotationDataDetails_new');
  late final _UA_ReadAnnotationDataDetails_new =
      _UA_ReadAnnotationDataDetails_newPtr.asFunction<ffi.Pointer<UA_ReadAnnotationDataDetails> Function()>();

  int UA_ReadAnnotationDataDetails_copy(
    ffi.Pointer<UA_ReadAnnotationDataDetails> src,
    ffi.Pointer<UA_ReadAnnotationDataDetails> dst,
  ) {
    return _UA_ReadAnnotationDataDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadAnnotationDataDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadAnnotationDataDetails>,
              ffi.Pointer<UA_ReadAnnotationDataDetails>)>>('UA_ReadAnnotationDataDetails_copy');
  late final _UA_ReadAnnotationDataDetails_copy = _UA_ReadAnnotationDataDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadAnnotationDataDetails>, ffi.Pointer<UA_ReadAnnotationDataDetails>)>();

  void UA_ReadAnnotationDataDetails_clear(
    ffi.Pointer<UA_ReadAnnotationDataDetails> p,
  ) {
    return _UA_ReadAnnotationDataDetails_clear(
      p,
    );
  }

  late final _UA_ReadAnnotationDataDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>>(
          'UA_ReadAnnotationDataDetails_clear');
  late final _UA_ReadAnnotationDataDetails_clear =
      _UA_ReadAnnotationDataDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>();

  void UA_ReadAnnotationDataDetails_delete(
    ffi.Pointer<UA_ReadAnnotationDataDetails> p,
  ) {
    return _UA_ReadAnnotationDataDetails_delete(
      p,
    );
  }

  late final _UA_ReadAnnotationDataDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>>(
          'UA_ReadAnnotationDataDetails_delete');
  late final _UA_ReadAnnotationDataDetails_delete =
      _UA_ReadAnnotationDataDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadAnnotationDataDetails>)>();

  bool UA_ReadAnnotationDataDetails_equal(
    ffi.Pointer<UA_ReadAnnotationDataDetails> p1,
    ffi.Pointer<UA_ReadAnnotationDataDetails> p2,
  ) {
    return _UA_ReadAnnotationDataDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadAnnotationDataDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReadAnnotationDataDetails>,
              ffi.Pointer<UA_ReadAnnotationDataDetails>)>>('UA_ReadAnnotationDataDetails_equal');
  late final _UA_ReadAnnotationDataDetails_equal = _UA_ReadAnnotationDataDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReadAnnotationDataDetails>, ffi.Pointer<UA_ReadAnnotationDataDetails>)>();

  void UA_HistoryData_init(
    ffi.Pointer<UA_HistoryData> p,
  ) {
    return _UA_HistoryData_init(
      p,
    );
  }

  late final _UA_HistoryData_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryData>)>>('UA_HistoryData_init');
  late final _UA_HistoryData_init = _UA_HistoryData_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryData>)>();

  ffi.Pointer<UA_HistoryData> UA_HistoryData_new() {
    return _UA_HistoryData_new();
  }

  late final _UA_HistoryData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryData> Function()>>('UA_HistoryData_new');
  late final _UA_HistoryData_new = _UA_HistoryData_newPtr.asFunction<ffi.Pointer<UA_HistoryData> Function()>();

  int UA_HistoryData_copy(
    ffi.Pointer<UA_HistoryData> src,
    ffi.Pointer<UA_HistoryData> dst,
  ) {
    return _UA_HistoryData_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryData_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_HistoryData>, ffi.Pointer<UA_HistoryData>)>>(
          'UA_HistoryData_copy');
  late final _UA_HistoryData_copy =
      _UA_HistoryData_copyPtr.asFunction<int Function(ffi.Pointer<UA_HistoryData>, ffi.Pointer<UA_HistoryData>)>();

  void UA_HistoryData_clear(
    ffi.Pointer<UA_HistoryData> p,
  ) {
    return _UA_HistoryData_clear(
      p,
    );
  }

  late final _UA_HistoryData_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryData>)>>('UA_HistoryData_clear');
  late final _UA_HistoryData_clear = _UA_HistoryData_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryData>)>();

  void UA_HistoryData_delete(
    ffi.Pointer<UA_HistoryData> p,
  ) {
    return _UA_HistoryData_delete(
      p,
    );
  }

  late final _UA_HistoryData_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryData>)>>('UA_HistoryData_delete');
  late final _UA_HistoryData_delete =
      _UA_HistoryData_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryData>)>();

  bool UA_HistoryData_equal(
    ffi.Pointer<UA_HistoryData> p1,
    ffi.Pointer<UA_HistoryData> p2,
  ) {
    return _UA_HistoryData_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryData_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryData>, ffi.Pointer<UA_HistoryData>)>>(
          'UA_HistoryData_equal');
  late final _UA_HistoryData_equal =
      _UA_HistoryData_equalPtr.asFunction<bool Function(ffi.Pointer<UA_HistoryData>, ffi.Pointer<UA_HistoryData>)>();

  void UA_HistoryReadRequest_init(
    ffi.Pointer<UA_HistoryReadRequest> p,
  ) {
    return _UA_HistoryReadRequest_init(
      p,
    );
  }

  late final _UA_HistoryReadRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadRequest>)>>('UA_HistoryReadRequest_init');
  late final _UA_HistoryReadRequest_init =
      _UA_HistoryReadRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadRequest>)>();

  ffi.Pointer<UA_HistoryReadRequest> UA_HistoryReadRequest_new() {
    return _UA_HistoryReadRequest_new();
  }

  late final _UA_HistoryReadRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryReadRequest> Function()>>('UA_HistoryReadRequest_new');
  late final _UA_HistoryReadRequest_new =
      _UA_HistoryReadRequest_newPtr.asFunction<ffi.Pointer<UA_HistoryReadRequest> Function()>();

  int UA_HistoryReadRequest_copy(
    ffi.Pointer<UA_HistoryReadRequest> src,
    ffi.Pointer<UA_HistoryReadRequest> dst,
  ) {
    return _UA_HistoryReadRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryReadRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_HistoryReadRequest>, ffi.Pointer<UA_HistoryReadRequest>)>>('UA_HistoryReadRequest_copy');
  late final _UA_HistoryReadRequest_copy = _UA_HistoryReadRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryReadRequest>, ffi.Pointer<UA_HistoryReadRequest>)>();

  void UA_HistoryReadRequest_clear(
    ffi.Pointer<UA_HistoryReadRequest> p,
  ) {
    return _UA_HistoryReadRequest_clear(
      p,
    );
  }

  late final _UA_HistoryReadRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadRequest>)>>('UA_HistoryReadRequest_clear');
  late final _UA_HistoryReadRequest_clear =
      _UA_HistoryReadRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadRequest>)>();

  void UA_HistoryReadRequest_delete(
    ffi.Pointer<UA_HistoryReadRequest> p,
  ) {
    return _UA_HistoryReadRequest_delete(
      p,
    );
  }

  late final _UA_HistoryReadRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadRequest>)>>(
          'UA_HistoryReadRequest_delete');
  late final _UA_HistoryReadRequest_delete =
      _UA_HistoryReadRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadRequest>)>();

  bool UA_HistoryReadRequest_equal(
    ffi.Pointer<UA_HistoryReadRequest> p1,
    ffi.Pointer<UA_HistoryReadRequest> p2,
  ) {
    return _UA_HistoryReadRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryReadRequest_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryReadRequest>, ffi.Pointer<UA_HistoryReadRequest>)>>(
      'UA_HistoryReadRequest_equal');
  late final _UA_HistoryReadRequest_equal = _UA_HistoryReadRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryReadRequest>, ffi.Pointer<UA_HistoryReadRequest>)>();

  void UA_HistoryReadResponse_init(
    ffi.Pointer<UA_HistoryReadResponse> p,
  ) {
    return _UA_HistoryReadResponse_init(
      p,
    );
  }

  late final _UA_HistoryReadResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResponse>)>>(
          'UA_HistoryReadResponse_init');
  late final _UA_HistoryReadResponse_init =
      _UA_HistoryReadResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResponse>)>();

  ffi.Pointer<UA_HistoryReadResponse> UA_HistoryReadResponse_new() {
    return _UA_HistoryReadResponse_new();
  }

  late final _UA_HistoryReadResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryReadResponse> Function()>>('UA_HistoryReadResponse_new');
  late final _UA_HistoryReadResponse_new =
      _UA_HistoryReadResponse_newPtr.asFunction<ffi.Pointer<UA_HistoryReadResponse> Function()>();

  int UA_HistoryReadResponse_copy(
    ffi.Pointer<UA_HistoryReadResponse> src,
    ffi.Pointer<UA_HistoryReadResponse> dst,
  ) {
    return _UA_HistoryReadResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryReadResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryReadResponse>,
              ffi.Pointer<UA_HistoryReadResponse>)>>('UA_HistoryReadResponse_copy');
  late final _UA_HistoryReadResponse_copy = _UA_HistoryReadResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryReadResponse>, ffi.Pointer<UA_HistoryReadResponse>)>();

  void UA_HistoryReadResponse_clear(
    ffi.Pointer<UA_HistoryReadResponse> p,
  ) {
    return _UA_HistoryReadResponse_clear(
      p,
    );
  }

  late final _UA_HistoryReadResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResponse>)>>(
          'UA_HistoryReadResponse_clear');
  late final _UA_HistoryReadResponse_clear =
      _UA_HistoryReadResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResponse>)>();

  void UA_HistoryReadResponse_delete(
    ffi.Pointer<UA_HistoryReadResponse> p,
  ) {
    return _UA_HistoryReadResponse_delete(
      p,
    );
  }

  late final _UA_HistoryReadResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryReadResponse>)>>(
          'UA_HistoryReadResponse_delete');
  late final _UA_HistoryReadResponse_delete =
      _UA_HistoryReadResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryReadResponse>)>();

  bool UA_HistoryReadResponse_equal(
    ffi.Pointer<UA_HistoryReadResponse> p1,
    ffi.Pointer<UA_HistoryReadResponse> p2,
  ) {
    return _UA_HistoryReadResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryReadResponse_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryReadResponse>, ffi.Pointer<UA_HistoryReadResponse>)>>(
      'UA_HistoryReadResponse_equal');
  late final _UA_HistoryReadResponse_equal = _UA_HistoryReadResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryReadResponse>, ffi.Pointer<UA_HistoryReadResponse>)>();

  void UA_WriteValue_init(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_init(
      p,
    );
  }

  late final _UA_WriteValue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>('UA_WriteValue_init');
  late final _UA_WriteValue_init = _UA_WriteValue_initPtr.asFunction<void Function(ffi.Pointer<UA_WriteValue>)>();

  ffi.Pointer<UA_WriteValue> UA_WriteValue_new() {
    return _UA_WriteValue_new();
  }

  late final _UA_WriteValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteValue> Function()>>('UA_WriteValue_new');
  late final _UA_WriteValue_new = _UA_WriteValue_newPtr.asFunction<ffi.Pointer<UA_WriteValue> Function()>();

  int UA_WriteValue_copy(
    ffi.Pointer<UA_WriteValue> src,
    ffi.Pointer<UA_WriteValue> dst,
  ) {
    return _UA_WriteValue_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteValue_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>>(
          'UA_WriteValue_copy');
  late final _UA_WriteValue_copy =
      _UA_WriteValue_copyPtr.asFunction<int Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_clear(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_clear(
      p,
    );
  }

  late final _UA_WriteValue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>('UA_WriteValue_clear');
  late final _UA_WriteValue_clear = _UA_WriteValue_clearPtr.asFunction<void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_delete(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_delete(
      p,
    );
  }

  late final _UA_WriteValue_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>('UA_WriteValue_delete');
  late final _UA_WriteValue_delete = _UA_WriteValue_deletePtr.asFunction<void Function(ffi.Pointer<UA_WriteValue>)>();

  bool UA_WriteValue_equal(
    ffi.Pointer<UA_WriteValue> p1,
    ffi.Pointer<UA_WriteValue> p2,
  ) {
    return _UA_WriteValue_equal(
      p1,
      p2,
    );
  }

  late final _UA_WriteValue_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>>(
          'UA_WriteValue_equal');
  late final _UA_WriteValue_equal =
      _UA_WriteValue_equalPtr.asFunction<bool Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteRequest_init(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_init(
      p,
    );
  }

  late final _UA_WriteRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>('UA_WriteRequest_init');
  late final _UA_WriteRequest_init = _UA_WriteRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_WriteRequest>)>();

  ffi.Pointer<UA_WriteRequest> UA_WriteRequest_new() {
    return _UA_WriteRequest_new();
  }

  late final _UA_WriteRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteRequest> Function()>>('UA_WriteRequest_new');
  late final _UA_WriteRequest_new = _UA_WriteRequest_newPtr.asFunction<ffi.Pointer<UA_WriteRequest> Function()>();

  int UA_WriteRequest_copy(
    ffi.Pointer<UA_WriteRequest> src,
    ffi.Pointer<UA_WriteRequest> dst,
  ) {
    return _UA_WriteRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteRequest_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>>(
          'UA_WriteRequest_copy');
  late final _UA_WriteRequest_copy =
      _UA_WriteRequest_copyPtr.asFunction<int Function(ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_clear(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_clear(
      p,
    );
  }

  late final _UA_WriteRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>('UA_WriteRequest_clear');
  late final _UA_WriteRequest_clear =
      _UA_WriteRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_delete(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_delete(
      p,
    );
  }

  late final _UA_WriteRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>('UA_WriteRequest_delete');
  late final _UA_WriteRequest_delete =
      _UA_WriteRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_WriteRequest>)>();

  bool UA_WriteRequest_equal(
    ffi.Pointer<UA_WriteRequest> p1,
    ffi.Pointer<UA_WriteRequest> p2,
  ) {
    return _UA_WriteRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_WriteRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>>(
          'UA_WriteRequest_equal');
  late final _UA_WriteRequest_equal =
      _UA_WriteRequest_equalPtr.asFunction<bool Function(ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteResponse_init(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_init(
      p,
    );
  }

  late final _UA_WriteResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>('UA_WriteResponse_init');
  late final _UA_WriteResponse_init =
      _UA_WriteResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_WriteResponse>)>();

  ffi.Pointer<UA_WriteResponse> UA_WriteResponse_new() {
    return _UA_WriteResponse_new();
  }

  late final _UA_WriteResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteResponse> Function()>>('UA_WriteResponse_new');
  late final _UA_WriteResponse_new = _UA_WriteResponse_newPtr.asFunction<ffi.Pointer<UA_WriteResponse> Function()>();

  int UA_WriteResponse_copy(
    ffi.Pointer<UA_WriteResponse> src,
    ffi.Pointer<UA_WriteResponse> dst,
  ) {
    return _UA_WriteResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteResponse_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>>(
          'UA_WriteResponse_copy');
  late final _UA_WriteResponse_copy = _UA_WriteResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_clear(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_clear(
      p,
    );
  }

  late final _UA_WriteResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>('UA_WriteResponse_clear');
  late final _UA_WriteResponse_clear =
      _UA_WriteResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_delete(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_delete(
      p,
    );
  }

  late final _UA_WriteResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>('UA_WriteResponse_delete');
  late final _UA_WriteResponse_delete =
      _UA_WriteResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_WriteResponse>)>();

  bool UA_WriteResponse_equal(
    ffi.Pointer<UA_WriteResponse> p1,
    ffi.Pointer<UA_WriteResponse> p2,
  ) {
    return _UA_WriteResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_WriteResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>>(
          'UA_WriteResponse_equal');
  late final _UA_WriteResponse_equal = _UA_WriteResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>();

  void UA_HistoryUpdateDetails_init(
    ffi.Pointer<UA_HistoryUpdateDetails> p,
  ) {
    return _UA_HistoryUpdateDetails_init(
      p,
    );
  }

  late final _UA_HistoryUpdateDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>>(
          'UA_HistoryUpdateDetails_init');
  late final _UA_HistoryUpdateDetails_init =
      _UA_HistoryUpdateDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>();

  ffi.Pointer<UA_HistoryUpdateDetails> UA_HistoryUpdateDetails_new() {
    return _UA_HistoryUpdateDetails_new();
  }

  late final _UA_HistoryUpdateDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryUpdateDetails> Function()>>('UA_HistoryUpdateDetails_new');
  late final _UA_HistoryUpdateDetails_new =
      _UA_HistoryUpdateDetails_newPtr.asFunction<ffi.Pointer<UA_HistoryUpdateDetails> Function()>();

  int UA_HistoryUpdateDetails_copy(
    ffi.Pointer<UA_HistoryUpdateDetails> src,
    ffi.Pointer<UA_HistoryUpdateDetails> dst,
  ) {
    return _UA_HistoryUpdateDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryUpdateDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryUpdateDetails>,
              ffi.Pointer<UA_HistoryUpdateDetails>)>>('UA_HistoryUpdateDetails_copy');
  late final _UA_HistoryUpdateDetails_copy = _UA_HistoryUpdateDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryUpdateDetails>, ffi.Pointer<UA_HistoryUpdateDetails>)>();

  void UA_HistoryUpdateDetails_clear(
    ffi.Pointer<UA_HistoryUpdateDetails> p,
  ) {
    return _UA_HistoryUpdateDetails_clear(
      p,
    );
  }

  late final _UA_HistoryUpdateDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>>(
          'UA_HistoryUpdateDetails_clear');
  late final _UA_HistoryUpdateDetails_clear =
      _UA_HistoryUpdateDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>();

  void UA_HistoryUpdateDetails_delete(
    ffi.Pointer<UA_HistoryUpdateDetails> p,
  ) {
    return _UA_HistoryUpdateDetails_delete(
      p,
    );
  }

  late final _UA_HistoryUpdateDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>>(
          'UA_HistoryUpdateDetails_delete');
  late final _UA_HistoryUpdateDetails_delete =
      _UA_HistoryUpdateDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateDetails>)>();

  bool UA_HistoryUpdateDetails_equal(
    ffi.Pointer<UA_HistoryUpdateDetails> p1,
    ffi.Pointer<UA_HistoryUpdateDetails> p2,
  ) {
    return _UA_HistoryUpdateDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryUpdateDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_HistoryUpdateDetails>,
              ffi.Pointer<UA_HistoryUpdateDetails>)>>('UA_HistoryUpdateDetails_equal');
  late final _UA_HistoryUpdateDetails_equal = _UA_HistoryUpdateDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryUpdateDetails>, ffi.Pointer<UA_HistoryUpdateDetails>)>();

  void UA_HistoryUpdateType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_HistoryUpdateType_init(
      p,
    );
  }

  late final _UA_HistoryUpdateType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_HistoryUpdateType_init');
  late final _UA_HistoryUpdateType_init =
      _UA_HistoryUpdateType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_HistoryUpdateType_new() {
    return _UA_HistoryUpdateType_new();
  }

  late final _UA_HistoryUpdateType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_HistoryUpdateType_new');
  late final _UA_HistoryUpdateType_new =
      _UA_HistoryUpdateType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_HistoryUpdateType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_HistoryUpdateType_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryUpdateType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_HistoryUpdateType_copy');
  late final _UA_HistoryUpdateType_copy = _UA_HistoryUpdateType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_HistoryUpdateType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_HistoryUpdateType_clear(
      p,
    );
  }

  late final _UA_HistoryUpdateType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_HistoryUpdateType_clear');
  late final _UA_HistoryUpdateType_clear =
      _UA_HistoryUpdateType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_HistoryUpdateType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_HistoryUpdateType_delete(
      p,
    );
  }

  late final _UA_HistoryUpdateType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_HistoryUpdateType_delete');
  late final _UA_HistoryUpdateType_delete =
      _UA_HistoryUpdateType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_HistoryUpdateType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_HistoryUpdateType_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryUpdateType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_HistoryUpdateType_equal');
  late final _UA_HistoryUpdateType_equal = _UA_HistoryUpdateType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PerformUpdateType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PerformUpdateType_init(
      p,
    );
  }

  late final _UA_PerformUpdateType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PerformUpdateType_init');
  late final _UA_PerformUpdateType_init =
      _UA_PerformUpdateType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_PerformUpdateType_new() {
    return _UA_PerformUpdateType_new();
  }

  late final _UA_PerformUpdateType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_PerformUpdateType_new');
  late final _UA_PerformUpdateType_new =
      _UA_PerformUpdateType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_PerformUpdateType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_PerformUpdateType_copy(
      src,
      dst,
    );
  }

  late final _UA_PerformUpdateType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PerformUpdateType_copy');
  late final _UA_PerformUpdateType_copy = _UA_PerformUpdateType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PerformUpdateType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PerformUpdateType_clear(
      p,
    );
  }

  late final _UA_PerformUpdateType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PerformUpdateType_clear');
  late final _UA_PerformUpdateType_clear =
      _UA_PerformUpdateType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_PerformUpdateType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_PerformUpdateType_delete(
      p,
    );
  }

  late final _UA_PerformUpdateType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_PerformUpdateType_delete');
  late final _UA_PerformUpdateType_delete =
      _UA_PerformUpdateType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_PerformUpdateType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_PerformUpdateType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PerformUpdateType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_PerformUpdateType_equal');
  late final _UA_PerformUpdateType_equal = _UA_PerformUpdateType_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_UpdateDataDetails_init(
    ffi.Pointer<UA_UpdateDataDetails> p,
  ) {
    return _UA_UpdateDataDetails_init(
      p,
    );
  }

  late final _UA_UpdateDataDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateDataDetails>)>>('UA_UpdateDataDetails_init');
  late final _UA_UpdateDataDetails_init =
      _UA_UpdateDataDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_UpdateDataDetails>)>();

  ffi.Pointer<UA_UpdateDataDetails> UA_UpdateDataDetails_new() {
    return _UA_UpdateDataDetails_new();
  }

  late final _UA_UpdateDataDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UpdateDataDetails> Function()>>('UA_UpdateDataDetails_new');
  late final _UA_UpdateDataDetails_new =
      _UA_UpdateDataDetails_newPtr.asFunction<ffi.Pointer<UA_UpdateDataDetails> Function()>();

  int UA_UpdateDataDetails_copy(
    ffi.Pointer<UA_UpdateDataDetails> src,
    ffi.Pointer<UA_UpdateDataDetails> dst,
  ) {
    return _UA_UpdateDataDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_UpdateDataDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UpdateDataDetails>, ffi.Pointer<UA_UpdateDataDetails>)>>('UA_UpdateDataDetails_copy');
  late final _UA_UpdateDataDetails_copy = _UA_UpdateDataDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UpdateDataDetails>, ffi.Pointer<UA_UpdateDataDetails>)>();

  void UA_UpdateDataDetails_clear(
    ffi.Pointer<UA_UpdateDataDetails> p,
  ) {
    return _UA_UpdateDataDetails_clear(
      p,
    );
  }

  late final _UA_UpdateDataDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateDataDetails>)>>('UA_UpdateDataDetails_clear');
  late final _UA_UpdateDataDetails_clear =
      _UA_UpdateDataDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_UpdateDataDetails>)>();

  void UA_UpdateDataDetails_delete(
    ffi.Pointer<UA_UpdateDataDetails> p,
  ) {
    return _UA_UpdateDataDetails_delete(
      p,
    );
  }

  late final _UA_UpdateDataDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateDataDetails>)>>('UA_UpdateDataDetails_delete');
  late final _UA_UpdateDataDetails_delete =
      _UA_UpdateDataDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_UpdateDataDetails>)>();

  bool UA_UpdateDataDetails_equal(
    ffi.Pointer<UA_UpdateDataDetails> p1,
    ffi.Pointer<UA_UpdateDataDetails> p2,
  ) {
    return _UA_UpdateDataDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_UpdateDataDetails_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UpdateDataDetails>, ffi.Pointer<UA_UpdateDataDetails>)>>(
      'UA_UpdateDataDetails_equal');
  late final _UA_UpdateDataDetails_equal = _UA_UpdateDataDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UpdateDataDetails>, ffi.Pointer<UA_UpdateDataDetails>)>();

  void UA_UpdateStructureDataDetails_init(
    ffi.Pointer<UA_UpdateStructureDataDetails> p,
  ) {
    return _UA_UpdateStructureDataDetails_init(
      p,
    );
  }

  late final _UA_UpdateStructureDataDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>>(
          'UA_UpdateStructureDataDetails_init');
  late final _UA_UpdateStructureDataDetails_init =
      _UA_UpdateStructureDataDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>();

  ffi.Pointer<UA_UpdateStructureDataDetails> UA_UpdateStructureDataDetails_new() {
    return _UA_UpdateStructureDataDetails_new();
  }

  late final _UA_UpdateStructureDataDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UpdateStructureDataDetails> Function()>>(
          'UA_UpdateStructureDataDetails_new');
  late final _UA_UpdateStructureDataDetails_new =
      _UA_UpdateStructureDataDetails_newPtr.asFunction<ffi.Pointer<UA_UpdateStructureDataDetails> Function()>();

  int UA_UpdateStructureDataDetails_copy(
    ffi.Pointer<UA_UpdateStructureDataDetails> src,
    ffi.Pointer<UA_UpdateStructureDataDetails> dst,
  ) {
    return _UA_UpdateStructureDataDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_UpdateStructureDataDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UpdateStructureDataDetails>,
              ffi.Pointer<UA_UpdateStructureDataDetails>)>>('UA_UpdateStructureDataDetails_copy');
  late final _UA_UpdateStructureDataDetails_copy = _UA_UpdateStructureDataDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UpdateStructureDataDetails>, ffi.Pointer<UA_UpdateStructureDataDetails>)>();

  void UA_UpdateStructureDataDetails_clear(
    ffi.Pointer<UA_UpdateStructureDataDetails> p,
  ) {
    return _UA_UpdateStructureDataDetails_clear(
      p,
    );
  }

  late final _UA_UpdateStructureDataDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>>(
          'UA_UpdateStructureDataDetails_clear');
  late final _UA_UpdateStructureDataDetails_clear =
      _UA_UpdateStructureDataDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>();

  void UA_UpdateStructureDataDetails_delete(
    ffi.Pointer<UA_UpdateStructureDataDetails> p,
  ) {
    return _UA_UpdateStructureDataDetails_delete(
      p,
    );
  }

  late final _UA_UpdateStructureDataDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>>(
          'UA_UpdateStructureDataDetails_delete');
  late final _UA_UpdateStructureDataDetails_delete =
      _UA_UpdateStructureDataDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_UpdateStructureDataDetails>)>();

  bool UA_UpdateStructureDataDetails_equal(
    ffi.Pointer<UA_UpdateStructureDataDetails> p1,
    ffi.Pointer<UA_UpdateStructureDataDetails> p2,
  ) {
    return _UA_UpdateStructureDataDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_UpdateStructureDataDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UpdateStructureDataDetails>,
              ffi.Pointer<UA_UpdateStructureDataDetails>)>>('UA_UpdateStructureDataDetails_equal');
  late final _UA_UpdateStructureDataDetails_equal = _UA_UpdateStructureDataDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UpdateStructureDataDetails>, ffi.Pointer<UA_UpdateStructureDataDetails>)>();

  void UA_DeleteRawModifiedDetails_init(
    ffi.Pointer<UA_DeleteRawModifiedDetails> p,
  ) {
    return _UA_DeleteRawModifiedDetails_init(
      p,
    );
  }

  late final _UA_DeleteRawModifiedDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>>(
          'UA_DeleteRawModifiedDetails_init');
  late final _UA_DeleteRawModifiedDetails_init =
      _UA_DeleteRawModifiedDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>();

  ffi.Pointer<UA_DeleteRawModifiedDetails> UA_DeleteRawModifiedDetails_new() {
    return _UA_DeleteRawModifiedDetails_new();
  }

  late final _UA_DeleteRawModifiedDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteRawModifiedDetails> Function()>>(
          'UA_DeleteRawModifiedDetails_new');
  late final _UA_DeleteRawModifiedDetails_new =
      _UA_DeleteRawModifiedDetails_newPtr.asFunction<ffi.Pointer<UA_DeleteRawModifiedDetails> Function()>();

  int UA_DeleteRawModifiedDetails_copy(
    ffi.Pointer<UA_DeleteRawModifiedDetails> src,
    ffi.Pointer<UA_DeleteRawModifiedDetails> dst,
  ) {
    return _UA_DeleteRawModifiedDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteRawModifiedDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteRawModifiedDetails>,
              ffi.Pointer<UA_DeleteRawModifiedDetails>)>>('UA_DeleteRawModifiedDetails_copy');
  late final _UA_DeleteRawModifiedDetails_copy = _UA_DeleteRawModifiedDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteRawModifiedDetails>, ffi.Pointer<UA_DeleteRawModifiedDetails>)>();

  void UA_DeleteRawModifiedDetails_clear(
    ffi.Pointer<UA_DeleteRawModifiedDetails> p,
  ) {
    return _UA_DeleteRawModifiedDetails_clear(
      p,
    );
  }

  late final _UA_DeleteRawModifiedDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>>(
          'UA_DeleteRawModifiedDetails_clear');
  late final _UA_DeleteRawModifiedDetails_clear =
      _UA_DeleteRawModifiedDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>();

  void UA_DeleteRawModifiedDetails_delete(
    ffi.Pointer<UA_DeleteRawModifiedDetails> p,
  ) {
    return _UA_DeleteRawModifiedDetails_delete(
      p,
    );
  }

  late final _UA_DeleteRawModifiedDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>>(
          'UA_DeleteRawModifiedDetails_delete');
  late final _UA_DeleteRawModifiedDetails_delete =
      _UA_DeleteRawModifiedDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteRawModifiedDetails>)>();

  bool UA_DeleteRawModifiedDetails_equal(
    ffi.Pointer<UA_DeleteRawModifiedDetails> p1,
    ffi.Pointer<UA_DeleteRawModifiedDetails> p2,
  ) {
    return _UA_DeleteRawModifiedDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteRawModifiedDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteRawModifiedDetails>,
              ffi.Pointer<UA_DeleteRawModifiedDetails>)>>('UA_DeleteRawModifiedDetails_equal');
  late final _UA_DeleteRawModifiedDetails_equal = _UA_DeleteRawModifiedDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteRawModifiedDetails>, ffi.Pointer<UA_DeleteRawModifiedDetails>)>();

  void UA_DeleteAtTimeDetails_init(
    ffi.Pointer<UA_DeleteAtTimeDetails> p,
  ) {
    return _UA_DeleteAtTimeDetails_init(
      p,
    );
  }

  late final _UA_DeleteAtTimeDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>>(
          'UA_DeleteAtTimeDetails_init');
  late final _UA_DeleteAtTimeDetails_init =
      _UA_DeleteAtTimeDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>();

  ffi.Pointer<UA_DeleteAtTimeDetails> UA_DeleteAtTimeDetails_new() {
    return _UA_DeleteAtTimeDetails_new();
  }

  late final _UA_DeleteAtTimeDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteAtTimeDetails> Function()>>('UA_DeleteAtTimeDetails_new');
  late final _UA_DeleteAtTimeDetails_new =
      _UA_DeleteAtTimeDetails_newPtr.asFunction<ffi.Pointer<UA_DeleteAtTimeDetails> Function()>();

  int UA_DeleteAtTimeDetails_copy(
    ffi.Pointer<UA_DeleteAtTimeDetails> src,
    ffi.Pointer<UA_DeleteAtTimeDetails> dst,
  ) {
    return _UA_DeleteAtTimeDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteAtTimeDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteAtTimeDetails>,
              ffi.Pointer<UA_DeleteAtTimeDetails>)>>('UA_DeleteAtTimeDetails_copy');
  late final _UA_DeleteAtTimeDetails_copy = _UA_DeleteAtTimeDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteAtTimeDetails>, ffi.Pointer<UA_DeleteAtTimeDetails>)>();

  void UA_DeleteAtTimeDetails_clear(
    ffi.Pointer<UA_DeleteAtTimeDetails> p,
  ) {
    return _UA_DeleteAtTimeDetails_clear(
      p,
    );
  }

  late final _UA_DeleteAtTimeDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>>(
          'UA_DeleteAtTimeDetails_clear');
  late final _UA_DeleteAtTimeDetails_clear =
      _UA_DeleteAtTimeDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>();

  void UA_DeleteAtTimeDetails_delete(
    ffi.Pointer<UA_DeleteAtTimeDetails> p,
  ) {
    return _UA_DeleteAtTimeDetails_delete(
      p,
    );
  }

  late final _UA_DeleteAtTimeDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>>(
          'UA_DeleteAtTimeDetails_delete');
  late final _UA_DeleteAtTimeDetails_delete =
      _UA_DeleteAtTimeDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteAtTimeDetails>)>();

  bool UA_DeleteAtTimeDetails_equal(
    ffi.Pointer<UA_DeleteAtTimeDetails> p1,
    ffi.Pointer<UA_DeleteAtTimeDetails> p2,
  ) {
    return _UA_DeleteAtTimeDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteAtTimeDetails_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DeleteAtTimeDetails>, ffi.Pointer<UA_DeleteAtTimeDetails>)>>(
      'UA_DeleteAtTimeDetails_equal');
  late final _UA_DeleteAtTimeDetails_equal = _UA_DeleteAtTimeDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteAtTimeDetails>, ffi.Pointer<UA_DeleteAtTimeDetails>)>();

  void UA_DeleteEventDetails_init(
    ffi.Pointer<UA_DeleteEventDetails> p,
  ) {
    return _UA_DeleteEventDetails_init(
      p,
    );
  }

  late final _UA_DeleteEventDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteEventDetails>)>>('UA_DeleteEventDetails_init');
  late final _UA_DeleteEventDetails_init =
      _UA_DeleteEventDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteEventDetails>)>();

  ffi.Pointer<UA_DeleteEventDetails> UA_DeleteEventDetails_new() {
    return _UA_DeleteEventDetails_new();
  }

  late final _UA_DeleteEventDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteEventDetails> Function()>>('UA_DeleteEventDetails_new');
  late final _UA_DeleteEventDetails_new =
      _UA_DeleteEventDetails_newPtr.asFunction<ffi.Pointer<UA_DeleteEventDetails> Function()>();

  int UA_DeleteEventDetails_copy(
    ffi.Pointer<UA_DeleteEventDetails> src,
    ffi.Pointer<UA_DeleteEventDetails> dst,
  ) {
    return _UA_DeleteEventDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteEventDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DeleteEventDetails>, ffi.Pointer<UA_DeleteEventDetails>)>>('UA_DeleteEventDetails_copy');
  late final _UA_DeleteEventDetails_copy = _UA_DeleteEventDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteEventDetails>, ffi.Pointer<UA_DeleteEventDetails>)>();

  void UA_DeleteEventDetails_clear(
    ffi.Pointer<UA_DeleteEventDetails> p,
  ) {
    return _UA_DeleteEventDetails_clear(
      p,
    );
  }

  late final _UA_DeleteEventDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteEventDetails>)>>('UA_DeleteEventDetails_clear');
  late final _UA_DeleteEventDetails_clear =
      _UA_DeleteEventDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteEventDetails>)>();

  void UA_DeleteEventDetails_delete(
    ffi.Pointer<UA_DeleteEventDetails> p,
  ) {
    return _UA_DeleteEventDetails_delete(
      p,
    );
  }

  late final _UA_DeleteEventDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteEventDetails>)>>(
          'UA_DeleteEventDetails_delete');
  late final _UA_DeleteEventDetails_delete =
      _UA_DeleteEventDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteEventDetails>)>();

  bool UA_DeleteEventDetails_equal(
    ffi.Pointer<UA_DeleteEventDetails> p1,
    ffi.Pointer<UA_DeleteEventDetails> p2,
  ) {
    return _UA_DeleteEventDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteEventDetails_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DeleteEventDetails>, ffi.Pointer<UA_DeleteEventDetails>)>>(
      'UA_DeleteEventDetails_equal');
  late final _UA_DeleteEventDetails_equal = _UA_DeleteEventDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteEventDetails>, ffi.Pointer<UA_DeleteEventDetails>)>();

  void UA_HistoryUpdateResult_init(
    ffi.Pointer<UA_HistoryUpdateResult> p,
  ) {
    return _UA_HistoryUpdateResult_init(
      p,
    );
  }

  late final _UA_HistoryUpdateResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResult>)>>(
          'UA_HistoryUpdateResult_init');
  late final _UA_HistoryUpdateResult_init =
      _UA_HistoryUpdateResult_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResult>)>();

  ffi.Pointer<UA_HistoryUpdateResult> UA_HistoryUpdateResult_new() {
    return _UA_HistoryUpdateResult_new();
  }

  late final _UA_HistoryUpdateResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryUpdateResult> Function()>>('UA_HistoryUpdateResult_new');
  late final _UA_HistoryUpdateResult_new =
      _UA_HistoryUpdateResult_newPtr.asFunction<ffi.Pointer<UA_HistoryUpdateResult> Function()>();

  int UA_HistoryUpdateResult_copy(
    ffi.Pointer<UA_HistoryUpdateResult> src,
    ffi.Pointer<UA_HistoryUpdateResult> dst,
  ) {
    return _UA_HistoryUpdateResult_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryUpdateResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryUpdateResult>,
              ffi.Pointer<UA_HistoryUpdateResult>)>>('UA_HistoryUpdateResult_copy');
  late final _UA_HistoryUpdateResult_copy = _UA_HistoryUpdateResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryUpdateResult>, ffi.Pointer<UA_HistoryUpdateResult>)>();

  void UA_HistoryUpdateResult_clear(
    ffi.Pointer<UA_HistoryUpdateResult> p,
  ) {
    return _UA_HistoryUpdateResult_clear(
      p,
    );
  }

  late final _UA_HistoryUpdateResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResult>)>>(
          'UA_HistoryUpdateResult_clear');
  late final _UA_HistoryUpdateResult_clear =
      _UA_HistoryUpdateResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResult>)>();

  void UA_HistoryUpdateResult_delete(
    ffi.Pointer<UA_HistoryUpdateResult> p,
  ) {
    return _UA_HistoryUpdateResult_delete(
      p,
    );
  }

  late final _UA_HistoryUpdateResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResult>)>>(
          'UA_HistoryUpdateResult_delete');
  late final _UA_HistoryUpdateResult_delete =
      _UA_HistoryUpdateResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResult>)>();

  bool UA_HistoryUpdateResult_equal(
    ffi.Pointer<UA_HistoryUpdateResult> p1,
    ffi.Pointer<UA_HistoryUpdateResult> p2,
  ) {
    return _UA_HistoryUpdateResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryUpdateResult_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryUpdateResult>, ffi.Pointer<UA_HistoryUpdateResult>)>>(
      'UA_HistoryUpdateResult_equal');
  late final _UA_HistoryUpdateResult_equal = _UA_HistoryUpdateResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryUpdateResult>, ffi.Pointer<UA_HistoryUpdateResult>)>();

  void UA_HistoryUpdateRequest_init(
    ffi.Pointer<UA_HistoryUpdateRequest> p,
  ) {
    return _UA_HistoryUpdateRequest_init(
      p,
    );
  }

  late final _UA_HistoryUpdateRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>>(
          'UA_HistoryUpdateRequest_init');
  late final _UA_HistoryUpdateRequest_init =
      _UA_HistoryUpdateRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>();

  ffi.Pointer<UA_HistoryUpdateRequest> UA_HistoryUpdateRequest_new() {
    return _UA_HistoryUpdateRequest_new();
  }

  late final _UA_HistoryUpdateRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryUpdateRequest> Function()>>('UA_HistoryUpdateRequest_new');
  late final _UA_HistoryUpdateRequest_new =
      _UA_HistoryUpdateRequest_newPtr.asFunction<ffi.Pointer<UA_HistoryUpdateRequest> Function()>();

  int UA_HistoryUpdateRequest_copy(
    ffi.Pointer<UA_HistoryUpdateRequest> src,
    ffi.Pointer<UA_HistoryUpdateRequest> dst,
  ) {
    return _UA_HistoryUpdateRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryUpdateRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryUpdateRequest>,
              ffi.Pointer<UA_HistoryUpdateRequest>)>>('UA_HistoryUpdateRequest_copy');
  late final _UA_HistoryUpdateRequest_copy = _UA_HistoryUpdateRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryUpdateRequest>, ffi.Pointer<UA_HistoryUpdateRequest>)>();

  void UA_HistoryUpdateRequest_clear(
    ffi.Pointer<UA_HistoryUpdateRequest> p,
  ) {
    return _UA_HistoryUpdateRequest_clear(
      p,
    );
  }

  late final _UA_HistoryUpdateRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>>(
          'UA_HistoryUpdateRequest_clear');
  late final _UA_HistoryUpdateRequest_clear =
      _UA_HistoryUpdateRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>();

  void UA_HistoryUpdateRequest_delete(
    ffi.Pointer<UA_HistoryUpdateRequest> p,
  ) {
    return _UA_HistoryUpdateRequest_delete(
      p,
    );
  }

  late final _UA_HistoryUpdateRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>>(
          'UA_HistoryUpdateRequest_delete');
  late final _UA_HistoryUpdateRequest_delete =
      _UA_HistoryUpdateRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateRequest>)>();

  bool UA_HistoryUpdateRequest_equal(
    ffi.Pointer<UA_HistoryUpdateRequest> p1,
    ffi.Pointer<UA_HistoryUpdateRequest> p2,
  ) {
    return _UA_HistoryUpdateRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryUpdateRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_HistoryUpdateRequest>,
              ffi.Pointer<UA_HistoryUpdateRequest>)>>('UA_HistoryUpdateRequest_equal');
  late final _UA_HistoryUpdateRequest_equal = _UA_HistoryUpdateRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryUpdateRequest>, ffi.Pointer<UA_HistoryUpdateRequest>)>();

  void UA_HistoryUpdateResponse_init(
    ffi.Pointer<UA_HistoryUpdateResponse> p,
  ) {
    return _UA_HistoryUpdateResponse_init(
      p,
    );
  }

  late final _UA_HistoryUpdateResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>>(
          'UA_HistoryUpdateResponse_init');
  late final _UA_HistoryUpdateResponse_init =
      _UA_HistoryUpdateResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>();

  ffi.Pointer<UA_HistoryUpdateResponse> UA_HistoryUpdateResponse_new() {
    return _UA_HistoryUpdateResponse_new();
  }

  late final _UA_HistoryUpdateResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryUpdateResponse> Function()>>('UA_HistoryUpdateResponse_new');
  late final _UA_HistoryUpdateResponse_new =
      _UA_HistoryUpdateResponse_newPtr.asFunction<ffi.Pointer<UA_HistoryUpdateResponse> Function()>();

  int UA_HistoryUpdateResponse_copy(
    ffi.Pointer<UA_HistoryUpdateResponse> src,
    ffi.Pointer<UA_HistoryUpdateResponse> dst,
  ) {
    return _UA_HistoryUpdateResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryUpdateResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryUpdateResponse>,
              ffi.Pointer<UA_HistoryUpdateResponse>)>>('UA_HistoryUpdateResponse_copy');
  late final _UA_HistoryUpdateResponse_copy = _UA_HistoryUpdateResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryUpdateResponse>, ffi.Pointer<UA_HistoryUpdateResponse>)>();

  void UA_HistoryUpdateResponse_clear(
    ffi.Pointer<UA_HistoryUpdateResponse> p,
  ) {
    return _UA_HistoryUpdateResponse_clear(
      p,
    );
  }

  late final _UA_HistoryUpdateResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>>(
          'UA_HistoryUpdateResponse_clear');
  late final _UA_HistoryUpdateResponse_clear =
      _UA_HistoryUpdateResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>();

  void UA_HistoryUpdateResponse_delete(
    ffi.Pointer<UA_HistoryUpdateResponse> p,
  ) {
    return _UA_HistoryUpdateResponse_delete(
      p,
    );
  }

  late final _UA_HistoryUpdateResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>>(
          'UA_HistoryUpdateResponse_delete');
  late final _UA_HistoryUpdateResponse_delete =
      _UA_HistoryUpdateResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryUpdateResponse>)>();

  bool UA_HistoryUpdateResponse_equal(
    ffi.Pointer<UA_HistoryUpdateResponse> p1,
    ffi.Pointer<UA_HistoryUpdateResponse> p2,
  ) {
    return _UA_HistoryUpdateResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryUpdateResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_HistoryUpdateResponse>,
              ffi.Pointer<UA_HistoryUpdateResponse>)>>('UA_HistoryUpdateResponse_equal');
  late final _UA_HistoryUpdateResponse_equal = _UA_HistoryUpdateResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryUpdateResponse>, ffi.Pointer<UA_HistoryUpdateResponse>)>();

  void UA_CallMethodRequest_init(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_init(
      p,
    );
  }

  late final _UA_CallMethodRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_init');
  late final _UA_CallMethodRequest_init =
      _UA_CallMethodRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  ffi.Pointer<UA_CallMethodRequest> UA_CallMethodRequest_new() {
    return _UA_CallMethodRequest_new();
  }

  late final _UA_CallMethodRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodRequest> Function()>>('UA_CallMethodRequest_new');
  late final _UA_CallMethodRequest_new =
      _UA_CallMethodRequest_newPtr.asFunction<ffi.Pointer<UA_CallMethodRequest> Function()>();

  int UA_CallMethodRequest_copy(
    ffi.Pointer<UA_CallMethodRequest> src,
    ffi.Pointer<UA_CallMethodRequest> dst,
  ) {
    return _UA_CallMethodRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CallMethodRequest>, ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_copy');
  late final _UA_CallMethodRequest_copy = _UA_CallMethodRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CallMethodRequest>, ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_clear(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_clear(
      p,
    );
  }

  late final _UA_CallMethodRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_clear');
  late final _UA_CallMethodRequest_clear =
      _UA_CallMethodRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_delete(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_delete(
      p,
    );
  }

  late final _UA_CallMethodRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_delete');
  late final _UA_CallMethodRequest_delete =
      _UA_CallMethodRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  bool UA_CallMethodRequest_equal(
    ffi.Pointer<UA_CallMethodRequest> p1,
    ffi.Pointer<UA_CallMethodRequest> p2,
  ) {
    return _UA_CallMethodRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CallMethodRequest_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CallMethodRequest>, ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_equal');
  late final _UA_CallMethodRequest_equal = _UA_CallMethodRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CallMethodRequest>, ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodResult_init(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_init(
      p,
    );
  }

  late final _UA_CallMethodResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>('UA_CallMethodResult_init');
  late final _UA_CallMethodResult_init =
      _UA_CallMethodResult_initPtr.asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  ffi.Pointer<UA_CallMethodResult> UA_CallMethodResult_new() {
    return _UA_CallMethodResult_new();
  }

  late final _UA_CallMethodResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodResult> Function()>>('UA_CallMethodResult_new');
  late final _UA_CallMethodResult_new =
      _UA_CallMethodResult_newPtr.asFunction<ffi.Pointer<UA_CallMethodResult> Function()>();

  int UA_CallMethodResult_copy(
    ffi.Pointer<UA_CallMethodResult> src,
    ffi.Pointer<UA_CallMethodResult> dst,
  ) {
    return _UA_CallMethodResult_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodResult_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CallMethodResult>, ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_copy');
  late final _UA_CallMethodResult_copy = _UA_CallMethodResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CallMethodResult>, ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_clear(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_clear(
      p,
    );
  }

  late final _UA_CallMethodResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>('UA_CallMethodResult_clear');
  late final _UA_CallMethodResult_clear =
      _UA_CallMethodResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_delete(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_delete(
      p,
    );
  }

  late final _UA_CallMethodResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>('UA_CallMethodResult_delete');
  late final _UA_CallMethodResult_delete =
      _UA_CallMethodResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  bool UA_CallMethodResult_equal(
    ffi.Pointer<UA_CallMethodResult> p1,
    ffi.Pointer<UA_CallMethodResult> p2,
  ) {
    return _UA_CallMethodResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_CallMethodResult_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CallMethodResult>, ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_equal');
  late final _UA_CallMethodResult_equal = _UA_CallMethodResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CallMethodResult>, ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallRequest_init(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_init(
      p,
    );
  }

  late final _UA_CallRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>('UA_CallRequest_init');
  late final _UA_CallRequest_init = _UA_CallRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CallRequest>)>();

  ffi.Pointer<UA_CallRequest> UA_CallRequest_new() {
    return _UA_CallRequest_new();
  }

  late final _UA_CallRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallRequest> Function()>>('UA_CallRequest_new');
  late final _UA_CallRequest_new = _UA_CallRequest_newPtr.asFunction<ffi.Pointer<UA_CallRequest> Function()>();

  int UA_CallRequest_copy(
    ffi.Pointer<UA_CallRequest> src,
    ffi.Pointer<UA_CallRequest> dst,
  ) {
    return _UA_CallRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallRequest_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>>(
          'UA_CallRequest_copy');
  late final _UA_CallRequest_copy =
      _UA_CallRequest_copyPtr.asFunction<int Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_clear(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_clear(
      p,
    );
  }

  late final _UA_CallRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>('UA_CallRequest_clear');
  late final _UA_CallRequest_clear = _UA_CallRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_delete(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_delete(
      p,
    );
  }

  late final _UA_CallRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>('UA_CallRequest_delete');
  late final _UA_CallRequest_delete =
      _UA_CallRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CallRequest>)>();

  bool UA_CallRequest_equal(
    ffi.Pointer<UA_CallRequest> p1,
    ffi.Pointer<UA_CallRequest> p2,
  ) {
    return _UA_CallRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CallRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>>(
          'UA_CallRequest_equal');
  late final _UA_CallRequest_equal =
      _UA_CallRequest_equalPtr.asFunction<bool Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>();

  void UA_CallResponse_init(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_init(
      p,
    );
  }

  late final _UA_CallResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>('UA_CallResponse_init');
  late final _UA_CallResponse_init = _UA_CallResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CallResponse>)>();

  ffi.Pointer<UA_CallResponse> UA_CallResponse_new() {
    return _UA_CallResponse_new();
  }

  late final _UA_CallResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallResponse> Function()>>('UA_CallResponse_new');
  late final _UA_CallResponse_new = _UA_CallResponse_newPtr.asFunction<ffi.Pointer<UA_CallResponse> Function()>();

  int UA_CallResponse_copy(
    ffi.Pointer<UA_CallResponse> src,
    ffi.Pointer<UA_CallResponse> dst,
  ) {
    return _UA_CallResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CallResponse_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>>(
          'UA_CallResponse_copy');
  late final _UA_CallResponse_copy =
      _UA_CallResponse_copyPtr.asFunction<int Function(ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_clear(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_clear(
      p,
    );
  }

  late final _UA_CallResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>('UA_CallResponse_clear');
  late final _UA_CallResponse_clear =
      _UA_CallResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_delete(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_delete(
      p,
    );
  }

  late final _UA_CallResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>('UA_CallResponse_delete');
  late final _UA_CallResponse_delete =
      _UA_CallResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CallResponse>)>();

  bool UA_CallResponse_equal(
    ffi.Pointer<UA_CallResponse> p1,
    ffi.Pointer<UA_CallResponse> p2,
  ) {
    return _UA_CallResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CallResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>>(
          'UA_CallResponse_equal');
  late final _UA_CallResponse_equal =
      _UA_CallResponse_equalPtr.asFunction<bool Function(ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>();

  void UA_MonitoringMode_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MonitoringMode_init(
      p,
    );
  }

  late final _UA_MonitoringMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MonitoringMode_init');
  late final _UA_MonitoringMode_init =
      _UA_MonitoringMode_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_MonitoringMode_new() {
    return _UA_MonitoringMode_new();
  }

  late final _UA_MonitoringMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_MonitoringMode_new');
  late final _UA_MonitoringMode_new = _UA_MonitoringMode_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_MonitoringMode_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_MonitoringMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringMode_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_MonitoringMode_copy');
  late final _UA_MonitoringMode_copy =
      _UA_MonitoringMode_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_MonitoringMode_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MonitoringMode_clear(
      p,
    );
  }

  late final _UA_MonitoringMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MonitoringMode_clear');
  late final _UA_MonitoringMode_clear =
      _UA_MonitoringMode_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_MonitoringMode_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_MonitoringMode_delete(
      p,
    );
  }

  late final _UA_MonitoringMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_MonitoringMode_delete');
  late final _UA_MonitoringMode_delete =
      _UA_MonitoringMode_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_MonitoringMode_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_MonitoringMode_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoringMode_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_MonitoringMode_equal');
  late final _UA_MonitoringMode_equal = _UA_MonitoringMode_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataChangeTrigger_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataChangeTrigger_init(
      p,
    );
  }

  late final _UA_DataChangeTrigger_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataChangeTrigger_init');
  late final _UA_DataChangeTrigger_init =
      _UA_DataChangeTrigger_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_DataChangeTrigger_new() {
    return _UA_DataChangeTrigger_new();
  }

  late final _UA_DataChangeTrigger_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_DataChangeTrigger_new');
  late final _UA_DataChangeTrigger_new =
      _UA_DataChangeTrigger_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_DataChangeTrigger_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_DataChangeTrigger_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeTrigger_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DataChangeTrigger_copy');
  late final _UA_DataChangeTrigger_copy = _UA_DataChangeTrigger_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataChangeTrigger_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataChangeTrigger_clear(
      p,
    );
  }

  late final _UA_DataChangeTrigger_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataChangeTrigger_clear');
  late final _UA_DataChangeTrigger_clear =
      _UA_DataChangeTrigger_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataChangeTrigger_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DataChangeTrigger_delete(
      p,
    );
  }

  late final _UA_DataChangeTrigger_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DataChangeTrigger_delete');
  late final _UA_DataChangeTrigger_delete =
      _UA_DataChangeTrigger_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_DataChangeTrigger_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_DataChangeTrigger_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataChangeTrigger_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DataChangeTrigger_equal');
  late final _UA_DataChangeTrigger_equal = _UA_DataChangeTrigger_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DeadbandType_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DeadbandType_init(
      p,
    );
  }

  late final _UA_DeadbandType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DeadbandType_init');
  late final _UA_DeadbandType_init = _UA_DeadbandType_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_DeadbandType_new() {
    return _UA_DeadbandType_new();
  }

  late final _UA_DeadbandType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_DeadbandType_new');
  late final _UA_DeadbandType_new = _UA_DeadbandType_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_DeadbandType_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_DeadbandType_copy(
      src,
      dst,
    );
  }

  late final _UA_DeadbandType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DeadbandType_copy');
  late final _UA_DeadbandType_copy =
      _UA_DeadbandType_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DeadbandType_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DeadbandType_clear(
      p,
    );
  }

  late final _UA_DeadbandType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DeadbandType_clear');
  late final _UA_DeadbandType_clear =
      _UA_DeadbandType_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DeadbandType_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_DeadbandType_delete(
      p,
    );
  }

  late final _UA_DeadbandType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_DeadbandType_delete');
  late final _UA_DeadbandType_delete =
      _UA_DeadbandType_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_DeadbandType_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_DeadbandType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeadbandType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_DeadbandType_equal');
  late final _UA_DeadbandType_equal =
      _UA_DeadbandType_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_DataChangeFilter_init(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_init(
      p,
    );
  }

  late final _UA_DataChangeFilter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>('UA_DataChangeFilter_init');
  late final _UA_DataChangeFilter_init =
      _UA_DataChangeFilter_initPtr.asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  ffi.Pointer<UA_DataChangeFilter> UA_DataChangeFilter_new() {
    return _UA_DataChangeFilter_new();
  }

  late final _UA_DataChangeFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataChangeFilter> Function()>>('UA_DataChangeFilter_new');
  late final _UA_DataChangeFilter_new =
      _UA_DataChangeFilter_newPtr.asFunction<ffi.Pointer<UA_DataChangeFilter> Function()>();

  int UA_DataChangeFilter_copy(
    ffi.Pointer<UA_DataChangeFilter> src,
    ffi.Pointer<UA_DataChangeFilter> dst,
  ) {
    return _UA_DataChangeFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeFilter_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_DataChangeFilter>, ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_copy');
  late final _UA_DataChangeFilter_copy = _UA_DataChangeFilter_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataChangeFilter>, ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_clear(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_clear(
      p,
    );
  }

  late final _UA_DataChangeFilter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>('UA_DataChangeFilter_clear');
  late final _UA_DataChangeFilter_clear =
      _UA_DataChangeFilter_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_delete(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_delete(
      p,
    );
  }

  late final _UA_DataChangeFilter_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>('UA_DataChangeFilter_delete');
  late final _UA_DataChangeFilter_delete =
      _UA_DataChangeFilter_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  bool UA_DataChangeFilter_equal(
    ffi.Pointer<UA_DataChangeFilter> p1,
    ffi.Pointer<UA_DataChangeFilter> p2,
  ) {
    return _UA_DataChangeFilter_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataChangeFilter_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataChangeFilter>, ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_equal');
  late final _UA_DataChangeFilter_equal = _UA_DataChangeFilter_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataChangeFilter>, ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_EventFilter_init(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_init(
      p,
    );
  }

  late final _UA_EventFilter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>('UA_EventFilter_init');
  late final _UA_EventFilter_init = _UA_EventFilter_initPtr.asFunction<void Function(ffi.Pointer<UA_EventFilter>)>();

  ffi.Pointer<UA_EventFilter> UA_EventFilter_new() {
    return _UA_EventFilter_new();
  }

  late final _UA_EventFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilter> Function()>>('UA_EventFilter_new');
  late final _UA_EventFilter_new = _UA_EventFilter_newPtr.asFunction<ffi.Pointer<UA_EventFilter> Function()>();

  int UA_EventFilter_copy(
    ffi.Pointer<UA_EventFilter> src,
    ffi.Pointer<UA_EventFilter> dst,
  ) {
    return _UA_EventFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilter_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>>(
          'UA_EventFilter_copy');
  late final _UA_EventFilter_copy =
      _UA_EventFilter_copyPtr.asFunction<int Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_clear(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_clear(
      p,
    );
  }

  late final _UA_EventFilter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>('UA_EventFilter_clear');
  late final _UA_EventFilter_clear = _UA_EventFilter_clearPtr.asFunction<void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_delete(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_delete(
      p,
    );
  }

  late final _UA_EventFilter_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>('UA_EventFilter_delete');
  late final _UA_EventFilter_delete =
      _UA_EventFilter_deletePtr.asFunction<void Function(ffi.Pointer<UA_EventFilter>)>();

  bool UA_EventFilter_equal(
    ffi.Pointer<UA_EventFilter> p1,
    ffi.Pointer<UA_EventFilter> p2,
  ) {
    return _UA_EventFilter_equal(
      p1,
      p2,
    );
  }

  late final _UA_EventFilter_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>>(
          'UA_EventFilter_equal');
  late final _UA_EventFilter_equal =
      _UA_EventFilter_equalPtr.asFunction<bool Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>();

  void UA_AggregateConfiguration_init(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_init(
      p,
    );
  }

  late final _UA_AggregateConfiguration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
          'UA_AggregateConfiguration_init');
  late final _UA_AggregateConfiguration_init =
      _UA_AggregateConfiguration_initPtr.asFunction<void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  ffi.Pointer<UA_AggregateConfiguration> UA_AggregateConfiguration_new() {
    return _UA_AggregateConfiguration_new();
  }

  late final _UA_AggregateConfiguration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>>('UA_AggregateConfiguration_new');
  late final _UA_AggregateConfiguration_new =
      _UA_AggregateConfiguration_newPtr.asFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>();

  int UA_AggregateConfiguration_copy(
    ffi.Pointer<UA_AggregateConfiguration> src,
    ffi.Pointer<UA_AggregateConfiguration> dst,
  ) {
    return _UA_AggregateConfiguration_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateConfiguration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AggregateConfiguration>,
              ffi.Pointer<UA_AggregateConfiguration>)>>('UA_AggregateConfiguration_copy');
  late final _UA_AggregateConfiguration_copy = _UA_AggregateConfiguration_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AggregateConfiguration>, ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_clear(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_clear(
      p,
    );
  }

  late final _UA_AggregateConfiguration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
          'UA_AggregateConfiguration_clear');
  late final _UA_AggregateConfiguration_clear =
      _UA_AggregateConfiguration_clearPtr.asFunction<void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_delete(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_delete(
      p,
    );
  }

  late final _UA_AggregateConfiguration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
          'UA_AggregateConfiguration_delete');
  late final _UA_AggregateConfiguration_delete =
      _UA_AggregateConfiguration_deletePtr.asFunction<void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  bool UA_AggregateConfiguration_equal(
    ffi.Pointer<UA_AggregateConfiguration> p1,
    ffi.Pointer<UA_AggregateConfiguration> p2,
  ) {
    return _UA_AggregateConfiguration_equal(
      p1,
      p2,
    );
  }

  late final _UA_AggregateConfiguration_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AggregateConfiguration>,
              ffi.Pointer<UA_AggregateConfiguration>)>>('UA_AggregateConfiguration_equal');
  late final _UA_AggregateConfiguration_equal = _UA_AggregateConfiguration_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AggregateConfiguration>, ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateFilter_init(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_init(
      p,
    );
  }

  late final _UA_AggregateFilter_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>('UA_AggregateFilter_init');
  late final _UA_AggregateFilter_init =
      _UA_AggregateFilter_initPtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  ffi.Pointer<UA_AggregateFilter> UA_AggregateFilter_new() {
    return _UA_AggregateFilter_new();
  }

  late final _UA_AggregateFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AggregateFilter> Function()>>('UA_AggregateFilter_new');
  late final _UA_AggregateFilter_new =
      _UA_AggregateFilter_newPtr.asFunction<ffi.Pointer<UA_AggregateFilter> Function()>();

  int UA_AggregateFilter_copy(
    ffi.Pointer<UA_AggregateFilter> src,
    ffi.Pointer<UA_AggregateFilter> dst,
  ) {
    return _UA_AggregateFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateFilter_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_copy');
  late final _UA_AggregateFilter_copy = _UA_AggregateFilter_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_clear(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_clear(
      p,
    );
  }

  late final _UA_AggregateFilter_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>('UA_AggregateFilter_clear');
  late final _UA_AggregateFilter_clear =
      _UA_AggregateFilter_clearPtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_delete(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_delete(
      p,
    );
  }

  late final _UA_AggregateFilter_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>('UA_AggregateFilter_delete');
  late final _UA_AggregateFilter_delete =
      _UA_AggregateFilter_deletePtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  bool UA_AggregateFilter_equal(
    ffi.Pointer<UA_AggregateFilter> p1,
    ffi.Pointer<UA_AggregateFilter> p2,
  ) {
    return _UA_AggregateFilter_equal(
      p1,
      p2,
    );
  }

  late final _UA_AggregateFilter_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>>(
          'UA_AggregateFilter_equal');
  late final _UA_AggregateFilter_equal = _UA_AggregateFilter_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>();

  void UA_EventFilterResult_init(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_init(
      p,
    );
  }

  late final _UA_EventFilterResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_init');
  late final _UA_EventFilterResult_init =
      _UA_EventFilterResult_initPtr.asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  ffi.Pointer<UA_EventFilterResult> UA_EventFilterResult_new() {
    return _UA_EventFilterResult_new();
  }

  late final _UA_EventFilterResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilterResult> Function()>>('UA_EventFilterResult_new');
  late final _UA_EventFilterResult_new =
      _UA_EventFilterResult_newPtr.asFunction<ffi.Pointer<UA_EventFilterResult> Function()>();

  int UA_EventFilterResult_copy(
    ffi.Pointer<UA_EventFilterResult> src,
    ffi.Pointer<UA_EventFilterResult> dst,
  ) {
    return _UA_EventFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilterResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_EventFilterResult>, ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_copy');
  late final _UA_EventFilterResult_copy = _UA_EventFilterResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventFilterResult>, ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_clear(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_clear(
      p,
    );
  }

  late final _UA_EventFilterResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_clear');
  late final _UA_EventFilterResult_clear =
      _UA_EventFilterResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_delete(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_delete(
      p,
    );
  }

  late final _UA_EventFilterResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_delete');
  late final _UA_EventFilterResult_delete =
      _UA_EventFilterResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  bool UA_EventFilterResult_equal(
    ffi.Pointer<UA_EventFilterResult> p1,
    ffi.Pointer<UA_EventFilterResult> p2,
  ) {
    return _UA_EventFilterResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_EventFilterResult_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EventFilterResult>, ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_equal');
  late final _UA_EventFilterResult_equal = _UA_EventFilterResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EventFilterResult>, ffi.Pointer<UA_EventFilterResult>)>();

  void UA_AggregateFilterResult_init(
    ffi.Pointer<UA_AggregateFilterResult> p,
  ) {
    return _UA_AggregateFilterResult_init(
      p,
    );
  }

  late final _UA_AggregateFilterResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilterResult>)>>(
          'UA_AggregateFilterResult_init');
  late final _UA_AggregateFilterResult_init =
      _UA_AggregateFilterResult_initPtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilterResult>)>();

  ffi.Pointer<UA_AggregateFilterResult> UA_AggregateFilterResult_new() {
    return _UA_AggregateFilterResult_new();
  }

  late final _UA_AggregateFilterResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AggregateFilterResult> Function()>>('UA_AggregateFilterResult_new');
  late final _UA_AggregateFilterResult_new =
      _UA_AggregateFilterResult_newPtr.asFunction<ffi.Pointer<UA_AggregateFilterResult> Function()>();

  int UA_AggregateFilterResult_copy(
    ffi.Pointer<UA_AggregateFilterResult> src,
    ffi.Pointer<UA_AggregateFilterResult> dst,
  ) {
    return _UA_AggregateFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateFilterResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AggregateFilterResult>,
              ffi.Pointer<UA_AggregateFilterResult>)>>('UA_AggregateFilterResult_copy');
  late final _UA_AggregateFilterResult_copy = _UA_AggregateFilterResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AggregateFilterResult>, ffi.Pointer<UA_AggregateFilterResult>)>();

  void UA_AggregateFilterResult_clear(
    ffi.Pointer<UA_AggregateFilterResult> p,
  ) {
    return _UA_AggregateFilterResult_clear(
      p,
    );
  }

  late final _UA_AggregateFilterResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilterResult>)>>(
          'UA_AggregateFilterResult_clear');
  late final _UA_AggregateFilterResult_clear =
      _UA_AggregateFilterResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilterResult>)>();

  void UA_AggregateFilterResult_delete(
    ffi.Pointer<UA_AggregateFilterResult> p,
  ) {
    return _UA_AggregateFilterResult_delete(
      p,
    );
  }

  late final _UA_AggregateFilterResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilterResult>)>>(
          'UA_AggregateFilterResult_delete');
  late final _UA_AggregateFilterResult_delete =
      _UA_AggregateFilterResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_AggregateFilterResult>)>();

  bool UA_AggregateFilterResult_equal(
    ffi.Pointer<UA_AggregateFilterResult> p1,
    ffi.Pointer<UA_AggregateFilterResult> p2,
  ) {
    return _UA_AggregateFilterResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_AggregateFilterResult_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_AggregateFilterResult>,
              ffi.Pointer<UA_AggregateFilterResult>)>>('UA_AggregateFilterResult_equal');
  late final _UA_AggregateFilterResult_equal = _UA_AggregateFilterResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AggregateFilterResult>, ffi.Pointer<UA_AggregateFilterResult>)>();

  void UA_MonitoringParameters_init(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_init(
      p,
    );
  }

  late final _UA_MonitoringParameters_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
          'UA_MonitoringParameters_init');
  late final _UA_MonitoringParameters_init =
      _UA_MonitoringParameters_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  ffi.Pointer<UA_MonitoringParameters> UA_MonitoringParameters_new() {
    return _UA_MonitoringParameters_new();
  }

  late final _UA_MonitoringParameters_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoringParameters> Function()>>('UA_MonitoringParameters_new');
  late final _UA_MonitoringParameters_new =
      _UA_MonitoringParameters_newPtr.asFunction<ffi.Pointer<UA_MonitoringParameters> Function()>();

  int UA_MonitoringParameters_copy(
    ffi.Pointer<UA_MonitoringParameters> src,
    ffi.Pointer<UA_MonitoringParameters> dst,
  ) {
    return _UA_MonitoringParameters_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringParameters_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoringParameters>,
              ffi.Pointer<UA_MonitoringParameters>)>>('UA_MonitoringParameters_copy');
  late final _UA_MonitoringParameters_copy = _UA_MonitoringParameters_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoringParameters>, ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_clear(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_clear(
      p,
    );
  }

  late final _UA_MonitoringParameters_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
          'UA_MonitoringParameters_clear');
  late final _UA_MonitoringParameters_clear =
      _UA_MonitoringParameters_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_delete(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_delete(
      p,
    );
  }

  late final _UA_MonitoringParameters_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
          'UA_MonitoringParameters_delete');
  late final _UA_MonitoringParameters_delete =
      _UA_MonitoringParameters_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  bool UA_MonitoringParameters_equal(
    ffi.Pointer<UA_MonitoringParameters> p1,
    ffi.Pointer<UA_MonitoringParameters> p2,
  ) {
    return _UA_MonitoringParameters_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoringParameters_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoringParameters>,
              ffi.Pointer<UA_MonitoringParameters>)>>('UA_MonitoringParameters_equal');
  late final _UA_MonitoringParameters_equal = _UA_MonitoringParameters_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoringParameters>, ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoredItemCreateRequest_init(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
          'UA_MonitoredItemCreateRequest_init');
  late final _UA_MonitoredItemCreateRequest_init =
      _UA_MonitoredItemCreateRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  ffi.Pointer<UA_MonitoredItemCreateRequest> UA_MonitoredItemCreateRequest_new() {
    return _UA_MonitoredItemCreateRequest_new();
  }

  late final _UA_MonitoredItemCreateRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoredItemCreateRequest> Function()>>(
          'UA_MonitoredItemCreateRequest_new');
  late final _UA_MonitoredItemCreateRequest_new =
      _UA_MonitoredItemCreateRequest_newPtr.asFunction<ffi.Pointer<UA_MonitoredItemCreateRequest> Function()>();

  int UA_MonitoredItemCreateRequest_copy(
    ffi.Pointer<UA_MonitoredItemCreateRequest> src,
    ffi.Pointer<UA_MonitoredItemCreateRequest> dst,
  ) {
    return _UA_MonitoredItemCreateRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
              ffi.Pointer<UA_MonitoredItemCreateRequest>)>>('UA_MonitoredItemCreateRequest_copy');
  late final _UA_MonitoredItemCreateRequest_copy = _UA_MonitoredItemCreateRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoredItemCreateRequest>, ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_clear(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
          'UA_MonitoredItemCreateRequest_clear');
  late final _UA_MonitoredItemCreateRequest_clear =
      _UA_MonitoredItemCreateRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_delete(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
          'UA_MonitoredItemCreateRequest_delete');
  late final _UA_MonitoredItemCreateRequest_delete =
      _UA_MonitoredItemCreateRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  bool UA_MonitoredItemCreateRequest_equal(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p1,
    ffi.Pointer<UA_MonitoredItemCreateRequest> p2,
  ) {
    return _UA_MonitoredItemCreateRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoredItemCreateRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
              ffi.Pointer<UA_MonitoredItemCreateRequest>)>>('UA_MonitoredItemCreateRequest_equal');
  late final _UA_MonitoredItemCreateRequest_equal = _UA_MonitoredItemCreateRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoredItemCreateRequest>, ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateResult_init(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
          'UA_MonitoredItemCreateResult_init');
  late final _UA_MonitoredItemCreateResult_init =
      _UA_MonitoredItemCreateResult_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  ffi.Pointer<UA_MonitoredItemCreateResult> UA_MonitoredItemCreateResult_new() {
    return _UA_MonitoredItemCreateResult_new();
  }

  late final _UA_MonitoredItemCreateResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoredItemCreateResult> Function()>>(
          'UA_MonitoredItemCreateResult_new');
  late final _UA_MonitoredItemCreateResult_new =
      _UA_MonitoredItemCreateResult_newPtr.asFunction<ffi.Pointer<UA_MonitoredItemCreateResult> Function()>();

  int UA_MonitoredItemCreateResult_copy(
    ffi.Pointer<UA_MonitoredItemCreateResult> src,
    ffi.Pointer<UA_MonitoredItemCreateResult> dst,
  ) {
    return _UA_MonitoredItemCreateResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
              ffi.Pointer<UA_MonitoredItemCreateResult>)>>('UA_MonitoredItemCreateResult_copy');
  late final _UA_MonitoredItemCreateResult_copy = _UA_MonitoredItemCreateResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoredItemCreateResult>, ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_clear(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
          'UA_MonitoredItemCreateResult_clear');
  late final _UA_MonitoredItemCreateResult_clear =
      _UA_MonitoredItemCreateResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_delete(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
          'UA_MonitoredItemCreateResult_delete');
  late final _UA_MonitoredItemCreateResult_delete =
      _UA_MonitoredItemCreateResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  bool UA_MonitoredItemCreateResult_equal(
    ffi.Pointer<UA_MonitoredItemCreateResult> p1,
    ffi.Pointer<UA_MonitoredItemCreateResult> p2,
  ) {
    return _UA_MonitoredItemCreateResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoredItemCreateResult_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
              ffi.Pointer<UA_MonitoredItemCreateResult>)>>('UA_MonitoredItemCreateResult_equal');
  late final _UA_MonitoredItemCreateResult_equal = _UA_MonitoredItemCreateResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoredItemCreateResult>, ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_CreateMonitoredItemsRequest_init(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
          'UA_CreateMonitoredItemsRequest_init');
  late final _UA_CreateMonitoredItemsRequest_init =
      _UA_CreateMonitoredItemsRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  ffi.Pointer<UA_CreateMonitoredItemsRequest> UA_CreateMonitoredItemsRequest_new() {
    return _UA_CreateMonitoredItemsRequest_new();
  }

  late final _UA_CreateMonitoredItemsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateMonitoredItemsRequest> Function()>>(
          'UA_CreateMonitoredItemsRequest_new');
  late final _UA_CreateMonitoredItemsRequest_new =
      _UA_CreateMonitoredItemsRequest_newPtr.asFunction<ffi.Pointer<UA_CreateMonitoredItemsRequest> Function()>();

  int UA_CreateMonitoredItemsRequest_copy(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> src,
    ffi.Pointer<UA_CreateMonitoredItemsRequest> dst,
  ) {
    return _UA_CreateMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>,
              ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>('UA_CreateMonitoredItemsRequest_copy');
  late final _UA_CreateMonitoredItemsRequest_copy = _UA_CreateMonitoredItemsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>, ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_clear(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
          'UA_CreateMonitoredItemsRequest_clear');
  late final _UA_CreateMonitoredItemsRequest_clear =
      _UA_CreateMonitoredItemsRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_delete(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
          'UA_CreateMonitoredItemsRequest_delete');
  late final _UA_CreateMonitoredItemsRequest_delete = _UA_CreateMonitoredItemsRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  bool UA_CreateMonitoredItemsRequest_equal(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p1,
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p2,
  ) {
    return _UA_CreateMonitoredItemsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>,
              ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>('UA_CreateMonitoredItemsRequest_equal');
  late final _UA_CreateMonitoredItemsRequest_equal = _UA_CreateMonitoredItemsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>, ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsResponse_init(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
          'UA_CreateMonitoredItemsResponse_init');
  late final _UA_CreateMonitoredItemsResponse_init = _UA_CreateMonitoredItemsResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  ffi.Pointer<UA_CreateMonitoredItemsResponse> UA_CreateMonitoredItemsResponse_new() {
    return _UA_CreateMonitoredItemsResponse_new();
  }

  late final _UA_CreateMonitoredItemsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateMonitoredItemsResponse> Function()>>(
          'UA_CreateMonitoredItemsResponse_new');
  late final _UA_CreateMonitoredItemsResponse_new =
      _UA_CreateMonitoredItemsResponse_newPtr.asFunction<ffi.Pointer<UA_CreateMonitoredItemsResponse> Function()>();

  int UA_CreateMonitoredItemsResponse_copy(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> src,
    ffi.Pointer<UA_CreateMonitoredItemsResponse> dst,
  ) {
    return _UA_CreateMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>,
              ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>('UA_CreateMonitoredItemsResponse_copy');
  late final _UA_CreateMonitoredItemsResponse_copy = _UA_CreateMonitoredItemsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>, ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_clear(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
          'UA_CreateMonitoredItemsResponse_clear');
  late final _UA_CreateMonitoredItemsResponse_clear = _UA_CreateMonitoredItemsResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_delete(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
          'UA_CreateMonitoredItemsResponse_delete');
  late final _UA_CreateMonitoredItemsResponse_delete = _UA_CreateMonitoredItemsResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  bool UA_CreateMonitoredItemsResponse_equal(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p1,
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p2,
  ) {
    return _UA_CreateMonitoredItemsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>,
              ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>('UA_CreateMonitoredItemsResponse_equal');
  late final _UA_CreateMonitoredItemsResponse_equal = _UA_CreateMonitoredItemsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>, ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_MonitoredItemModifyRequest_init(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
          'UA_MonitoredItemModifyRequest_init');
  late final _UA_MonitoredItemModifyRequest_init =
      _UA_MonitoredItemModifyRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  ffi.Pointer<UA_MonitoredItemModifyRequest> UA_MonitoredItemModifyRequest_new() {
    return _UA_MonitoredItemModifyRequest_new();
  }

  late final _UA_MonitoredItemModifyRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoredItemModifyRequest> Function()>>(
          'UA_MonitoredItemModifyRequest_new');
  late final _UA_MonitoredItemModifyRequest_new =
      _UA_MonitoredItemModifyRequest_newPtr.asFunction<ffi.Pointer<UA_MonitoredItemModifyRequest> Function()>();

  int UA_MonitoredItemModifyRequest_copy(
    ffi.Pointer<UA_MonitoredItemModifyRequest> src,
    ffi.Pointer<UA_MonitoredItemModifyRequest> dst,
  ) {
    return _UA_MonitoredItemModifyRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
              ffi.Pointer<UA_MonitoredItemModifyRequest>)>>('UA_MonitoredItemModifyRequest_copy');
  late final _UA_MonitoredItemModifyRequest_copy = _UA_MonitoredItemModifyRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoredItemModifyRequest>, ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_clear(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
          'UA_MonitoredItemModifyRequest_clear');
  late final _UA_MonitoredItemModifyRequest_clear =
      _UA_MonitoredItemModifyRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_delete(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
          'UA_MonitoredItemModifyRequest_delete');
  late final _UA_MonitoredItemModifyRequest_delete =
      _UA_MonitoredItemModifyRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  bool UA_MonitoredItemModifyRequest_equal(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p1,
    ffi.Pointer<UA_MonitoredItemModifyRequest> p2,
  ) {
    return _UA_MonitoredItemModifyRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoredItemModifyRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
              ffi.Pointer<UA_MonitoredItemModifyRequest>)>>('UA_MonitoredItemModifyRequest_equal');
  late final _UA_MonitoredItemModifyRequest_equal = _UA_MonitoredItemModifyRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoredItemModifyRequest>, ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyResult_init(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
          'UA_MonitoredItemModifyResult_init');
  late final _UA_MonitoredItemModifyResult_init =
      _UA_MonitoredItemModifyResult_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  ffi.Pointer<UA_MonitoredItemModifyResult> UA_MonitoredItemModifyResult_new() {
    return _UA_MonitoredItemModifyResult_new();
  }

  late final _UA_MonitoredItemModifyResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoredItemModifyResult> Function()>>(
          'UA_MonitoredItemModifyResult_new');
  late final _UA_MonitoredItemModifyResult_new =
      _UA_MonitoredItemModifyResult_newPtr.asFunction<ffi.Pointer<UA_MonitoredItemModifyResult> Function()>();

  int UA_MonitoredItemModifyResult_copy(
    ffi.Pointer<UA_MonitoredItemModifyResult> src,
    ffi.Pointer<UA_MonitoredItemModifyResult> dst,
  ) {
    return _UA_MonitoredItemModifyResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
              ffi.Pointer<UA_MonitoredItemModifyResult>)>>('UA_MonitoredItemModifyResult_copy');
  late final _UA_MonitoredItemModifyResult_copy = _UA_MonitoredItemModifyResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoredItemModifyResult>, ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_clear(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
          'UA_MonitoredItemModifyResult_clear');
  late final _UA_MonitoredItemModifyResult_clear =
      _UA_MonitoredItemModifyResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_delete(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
          'UA_MonitoredItemModifyResult_delete');
  late final _UA_MonitoredItemModifyResult_delete =
      _UA_MonitoredItemModifyResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  bool UA_MonitoredItemModifyResult_equal(
    ffi.Pointer<UA_MonitoredItemModifyResult> p1,
    ffi.Pointer<UA_MonitoredItemModifyResult> p2,
  ) {
    return _UA_MonitoredItemModifyResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoredItemModifyResult_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
              ffi.Pointer<UA_MonitoredItemModifyResult>)>>('UA_MonitoredItemModifyResult_equal');
  late final _UA_MonitoredItemModifyResult_equal = _UA_MonitoredItemModifyResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoredItemModifyResult>, ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_ModifyMonitoredItemsRequest_init(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
          'UA_ModifyMonitoredItemsRequest_init');
  late final _UA_ModifyMonitoredItemsRequest_init =
      _UA_ModifyMonitoredItemsRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsRequest> UA_ModifyMonitoredItemsRequest_new() {
    return _UA_ModifyMonitoredItemsRequest_new();
  }

  late final _UA_ModifyMonitoredItemsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModifyMonitoredItemsRequest> Function()>>(
          'UA_ModifyMonitoredItemsRequest_new');
  late final _UA_ModifyMonitoredItemsRequest_new =
      _UA_ModifyMonitoredItemsRequest_newPtr.asFunction<ffi.Pointer<UA_ModifyMonitoredItemsRequest> Function()>();

  int UA_ModifyMonitoredItemsRequest_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> src,
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> dst,
  ) {
    return _UA_ModifyMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
              ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>('UA_ModifyMonitoredItemsRequest_copy');
  late final _UA_ModifyMonitoredItemsRequest_copy = _UA_ModifyMonitoredItemsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>, ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
          'UA_ModifyMonitoredItemsRequest_clear');
  late final _UA_ModifyMonitoredItemsRequest_clear =
      _UA_ModifyMonitoredItemsRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
          'UA_ModifyMonitoredItemsRequest_delete');
  late final _UA_ModifyMonitoredItemsRequest_delete = _UA_ModifyMonitoredItemsRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  bool UA_ModifyMonitoredItemsRequest_equal(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p1,
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p2,
  ) {
    return _UA_ModifyMonitoredItemsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
              ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>('UA_ModifyMonitoredItemsRequest_equal');
  late final _UA_ModifyMonitoredItemsRequest_equal = _UA_ModifyMonitoredItemsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>, ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsResponse_init(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
          'UA_ModifyMonitoredItemsResponse_init');
  late final _UA_ModifyMonitoredItemsResponse_init = _UA_ModifyMonitoredItemsResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsResponse> UA_ModifyMonitoredItemsResponse_new() {
    return _UA_ModifyMonitoredItemsResponse_new();
  }

  late final _UA_ModifyMonitoredItemsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModifyMonitoredItemsResponse> Function()>>(
          'UA_ModifyMonitoredItemsResponse_new');
  late final _UA_ModifyMonitoredItemsResponse_new =
      _UA_ModifyMonitoredItemsResponse_newPtr.asFunction<ffi.Pointer<UA_ModifyMonitoredItemsResponse> Function()>();

  int UA_ModifyMonitoredItemsResponse_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> src,
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> dst,
  ) {
    return _UA_ModifyMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
              ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>('UA_ModifyMonitoredItemsResponse_copy');
  late final _UA_ModifyMonitoredItemsResponse_copy = _UA_ModifyMonitoredItemsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>, ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
          'UA_ModifyMonitoredItemsResponse_clear');
  late final _UA_ModifyMonitoredItemsResponse_clear = _UA_ModifyMonitoredItemsResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
          'UA_ModifyMonitoredItemsResponse_delete');
  late final _UA_ModifyMonitoredItemsResponse_delete = _UA_ModifyMonitoredItemsResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  bool UA_ModifyMonitoredItemsResponse_equal(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p1,
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p2,
  ) {
    return _UA_ModifyMonitoredItemsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
              ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>('UA_ModifyMonitoredItemsResponse_equal');
  late final _UA_ModifyMonitoredItemsResponse_equal = _UA_ModifyMonitoredItemsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>, ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_SetMonitoringModeRequest_init(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
          'UA_SetMonitoringModeRequest_init');
  late final _UA_SetMonitoringModeRequest_init =
      _UA_SetMonitoringModeRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  ffi.Pointer<UA_SetMonitoringModeRequest> UA_SetMonitoringModeRequest_new() {
    return _UA_SetMonitoringModeRequest_new();
  }

  late final _UA_SetMonitoringModeRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetMonitoringModeRequest> Function()>>(
          'UA_SetMonitoringModeRequest_new');
  late final _UA_SetMonitoringModeRequest_new =
      _UA_SetMonitoringModeRequest_newPtr.asFunction<ffi.Pointer<UA_SetMonitoringModeRequest> Function()>();

  int UA_SetMonitoringModeRequest_copy(
    ffi.Pointer<UA_SetMonitoringModeRequest> src,
    ffi.Pointer<UA_SetMonitoringModeRequest> dst,
  ) {
    return _UA_SetMonitoringModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
              ffi.Pointer<UA_SetMonitoringModeRequest>)>>('UA_SetMonitoringModeRequest_copy');
  late final _UA_SetMonitoringModeRequest_copy = _UA_SetMonitoringModeRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetMonitoringModeRequest>, ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_clear(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
          'UA_SetMonitoringModeRequest_clear');
  late final _UA_SetMonitoringModeRequest_clear =
      _UA_SetMonitoringModeRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_delete(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
          'UA_SetMonitoringModeRequest_delete');
  late final _UA_SetMonitoringModeRequest_delete =
      _UA_SetMonitoringModeRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  bool UA_SetMonitoringModeRequest_equal(
    ffi.Pointer<UA_SetMonitoringModeRequest> p1,
    ffi.Pointer<UA_SetMonitoringModeRequest> p2,
  ) {
    return _UA_SetMonitoringModeRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetMonitoringModeRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
              ffi.Pointer<UA_SetMonitoringModeRequest>)>>('UA_SetMonitoringModeRequest_equal');
  late final _UA_SetMonitoringModeRequest_equal = _UA_SetMonitoringModeRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetMonitoringModeRequest>, ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeResponse_init(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
          'UA_SetMonitoringModeResponse_init');
  late final _UA_SetMonitoringModeResponse_init =
      _UA_SetMonitoringModeResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  ffi.Pointer<UA_SetMonitoringModeResponse> UA_SetMonitoringModeResponse_new() {
    return _UA_SetMonitoringModeResponse_new();
  }

  late final _UA_SetMonitoringModeResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetMonitoringModeResponse> Function()>>(
          'UA_SetMonitoringModeResponse_new');
  late final _UA_SetMonitoringModeResponse_new =
      _UA_SetMonitoringModeResponse_newPtr.asFunction<ffi.Pointer<UA_SetMonitoringModeResponse> Function()>();

  int UA_SetMonitoringModeResponse_copy(
    ffi.Pointer<UA_SetMonitoringModeResponse> src,
    ffi.Pointer<UA_SetMonitoringModeResponse> dst,
  ) {
    return _UA_SetMonitoringModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
              ffi.Pointer<UA_SetMonitoringModeResponse>)>>('UA_SetMonitoringModeResponse_copy');
  late final _UA_SetMonitoringModeResponse_copy = _UA_SetMonitoringModeResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetMonitoringModeResponse>, ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_clear(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
          'UA_SetMonitoringModeResponse_clear');
  late final _UA_SetMonitoringModeResponse_clear =
      _UA_SetMonitoringModeResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_delete(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
          'UA_SetMonitoringModeResponse_delete');
  late final _UA_SetMonitoringModeResponse_delete =
      _UA_SetMonitoringModeResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  bool UA_SetMonitoringModeResponse_equal(
    ffi.Pointer<UA_SetMonitoringModeResponse> p1,
    ffi.Pointer<UA_SetMonitoringModeResponse> p2,
  ) {
    return _UA_SetMonitoringModeResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetMonitoringModeResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
              ffi.Pointer<UA_SetMonitoringModeResponse>)>>('UA_SetMonitoringModeResponse_equal');
  late final _UA_SetMonitoringModeResponse_equal = _UA_SetMonitoringModeResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetMonitoringModeResponse>, ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetTriggeringRequest_init(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_init(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
          'UA_SetTriggeringRequest_init');
  late final _UA_SetTriggeringRequest_init =
      _UA_SetTriggeringRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  ffi.Pointer<UA_SetTriggeringRequest> UA_SetTriggeringRequest_new() {
    return _UA_SetTriggeringRequest_new();
  }

  late final _UA_SetTriggeringRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>>('UA_SetTriggeringRequest_new');
  late final _UA_SetTriggeringRequest_new =
      _UA_SetTriggeringRequest_newPtr.asFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>();

  int UA_SetTriggeringRequest_copy(
    ffi.Pointer<UA_SetTriggeringRequest> src,
    ffi.Pointer<UA_SetTriggeringRequest> dst,
  ) {
    return _UA_SetTriggeringRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringRequest>,
              ffi.Pointer<UA_SetTriggeringRequest>)>>('UA_SetTriggeringRequest_copy');
  late final _UA_SetTriggeringRequest_copy = _UA_SetTriggeringRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetTriggeringRequest>, ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_clear(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_clear(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
          'UA_SetTriggeringRequest_clear');
  late final _UA_SetTriggeringRequest_clear =
      _UA_SetTriggeringRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_delete(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_delete(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
          'UA_SetTriggeringRequest_delete');
  late final _UA_SetTriggeringRequest_delete =
      _UA_SetTriggeringRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  bool UA_SetTriggeringRequest_equal(
    ffi.Pointer<UA_SetTriggeringRequest> p1,
    ffi.Pointer<UA_SetTriggeringRequest> p2,
  ) {
    return _UA_SetTriggeringRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetTriggeringRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetTriggeringRequest>,
              ffi.Pointer<UA_SetTriggeringRequest>)>>('UA_SetTriggeringRequest_equal');
  late final _UA_SetTriggeringRequest_equal = _UA_SetTriggeringRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetTriggeringRequest>, ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringResponse_init(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_init(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
          'UA_SetTriggeringResponse_init');
  late final _UA_SetTriggeringResponse_init =
      _UA_SetTriggeringResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  ffi.Pointer<UA_SetTriggeringResponse> UA_SetTriggeringResponse_new() {
    return _UA_SetTriggeringResponse_new();
  }

  late final _UA_SetTriggeringResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>>('UA_SetTriggeringResponse_new');
  late final _UA_SetTriggeringResponse_new =
      _UA_SetTriggeringResponse_newPtr.asFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>();

  int UA_SetTriggeringResponse_copy(
    ffi.Pointer<UA_SetTriggeringResponse> src,
    ffi.Pointer<UA_SetTriggeringResponse> dst,
  ) {
    return _UA_SetTriggeringResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringResponse>,
              ffi.Pointer<UA_SetTriggeringResponse>)>>('UA_SetTriggeringResponse_copy');
  late final _UA_SetTriggeringResponse_copy = _UA_SetTriggeringResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetTriggeringResponse>, ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_clear(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_clear(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
          'UA_SetTriggeringResponse_clear');
  late final _UA_SetTriggeringResponse_clear =
      _UA_SetTriggeringResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_delete(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_delete(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
          'UA_SetTriggeringResponse_delete');
  late final _UA_SetTriggeringResponse_delete =
      _UA_SetTriggeringResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  bool UA_SetTriggeringResponse_equal(
    ffi.Pointer<UA_SetTriggeringResponse> p1,
    ffi.Pointer<UA_SetTriggeringResponse> p2,
  ) {
    return _UA_SetTriggeringResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetTriggeringResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetTriggeringResponse>,
              ffi.Pointer<UA_SetTriggeringResponse>)>>('UA_SetTriggeringResponse_equal');
  late final _UA_SetTriggeringResponse_equal = _UA_SetTriggeringResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetTriggeringResponse>, ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_DeleteMonitoredItemsRequest_init(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
          'UA_DeleteMonitoredItemsRequest_init');
  late final _UA_DeleteMonitoredItemsRequest_init =
      _UA_DeleteMonitoredItemsRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsRequest> UA_DeleteMonitoredItemsRequest_new() {
    return _UA_DeleteMonitoredItemsRequest_new();
  }

  late final _UA_DeleteMonitoredItemsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteMonitoredItemsRequest> Function()>>(
          'UA_DeleteMonitoredItemsRequest_new');
  late final _UA_DeleteMonitoredItemsRequest_new =
      _UA_DeleteMonitoredItemsRequest_newPtr.asFunction<ffi.Pointer<UA_DeleteMonitoredItemsRequest> Function()>();

  int UA_DeleteMonitoredItemsRequest_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> src,
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> dst,
  ) {
    return _UA_DeleteMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
              ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>('UA_DeleteMonitoredItemsRequest_copy');
  late final _UA_DeleteMonitoredItemsRequest_copy = _UA_DeleteMonitoredItemsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>, ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
          'UA_DeleteMonitoredItemsRequest_clear');
  late final _UA_DeleteMonitoredItemsRequest_clear =
      _UA_DeleteMonitoredItemsRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
          'UA_DeleteMonitoredItemsRequest_delete');
  late final _UA_DeleteMonitoredItemsRequest_delete = _UA_DeleteMonitoredItemsRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  bool UA_DeleteMonitoredItemsRequest_equal(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p1,
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p2,
  ) {
    return _UA_DeleteMonitoredItemsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
              ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>('UA_DeleteMonitoredItemsRequest_equal');
  late final _UA_DeleteMonitoredItemsRequest_equal = _UA_DeleteMonitoredItemsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>, ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsResponse_init(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
          'UA_DeleteMonitoredItemsResponse_init');
  late final _UA_DeleteMonitoredItemsResponse_init = _UA_DeleteMonitoredItemsResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsResponse> UA_DeleteMonitoredItemsResponse_new() {
    return _UA_DeleteMonitoredItemsResponse_new();
  }

  late final _UA_DeleteMonitoredItemsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteMonitoredItemsResponse> Function()>>(
          'UA_DeleteMonitoredItemsResponse_new');
  late final _UA_DeleteMonitoredItemsResponse_new =
      _UA_DeleteMonitoredItemsResponse_newPtr.asFunction<ffi.Pointer<UA_DeleteMonitoredItemsResponse> Function()>();

  int UA_DeleteMonitoredItemsResponse_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> src,
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> dst,
  ) {
    return _UA_DeleteMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
              ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>('UA_DeleteMonitoredItemsResponse_copy');
  late final _UA_DeleteMonitoredItemsResponse_copy = _UA_DeleteMonitoredItemsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>, ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
          'UA_DeleteMonitoredItemsResponse_clear');
  late final _UA_DeleteMonitoredItemsResponse_clear = _UA_DeleteMonitoredItemsResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
          'UA_DeleteMonitoredItemsResponse_delete');
  late final _UA_DeleteMonitoredItemsResponse_delete = _UA_DeleteMonitoredItemsResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  bool UA_DeleteMonitoredItemsResponse_equal(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p1,
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p2,
  ) {
    return _UA_DeleteMonitoredItemsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
              ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>('UA_DeleteMonitoredItemsResponse_equal');
  late final _UA_DeleteMonitoredItemsResponse_equal = _UA_DeleteMonitoredItemsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>, ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_CreateSubscriptionRequest_init(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
          'UA_CreateSubscriptionRequest_init');
  late final _UA_CreateSubscriptionRequest_init =
      _UA_CreateSubscriptionRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  ffi.Pointer<UA_CreateSubscriptionRequest> UA_CreateSubscriptionRequest_new() {
    return _UA_CreateSubscriptionRequest_new();
  }

  late final _UA_CreateSubscriptionRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateSubscriptionRequest> Function()>>(
          'UA_CreateSubscriptionRequest_new');
  late final _UA_CreateSubscriptionRequest_new =
      _UA_CreateSubscriptionRequest_newPtr.asFunction<ffi.Pointer<UA_CreateSubscriptionRequest> Function()>();

  int UA_CreateSubscriptionRequest_copy(
    ffi.Pointer<UA_CreateSubscriptionRequest> src,
    ffi.Pointer<UA_CreateSubscriptionRequest> dst,
  ) {
    return _UA_CreateSubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
              ffi.Pointer<UA_CreateSubscriptionRequest>)>>('UA_CreateSubscriptionRequest_copy');
  late final _UA_CreateSubscriptionRequest_copy = _UA_CreateSubscriptionRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateSubscriptionRequest>, ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_clear(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
          'UA_CreateSubscriptionRequest_clear');
  late final _UA_CreateSubscriptionRequest_clear =
      _UA_CreateSubscriptionRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_delete(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
          'UA_CreateSubscriptionRequest_delete');
  late final _UA_CreateSubscriptionRequest_delete =
      _UA_CreateSubscriptionRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  bool UA_CreateSubscriptionRequest_equal(
    ffi.Pointer<UA_CreateSubscriptionRequest> p1,
    ffi.Pointer<UA_CreateSubscriptionRequest> p2,
  ) {
    return _UA_CreateSubscriptionRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateSubscriptionRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
              ffi.Pointer<UA_CreateSubscriptionRequest>)>>('UA_CreateSubscriptionRequest_equal');
  late final _UA_CreateSubscriptionRequest_equal = _UA_CreateSubscriptionRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateSubscriptionRequest>, ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionResponse_init(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
          'UA_CreateSubscriptionResponse_init');
  late final _UA_CreateSubscriptionResponse_init =
      _UA_CreateSubscriptionResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  ffi.Pointer<UA_CreateSubscriptionResponse> UA_CreateSubscriptionResponse_new() {
    return _UA_CreateSubscriptionResponse_new();
  }

  late final _UA_CreateSubscriptionResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CreateSubscriptionResponse> Function()>>(
          'UA_CreateSubscriptionResponse_new');
  late final _UA_CreateSubscriptionResponse_new =
      _UA_CreateSubscriptionResponse_newPtr.asFunction<ffi.Pointer<UA_CreateSubscriptionResponse> Function()>();

  int UA_CreateSubscriptionResponse_copy(
    ffi.Pointer<UA_CreateSubscriptionResponse> src,
    ffi.Pointer<UA_CreateSubscriptionResponse> dst,
  ) {
    return _UA_CreateSubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
              ffi.Pointer<UA_CreateSubscriptionResponse>)>>('UA_CreateSubscriptionResponse_copy');
  late final _UA_CreateSubscriptionResponse_copy = _UA_CreateSubscriptionResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CreateSubscriptionResponse>, ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_clear(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
          'UA_CreateSubscriptionResponse_clear');
  late final _UA_CreateSubscriptionResponse_clear =
      _UA_CreateSubscriptionResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_delete(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
          'UA_CreateSubscriptionResponse_delete');
  late final _UA_CreateSubscriptionResponse_delete =
      _UA_CreateSubscriptionResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  bool UA_CreateSubscriptionResponse_equal(
    ffi.Pointer<UA_CreateSubscriptionResponse> p1,
    ffi.Pointer<UA_CreateSubscriptionResponse> p2,
  ) {
    return _UA_CreateSubscriptionResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_CreateSubscriptionResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
              ffi.Pointer<UA_CreateSubscriptionResponse>)>>('UA_CreateSubscriptionResponse_equal');
  late final _UA_CreateSubscriptionResponse_equal = _UA_CreateSubscriptionResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_CreateSubscriptionResponse>, ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_ModifySubscriptionRequest_init(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
          'UA_ModifySubscriptionRequest_init');
  late final _UA_ModifySubscriptionRequest_init =
      _UA_ModifySubscriptionRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  ffi.Pointer<UA_ModifySubscriptionRequest> UA_ModifySubscriptionRequest_new() {
    return _UA_ModifySubscriptionRequest_new();
  }

  late final _UA_ModifySubscriptionRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModifySubscriptionRequest> Function()>>(
          'UA_ModifySubscriptionRequest_new');
  late final _UA_ModifySubscriptionRequest_new =
      _UA_ModifySubscriptionRequest_newPtr.asFunction<ffi.Pointer<UA_ModifySubscriptionRequest> Function()>();

  int UA_ModifySubscriptionRequest_copy(
    ffi.Pointer<UA_ModifySubscriptionRequest> src,
    ffi.Pointer<UA_ModifySubscriptionRequest> dst,
  ) {
    return _UA_ModifySubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
              ffi.Pointer<UA_ModifySubscriptionRequest>)>>('UA_ModifySubscriptionRequest_copy');
  late final _UA_ModifySubscriptionRequest_copy = _UA_ModifySubscriptionRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModifySubscriptionRequest>, ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_clear(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
          'UA_ModifySubscriptionRequest_clear');
  late final _UA_ModifySubscriptionRequest_clear =
      _UA_ModifySubscriptionRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_delete(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
          'UA_ModifySubscriptionRequest_delete');
  late final _UA_ModifySubscriptionRequest_delete =
      _UA_ModifySubscriptionRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  bool UA_ModifySubscriptionRequest_equal(
    ffi.Pointer<UA_ModifySubscriptionRequest> p1,
    ffi.Pointer<UA_ModifySubscriptionRequest> p2,
  ) {
    return _UA_ModifySubscriptionRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModifySubscriptionRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
              ffi.Pointer<UA_ModifySubscriptionRequest>)>>('UA_ModifySubscriptionRequest_equal');
  late final _UA_ModifySubscriptionRequest_equal = _UA_ModifySubscriptionRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModifySubscriptionRequest>, ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionResponse_init(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
          'UA_ModifySubscriptionResponse_init');
  late final _UA_ModifySubscriptionResponse_init =
      _UA_ModifySubscriptionResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  ffi.Pointer<UA_ModifySubscriptionResponse> UA_ModifySubscriptionResponse_new() {
    return _UA_ModifySubscriptionResponse_new();
  }

  late final _UA_ModifySubscriptionResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModifySubscriptionResponse> Function()>>(
          'UA_ModifySubscriptionResponse_new');
  late final _UA_ModifySubscriptionResponse_new =
      _UA_ModifySubscriptionResponse_newPtr.asFunction<ffi.Pointer<UA_ModifySubscriptionResponse> Function()>();

  int UA_ModifySubscriptionResponse_copy(
    ffi.Pointer<UA_ModifySubscriptionResponse> src,
    ffi.Pointer<UA_ModifySubscriptionResponse> dst,
  ) {
    return _UA_ModifySubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
              ffi.Pointer<UA_ModifySubscriptionResponse>)>>('UA_ModifySubscriptionResponse_copy');
  late final _UA_ModifySubscriptionResponse_copy = _UA_ModifySubscriptionResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModifySubscriptionResponse>, ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_clear(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
          'UA_ModifySubscriptionResponse_clear');
  late final _UA_ModifySubscriptionResponse_clear =
      _UA_ModifySubscriptionResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_delete(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
          'UA_ModifySubscriptionResponse_delete');
  late final _UA_ModifySubscriptionResponse_delete =
      _UA_ModifySubscriptionResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  bool UA_ModifySubscriptionResponse_equal(
    ffi.Pointer<UA_ModifySubscriptionResponse> p1,
    ffi.Pointer<UA_ModifySubscriptionResponse> p2,
  ) {
    return _UA_ModifySubscriptionResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModifySubscriptionResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
              ffi.Pointer<UA_ModifySubscriptionResponse>)>>('UA_ModifySubscriptionResponse_equal');
  late final _UA_ModifySubscriptionResponse_equal = _UA_ModifySubscriptionResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModifySubscriptionResponse>, ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_SetPublishingModeRequest_init(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_init(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
          'UA_SetPublishingModeRequest_init');
  late final _UA_SetPublishingModeRequest_init =
      _UA_SetPublishingModeRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  ffi.Pointer<UA_SetPublishingModeRequest> UA_SetPublishingModeRequest_new() {
    return _UA_SetPublishingModeRequest_new();
  }

  late final _UA_SetPublishingModeRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetPublishingModeRequest> Function()>>(
          'UA_SetPublishingModeRequest_new');
  late final _UA_SetPublishingModeRequest_new =
      _UA_SetPublishingModeRequest_newPtr.asFunction<ffi.Pointer<UA_SetPublishingModeRequest> Function()>();

  int UA_SetPublishingModeRequest_copy(
    ffi.Pointer<UA_SetPublishingModeRequest> src,
    ffi.Pointer<UA_SetPublishingModeRequest> dst,
  ) {
    return _UA_SetPublishingModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeRequest>,
              ffi.Pointer<UA_SetPublishingModeRequest>)>>('UA_SetPublishingModeRequest_copy');
  late final _UA_SetPublishingModeRequest_copy = _UA_SetPublishingModeRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetPublishingModeRequest>, ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_clear(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
          'UA_SetPublishingModeRequest_clear');
  late final _UA_SetPublishingModeRequest_clear =
      _UA_SetPublishingModeRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_delete(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
          'UA_SetPublishingModeRequest_delete');
  late final _UA_SetPublishingModeRequest_delete =
      _UA_SetPublishingModeRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  bool UA_SetPublishingModeRequest_equal(
    ffi.Pointer<UA_SetPublishingModeRequest> p1,
    ffi.Pointer<UA_SetPublishingModeRequest> p2,
  ) {
    return _UA_SetPublishingModeRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetPublishingModeRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetPublishingModeRequest>,
              ffi.Pointer<UA_SetPublishingModeRequest>)>>('UA_SetPublishingModeRequest_equal');
  late final _UA_SetPublishingModeRequest_equal = _UA_SetPublishingModeRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetPublishingModeRequest>, ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeResponse_init(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_init(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
          'UA_SetPublishingModeResponse_init');
  late final _UA_SetPublishingModeResponse_init =
      _UA_SetPublishingModeResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  ffi.Pointer<UA_SetPublishingModeResponse> UA_SetPublishingModeResponse_new() {
    return _UA_SetPublishingModeResponse_new();
  }

  late final _UA_SetPublishingModeResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SetPublishingModeResponse> Function()>>(
          'UA_SetPublishingModeResponse_new');
  late final _UA_SetPublishingModeResponse_new =
      _UA_SetPublishingModeResponse_newPtr.asFunction<ffi.Pointer<UA_SetPublishingModeResponse> Function()>();

  int UA_SetPublishingModeResponse_copy(
    ffi.Pointer<UA_SetPublishingModeResponse> src,
    ffi.Pointer<UA_SetPublishingModeResponse> dst,
  ) {
    return _UA_SetPublishingModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeResponse>,
              ffi.Pointer<UA_SetPublishingModeResponse>)>>('UA_SetPublishingModeResponse_copy');
  late final _UA_SetPublishingModeResponse_copy = _UA_SetPublishingModeResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SetPublishingModeResponse>, ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_clear(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
          'UA_SetPublishingModeResponse_clear');
  late final _UA_SetPublishingModeResponse_clear =
      _UA_SetPublishingModeResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_delete(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
          'UA_SetPublishingModeResponse_delete');
  late final _UA_SetPublishingModeResponse_delete =
      _UA_SetPublishingModeResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  bool UA_SetPublishingModeResponse_equal(
    ffi.Pointer<UA_SetPublishingModeResponse> p1,
    ffi.Pointer<UA_SetPublishingModeResponse> p2,
  ) {
    return _UA_SetPublishingModeResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_SetPublishingModeResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SetPublishingModeResponse>,
              ffi.Pointer<UA_SetPublishingModeResponse>)>>('UA_SetPublishingModeResponse_equal');
  late final _UA_SetPublishingModeResponse_equal = _UA_SetPublishingModeResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SetPublishingModeResponse>, ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_NotificationMessage_init(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_init(
      p,
    );
  }

  late final _UA_NotificationMessage_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
          'UA_NotificationMessage_init');
  late final _UA_NotificationMessage_init =
      _UA_NotificationMessage_initPtr.asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  ffi.Pointer<UA_NotificationMessage> UA_NotificationMessage_new() {
    return _UA_NotificationMessage_new();
  }

  late final _UA_NotificationMessage_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NotificationMessage> Function()>>('UA_NotificationMessage_new');
  late final _UA_NotificationMessage_new =
      _UA_NotificationMessage_newPtr.asFunction<ffi.Pointer<UA_NotificationMessage> Function()>();

  int UA_NotificationMessage_copy(
    ffi.Pointer<UA_NotificationMessage> src,
    ffi.Pointer<UA_NotificationMessage> dst,
  ) {
    return _UA_NotificationMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_NotificationMessage_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NotificationMessage>,
              ffi.Pointer<UA_NotificationMessage>)>>('UA_NotificationMessage_copy');
  late final _UA_NotificationMessage_copy = _UA_NotificationMessage_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NotificationMessage>, ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_clear(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_clear(
      p,
    );
  }

  late final _UA_NotificationMessage_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
          'UA_NotificationMessage_clear');
  late final _UA_NotificationMessage_clear =
      _UA_NotificationMessage_clearPtr.asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_delete(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_delete(
      p,
    );
  }

  late final _UA_NotificationMessage_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
          'UA_NotificationMessage_delete');
  late final _UA_NotificationMessage_delete =
      _UA_NotificationMessage_deletePtr.asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  bool UA_NotificationMessage_equal(
    ffi.Pointer<UA_NotificationMessage> p1,
    ffi.Pointer<UA_NotificationMessage> p2,
  ) {
    return _UA_NotificationMessage_equal(
      p1,
      p2,
    );
  }

  late final _UA_NotificationMessage_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NotificationMessage>, ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_equal');
  late final _UA_NotificationMessage_equal = _UA_NotificationMessage_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NotificationMessage>, ffi.Pointer<UA_NotificationMessage>)>();

  void UA_MonitoredItemNotification_init(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_init(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
          'UA_MonitoredItemNotification_init');
  late final _UA_MonitoredItemNotification_init =
      _UA_MonitoredItemNotification_initPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  ffi.Pointer<UA_MonitoredItemNotification> UA_MonitoredItemNotification_new() {
    return _UA_MonitoredItemNotification_new();
  }

  late final _UA_MonitoredItemNotification_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MonitoredItemNotification> Function()>>(
          'UA_MonitoredItemNotification_new');
  late final _UA_MonitoredItemNotification_new =
      _UA_MonitoredItemNotification_newPtr.asFunction<ffi.Pointer<UA_MonitoredItemNotification> Function()>();

  int UA_MonitoredItemNotification_copy(
    ffi.Pointer<UA_MonitoredItemNotification> src,
    ffi.Pointer<UA_MonitoredItemNotification> dst,
  ) {
    return _UA_MonitoredItemNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemNotification_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemNotification>,
              ffi.Pointer<UA_MonitoredItemNotification>)>>('UA_MonitoredItemNotification_copy');
  late final _UA_MonitoredItemNotification_copy = _UA_MonitoredItemNotification_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MonitoredItemNotification>, ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_clear(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_clear(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
          'UA_MonitoredItemNotification_clear');
  late final _UA_MonitoredItemNotification_clear =
      _UA_MonitoredItemNotification_clearPtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_delete(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_delete(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
          'UA_MonitoredItemNotification_delete');
  late final _UA_MonitoredItemNotification_delete =
      _UA_MonitoredItemNotification_deletePtr.asFunction<void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  bool UA_MonitoredItemNotification_equal(
    ffi.Pointer<UA_MonitoredItemNotification> p1,
    ffi.Pointer<UA_MonitoredItemNotification> p2,
  ) {
    return _UA_MonitoredItemNotification_equal(
      p1,
      p2,
    );
  }

  late final _UA_MonitoredItemNotification_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_MonitoredItemNotification>,
              ffi.Pointer<UA_MonitoredItemNotification>)>>('UA_MonitoredItemNotification_equal');
  late final _UA_MonitoredItemNotification_equal = _UA_MonitoredItemNotification_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_MonitoredItemNotification>, ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_EventFieldList_init(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_init(
      p,
    );
  }

  late final _UA_EventFieldList_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>('UA_EventFieldList_init');
  late final _UA_EventFieldList_init =
      _UA_EventFieldList_initPtr.asFunction<void Function(ffi.Pointer<UA_EventFieldList>)>();

  ffi.Pointer<UA_EventFieldList> UA_EventFieldList_new() {
    return _UA_EventFieldList_new();
  }

  late final _UA_EventFieldList_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFieldList> Function()>>('UA_EventFieldList_new');
  late final _UA_EventFieldList_new = _UA_EventFieldList_newPtr.asFunction<ffi.Pointer<UA_EventFieldList> Function()>();

  int UA_EventFieldList_copy(
    ffi.Pointer<UA_EventFieldList> src,
    ffi.Pointer<UA_EventFieldList> dst,
  ) {
    return _UA_EventFieldList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFieldList_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_copy');
  late final _UA_EventFieldList_copy = _UA_EventFieldList_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_clear(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_clear(
      p,
    );
  }

  late final _UA_EventFieldList_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>('UA_EventFieldList_clear');
  late final _UA_EventFieldList_clear =
      _UA_EventFieldList_clearPtr.asFunction<void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_delete(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_delete(
      p,
    );
  }

  late final _UA_EventFieldList_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>('UA_EventFieldList_delete');
  late final _UA_EventFieldList_delete =
      _UA_EventFieldList_deletePtr.asFunction<void Function(ffi.Pointer<UA_EventFieldList>)>();

  bool UA_EventFieldList_equal(
    ffi.Pointer<UA_EventFieldList> p1,
    ffi.Pointer<UA_EventFieldList> p2,
  ) {
    return _UA_EventFieldList_equal(
      p1,
      p2,
    );
  }

  late final _UA_EventFieldList_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>>(
          'UA_EventFieldList_equal');
  late final _UA_EventFieldList_equal = _UA_EventFieldList_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>();

  void UA_HistoryEventFieldList_init(
    ffi.Pointer<UA_HistoryEventFieldList> p,
  ) {
    return _UA_HistoryEventFieldList_init(
      p,
    );
  }

  late final _UA_HistoryEventFieldList_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEventFieldList>)>>(
          'UA_HistoryEventFieldList_init');
  late final _UA_HistoryEventFieldList_init =
      _UA_HistoryEventFieldList_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryEventFieldList>)>();

  ffi.Pointer<UA_HistoryEventFieldList> UA_HistoryEventFieldList_new() {
    return _UA_HistoryEventFieldList_new();
  }

  late final _UA_HistoryEventFieldList_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryEventFieldList> Function()>>('UA_HistoryEventFieldList_new');
  late final _UA_HistoryEventFieldList_new =
      _UA_HistoryEventFieldList_newPtr.asFunction<ffi.Pointer<UA_HistoryEventFieldList> Function()>();

  int UA_HistoryEventFieldList_copy(
    ffi.Pointer<UA_HistoryEventFieldList> src,
    ffi.Pointer<UA_HistoryEventFieldList> dst,
  ) {
    return _UA_HistoryEventFieldList_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryEventFieldList_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryEventFieldList>,
              ffi.Pointer<UA_HistoryEventFieldList>)>>('UA_HistoryEventFieldList_copy');
  late final _UA_HistoryEventFieldList_copy = _UA_HistoryEventFieldList_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryEventFieldList>, ffi.Pointer<UA_HistoryEventFieldList>)>();

  void UA_HistoryEventFieldList_clear(
    ffi.Pointer<UA_HistoryEventFieldList> p,
  ) {
    return _UA_HistoryEventFieldList_clear(
      p,
    );
  }

  late final _UA_HistoryEventFieldList_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEventFieldList>)>>(
          'UA_HistoryEventFieldList_clear');
  late final _UA_HistoryEventFieldList_clear =
      _UA_HistoryEventFieldList_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryEventFieldList>)>();

  void UA_HistoryEventFieldList_delete(
    ffi.Pointer<UA_HistoryEventFieldList> p,
  ) {
    return _UA_HistoryEventFieldList_delete(
      p,
    );
  }

  late final _UA_HistoryEventFieldList_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEventFieldList>)>>(
          'UA_HistoryEventFieldList_delete');
  late final _UA_HistoryEventFieldList_delete =
      _UA_HistoryEventFieldList_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryEventFieldList>)>();

  bool UA_HistoryEventFieldList_equal(
    ffi.Pointer<UA_HistoryEventFieldList> p1,
    ffi.Pointer<UA_HistoryEventFieldList> p2,
  ) {
    return _UA_HistoryEventFieldList_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryEventFieldList_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_HistoryEventFieldList>,
              ffi.Pointer<UA_HistoryEventFieldList>)>>('UA_HistoryEventFieldList_equal');
  late final _UA_HistoryEventFieldList_equal = _UA_HistoryEventFieldList_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryEventFieldList>, ffi.Pointer<UA_HistoryEventFieldList>)>();

  void UA_StatusChangeNotification_init(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_init(
      p,
    );
  }

  late final _UA_StatusChangeNotification_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
          'UA_StatusChangeNotification_init');
  late final _UA_StatusChangeNotification_init =
      _UA_StatusChangeNotification_initPtr.asFunction<void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  ffi.Pointer<UA_StatusChangeNotification> UA_StatusChangeNotification_new() {
    return _UA_StatusChangeNotification_new();
  }

  late final _UA_StatusChangeNotification_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StatusChangeNotification> Function()>>(
          'UA_StatusChangeNotification_new');
  late final _UA_StatusChangeNotification_new =
      _UA_StatusChangeNotification_newPtr.asFunction<ffi.Pointer<UA_StatusChangeNotification> Function()>();

  int UA_StatusChangeNotification_copy(
    ffi.Pointer<UA_StatusChangeNotification> src,
    ffi.Pointer<UA_StatusChangeNotification> dst,
  ) {
    return _UA_StatusChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusChangeNotification_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StatusChangeNotification>,
              ffi.Pointer<UA_StatusChangeNotification>)>>('UA_StatusChangeNotification_copy');
  late final _UA_StatusChangeNotification_copy = _UA_StatusChangeNotification_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StatusChangeNotification>, ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_clear(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_clear(
      p,
    );
  }

  late final _UA_StatusChangeNotification_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
          'UA_StatusChangeNotification_clear');
  late final _UA_StatusChangeNotification_clear =
      _UA_StatusChangeNotification_clearPtr.asFunction<void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_delete(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_delete(
      p,
    );
  }

  late final _UA_StatusChangeNotification_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
          'UA_StatusChangeNotification_delete');
  late final _UA_StatusChangeNotification_delete =
      _UA_StatusChangeNotification_deletePtr.asFunction<void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  bool UA_StatusChangeNotification_equal(
    ffi.Pointer<UA_StatusChangeNotification> p1,
    ffi.Pointer<UA_StatusChangeNotification> p2,
  ) {
    return _UA_StatusChangeNotification_equal(
      p1,
      p2,
    );
  }

  late final _UA_StatusChangeNotification_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_StatusChangeNotification>,
              ffi.Pointer<UA_StatusChangeNotification>)>>('UA_StatusChangeNotification_equal');
  late final _UA_StatusChangeNotification_equal = _UA_StatusChangeNotification_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_StatusChangeNotification>, ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_SubscriptionAcknowledgement_init(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_init(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
          'UA_SubscriptionAcknowledgement_init');
  late final _UA_SubscriptionAcknowledgement_init =
      _UA_SubscriptionAcknowledgement_initPtr.asFunction<void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  ffi.Pointer<UA_SubscriptionAcknowledgement> UA_SubscriptionAcknowledgement_new() {
    return _UA_SubscriptionAcknowledgement_new();
  }

  late final _UA_SubscriptionAcknowledgement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SubscriptionAcknowledgement> Function()>>(
          'UA_SubscriptionAcknowledgement_new');
  late final _UA_SubscriptionAcknowledgement_new =
      _UA_SubscriptionAcknowledgement_newPtr.asFunction<ffi.Pointer<UA_SubscriptionAcknowledgement> Function()>();

  int UA_SubscriptionAcknowledgement_copy(
    ffi.Pointer<UA_SubscriptionAcknowledgement> src,
    ffi.Pointer<UA_SubscriptionAcknowledgement> dst,
  ) {
    return _UA_SubscriptionAcknowledgement_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscriptionAcknowledgement_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SubscriptionAcknowledgement>,
              ffi.Pointer<UA_SubscriptionAcknowledgement>)>>('UA_SubscriptionAcknowledgement_copy');
  late final _UA_SubscriptionAcknowledgement_copy = _UA_SubscriptionAcknowledgement_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SubscriptionAcknowledgement>, ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_clear(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_clear(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
          'UA_SubscriptionAcknowledgement_clear');
  late final _UA_SubscriptionAcknowledgement_clear =
      _UA_SubscriptionAcknowledgement_clearPtr.asFunction<void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_delete(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_delete(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
          'UA_SubscriptionAcknowledgement_delete');
  late final _UA_SubscriptionAcknowledgement_delete = _UA_SubscriptionAcknowledgement_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  bool UA_SubscriptionAcknowledgement_equal(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p1,
    ffi.Pointer<UA_SubscriptionAcknowledgement> p2,
  ) {
    return _UA_SubscriptionAcknowledgement_equal(
      p1,
      p2,
    );
  }

  late final _UA_SubscriptionAcknowledgement_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SubscriptionAcknowledgement>,
              ffi.Pointer<UA_SubscriptionAcknowledgement>)>>('UA_SubscriptionAcknowledgement_equal');
  late final _UA_SubscriptionAcknowledgement_equal = _UA_SubscriptionAcknowledgement_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SubscriptionAcknowledgement>, ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_PublishRequest_init(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_init(
      p,
    );
  }

  late final _UA_PublishRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>('UA_PublishRequest_init');
  late final _UA_PublishRequest_init =
      _UA_PublishRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishRequest>)>();

  ffi.Pointer<UA_PublishRequest> UA_PublishRequest_new() {
    return _UA_PublishRequest_new();
  }

  late final _UA_PublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishRequest> Function()>>('UA_PublishRequest_new');
  late final _UA_PublishRequest_new = _UA_PublishRequest_newPtr.asFunction<ffi.Pointer<UA_PublishRequest> Function()>();

  int UA_PublishRequest_copy(
    ffi.Pointer<UA_PublishRequest> src,
    ffi.Pointer<UA_PublishRequest> dst,
  ) {
    return _UA_PublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishRequest_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_copy');
  late final _UA_PublishRequest_copy = _UA_PublishRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_clear(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_clear(
      p,
    );
  }

  late final _UA_PublishRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>('UA_PublishRequest_clear');
  late final _UA_PublishRequest_clear =
      _UA_PublishRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_delete(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_delete(
      p,
    );
  }

  late final _UA_PublishRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>('UA_PublishRequest_delete');
  late final _UA_PublishRequest_delete =
      _UA_PublishRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishRequest>)>();

  bool UA_PublishRequest_equal(
    ffi.Pointer<UA_PublishRequest> p1,
    ffi.Pointer<UA_PublishRequest> p2,
  ) {
    return _UA_PublishRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishRequest_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>>(
          'UA_PublishRequest_equal');
  late final _UA_PublishRequest_equal = _UA_PublishRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishResponse_init(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_init(
      p,
    );
  }

  late final _UA_PublishResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>('UA_PublishResponse_init');
  late final _UA_PublishResponse_init =
      _UA_PublishResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  ffi.Pointer<UA_PublishResponse> UA_PublishResponse_new() {
    return _UA_PublishResponse_new();
  }

  late final _UA_PublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishResponse> Function()>>('UA_PublishResponse_new');
  late final _UA_PublishResponse_new =
      _UA_PublishResponse_newPtr.asFunction<ffi.Pointer<UA_PublishResponse> Function()>();

  int UA_PublishResponse_copy(
    ffi.Pointer<UA_PublishResponse> src,
    ffi.Pointer<UA_PublishResponse> dst,
  ) {
    return _UA_PublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishResponse_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_copy');
  late final _UA_PublishResponse_copy = _UA_PublishResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_clear(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_clear(
      p,
    );
  }

  late final _UA_PublishResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>('UA_PublishResponse_clear');
  late final _UA_PublishResponse_clear =
      _UA_PublishResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_delete(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_delete(
      p,
    );
  }

  late final _UA_PublishResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>('UA_PublishResponse_delete');
  late final _UA_PublishResponse_delete =
      _UA_PublishResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  bool UA_PublishResponse_equal(
    ffi.Pointer<UA_PublishResponse> p1,
    ffi.Pointer<UA_PublishResponse> p2,
  ) {
    return _UA_PublishResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishResponse_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>>(
          'UA_PublishResponse_equal');
  late final _UA_PublishResponse_equal = _UA_PublishResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>();

  void UA_RepublishRequest_init(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_init(
      p,
    );
  }

  late final _UA_RepublishRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>('UA_RepublishRequest_init');
  late final _UA_RepublishRequest_init =
      _UA_RepublishRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  ffi.Pointer<UA_RepublishRequest> UA_RepublishRequest_new() {
    return _UA_RepublishRequest_new();
  }

  late final _UA_RepublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishRequest> Function()>>('UA_RepublishRequest_new');
  late final _UA_RepublishRequest_new =
      _UA_RepublishRequest_newPtr.asFunction<ffi.Pointer<UA_RepublishRequest> Function()>();

  int UA_RepublishRequest_copy(
    ffi.Pointer<UA_RepublishRequest> src,
    ffi.Pointer<UA_RepublishRequest> dst,
  ) {
    return _UA_RepublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishRequest_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RepublishRequest>, ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_copy');
  late final _UA_RepublishRequest_copy = _UA_RepublishRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RepublishRequest>, ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_clear(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_clear(
      p,
    );
  }

  late final _UA_RepublishRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>('UA_RepublishRequest_clear');
  late final _UA_RepublishRequest_clear =
      _UA_RepublishRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_delete(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_delete(
      p,
    );
  }

  late final _UA_RepublishRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>('UA_RepublishRequest_delete');
  late final _UA_RepublishRequest_delete =
      _UA_RepublishRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  bool UA_RepublishRequest_equal(
    ffi.Pointer<UA_RepublishRequest> p1,
    ffi.Pointer<UA_RepublishRequest> p2,
  ) {
    return _UA_RepublishRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_RepublishRequest_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RepublishRequest>, ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_equal');
  late final _UA_RepublishRequest_equal = _UA_RepublishRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RepublishRequest>, ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishResponse_init(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_init(
      p,
    );
  }

  late final _UA_RepublishResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_init');
  late final _UA_RepublishResponse_init =
      _UA_RepublishResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  ffi.Pointer<UA_RepublishResponse> UA_RepublishResponse_new() {
    return _UA_RepublishResponse_new();
  }

  late final _UA_RepublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishResponse> Function()>>('UA_RepublishResponse_new');
  late final _UA_RepublishResponse_new =
      _UA_RepublishResponse_newPtr.asFunction<ffi.Pointer<UA_RepublishResponse> Function()>();

  int UA_RepublishResponse_copy(
    ffi.Pointer<UA_RepublishResponse> src,
    ffi.Pointer<UA_RepublishResponse> dst,
  ) {
    return _UA_RepublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_RepublishResponse>, ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_copy');
  late final _UA_RepublishResponse_copy = _UA_RepublishResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RepublishResponse>, ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_clear(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_clear(
      p,
    );
  }

  late final _UA_RepublishResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_clear');
  late final _UA_RepublishResponse_clear =
      _UA_RepublishResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_delete(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_delete(
      p,
    );
  }

  late final _UA_RepublishResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_delete');
  late final _UA_RepublishResponse_delete =
      _UA_RepublishResponse_deletePtr.asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  bool UA_RepublishResponse_equal(
    ffi.Pointer<UA_RepublishResponse> p1,
    ffi.Pointer<UA_RepublishResponse> p2,
  ) {
    return _UA_RepublishResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_RepublishResponse_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_RepublishResponse>, ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_equal');
  late final _UA_RepublishResponse_equal = _UA_RepublishResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RepublishResponse>, ffi.Pointer<UA_RepublishResponse>)>();

  void UA_TransferResult_init(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_init(
      p,
    );
  }

  late final _UA_TransferResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>('UA_TransferResult_init');
  late final _UA_TransferResult_init =
      _UA_TransferResult_initPtr.asFunction<void Function(ffi.Pointer<UA_TransferResult>)>();

  ffi.Pointer<UA_TransferResult> UA_TransferResult_new() {
    return _UA_TransferResult_new();
  }

  late final _UA_TransferResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransferResult> Function()>>('UA_TransferResult_new');
  late final _UA_TransferResult_new = _UA_TransferResult_newPtr.asFunction<ffi.Pointer<UA_TransferResult> Function()>();

  int UA_TransferResult_copy(
    ffi.Pointer<UA_TransferResult> src,
    ffi.Pointer<UA_TransferResult> dst,
  ) {
    return _UA_TransferResult_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferResult_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_copy');
  late final _UA_TransferResult_copy = _UA_TransferResult_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_clear(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_clear(
      p,
    );
  }

  late final _UA_TransferResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>('UA_TransferResult_clear');
  late final _UA_TransferResult_clear =
      _UA_TransferResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_delete(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_delete(
      p,
    );
  }

  late final _UA_TransferResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>('UA_TransferResult_delete');
  late final _UA_TransferResult_delete =
      _UA_TransferResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_TransferResult>)>();

  bool UA_TransferResult_equal(
    ffi.Pointer<UA_TransferResult> p1,
    ffi.Pointer<UA_TransferResult> p2,
  ) {
    return _UA_TransferResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_TransferResult_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>>(
          'UA_TransferResult_equal');
  late final _UA_TransferResult_equal = _UA_TransferResult_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferSubscriptionsRequest_init(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
          'UA_TransferSubscriptionsRequest_init');
  late final _UA_TransferSubscriptionsRequest_init = _UA_TransferSubscriptionsRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  ffi.Pointer<UA_TransferSubscriptionsRequest> UA_TransferSubscriptionsRequest_new() {
    return _UA_TransferSubscriptionsRequest_new();
  }

  late final _UA_TransferSubscriptionsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransferSubscriptionsRequest> Function()>>(
          'UA_TransferSubscriptionsRequest_new');
  late final _UA_TransferSubscriptionsRequest_new =
      _UA_TransferSubscriptionsRequest_newPtr.asFunction<ffi.Pointer<UA_TransferSubscriptionsRequest> Function()>();

  int UA_TransferSubscriptionsRequest_copy(
    ffi.Pointer<UA_TransferSubscriptionsRequest> src,
    ffi.Pointer<UA_TransferSubscriptionsRequest> dst,
  ) {
    return _UA_TransferSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TransferSubscriptionsRequest>,
              ffi.Pointer<UA_TransferSubscriptionsRequest>)>>('UA_TransferSubscriptionsRequest_copy');
  late final _UA_TransferSubscriptionsRequest_copy = _UA_TransferSubscriptionsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TransferSubscriptionsRequest>, ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_clear(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
          'UA_TransferSubscriptionsRequest_clear');
  late final _UA_TransferSubscriptionsRequest_clear = _UA_TransferSubscriptionsRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_delete(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
          'UA_TransferSubscriptionsRequest_delete');
  late final _UA_TransferSubscriptionsRequest_delete = _UA_TransferSubscriptionsRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  bool UA_TransferSubscriptionsRequest_equal(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p1,
    ffi.Pointer<UA_TransferSubscriptionsRequest> p2,
  ) {
    return _UA_TransferSubscriptionsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_TransferSubscriptionsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TransferSubscriptionsRequest>,
              ffi.Pointer<UA_TransferSubscriptionsRequest>)>>('UA_TransferSubscriptionsRequest_equal');
  late final _UA_TransferSubscriptionsRequest_equal = _UA_TransferSubscriptionsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TransferSubscriptionsRequest>, ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsResponse_init(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
          'UA_TransferSubscriptionsResponse_init');
  late final _UA_TransferSubscriptionsResponse_init = _UA_TransferSubscriptionsResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  ffi.Pointer<UA_TransferSubscriptionsResponse> UA_TransferSubscriptionsResponse_new() {
    return _UA_TransferSubscriptionsResponse_new();
  }

  late final _UA_TransferSubscriptionsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransferSubscriptionsResponse> Function()>>(
          'UA_TransferSubscriptionsResponse_new');
  late final _UA_TransferSubscriptionsResponse_new =
      _UA_TransferSubscriptionsResponse_newPtr.asFunction<ffi.Pointer<UA_TransferSubscriptionsResponse> Function()>();

  int UA_TransferSubscriptionsResponse_copy(
    ffi.Pointer<UA_TransferSubscriptionsResponse> src,
    ffi.Pointer<UA_TransferSubscriptionsResponse> dst,
  ) {
    return _UA_TransferSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TransferSubscriptionsResponse>,
              ffi.Pointer<UA_TransferSubscriptionsResponse>)>>('UA_TransferSubscriptionsResponse_copy');
  late final _UA_TransferSubscriptionsResponse_copy = _UA_TransferSubscriptionsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TransferSubscriptionsResponse>, ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_clear(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
          'UA_TransferSubscriptionsResponse_clear');
  late final _UA_TransferSubscriptionsResponse_clear = _UA_TransferSubscriptionsResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_delete(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
          'UA_TransferSubscriptionsResponse_delete');
  late final _UA_TransferSubscriptionsResponse_delete = _UA_TransferSubscriptionsResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  bool UA_TransferSubscriptionsResponse_equal(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p1,
    ffi.Pointer<UA_TransferSubscriptionsResponse> p2,
  ) {
    return _UA_TransferSubscriptionsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_TransferSubscriptionsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TransferSubscriptionsResponse>,
              ffi.Pointer<UA_TransferSubscriptionsResponse>)>>('UA_TransferSubscriptionsResponse_equal');
  late final _UA_TransferSubscriptionsResponse_equal = _UA_TransferSubscriptionsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TransferSubscriptionsResponse>, ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsRequest_init(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
          'UA_DeleteSubscriptionsRequest_init');
  late final _UA_DeleteSubscriptionsRequest_init =
      _UA_DeleteSubscriptionsRequest_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  ffi.Pointer<UA_DeleteSubscriptionsRequest> UA_DeleteSubscriptionsRequest_new() {
    return _UA_DeleteSubscriptionsRequest_new();
  }

  late final _UA_DeleteSubscriptionsRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteSubscriptionsRequest> Function()>>(
          'UA_DeleteSubscriptionsRequest_new');
  late final _UA_DeleteSubscriptionsRequest_new =
      _UA_DeleteSubscriptionsRequest_newPtr.asFunction<ffi.Pointer<UA_DeleteSubscriptionsRequest> Function()>();

  int UA_DeleteSubscriptionsRequest_copy(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> src,
    ffi.Pointer<UA_DeleteSubscriptionsRequest> dst,
  ) {
    return _UA_DeleteSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
              ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>('UA_DeleteSubscriptionsRequest_copy');
  late final _UA_DeleteSubscriptionsRequest_copy = _UA_DeleteSubscriptionsRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>, ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_clear(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
          'UA_DeleteSubscriptionsRequest_clear');
  late final _UA_DeleteSubscriptionsRequest_clear =
      _UA_DeleteSubscriptionsRequest_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_delete(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
          'UA_DeleteSubscriptionsRequest_delete');
  late final _UA_DeleteSubscriptionsRequest_delete =
      _UA_DeleteSubscriptionsRequest_deletePtr.asFunction<void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  bool UA_DeleteSubscriptionsRequest_equal(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p1,
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p2,
  ) {
    return _UA_DeleteSubscriptionsRequest_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
              ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>('UA_DeleteSubscriptionsRequest_equal');
  late final _UA_DeleteSubscriptionsRequest_equal = _UA_DeleteSubscriptionsRequest_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>, ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsResponse_init(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
          'UA_DeleteSubscriptionsResponse_init');
  late final _UA_DeleteSubscriptionsResponse_init =
      _UA_DeleteSubscriptionsResponse_initPtr.asFunction<void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  ffi.Pointer<UA_DeleteSubscriptionsResponse> UA_DeleteSubscriptionsResponse_new() {
    return _UA_DeleteSubscriptionsResponse_new();
  }

  late final _UA_DeleteSubscriptionsResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteSubscriptionsResponse> Function()>>(
          'UA_DeleteSubscriptionsResponse_new');
  late final _UA_DeleteSubscriptionsResponse_new =
      _UA_DeleteSubscriptionsResponse_newPtr.asFunction<ffi.Pointer<UA_DeleteSubscriptionsResponse> Function()>();

  int UA_DeleteSubscriptionsResponse_copy(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> src,
    ffi.Pointer<UA_DeleteSubscriptionsResponse> dst,
  ) {
    return _UA_DeleteSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>,
              ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>('UA_DeleteSubscriptionsResponse_copy');
  late final _UA_DeleteSubscriptionsResponse_copy = _UA_DeleteSubscriptionsResponse_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>, ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_clear(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
          'UA_DeleteSubscriptionsResponse_clear');
  late final _UA_DeleteSubscriptionsResponse_clear =
      _UA_DeleteSubscriptionsResponse_clearPtr.asFunction<void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_delete(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
          'UA_DeleteSubscriptionsResponse_delete');
  late final _UA_DeleteSubscriptionsResponse_delete = _UA_DeleteSubscriptionsResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  bool UA_DeleteSubscriptionsResponse_equal(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p1,
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p2,
  ) {
    return _UA_DeleteSubscriptionsResponse_equal(
      p1,
      p2,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>,
              ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>('UA_DeleteSubscriptionsResponse_equal');
  late final _UA_DeleteSubscriptionsResponse_equal = _UA_DeleteSubscriptionsResponse_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>, ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_BuildInfo_init(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_init(
      p,
    );
  }

  late final _UA_BuildInfo_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>('UA_BuildInfo_init');
  late final _UA_BuildInfo_init = _UA_BuildInfo_initPtr.asFunction<void Function(ffi.Pointer<UA_BuildInfo>)>();

  ffi.Pointer<UA_BuildInfo> UA_BuildInfo_new() {
    return _UA_BuildInfo_new();
  }

  late final _UA_BuildInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BuildInfo> Function()>>('UA_BuildInfo_new');
  late final _UA_BuildInfo_new = _UA_BuildInfo_newPtr.asFunction<ffi.Pointer<UA_BuildInfo> Function()>();

  int UA_BuildInfo_copy(
    ffi.Pointer<UA_BuildInfo> src,
    ffi.Pointer<UA_BuildInfo> dst,
  ) {
    return _UA_BuildInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_BuildInfo_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_copy');
  late final _UA_BuildInfo_copy =
      _UA_BuildInfo_copyPtr.asFunction<int Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_clear(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_clear(
      p,
    );
  }

  late final _UA_BuildInfo_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>('UA_BuildInfo_clear');
  late final _UA_BuildInfo_clear = _UA_BuildInfo_clearPtr.asFunction<void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_delete(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_delete(
      p,
    );
  }

  late final _UA_BuildInfo_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>('UA_BuildInfo_delete');
  late final _UA_BuildInfo_delete = _UA_BuildInfo_deletePtr.asFunction<void Function(ffi.Pointer<UA_BuildInfo>)>();

  bool UA_BuildInfo_equal(
    ffi.Pointer<UA_BuildInfo> p1,
    ffi.Pointer<UA_BuildInfo> p2,
  ) {
    return _UA_BuildInfo_equal(
      p1,
      p2,
    );
  }

  late final _UA_BuildInfo_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_equal');
  late final _UA_BuildInfo_equal =
      _UA_BuildInfo_equalPtr.asFunction<bool Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>();

  void UA_RedundancySupport_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_RedundancySupport_init(
      p,
    );
  }

  late final _UA_RedundancySupport_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_RedundancySupport_init');
  late final _UA_RedundancySupport_init =
      _UA_RedundancySupport_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_RedundancySupport_new() {
    return _UA_RedundancySupport_new();
  }

  late final _UA_RedundancySupport_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_RedundancySupport_new');
  late final _UA_RedundancySupport_new =
      _UA_RedundancySupport_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_RedundancySupport_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_RedundancySupport_copy(
      src,
      dst,
    );
  }

  late final _UA_RedundancySupport_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_RedundancySupport_copy');
  late final _UA_RedundancySupport_copy = _UA_RedundancySupport_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_RedundancySupport_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_RedundancySupport_clear(
      p,
    );
  }

  late final _UA_RedundancySupport_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_RedundancySupport_clear');
  late final _UA_RedundancySupport_clear =
      _UA_RedundancySupport_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_RedundancySupport_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_RedundancySupport_delete(
      p,
    );
  }

  late final _UA_RedundancySupport_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_RedundancySupport_delete');
  late final _UA_RedundancySupport_delete =
      _UA_RedundancySupport_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_RedundancySupport_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_RedundancySupport_equal(
      p1,
      p2,
    );
  }

  late final _UA_RedundancySupport_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_RedundancySupport_equal');
  late final _UA_RedundancySupport_equal = _UA_RedundancySupport_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ServerState_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ServerState_init(
      p,
    );
  }

  late final _UA_ServerState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ServerState_init');
  late final _UA_ServerState_init = _UA_ServerState_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_ServerState_new() {
    return _UA_ServerState_new();
  }

  late final _UA_ServerState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_ServerState_new');
  late final _UA_ServerState_new = _UA_ServerState_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_ServerState_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_ServerState_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerState_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ServerState_copy');
  late final _UA_ServerState_copy =
      _UA_ServerState_copyPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ServerState_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ServerState_clear(
      p,
    );
  }

  late final _UA_ServerState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ServerState_clear');
  late final _UA_ServerState_clear = _UA_ServerState_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ServerState_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ServerState_delete(
      p,
    );
  }

  late final _UA_ServerState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ServerState_delete');
  late final _UA_ServerState_delete =
      _UA_ServerState_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_ServerState_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_ServerState_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServerState_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ServerState_equal');
  late final _UA_ServerState_equal =
      _UA_ServerState_equalPtr.asFunction<bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_RedundantServerDataType_init(
    ffi.Pointer<UA_RedundantServerDataType> p,
  ) {
    return _UA_RedundantServerDataType_init(
      p,
    );
  }

  late final _UA_RedundantServerDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RedundantServerDataType>)>>(
          'UA_RedundantServerDataType_init');
  late final _UA_RedundantServerDataType_init =
      _UA_RedundantServerDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_RedundantServerDataType>)>();

  ffi.Pointer<UA_RedundantServerDataType> UA_RedundantServerDataType_new() {
    return _UA_RedundantServerDataType_new();
  }

  late final _UA_RedundantServerDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RedundantServerDataType> Function()>>('UA_RedundantServerDataType_new');
  late final _UA_RedundantServerDataType_new =
      _UA_RedundantServerDataType_newPtr.asFunction<ffi.Pointer<UA_RedundantServerDataType> Function()>();

  int UA_RedundantServerDataType_copy(
    ffi.Pointer<UA_RedundantServerDataType> src,
    ffi.Pointer<UA_RedundantServerDataType> dst,
  ) {
    return _UA_RedundantServerDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_RedundantServerDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RedundantServerDataType>,
              ffi.Pointer<UA_RedundantServerDataType>)>>('UA_RedundantServerDataType_copy');
  late final _UA_RedundantServerDataType_copy = _UA_RedundantServerDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_RedundantServerDataType>, ffi.Pointer<UA_RedundantServerDataType>)>();

  void UA_RedundantServerDataType_clear(
    ffi.Pointer<UA_RedundantServerDataType> p,
  ) {
    return _UA_RedundantServerDataType_clear(
      p,
    );
  }

  late final _UA_RedundantServerDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RedundantServerDataType>)>>(
          'UA_RedundantServerDataType_clear');
  late final _UA_RedundantServerDataType_clear =
      _UA_RedundantServerDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_RedundantServerDataType>)>();

  void UA_RedundantServerDataType_delete(
    ffi.Pointer<UA_RedundantServerDataType> p,
  ) {
    return _UA_RedundantServerDataType_delete(
      p,
    );
  }

  late final _UA_RedundantServerDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RedundantServerDataType>)>>(
          'UA_RedundantServerDataType_delete');
  late final _UA_RedundantServerDataType_delete =
      _UA_RedundantServerDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_RedundantServerDataType>)>();

  bool UA_RedundantServerDataType_equal(
    ffi.Pointer<UA_RedundantServerDataType> p1,
    ffi.Pointer<UA_RedundantServerDataType> p2,
  ) {
    return _UA_RedundantServerDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_RedundantServerDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_RedundantServerDataType>,
              ffi.Pointer<UA_RedundantServerDataType>)>>('UA_RedundantServerDataType_equal');
  late final _UA_RedundantServerDataType_equal = _UA_RedundantServerDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_RedundantServerDataType>, ffi.Pointer<UA_RedundantServerDataType>)>();

  void UA_EndpointUrlListDataType_init(
    ffi.Pointer<UA_EndpointUrlListDataType> p,
  ) {
    return _UA_EndpointUrlListDataType_init(
      p,
    );
  }

  late final _UA_EndpointUrlListDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>>(
          'UA_EndpointUrlListDataType_init');
  late final _UA_EndpointUrlListDataType_init =
      _UA_EndpointUrlListDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>();

  ffi.Pointer<UA_EndpointUrlListDataType> UA_EndpointUrlListDataType_new() {
    return _UA_EndpointUrlListDataType_new();
  }

  late final _UA_EndpointUrlListDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EndpointUrlListDataType> Function()>>('UA_EndpointUrlListDataType_new');
  late final _UA_EndpointUrlListDataType_new =
      _UA_EndpointUrlListDataType_newPtr.asFunction<ffi.Pointer<UA_EndpointUrlListDataType> Function()>();

  int UA_EndpointUrlListDataType_copy(
    ffi.Pointer<UA_EndpointUrlListDataType> src,
    ffi.Pointer<UA_EndpointUrlListDataType> dst,
  ) {
    return _UA_EndpointUrlListDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointUrlListDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EndpointUrlListDataType>,
              ffi.Pointer<UA_EndpointUrlListDataType>)>>('UA_EndpointUrlListDataType_copy');
  late final _UA_EndpointUrlListDataType_copy = _UA_EndpointUrlListDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EndpointUrlListDataType>, ffi.Pointer<UA_EndpointUrlListDataType>)>();

  void UA_EndpointUrlListDataType_clear(
    ffi.Pointer<UA_EndpointUrlListDataType> p,
  ) {
    return _UA_EndpointUrlListDataType_clear(
      p,
    );
  }

  late final _UA_EndpointUrlListDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>>(
          'UA_EndpointUrlListDataType_clear');
  late final _UA_EndpointUrlListDataType_clear =
      _UA_EndpointUrlListDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>();

  void UA_EndpointUrlListDataType_delete(
    ffi.Pointer<UA_EndpointUrlListDataType> p,
  ) {
    return _UA_EndpointUrlListDataType_delete(
      p,
    );
  }

  late final _UA_EndpointUrlListDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>>(
          'UA_EndpointUrlListDataType_delete');
  late final _UA_EndpointUrlListDataType_delete =
      _UA_EndpointUrlListDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_EndpointUrlListDataType>)>();

  bool UA_EndpointUrlListDataType_equal(
    ffi.Pointer<UA_EndpointUrlListDataType> p1,
    ffi.Pointer<UA_EndpointUrlListDataType> p2,
  ) {
    return _UA_EndpointUrlListDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_EndpointUrlListDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_EndpointUrlListDataType>,
              ffi.Pointer<UA_EndpointUrlListDataType>)>>('UA_EndpointUrlListDataType_equal');
  late final _UA_EndpointUrlListDataType_equal = _UA_EndpointUrlListDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EndpointUrlListDataType>, ffi.Pointer<UA_EndpointUrlListDataType>)>();

  void UA_NetworkGroupDataType_init(
    ffi.Pointer<UA_NetworkGroupDataType> p,
  ) {
    return _UA_NetworkGroupDataType_init(
      p,
    );
  }

  late final _UA_NetworkGroupDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkGroupDataType>)>>(
          'UA_NetworkGroupDataType_init');
  late final _UA_NetworkGroupDataType_init =
      _UA_NetworkGroupDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_NetworkGroupDataType>)>();

  ffi.Pointer<UA_NetworkGroupDataType> UA_NetworkGroupDataType_new() {
    return _UA_NetworkGroupDataType_new();
  }

  late final _UA_NetworkGroupDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NetworkGroupDataType> Function()>>('UA_NetworkGroupDataType_new');
  late final _UA_NetworkGroupDataType_new =
      _UA_NetworkGroupDataType_newPtr.asFunction<ffi.Pointer<UA_NetworkGroupDataType> Function()>();

  int UA_NetworkGroupDataType_copy(
    ffi.Pointer<UA_NetworkGroupDataType> src,
    ffi.Pointer<UA_NetworkGroupDataType> dst,
  ) {
    return _UA_NetworkGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_NetworkGroupDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NetworkGroupDataType>,
              ffi.Pointer<UA_NetworkGroupDataType>)>>('UA_NetworkGroupDataType_copy');
  late final _UA_NetworkGroupDataType_copy = _UA_NetworkGroupDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkGroupDataType>, ffi.Pointer<UA_NetworkGroupDataType>)>();

  void UA_NetworkGroupDataType_clear(
    ffi.Pointer<UA_NetworkGroupDataType> p,
  ) {
    return _UA_NetworkGroupDataType_clear(
      p,
    );
  }

  late final _UA_NetworkGroupDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkGroupDataType>)>>(
          'UA_NetworkGroupDataType_clear');
  late final _UA_NetworkGroupDataType_clear =
      _UA_NetworkGroupDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_NetworkGroupDataType>)>();

  void UA_NetworkGroupDataType_delete(
    ffi.Pointer<UA_NetworkGroupDataType> p,
  ) {
    return _UA_NetworkGroupDataType_delete(
      p,
    );
  }

  late final _UA_NetworkGroupDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkGroupDataType>)>>(
          'UA_NetworkGroupDataType_delete');
  late final _UA_NetworkGroupDataType_delete =
      _UA_NetworkGroupDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_NetworkGroupDataType>)>();

  bool UA_NetworkGroupDataType_equal(
    ffi.Pointer<UA_NetworkGroupDataType> p1,
    ffi.Pointer<UA_NetworkGroupDataType> p2,
  ) {
    return _UA_NetworkGroupDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_NetworkGroupDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_NetworkGroupDataType>,
              ffi.Pointer<UA_NetworkGroupDataType>)>>('UA_NetworkGroupDataType_equal');
  late final _UA_NetworkGroupDataType_equal = _UA_NetworkGroupDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NetworkGroupDataType>, ffi.Pointer<UA_NetworkGroupDataType>)>();

  void UA_SamplingIntervalDiagnosticsDataType_init(
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> p,
  ) {
    return _UA_SamplingIntervalDiagnosticsDataType_init(
      p,
    );
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>>(
          'UA_SamplingIntervalDiagnosticsDataType_init');
  late final _UA_SamplingIntervalDiagnosticsDataType_init = _UA_SamplingIntervalDiagnosticsDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>();

  ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> UA_SamplingIntervalDiagnosticsDataType_new() {
    return _UA_SamplingIntervalDiagnosticsDataType_new();
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> Function()>>(
          'UA_SamplingIntervalDiagnosticsDataType_new');
  late final _UA_SamplingIntervalDiagnosticsDataType_new = _UA_SamplingIntervalDiagnosticsDataType_newPtr.asFunction<
      ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> Function()>();

  int UA_SamplingIntervalDiagnosticsDataType_copy(
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> src,
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> dst,
  ) {
    return _UA_SamplingIntervalDiagnosticsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>,
              ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>>('UA_SamplingIntervalDiagnosticsDataType_copy');
  late final _UA_SamplingIntervalDiagnosticsDataType_copy = _UA_SamplingIntervalDiagnosticsDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>, ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>();

  void UA_SamplingIntervalDiagnosticsDataType_clear(
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> p,
  ) {
    return _UA_SamplingIntervalDiagnosticsDataType_clear(
      p,
    );
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>>(
          'UA_SamplingIntervalDiagnosticsDataType_clear');
  late final _UA_SamplingIntervalDiagnosticsDataType_clear = _UA_SamplingIntervalDiagnosticsDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>();

  void UA_SamplingIntervalDiagnosticsDataType_delete(
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> p,
  ) {
    return _UA_SamplingIntervalDiagnosticsDataType_delete(
      p,
    );
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>>(
          'UA_SamplingIntervalDiagnosticsDataType_delete');
  late final _UA_SamplingIntervalDiagnosticsDataType_delete = _UA_SamplingIntervalDiagnosticsDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>();

  bool UA_SamplingIntervalDiagnosticsDataType_equal(
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> p1,
    ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType> p2,
  ) {
    return _UA_SamplingIntervalDiagnosticsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SamplingIntervalDiagnosticsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>,
              ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>>('UA_SamplingIntervalDiagnosticsDataType_equal');
  late final _UA_SamplingIntervalDiagnosticsDataType_equal =
      _UA_SamplingIntervalDiagnosticsDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>,
              ffi.Pointer<UA_SamplingIntervalDiagnosticsDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_init(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_init(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
          'UA_ServerDiagnosticsSummaryDataType_init');
  late final _UA_ServerDiagnosticsSummaryDataType_init = _UA_ServerDiagnosticsSummaryDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> UA_ServerDiagnosticsSummaryDataType_new() {
    return _UA_ServerDiagnosticsSummaryDataType_new();
  }

  late final _UA_ServerDiagnosticsSummaryDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> Function()>>(
          'UA_ServerDiagnosticsSummaryDataType_new');
  late final _UA_ServerDiagnosticsSummaryDataType_new = _UA_ServerDiagnosticsSummaryDataType_newPtr.asFunction<
      ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> Function()>();

  int UA_ServerDiagnosticsSummaryDataType_copy(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> src,
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> dst,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
              ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>('UA_ServerDiagnosticsSummaryDataType_copy');
  late final _UA_ServerDiagnosticsSummaryDataType_copy = _UA_ServerDiagnosticsSummaryDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>, ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_clear(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_clear(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
          'UA_ServerDiagnosticsSummaryDataType_clear');
  late final _UA_ServerDiagnosticsSummaryDataType_clear = _UA_ServerDiagnosticsSummaryDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_delete(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_delete(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
          'UA_ServerDiagnosticsSummaryDataType_delete');
  late final _UA_ServerDiagnosticsSummaryDataType_delete = _UA_ServerDiagnosticsSummaryDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  bool UA_ServerDiagnosticsSummaryDataType_equal(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p1,
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p2,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
              ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>('UA_ServerDiagnosticsSummaryDataType_equal');
  late final _UA_ServerDiagnosticsSummaryDataType_equal = _UA_ServerDiagnosticsSummaryDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>, ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerStatusDataType_init(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_init(
      p,
    );
  }

  late final _UA_ServerStatusDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
          'UA_ServerStatusDataType_init');
  late final _UA_ServerStatusDataType_init =
      _UA_ServerStatusDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  ffi.Pointer<UA_ServerStatusDataType> UA_ServerStatusDataType_new() {
    return _UA_ServerStatusDataType_new();
  }

  late final _UA_ServerStatusDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>>('UA_ServerStatusDataType_new');
  late final _UA_ServerStatusDataType_new =
      _UA_ServerStatusDataType_newPtr.asFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>();

  int UA_ServerStatusDataType_copy(
    ffi.Pointer<UA_ServerStatusDataType> src,
    ffi.Pointer<UA_ServerStatusDataType> dst,
  ) {
    return _UA_ServerStatusDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerStatusDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerStatusDataType>,
              ffi.Pointer<UA_ServerStatusDataType>)>>('UA_ServerStatusDataType_copy');
  late final _UA_ServerStatusDataType_copy = _UA_ServerStatusDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerStatusDataType>, ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_clear(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_clear(
      p,
    );
  }

  late final _UA_ServerStatusDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
          'UA_ServerStatusDataType_clear');
  late final _UA_ServerStatusDataType_clear =
      _UA_ServerStatusDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_delete(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_delete(
      p,
    );
  }

  late final _UA_ServerStatusDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
          'UA_ServerStatusDataType_delete');
  late final _UA_ServerStatusDataType_delete =
      _UA_ServerStatusDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  bool UA_ServerStatusDataType_equal(
    ffi.Pointer<UA_ServerStatusDataType> p1,
    ffi.Pointer<UA_ServerStatusDataType> p2,
  ) {
    return _UA_ServerStatusDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServerStatusDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ServerStatusDataType>,
              ffi.Pointer<UA_ServerStatusDataType>)>>('UA_ServerStatusDataType_equal');
  late final _UA_ServerStatusDataType_equal = _UA_ServerStatusDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ServerStatusDataType>, ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_SessionSecurityDiagnosticsDataType_init(
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> p,
  ) {
    return _UA_SessionSecurityDiagnosticsDataType_init(
      p,
    );
  }

  late final _UA_SessionSecurityDiagnosticsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>>(
          'UA_SessionSecurityDiagnosticsDataType_init');
  late final _UA_SessionSecurityDiagnosticsDataType_init = _UA_SessionSecurityDiagnosticsDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>();

  ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> UA_SessionSecurityDiagnosticsDataType_new() {
    return _UA_SessionSecurityDiagnosticsDataType_new();
  }

  late final _UA_SessionSecurityDiagnosticsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> Function()>>(
          'UA_SessionSecurityDiagnosticsDataType_new');
  late final _UA_SessionSecurityDiagnosticsDataType_new = _UA_SessionSecurityDiagnosticsDataType_newPtr.asFunction<
      ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> Function()>();

  int UA_SessionSecurityDiagnosticsDataType_copy(
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> src,
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> dst,
  ) {
    return _UA_SessionSecurityDiagnosticsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SessionSecurityDiagnosticsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>,
              ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>>('UA_SessionSecurityDiagnosticsDataType_copy');
  late final _UA_SessionSecurityDiagnosticsDataType_copy = _UA_SessionSecurityDiagnosticsDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>, ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>();

  void UA_SessionSecurityDiagnosticsDataType_clear(
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> p,
  ) {
    return _UA_SessionSecurityDiagnosticsDataType_clear(
      p,
    );
  }

  late final _UA_SessionSecurityDiagnosticsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>>(
          'UA_SessionSecurityDiagnosticsDataType_clear');
  late final _UA_SessionSecurityDiagnosticsDataType_clear = _UA_SessionSecurityDiagnosticsDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>();

  void UA_SessionSecurityDiagnosticsDataType_delete(
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> p,
  ) {
    return _UA_SessionSecurityDiagnosticsDataType_delete(
      p,
    );
  }

  late final _UA_SessionSecurityDiagnosticsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>>(
          'UA_SessionSecurityDiagnosticsDataType_delete');
  late final _UA_SessionSecurityDiagnosticsDataType_delete = _UA_SessionSecurityDiagnosticsDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>();

  bool UA_SessionSecurityDiagnosticsDataType_equal(
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> p1,
    ffi.Pointer<UA_SessionSecurityDiagnosticsDataType> p2,
  ) {
    return _UA_SessionSecurityDiagnosticsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SessionSecurityDiagnosticsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>,
              ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>>('UA_SessionSecurityDiagnosticsDataType_equal');
  late final _UA_SessionSecurityDiagnosticsDataType_equal = _UA_SessionSecurityDiagnosticsDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>, ffi.Pointer<UA_SessionSecurityDiagnosticsDataType>)>();

  void UA_ServiceCounterDataType_init(
    ffi.Pointer<UA_ServiceCounterDataType> p,
  ) {
    return _UA_ServiceCounterDataType_init(
      p,
    );
  }

  late final _UA_ServiceCounterDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceCounterDataType>)>>(
          'UA_ServiceCounterDataType_init');
  late final _UA_ServiceCounterDataType_init =
      _UA_ServiceCounterDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ServiceCounterDataType>)>();

  ffi.Pointer<UA_ServiceCounterDataType> UA_ServiceCounterDataType_new() {
    return _UA_ServiceCounterDataType_new();
  }

  late final _UA_ServiceCounterDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServiceCounterDataType> Function()>>('UA_ServiceCounterDataType_new');
  late final _UA_ServiceCounterDataType_new =
      _UA_ServiceCounterDataType_newPtr.asFunction<ffi.Pointer<UA_ServiceCounterDataType> Function()>();

  int UA_ServiceCounterDataType_copy(
    ffi.Pointer<UA_ServiceCounterDataType> src,
    ffi.Pointer<UA_ServiceCounterDataType> dst,
  ) {
    return _UA_ServiceCounterDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServiceCounterDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServiceCounterDataType>,
              ffi.Pointer<UA_ServiceCounterDataType>)>>('UA_ServiceCounterDataType_copy');
  late final _UA_ServiceCounterDataType_copy = _UA_ServiceCounterDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ServiceCounterDataType>, ffi.Pointer<UA_ServiceCounterDataType>)>();

  void UA_ServiceCounterDataType_clear(
    ffi.Pointer<UA_ServiceCounterDataType> p,
  ) {
    return _UA_ServiceCounterDataType_clear(
      p,
    );
  }

  late final _UA_ServiceCounterDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceCounterDataType>)>>(
          'UA_ServiceCounterDataType_clear');
  late final _UA_ServiceCounterDataType_clear =
      _UA_ServiceCounterDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ServiceCounterDataType>)>();

  void UA_ServiceCounterDataType_delete(
    ffi.Pointer<UA_ServiceCounterDataType> p,
  ) {
    return _UA_ServiceCounterDataType_delete(
      p,
    );
  }

  late final _UA_ServiceCounterDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceCounterDataType>)>>(
          'UA_ServiceCounterDataType_delete');
  late final _UA_ServiceCounterDataType_delete =
      _UA_ServiceCounterDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ServiceCounterDataType>)>();

  bool UA_ServiceCounterDataType_equal(
    ffi.Pointer<UA_ServiceCounterDataType> p1,
    ffi.Pointer<UA_ServiceCounterDataType> p2,
  ) {
    return _UA_ServiceCounterDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ServiceCounterDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ServiceCounterDataType>,
              ffi.Pointer<UA_ServiceCounterDataType>)>>('UA_ServiceCounterDataType_equal');
  late final _UA_ServiceCounterDataType_equal = _UA_ServiceCounterDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ServiceCounterDataType>, ffi.Pointer<UA_ServiceCounterDataType>)>();

  void UA_StatusResult_init(
    ffi.Pointer<UA_StatusResult> p,
  ) {
    return _UA_StatusResult_init(
      p,
    );
  }

  late final _UA_StatusResult_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusResult>)>>('UA_StatusResult_init');
  late final _UA_StatusResult_init = _UA_StatusResult_initPtr.asFunction<void Function(ffi.Pointer<UA_StatusResult>)>();

  ffi.Pointer<UA_StatusResult> UA_StatusResult_new() {
    return _UA_StatusResult_new();
  }

  late final _UA_StatusResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StatusResult> Function()>>('UA_StatusResult_new');
  late final _UA_StatusResult_new = _UA_StatusResult_newPtr.asFunction<ffi.Pointer<UA_StatusResult> Function()>();

  int UA_StatusResult_copy(
    ffi.Pointer<UA_StatusResult> src,
    ffi.Pointer<UA_StatusResult> dst,
  ) {
    return _UA_StatusResult_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusResult_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_StatusResult>, ffi.Pointer<UA_StatusResult>)>>(
          'UA_StatusResult_copy');
  late final _UA_StatusResult_copy =
      _UA_StatusResult_copyPtr.asFunction<int Function(ffi.Pointer<UA_StatusResult>, ffi.Pointer<UA_StatusResult>)>();

  void UA_StatusResult_clear(
    ffi.Pointer<UA_StatusResult> p,
  ) {
    return _UA_StatusResult_clear(
      p,
    );
  }

  late final _UA_StatusResult_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusResult>)>>('UA_StatusResult_clear');
  late final _UA_StatusResult_clear =
      _UA_StatusResult_clearPtr.asFunction<void Function(ffi.Pointer<UA_StatusResult>)>();

  void UA_StatusResult_delete(
    ffi.Pointer<UA_StatusResult> p,
  ) {
    return _UA_StatusResult_delete(
      p,
    );
  }

  late final _UA_StatusResult_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusResult>)>>('UA_StatusResult_delete');
  late final _UA_StatusResult_delete =
      _UA_StatusResult_deletePtr.asFunction<void Function(ffi.Pointer<UA_StatusResult>)>();

  bool UA_StatusResult_equal(
    ffi.Pointer<UA_StatusResult> p1,
    ffi.Pointer<UA_StatusResult> p2,
  ) {
    return _UA_StatusResult_equal(
      p1,
      p2,
    );
  }

  late final _UA_StatusResult_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_StatusResult>, ffi.Pointer<UA_StatusResult>)>>(
          'UA_StatusResult_equal');
  late final _UA_StatusResult_equal =
      _UA_StatusResult_equalPtr.asFunction<bool Function(ffi.Pointer<UA_StatusResult>, ffi.Pointer<UA_StatusResult>)>();

  void UA_SubscriptionDiagnosticsDataType_init(
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> p,
  ) {
    return _UA_SubscriptionDiagnosticsDataType_init(
      p,
    );
  }

  late final _UA_SubscriptionDiagnosticsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>>(
          'UA_SubscriptionDiagnosticsDataType_init');
  late final _UA_SubscriptionDiagnosticsDataType_init = _UA_SubscriptionDiagnosticsDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>();

  ffi.Pointer<UA_SubscriptionDiagnosticsDataType> UA_SubscriptionDiagnosticsDataType_new() {
    return _UA_SubscriptionDiagnosticsDataType_new();
  }

  late final _UA_SubscriptionDiagnosticsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SubscriptionDiagnosticsDataType> Function()>>(
          'UA_SubscriptionDiagnosticsDataType_new');
  late final _UA_SubscriptionDiagnosticsDataType_new = _UA_SubscriptionDiagnosticsDataType_newPtr.asFunction<
      ffi.Pointer<UA_SubscriptionDiagnosticsDataType> Function()>();

  int UA_SubscriptionDiagnosticsDataType_copy(
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> src,
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> dst,
  ) {
    return _UA_SubscriptionDiagnosticsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscriptionDiagnosticsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>,
              ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>>('UA_SubscriptionDiagnosticsDataType_copy');
  late final _UA_SubscriptionDiagnosticsDataType_copy = _UA_SubscriptionDiagnosticsDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>, ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>();

  void UA_SubscriptionDiagnosticsDataType_clear(
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> p,
  ) {
    return _UA_SubscriptionDiagnosticsDataType_clear(
      p,
    );
  }

  late final _UA_SubscriptionDiagnosticsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>>(
          'UA_SubscriptionDiagnosticsDataType_clear');
  late final _UA_SubscriptionDiagnosticsDataType_clear = _UA_SubscriptionDiagnosticsDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>();

  void UA_SubscriptionDiagnosticsDataType_delete(
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> p,
  ) {
    return _UA_SubscriptionDiagnosticsDataType_delete(
      p,
    );
  }

  late final _UA_SubscriptionDiagnosticsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>>(
          'UA_SubscriptionDiagnosticsDataType_delete');
  late final _UA_SubscriptionDiagnosticsDataType_delete = _UA_SubscriptionDiagnosticsDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>();

  bool UA_SubscriptionDiagnosticsDataType_equal(
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> p1,
    ffi.Pointer<UA_SubscriptionDiagnosticsDataType> p2,
  ) {
    return _UA_SubscriptionDiagnosticsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SubscriptionDiagnosticsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SubscriptionDiagnosticsDataType>,
              ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>>('UA_SubscriptionDiagnosticsDataType_equal');
  late final _UA_SubscriptionDiagnosticsDataType_equal = _UA_SubscriptionDiagnosticsDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_SubscriptionDiagnosticsDataType>, ffi.Pointer<UA_SubscriptionDiagnosticsDataType>)>();

  void UA_ModelChangeStructureVerbMask_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ModelChangeStructureVerbMask_init(
      p,
    );
  }

  late final _UA_ModelChangeStructureVerbMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ModelChangeStructureVerbMask_init');
  late final _UA_ModelChangeStructureVerbMask_init =
      _UA_ModelChangeStructureVerbMask_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_ModelChangeStructureVerbMask_new() {
    return _UA_ModelChangeStructureVerbMask_new();
  }

  late final _UA_ModelChangeStructureVerbMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_ModelChangeStructureVerbMask_new');
  late final _UA_ModelChangeStructureVerbMask_new =
      _UA_ModelChangeStructureVerbMask_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_ModelChangeStructureVerbMask_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_ModelChangeStructureVerbMask_copy(
      src,
      dst,
    );
  }

  late final _UA_ModelChangeStructureVerbMask_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ModelChangeStructureVerbMask_copy');
  late final _UA_ModelChangeStructureVerbMask_copy = _UA_ModelChangeStructureVerbMask_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ModelChangeStructureVerbMask_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ModelChangeStructureVerbMask_clear(
      p,
    );
  }

  late final _UA_ModelChangeStructureVerbMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ModelChangeStructureVerbMask_clear');
  late final _UA_ModelChangeStructureVerbMask_clear =
      _UA_ModelChangeStructureVerbMask_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ModelChangeStructureVerbMask_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ModelChangeStructureVerbMask_delete(
      p,
    );
  }

  late final _UA_ModelChangeStructureVerbMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ModelChangeStructureVerbMask_delete');
  late final _UA_ModelChangeStructureVerbMask_delete =
      _UA_ModelChangeStructureVerbMask_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_ModelChangeStructureVerbMask_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_ModelChangeStructureVerbMask_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModelChangeStructureVerbMask_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ModelChangeStructureVerbMask_equal');
  late final _UA_ModelChangeStructureVerbMask_equal = _UA_ModelChangeStructureVerbMask_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ModelChangeStructureDataType_init(
    ffi.Pointer<UA_ModelChangeStructureDataType> p,
  ) {
    return _UA_ModelChangeStructureDataType_init(
      p,
    );
  }

  late final _UA_ModelChangeStructureDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>>(
          'UA_ModelChangeStructureDataType_init');
  late final _UA_ModelChangeStructureDataType_init = _UA_ModelChangeStructureDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>();

  ffi.Pointer<UA_ModelChangeStructureDataType> UA_ModelChangeStructureDataType_new() {
    return _UA_ModelChangeStructureDataType_new();
  }

  late final _UA_ModelChangeStructureDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModelChangeStructureDataType> Function()>>(
          'UA_ModelChangeStructureDataType_new');
  late final _UA_ModelChangeStructureDataType_new =
      _UA_ModelChangeStructureDataType_newPtr.asFunction<ffi.Pointer<UA_ModelChangeStructureDataType> Function()>();

  int UA_ModelChangeStructureDataType_copy(
    ffi.Pointer<UA_ModelChangeStructureDataType> src,
    ffi.Pointer<UA_ModelChangeStructureDataType> dst,
  ) {
    return _UA_ModelChangeStructureDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ModelChangeStructureDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ModelChangeStructureDataType>,
              ffi.Pointer<UA_ModelChangeStructureDataType>)>>('UA_ModelChangeStructureDataType_copy');
  late final _UA_ModelChangeStructureDataType_copy = _UA_ModelChangeStructureDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModelChangeStructureDataType>, ffi.Pointer<UA_ModelChangeStructureDataType>)>();

  void UA_ModelChangeStructureDataType_clear(
    ffi.Pointer<UA_ModelChangeStructureDataType> p,
  ) {
    return _UA_ModelChangeStructureDataType_clear(
      p,
    );
  }

  late final _UA_ModelChangeStructureDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>>(
          'UA_ModelChangeStructureDataType_clear');
  late final _UA_ModelChangeStructureDataType_clear = _UA_ModelChangeStructureDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>();

  void UA_ModelChangeStructureDataType_delete(
    ffi.Pointer<UA_ModelChangeStructureDataType> p,
  ) {
    return _UA_ModelChangeStructureDataType_delete(
      p,
    );
  }

  late final _UA_ModelChangeStructureDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>>(
          'UA_ModelChangeStructureDataType_delete');
  late final _UA_ModelChangeStructureDataType_delete = _UA_ModelChangeStructureDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ModelChangeStructureDataType>)>();

  bool UA_ModelChangeStructureDataType_equal(
    ffi.Pointer<UA_ModelChangeStructureDataType> p1,
    ffi.Pointer<UA_ModelChangeStructureDataType> p2,
  ) {
    return _UA_ModelChangeStructureDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModelChangeStructureDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ModelChangeStructureDataType>,
              ffi.Pointer<UA_ModelChangeStructureDataType>)>>('UA_ModelChangeStructureDataType_equal');
  late final _UA_ModelChangeStructureDataType_equal = _UA_ModelChangeStructureDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModelChangeStructureDataType>, ffi.Pointer<UA_ModelChangeStructureDataType>)>();

  void UA_SemanticChangeStructureDataType_init(
    ffi.Pointer<UA_SemanticChangeStructureDataType> p,
  ) {
    return _UA_SemanticChangeStructureDataType_init(
      p,
    );
  }

  late final _UA_SemanticChangeStructureDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>>(
          'UA_SemanticChangeStructureDataType_init');
  late final _UA_SemanticChangeStructureDataType_init = _UA_SemanticChangeStructureDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>();

  ffi.Pointer<UA_SemanticChangeStructureDataType> UA_SemanticChangeStructureDataType_new() {
    return _UA_SemanticChangeStructureDataType_new();
  }

  late final _UA_SemanticChangeStructureDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SemanticChangeStructureDataType> Function()>>(
          'UA_SemanticChangeStructureDataType_new');
  late final _UA_SemanticChangeStructureDataType_new = _UA_SemanticChangeStructureDataType_newPtr.asFunction<
      ffi.Pointer<UA_SemanticChangeStructureDataType> Function()>();

  int UA_SemanticChangeStructureDataType_copy(
    ffi.Pointer<UA_SemanticChangeStructureDataType> src,
    ffi.Pointer<UA_SemanticChangeStructureDataType> dst,
  ) {
    return _UA_SemanticChangeStructureDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SemanticChangeStructureDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SemanticChangeStructureDataType>,
              ffi.Pointer<UA_SemanticChangeStructureDataType>)>>('UA_SemanticChangeStructureDataType_copy');
  late final _UA_SemanticChangeStructureDataType_copy = _UA_SemanticChangeStructureDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SemanticChangeStructureDataType>, ffi.Pointer<UA_SemanticChangeStructureDataType>)>();

  void UA_SemanticChangeStructureDataType_clear(
    ffi.Pointer<UA_SemanticChangeStructureDataType> p,
  ) {
    return _UA_SemanticChangeStructureDataType_clear(
      p,
    );
  }

  late final _UA_SemanticChangeStructureDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>>(
          'UA_SemanticChangeStructureDataType_clear');
  late final _UA_SemanticChangeStructureDataType_clear = _UA_SemanticChangeStructureDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>();

  void UA_SemanticChangeStructureDataType_delete(
    ffi.Pointer<UA_SemanticChangeStructureDataType> p,
  ) {
    return _UA_SemanticChangeStructureDataType_delete(
      p,
    );
  }

  late final _UA_SemanticChangeStructureDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>>(
          'UA_SemanticChangeStructureDataType_delete');
  late final _UA_SemanticChangeStructureDataType_delete = _UA_SemanticChangeStructureDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SemanticChangeStructureDataType>)>();

  bool UA_SemanticChangeStructureDataType_equal(
    ffi.Pointer<UA_SemanticChangeStructureDataType> p1,
    ffi.Pointer<UA_SemanticChangeStructureDataType> p2,
  ) {
    return _UA_SemanticChangeStructureDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SemanticChangeStructureDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SemanticChangeStructureDataType>,
              ffi.Pointer<UA_SemanticChangeStructureDataType>)>>('UA_SemanticChangeStructureDataType_equal');
  late final _UA_SemanticChangeStructureDataType_equal = _UA_SemanticChangeStructureDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_SemanticChangeStructureDataType>, ffi.Pointer<UA_SemanticChangeStructureDataType>)>();

  void UA_Range_init(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_init(
      p,
    );
  }

  late final _UA_Range_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>('UA_Range_init');
  late final _UA_Range_init = _UA_Range_initPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  ffi.Pointer<UA_Range> UA_Range_new() {
    return _UA_Range_new();
  }

  late final _UA_Range_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Range> Function()>>('UA_Range_new');
  late final _UA_Range_new = _UA_Range_newPtr.asFunction<ffi.Pointer<UA_Range> Function()>();

  int UA_Range_copy(
    ffi.Pointer<UA_Range> src,
    ffi.Pointer<UA_Range> dst,
  ) {
    return _UA_Range_copy(
      src,
      dst,
    );
  }

  late final _UA_Range_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>>(
          'UA_Range_copy');
  late final _UA_Range_copy =
      _UA_Range_copyPtr.asFunction<int Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>();

  void UA_Range_clear(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_clear(
      p,
    );
  }

  late final _UA_Range_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>('UA_Range_clear');
  late final _UA_Range_clear = _UA_Range_clearPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  void UA_Range_delete(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_delete(
      p,
    );
  }

  late final _UA_Range_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>('UA_Range_delete');
  late final _UA_Range_delete = _UA_Range_deletePtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  bool UA_Range_equal(
    ffi.Pointer<UA_Range> p1,
    ffi.Pointer<UA_Range> p2,
  ) {
    return _UA_Range_equal(
      p1,
      p2,
    );
  }

  late final _UA_Range_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>>('UA_Range_equal');
  late final _UA_Range_equal =
      _UA_Range_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>();

  void UA_EUInformation_init(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_init(
      p,
    );
  }

  late final _UA_EUInformation_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>('UA_EUInformation_init');
  late final _UA_EUInformation_init =
      _UA_EUInformation_initPtr.asFunction<void Function(ffi.Pointer<UA_EUInformation>)>();

  ffi.Pointer<UA_EUInformation> UA_EUInformation_new() {
    return _UA_EUInformation_new();
  }

  late final _UA_EUInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EUInformation> Function()>>('UA_EUInformation_new');
  late final _UA_EUInformation_new = _UA_EUInformation_newPtr.asFunction<ffi.Pointer<UA_EUInformation> Function()>();

  int UA_EUInformation_copy(
    ffi.Pointer<UA_EUInformation> src,
    ffi.Pointer<UA_EUInformation> dst,
  ) {
    return _UA_EUInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_EUInformation_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>>(
          'UA_EUInformation_copy');
  late final _UA_EUInformation_copy = _UA_EUInformation_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_clear(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_clear(
      p,
    );
  }

  late final _UA_EUInformation_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>('UA_EUInformation_clear');
  late final _UA_EUInformation_clear =
      _UA_EUInformation_clearPtr.asFunction<void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_delete(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_delete(
      p,
    );
  }

  late final _UA_EUInformation_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>('UA_EUInformation_delete');
  late final _UA_EUInformation_delete =
      _UA_EUInformation_deletePtr.asFunction<void Function(ffi.Pointer<UA_EUInformation>)>();

  bool UA_EUInformation_equal(
    ffi.Pointer<UA_EUInformation> p1,
    ffi.Pointer<UA_EUInformation> p2,
  ) {
    return _UA_EUInformation_equal(
      p1,
      p2,
    );
  }

  late final _UA_EUInformation_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>>(
          'UA_EUInformation_equal');
  late final _UA_EUInformation_equal = _UA_EUInformation_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>();

  void UA_AxisScaleEnumeration_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_AxisScaleEnumeration_init(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_AxisScaleEnumeration_init');
  late final _UA_AxisScaleEnumeration_init =
      _UA_AxisScaleEnumeration_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_AxisScaleEnumeration_new() {
    return _UA_AxisScaleEnumeration_new();
  }

  late final _UA_AxisScaleEnumeration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_AxisScaleEnumeration_new');
  late final _UA_AxisScaleEnumeration_new =
      _UA_AxisScaleEnumeration_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_AxisScaleEnumeration_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_AxisScaleEnumeration_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisScaleEnumeration_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_AxisScaleEnumeration_copy');
  late final _UA_AxisScaleEnumeration_copy = _UA_AxisScaleEnumeration_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_AxisScaleEnumeration_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_AxisScaleEnumeration_clear(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_AxisScaleEnumeration_clear');
  late final _UA_AxisScaleEnumeration_clear =
      _UA_AxisScaleEnumeration_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_AxisScaleEnumeration_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_AxisScaleEnumeration_delete(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_AxisScaleEnumeration_delete');
  late final _UA_AxisScaleEnumeration_delete =
      _UA_AxisScaleEnumeration_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_AxisScaleEnumeration_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_AxisScaleEnumeration_equal(
      p1,
      p2,
    );
  }

  late final _UA_AxisScaleEnumeration_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_AxisScaleEnumeration_equal');
  late final _UA_AxisScaleEnumeration_equal = _UA_AxisScaleEnumeration_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ComplexNumberType_init(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_init(
      p,
    );
  }

  late final _UA_ComplexNumberType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_init');
  late final _UA_ComplexNumberType_init =
      _UA_ComplexNumberType_initPtr.asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  ffi.Pointer<UA_ComplexNumberType> UA_ComplexNumberType_new() {
    return _UA_ComplexNumberType_new();
  }

  late final _UA_ComplexNumberType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ComplexNumberType> Function()>>('UA_ComplexNumberType_new');
  late final _UA_ComplexNumberType_new =
      _UA_ComplexNumberType_newPtr.asFunction<ffi.Pointer<UA_ComplexNumberType> Function()>();

  int UA_ComplexNumberType_copy(
    ffi.Pointer<UA_ComplexNumberType> src,
    ffi.Pointer<UA_ComplexNumberType> dst,
  ) {
    return _UA_ComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_ComplexNumberType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ComplexNumberType>, ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_copy');
  late final _UA_ComplexNumberType_copy = _UA_ComplexNumberType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ComplexNumberType>, ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_clear(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_clear(
      p,
    );
  }

  late final _UA_ComplexNumberType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_clear');
  late final _UA_ComplexNumberType_clear =
      _UA_ComplexNumberType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_delete(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_delete(
      p,
    );
  }

  late final _UA_ComplexNumberType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_delete');
  late final _UA_ComplexNumberType_delete =
      _UA_ComplexNumberType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  bool UA_ComplexNumberType_equal(
    ffi.Pointer<UA_ComplexNumberType> p1,
    ffi.Pointer<UA_ComplexNumberType> p2,
  ) {
    return _UA_ComplexNumberType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ComplexNumberType_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ComplexNumberType>, ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_equal');
  late final _UA_ComplexNumberType_equal = _UA_ComplexNumberType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ComplexNumberType>, ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_DoubleComplexNumberType_init(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_init(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
          'UA_DoubleComplexNumberType_init');
  late final _UA_DoubleComplexNumberType_init =
      _UA_DoubleComplexNumberType_initPtr.asFunction<void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  ffi.Pointer<UA_DoubleComplexNumberType> UA_DoubleComplexNumberType_new() {
    return _UA_DoubleComplexNumberType_new();
  }

  late final _UA_DoubleComplexNumberType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DoubleComplexNumberType> Function()>>('UA_DoubleComplexNumberType_new');
  late final _UA_DoubleComplexNumberType_new =
      _UA_DoubleComplexNumberType_newPtr.asFunction<ffi.Pointer<UA_DoubleComplexNumberType> Function()>();

  int UA_DoubleComplexNumberType_copy(
    ffi.Pointer<UA_DoubleComplexNumberType> src,
    ffi.Pointer<UA_DoubleComplexNumberType> dst,
  ) {
    return _UA_DoubleComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_DoubleComplexNumberType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DoubleComplexNumberType>,
              ffi.Pointer<UA_DoubleComplexNumberType>)>>('UA_DoubleComplexNumberType_copy');
  late final _UA_DoubleComplexNumberType_copy = _UA_DoubleComplexNumberType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DoubleComplexNumberType>, ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_clear(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_clear(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
          'UA_DoubleComplexNumberType_clear');
  late final _UA_DoubleComplexNumberType_clear =
      _UA_DoubleComplexNumberType_clearPtr.asFunction<void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_delete(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_delete(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
          'UA_DoubleComplexNumberType_delete');
  late final _UA_DoubleComplexNumberType_delete =
      _UA_DoubleComplexNumberType_deletePtr.asFunction<void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  bool UA_DoubleComplexNumberType_equal(
    ffi.Pointer<UA_DoubleComplexNumberType> p1,
    ffi.Pointer<UA_DoubleComplexNumberType> p2,
  ) {
    return _UA_DoubleComplexNumberType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DoubleComplexNumberType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DoubleComplexNumberType>,
              ffi.Pointer<UA_DoubleComplexNumberType>)>>('UA_DoubleComplexNumberType_equal');
  late final _UA_DoubleComplexNumberType_equal = _UA_DoubleComplexNumberType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DoubleComplexNumberType>, ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_AxisInformation_init(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_init(
      p,
    );
  }

  late final _UA_AxisInformation_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>('UA_AxisInformation_init');
  late final _UA_AxisInformation_init =
      _UA_AxisInformation_initPtr.asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  ffi.Pointer<UA_AxisInformation> UA_AxisInformation_new() {
    return _UA_AxisInformation_new();
  }

  late final _UA_AxisInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AxisInformation> Function()>>('UA_AxisInformation_new');
  late final _UA_AxisInformation_new =
      _UA_AxisInformation_newPtr.asFunction<ffi.Pointer<UA_AxisInformation> Function()>();

  int UA_AxisInformation_copy(
    ffi.Pointer<UA_AxisInformation> src,
    ffi.Pointer<UA_AxisInformation> dst,
  ) {
    return _UA_AxisInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisInformation_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_copy');
  late final _UA_AxisInformation_copy = _UA_AxisInformation_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_clear(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_clear(
      p,
    );
  }

  late final _UA_AxisInformation_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>('UA_AxisInformation_clear');
  late final _UA_AxisInformation_clear =
      _UA_AxisInformation_clearPtr.asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_delete(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_delete(
      p,
    );
  }

  late final _UA_AxisInformation_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>('UA_AxisInformation_delete');
  late final _UA_AxisInformation_delete =
      _UA_AxisInformation_deletePtr.asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  bool UA_AxisInformation_equal(
    ffi.Pointer<UA_AxisInformation> p1,
    ffi.Pointer<UA_AxisInformation> p2,
  ) {
    return _UA_AxisInformation_equal(
      p1,
      p2,
    );
  }

  late final _UA_AxisInformation_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>>(
          'UA_AxisInformation_equal');
  late final _UA_AxisInformation_equal = _UA_AxisInformation_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>();

  void UA_XVType_init(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_init(
      p,
    );
  }

  late final _UA_XVType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>('UA_XVType_init');
  late final _UA_XVType_init = _UA_XVType_initPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  ffi.Pointer<UA_XVType> UA_XVType_new() {
    return _UA_XVType_new();
  }

  late final _UA_XVType_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_XVType> Function()>>('UA_XVType_new');
  late final _UA_XVType_new = _UA_XVType_newPtr.asFunction<ffi.Pointer<UA_XVType> Function()>();

  int UA_XVType_copy(
    ffi.Pointer<UA_XVType> src,
    ffi.Pointer<UA_XVType> dst,
  ) {
    return _UA_XVType_copy(
      src,
      dst,
    );
  }

  late final _UA_XVType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_copy');
  late final _UA_XVType_copy =
      _UA_XVType_copyPtr.asFunction<int Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>();

  void UA_XVType_clear(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_clear(
      p,
    );
  }

  late final _UA_XVType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>('UA_XVType_clear');
  late final _UA_XVType_clear = _UA_XVType_clearPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  void UA_XVType_delete(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_delete(
      p,
    );
  }

  late final _UA_XVType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>('UA_XVType_delete');
  late final _UA_XVType_delete = _UA_XVType_deletePtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  bool UA_XVType_equal(
    ffi.Pointer<UA_XVType> p1,
    ffi.Pointer<UA_XVType> p2,
  ) {
    return _UA_XVType_equal(
      p1,
      p2,
    );
  }

  late final _UA_XVType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>>('UA_XVType_equal');
  late final _UA_XVType_equal =
      _UA_XVType_equalPtr.asFunction<bool Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>();

  void UA_ProgramDiagnosticDataType_init(
    ffi.Pointer<UA_ProgramDiagnosticDataType> p,
  ) {
    return _UA_ProgramDiagnosticDataType_init(
      p,
    );
  }

  late final _UA_ProgramDiagnosticDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>>(
          'UA_ProgramDiagnosticDataType_init');
  late final _UA_ProgramDiagnosticDataType_init =
      _UA_ProgramDiagnosticDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>();

  ffi.Pointer<UA_ProgramDiagnosticDataType> UA_ProgramDiagnosticDataType_new() {
    return _UA_ProgramDiagnosticDataType_new();
  }

  late final _UA_ProgramDiagnosticDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ProgramDiagnosticDataType> Function()>>(
          'UA_ProgramDiagnosticDataType_new');
  late final _UA_ProgramDiagnosticDataType_new =
      _UA_ProgramDiagnosticDataType_newPtr.asFunction<ffi.Pointer<UA_ProgramDiagnosticDataType> Function()>();

  int UA_ProgramDiagnosticDataType_copy(
    ffi.Pointer<UA_ProgramDiagnosticDataType> src,
    ffi.Pointer<UA_ProgramDiagnosticDataType> dst,
  ) {
    return _UA_ProgramDiagnosticDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ProgramDiagnosticDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ProgramDiagnosticDataType>,
              ffi.Pointer<UA_ProgramDiagnosticDataType>)>>('UA_ProgramDiagnosticDataType_copy');
  late final _UA_ProgramDiagnosticDataType_copy = _UA_ProgramDiagnosticDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ProgramDiagnosticDataType>, ffi.Pointer<UA_ProgramDiagnosticDataType>)>();

  void UA_ProgramDiagnosticDataType_clear(
    ffi.Pointer<UA_ProgramDiagnosticDataType> p,
  ) {
    return _UA_ProgramDiagnosticDataType_clear(
      p,
    );
  }

  late final _UA_ProgramDiagnosticDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>>(
          'UA_ProgramDiagnosticDataType_clear');
  late final _UA_ProgramDiagnosticDataType_clear =
      _UA_ProgramDiagnosticDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>();

  void UA_ProgramDiagnosticDataType_delete(
    ffi.Pointer<UA_ProgramDiagnosticDataType> p,
  ) {
    return _UA_ProgramDiagnosticDataType_delete(
      p,
    );
  }

  late final _UA_ProgramDiagnosticDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>>(
          'UA_ProgramDiagnosticDataType_delete');
  late final _UA_ProgramDiagnosticDataType_delete =
      _UA_ProgramDiagnosticDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnosticDataType>)>();

  bool UA_ProgramDiagnosticDataType_equal(
    ffi.Pointer<UA_ProgramDiagnosticDataType> p1,
    ffi.Pointer<UA_ProgramDiagnosticDataType> p2,
  ) {
    return _UA_ProgramDiagnosticDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ProgramDiagnosticDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ProgramDiagnosticDataType>,
              ffi.Pointer<UA_ProgramDiagnosticDataType>)>>('UA_ProgramDiagnosticDataType_equal');
  late final _UA_ProgramDiagnosticDataType_equal = _UA_ProgramDiagnosticDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ProgramDiagnosticDataType>, ffi.Pointer<UA_ProgramDiagnosticDataType>)>();

  void UA_ProgramDiagnostic2DataType_init(
    ffi.Pointer<UA_ProgramDiagnostic2DataType> p,
  ) {
    return _UA_ProgramDiagnostic2DataType_init(
      p,
    );
  }

  late final _UA_ProgramDiagnostic2DataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>>(
          'UA_ProgramDiagnostic2DataType_init');
  late final _UA_ProgramDiagnostic2DataType_init =
      _UA_ProgramDiagnostic2DataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>();

  ffi.Pointer<UA_ProgramDiagnostic2DataType> UA_ProgramDiagnostic2DataType_new() {
    return _UA_ProgramDiagnostic2DataType_new();
  }

  late final _UA_ProgramDiagnostic2DataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ProgramDiagnostic2DataType> Function()>>(
          'UA_ProgramDiagnostic2DataType_new');
  late final _UA_ProgramDiagnostic2DataType_new =
      _UA_ProgramDiagnostic2DataType_newPtr.asFunction<ffi.Pointer<UA_ProgramDiagnostic2DataType> Function()>();

  int UA_ProgramDiagnostic2DataType_copy(
    ffi.Pointer<UA_ProgramDiagnostic2DataType> src,
    ffi.Pointer<UA_ProgramDiagnostic2DataType> dst,
  ) {
    return _UA_ProgramDiagnostic2DataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ProgramDiagnostic2DataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>,
              ffi.Pointer<UA_ProgramDiagnostic2DataType>)>>('UA_ProgramDiagnostic2DataType_copy');
  late final _UA_ProgramDiagnostic2DataType_copy = _UA_ProgramDiagnostic2DataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>, ffi.Pointer<UA_ProgramDiagnostic2DataType>)>();

  void UA_ProgramDiagnostic2DataType_clear(
    ffi.Pointer<UA_ProgramDiagnostic2DataType> p,
  ) {
    return _UA_ProgramDiagnostic2DataType_clear(
      p,
    );
  }

  late final _UA_ProgramDiagnostic2DataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>>(
          'UA_ProgramDiagnostic2DataType_clear');
  late final _UA_ProgramDiagnostic2DataType_clear =
      _UA_ProgramDiagnostic2DataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>();

  void UA_ProgramDiagnostic2DataType_delete(
    ffi.Pointer<UA_ProgramDiagnostic2DataType> p,
  ) {
    return _UA_ProgramDiagnostic2DataType_delete(
      p,
    );
  }

  late final _UA_ProgramDiagnostic2DataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>>(
          'UA_ProgramDiagnostic2DataType_delete');
  late final _UA_ProgramDiagnostic2DataType_delete =
      _UA_ProgramDiagnostic2DataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>)>();

  bool UA_ProgramDiagnostic2DataType_equal(
    ffi.Pointer<UA_ProgramDiagnostic2DataType> p1,
    ffi.Pointer<UA_ProgramDiagnostic2DataType> p2,
  ) {
    return _UA_ProgramDiagnostic2DataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ProgramDiagnostic2DataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>,
              ffi.Pointer<UA_ProgramDiagnostic2DataType>)>>('UA_ProgramDiagnostic2DataType_equal');
  late final _UA_ProgramDiagnostic2DataType_equal = _UA_ProgramDiagnostic2DataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ProgramDiagnostic2DataType>, ffi.Pointer<UA_ProgramDiagnostic2DataType>)>();

  void UA_Annotation_init(
    ffi.Pointer<UA_Annotation> p,
  ) {
    return _UA_Annotation_init(
      p,
    );
  }

  late final _UA_Annotation_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Annotation>)>>('UA_Annotation_init');
  late final _UA_Annotation_init = _UA_Annotation_initPtr.asFunction<void Function(ffi.Pointer<UA_Annotation>)>();

  ffi.Pointer<UA_Annotation> UA_Annotation_new() {
    return _UA_Annotation_new();
  }

  late final _UA_Annotation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Annotation> Function()>>('UA_Annotation_new');
  late final _UA_Annotation_new = _UA_Annotation_newPtr.asFunction<ffi.Pointer<UA_Annotation> Function()>();

  int UA_Annotation_copy(
    ffi.Pointer<UA_Annotation> src,
    ffi.Pointer<UA_Annotation> dst,
  ) {
    return _UA_Annotation_copy(
      src,
      dst,
    );
  }

  late final _UA_Annotation_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Annotation>, ffi.Pointer<UA_Annotation>)>>(
          'UA_Annotation_copy');
  late final _UA_Annotation_copy =
      _UA_Annotation_copyPtr.asFunction<int Function(ffi.Pointer<UA_Annotation>, ffi.Pointer<UA_Annotation>)>();

  void UA_Annotation_clear(
    ffi.Pointer<UA_Annotation> p,
  ) {
    return _UA_Annotation_clear(
      p,
    );
  }

  late final _UA_Annotation_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Annotation>)>>('UA_Annotation_clear');
  late final _UA_Annotation_clear = _UA_Annotation_clearPtr.asFunction<void Function(ffi.Pointer<UA_Annotation>)>();

  void UA_Annotation_delete(
    ffi.Pointer<UA_Annotation> p,
  ) {
    return _UA_Annotation_delete(
      p,
    );
  }

  late final _UA_Annotation_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Annotation>)>>('UA_Annotation_delete');
  late final _UA_Annotation_delete = _UA_Annotation_deletePtr.asFunction<void Function(ffi.Pointer<UA_Annotation>)>();

  bool UA_Annotation_equal(
    ffi.Pointer<UA_Annotation> p1,
    ffi.Pointer<UA_Annotation> p2,
  ) {
    return _UA_Annotation_equal(
      p1,
      p2,
    );
  }

  late final _UA_Annotation_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Annotation>, ffi.Pointer<UA_Annotation>)>>(
          'UA_Annotation_equal');
  late final _UA_Annotation_equal =
      _UA_Annotation_equalPtr.asFunction<bool Function(ffi.Pointer<UA_Annotation>, ffi.Pointer<UA_Annotation>)>();

  void UA_ExceptionDeviationFormat_init(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ExceptionDeviationFormat_init(
      p,
    );
  }

  late final _UA_ExceptionDeviationFormat_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ExceptionDeviationFormat_init');
  late final _UA_ExceptionDeviationFormat_init =
      _UA_ExceptionDeviationFormat_initPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedInt> UA_ExceptionDeviationFormat_new() {
    return _UA_ExceptionDeviationFormat_new();
  }

  late final _UA_ExceptionDeviationFormat_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedInt> Function()>>('UA_ExceptionDeviationFormat_new');
  late final _UA_ExceptionDeviationFormat_new =
      _UA_ExceptionDeviationFormat_newPtr.asFunction<ffi.Pointer<ffi.UnsignedInt> Function()>();

  int UA_ExceptionDeviationFormat_copy(
    ffi.Pointer<ffi.UnsignedInt> src,
    ffi.Pointer<ffi.UnsignedInt> dst,
  ) {
    return _UA_ExceptionDeviationFormat_copy(
      src,
      dst,
    );
  }

  late final _UA_ExceptionDeviationFormat_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ExceptionDeviationFormat_copy');
  late final _UA_ExceptionDeviationFormat_copy = _UA_ExceptionDeviationFormat_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ExceptionDeviationFormat_clear(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ExceptionDeviationFormat_clear(
      p,
    );
  }

  late final _UA_ExceptionDeviationFormat_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>('UA_ExceptionDeviationFormat_clear');
  late final _UA_ExceptionDeviationFormat_clear =
      _UA_ExceptionDeviationFormat_clearPtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_ExceptionDeviationFormat_delete(
    ffi.Pointer<ffi.UnsignedInt> p,
  ) {
    return _UA_ExceptionDeviationFormat_delete(
      p,
    );
  }

  late final _UA_ExceptionDeviationFormat_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ExceptionDeviationFormat_delete');
  late final _UA_ExceptionDeviationFormat_delete =
      _UA_ExceptionDeviationFormat_deletePtr.asFunction<void Function(ffi.Pointer<ffi.UnsignedInt>)>();

  bool UA_ExceptionDeviationFormat_equal(
    ffi.Pointer<ffi.UnsignedInt> p1,
    ffi.Pointer<ffi.UnsignedInt> p2,
  ) {
    return _UA_ExceptionDeviationFormat_equal(
      p1,
      p2,
    );
  }

  late final _UA_ExceptionDeviationFormat_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'UA_ExceptionDeviationFormat_equal');
  late final _UA_ExceptionDeviationFormat_equal = _UA_ExceptionDeviationFormat_equalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void UA_EndpointType_init(
    ffi.Pointer<UA_EndpointType> p,
  ) {
    return _UA_EndpointType_init(
      p,
    );
  }

  late final _UA_EndpointType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointType>)>>('UA_EndpointType_init');
  late final _UA_EndpointType_init = _UA_EndpointType_initPtr.asFunction<void Function(ffi.Pointer<UA_EndpointType>)>();

  ffi.Pointer<UA_EndpointType> UA_EndpointType_new() {
    return _UA_EndpointType_new();
  }

  late final _UA_EndpointType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EndpointType> Function()>>('UA_EndpointType_new');
  late final _UA_EndpointType_new = _UA_EndpointType_newPtr.asFunction<ffi.Pointer<UA_EndpointType> Function()>();

  int UA_EndpointType_copy(
    ffi.Pointer<UA_EndpointType> src,
    ffi.Pointer<UA_EndpointType> dst,
  ) {
    return _UA_EndpointType_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointType_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EndpointType>, ffi.Pointer<UA_EndpointType>)>>(
          'UA_EndpointType_copy');
  late final _UA_EndpointType_copy =
      _UA_EndpointType_copyPtr.asFunction<int Function(ffi.Pointer<UA_EndpointType>, ffi.Pointer<UA_EndpointType>)>();

  void UA_EndpointType_clear(
    ffi.Pointer<UA_EndpointType> p,
  ) {
    return _UA_EndpointType_clear(
      p,
    );
  }

  late final _UA_EndpointType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointType>)>>('UA_EndpointType_clear');
  late final _UA_EndpointType_clear =
      _UA_EndpointType_clearPtr.asFunction<void Function(ffi.Pointer<UA_EndpointType>)>();

  void UA_EndpointType_delete(
    ffi.Pointer<UA_EndpointType> p,
  ) {
    return _UA_EndpointType_delete(
      p,
    );
  }

  late final _UA_EndpointType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EndpointType>)>>('UA_EndpointType_delete');
  late final _UA_EndpointType_delete =
      _UA_EndpointType_deletePtr.asFunction<void Function(ffi.Pointer<UA_EndpointType>)>();

  bool UA_EndpointType_equal(
    ffi.Pointer<UA_EndpointType> p1,
    ffi.Pointer<UA_EndpointType> p2,
  ) {
    return _UA_EndpointType_equal(
      p1,
      p2,
    );
  }

  late final _UA_EndpointType_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EndpointType>, ffi.Pointer<UA_EndpointType>)>>(
          'UA_EndpointType_equal');
  late final _UA_EndpointType_equal =
      _UA_EndpointType_equalPtr.asFunction<bool Function(ffi.Pointer<UA_EndpointType>, ffi.Pointer<UA_EndpointType>)>();

  void UA_StructureDescription_init(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_init(
      p,
    );
  }

  late final _UA_StructureDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
          'UA_StructureDescription_init');
  late final _UA_StructureDescription_init =
      _UA_StructureDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  ffi.Pointer<UA_StructureDescription> UA_StructureDescription_new() {
    return _UA_StructureDescription_new();
  }

  late final _UA_StructureDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StructureDescription> Function()>>('UA_StructureDescription_new');
  late final _UA_StructureDescription_new =
      _UA_StructureDescription_newPtr.asFunction<ffi.Pointer<UA_StructureDescription> Function()>();

  int UA_StructureDescription_copy(
    ffi.Pointer<UA_StructureDescription> src,
    ffi.Pointer<UA_StructureDescription> dst,
  ) {
    return _UA_StructureDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StructureDescription>,
              ffi.Pointer<UA_StructureDescription>)>>('UA_StructureDescription_copy');
  late final _UA_StructureDescription_copy = _UA_StructureDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StructureDescription>, ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_clear(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_clear(
      p,
    );
  }

  late final _UA_StructureDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
          'UA_StructureDescription_clear');
  late final _UA_StructureDescription_clear =
      _UA_StructureDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_delete(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_delete(
      p,
    );
  }

  late final _UA_StructureDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
          'UA_StructureDescription_delete');
  late final _UA_StructureDescription_delete =
      _UA_StructureDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  bool UA_StructureDescription_equal(
    ffi.Pointer<UA_StructureDescription> p1,
    ffi.Pointer<UA_StructureDescription> p2,
  ) {
    return _UA_StructureDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_StructureDescription_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_StructureDescription>,
              ffi.Pointer<UA_StructureDescription>)>>('UA_StructureDescription_equal');
  late final _UA_StructureDescription_equal = _UA_StructureDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_StructureDescription>, ffi.Pointer<UA_StructureDescription>)>();

  void UA_FieldMetaData_init(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_init(
      p,
    );
  }

  late final _UA_FieldMetaData_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>('UA_FieldMetaData_init');
  late final _UA_FieldMetaData_init =
      _UA_FieldMetaData_initPtr.asFunction<void Function(ffi.Pointer<UA_FieldMetaData>)>();

  ffi.Pointer<UA_FieldMetaData> UA_FieldMetaData_new() {
    return _UA_FieldMetaData_new();
  }

  late final _UA_FieldMetaData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FieldMetaData> Function()>>('UA_FieldMetaData_new');
  late final _UA_FieldMetaData_new = _UA_FieldMetaData_newPtr.asFunction<ffi.Pointer<UA_FieldMetaData> Function()>();

  int UA_FieldMetaData_copy(
    ffi.Pointer<UA_FieldMetaData> src,
    ffi.Pointer<UA_FieldMetaData> dst,
  ) {
    return _UA_FieldMetaData_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldMetaData_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>>(
          'UA_FieldMetaData_copy');
  late final _UA_FieldMetaData_copy = _UA_FieldMetaData_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_clear(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_clear(
      p,
    );
  }

  late final _UA_FieldMetaData_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>('UA_FieldMetaData_clear');
  late final _UA_FieldMetaData_clear =
      _UA_FieldMetaData_clearPtr.asFunction<void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_delete(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_delete(
      p,
    );
  }

  late final _UA_FieldMetaData_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>('UA_FieldMetaData_delete');
  late final _UA_FieldMetaData_delete =
      _UA_FieldMetaData_deletePtr.asFunction<void Function(ffi.Pointer<UA_FieldMetaData>)>();

  bool UA_FieldMetaData_equal(
    ffi.Pointer<UA_FieldMetaData> p1,
    ffi.Pointer<UA_FieldMetaData> p2,
  ) {
    return _UA_FieldMetaData_equal(
      p1,
      p2,
    );
  }

  late final _UA_FieldMetaData_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>>(
          'UA_FieldMetaData_equal');
  late final _UA_FieldMetaData_equal = _UA_FieldMetaData_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>();

  void UA_PublishedEventsDataType_init(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_init(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
          'UA_PublishedEventsDataType_init');
  late final _UA_PublishedEventsDataType_init =
      _UA_PublishedEventsDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  ffi.Pointer<UA_PublishedEventsDataType> UA_PublishedEventsDataType_new() {
    return _UA_PublishedEventsDataType_new();
  }

  late final _UA_PublishedEventsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishedEventsDataType> Function()>>('UA_PublishedEventsDataType_new');
  late final _UA_PublishedEventsDataType_new =
      _UA_PublishedEventsDataType_newPtr.asFunction<ffi.Pointer<UA_PublishedEventsDataType> Function()>();

  int UA_PublishedEventsDataType_copy(
    ffi.Pointer<UA_PublishedEventsDataType> src,
    ffi.Pointer<UA_PublishedEventsDataType> dst,
  ) {
    return _UA_PublishedEventsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedEventsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishedEventsDataType>,
              ffi.Pointer<UA_PublishedEventsDataType>)>>('UA_PublishedEventsDataType_copy');
  late final _UA_PublishedEventsDataType_copy = _UA_PublishedEventsDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishedEventsDataType>, ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_clear(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
          'UA_PublishedEventsDataType_clear');
  late final _UA_PublishedEventsDataType_clear =
      _UA_PublishedEventsDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_delete(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
          'UA_PublishedEventsDataType_delete');
  late final _UA_PublishedEventsDataType_delete =
      _UA_PublishedEventsDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  bool UA_PublishedEventsDataType_equal(
    ffi.Pointer<UA_PublishedEventsDataType> p1,
    ffi.Pointer<UA_PublishedEventsDataType> p2,
  ) {
    return _UA_PublishedEventsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishedEventsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PublishedEventsDataType>,
              ffi.Pointer<UA_PublishedEventsDataType>)>>('UA_PublishedEventsDataType_equal');
  late final _UA_PublishedEventsDataType_equal = _UA_PublishedEventsDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishedEventsDataType>, ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PubSubGroupDataType_init(
    ffi.Pointer<UA_PubSubGroupDataType> p,
  ) {
    return _UA_PubSubGroupDataType_init(
      p,
    );
  }

  late final _UA_PubSubGroupDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubGroupDataType>)>>(
          'UA_PubSubGroupDataType_init');
  late final _UA_PubSubGroupDataType_init =
      _UA_PubSubGroupDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PubSubGroupDataType>)>();

  ffi.Pointer<UA_PubSubGroupDataType> UA_PubSubGroupDataType_new() {
    return _UA_PubSubGroupDataType_new();
  }

  late final _UA_PubSubGroupDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubGroupDataType> Function()>>('UA_PubSubGroupDataType_new');
  late final _UA_PubSubGroupDataType_new =
      _UA_PubSubGroupDataType_newPtr.asFunction<ffi.Pointer<UA_PubSubGroupDataType> Function()>();

  int UA_PubSubGroupDataType_copy(
    ffi.Pointer<UA_PubSubGroupDataType> src,
    ffi.Pointer<UA_PubSubGroupDataType> dst,
  ) {
    return _UA_PubSubGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubGroupDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubGroupDataType>,
              ffi.Pointer<UA_PubSubGroupDataType>)>>('UA_PubSubGroupDataType_copy');
  late final _UA_PubSubGroupDataType_copy = _UA_PubSubGroupDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubGroupDataType>, ffi.Pointer<UA_PubSubGroupDataType>)>();

  void UA_PubSubGroupDataType_clear(
    ffi.Pointer<UA_PubSubGroupDataType> p,
  ) {
    return _UA_PubSubGroupDataType_clear(
      p,
    );
  }

  late final _UA_PubSubGroupDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubGroupDataType>)>>(
          'UA_PubSubGroupDataType_clear');
  late final _UA_PubSubGroupDataType_clear =
      _UA_PubSubGroupDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubGroupDataType>)>();

  void UA_PubSubGroupDataType_delete(
    ffi.Pointer<UA_PubSubGroupDataType> p,
  ) {
    return _UA_PubSubGroupDataType_delete(
      p,
    );
  }

  late final _UA_PubSubGroupDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubGroupDataType>)>>(
          'UA_PubSubGroupDataType_delete');
  late final _UA_PubSubGroupDataType_delete =
      _UA_PubSubGroupDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PubSubGroupDataType>)>();

  bool UA_PubSubGroupDataType_equal(
    ffi.Pointer<UA_PubSubGroupDataType> p1,
    ffi.Pointer<UA_PubSubGroupDataType> p2,
  ) {
    return _UA_PubSubGroupDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubGroupDataType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_PubSubGroupDataType>, ffi.Pointer<UA_PubSubGroupDataType>)>>(
      'UA_PubSubGroupDataType_equal');
  late final _UA_PubSubGroupDataType_equal = _UA_PubSubGroupDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubGroupDataType>, ffi.Pointer<UA_PubSubGroupDataType>)>();

  void UA_WriterGroupDataType_init(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_init(
      p,
    );
  }

  late final _UA_WriterGroupDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
          'UA_WriterGroupDataType_init');
  late final _UA_WriterGroupDataType_init =
      _UA_WriterGroupDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  ffi.Pointer<UA_WriterGroupDataType> UA_WriterGroupDataType_new() {
    return _UA_WriterGroupDataType_new();
  }

  late final _UA_WriterGroupDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>>('UA_WriterGroupDataType_new');
  late final _UA_WriterGroupDataType_new =
      _UA_WriterGroupDataType_newPtr.asFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>();

  int UA_WriterGroupDataType_copy(
    ffi.Pointer<UA_WriterGroupDataType> src,
    ffi.Pointer<UA_WriterGroupDataType> dst,
  ) {
    return _UA_WriterGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_WriterGroupDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriterGroupDataType>,
              ffi.Pointer<UA_WriterGroupDataType>)>>('UA_WriterGroupDataType_copy');
  late final _UA_WriterGroupDataType_copy = _UA_WriterGroupDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_WriterGroupDataType>, ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_clear(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_clear(
      p,
    );
  }

  late final _UA_WriterGroupDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
          'UA_WriterGroupDataType_clear');
  late final _UA_WriterGroupDataType_clear =
      _UA_WriterGroupDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_delete(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_delete(
      p,
    );
  }

  late final _UA_WriterGroupDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
          'UA_WriterGroupDataType_delete');
  late final _UA_WriterGroupDataType_delete =
      _UA_WriterGroupDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  bool UA_WriterGroupDataType_equal(
    ffi.Pointer<UA_WriterGroupDataType> p1,
    ffi.Pointer<UA_WriterGroupDataType> p2,
  ) {
    return _UA_WriterGroupDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_WriterGroupDataType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_WriterGroupDataType>, ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_equal');
  late final _UA_WriterGroupDataType_equal = _UA_WriterGroupDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_WriterGroupDataType>, ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_FieldTargetDataType_init(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_init(
      p,
    );
  }

  late final _UA_FieldTargetDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
          'UA_FieldTargetDataType_init');
  late final _UA_FieldTargetDataType_init =
      _UA_FieldTargetDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  ffi.Pointer<UA_FieldTargetDataType> UA_FieldTargetDataType_new() {
    return _UA_FieldTargetDataType_new();
  }

  late final _UA_FieldTargetDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>>('UA_FieldTargetDataType_new');
  late final _UA_FieldTargetDataType_new =
      _UA_FieldTargetDataType_newPtr.asFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>();

  int UA_FieldTargetDataType_copy(
    ffi.Pointer<UA_FieldTargetDataType> src,
    ffi.Pointer<UA_FieldTargetDataType> dst,
  ) {
    return _UA_FieldTargetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldTargetDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FieldTargetDataType>,
              ffi.Pointer<UA_FieldTargetDataType>)>>('UA_FieldTargetDataType_copy');
  late final _UA_FieldTargetDataType_copy = _UA_FieldTargetDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_FieldTargetDataType>, ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_clear(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_clear(
      p,
    );
  }

  late final _UA_FieldTargetDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
          'UA_FieldTargetDataType_clear');
  late final _UA_FieldTargetDataType_clear =
      _UA_FieldTargetDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_delete(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_delete(
      p,
    );
  }

  late final _UA_FieldTargetDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
          'UA_FieldTargetDataType_delete');
  late final _UA_FieldTargetDataType_delete =
      _UA_FieldTargetDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  bool UA_FieldTargetDataType_equal(
    ffi.Pointer<UA_FieldTargetDataType> p1,
    ffi.Pointer<UA_FieldTargetDataType> p2,
  ) {
    return _UA_FieldTargetDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_FieldTargetDataType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_FieldTargetDataType>, ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_equal');
  late final _UA_FieldTargetDataType_equal = _UA_FieldTargetDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_FieldTargetDataType>, ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_init(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_init(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
          'UA_SubscribedDataSetMirrorDataType_init');
  late final _UA_SubscribedDataSetMirrorDataType_init = _UA_SubscribedDataSetMirrorDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  ffi.Pointer<UA_SubscribedDataSetMirrorDataType> UA_SubscribedDataSetMirrorDataType_new() {
    return _UA_SubscribedDataSetMirrorDataType_new();
  }

  late final _UA_SubscribedDataSetMirrorDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SubscribedDataSetMirrorDataType> Function()>>(
          'UA_SubscribedDataSetMirrorDataType_new');
  late final _UA_SubscribedDataSetMirrorDataType_new = _UA_SubscribedDataSetMirrorDataType_newPtr.asFunction<
      ffi.Pointer<UA_SubscribedDataSetMirrorDataType> Function()>();

  int UA_SubscribedDataSetMirrorDataType_copy(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> src,
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> dst,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
              ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>('UA_SubscribedDataSetMirrorDataType_copy');
  late final _UA_SubscribedDataSetMirrorDataType_copy = _UA_SubscribedDataSetMirrorDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>, ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_clear(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_clear(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
          'UA_SubscribedDataSetMirrorDataType_clear');
  late final _UA_SubscribedDataSetMirrorDataType_clear = _UA_SubscribedDataSetMirrorDataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_delete(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_delete(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
          'UA_SubscribedDataSetMirrorDataType_delete');
  late final _UA_SubscribedDataSetMirrorDataType_delete = _UA_SubscribedDataSetMirrorDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  bool UA_SubscribedDataSetMirrorDataType_equal(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p1,
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p2,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
              ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>('UA_SubscribedDataSetMirrorDataType_equal');
  late final _UA_SubscribedDataSetMirrorDataType_equal = _UA_SubscribedDataSetMirrorDataType_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_SubscribedDataSetMirrorDataType>, ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SecurityGroupDataType_init(
    ffi.Pointer<UA_SecurityGroupDataType> p,
  ) {
    return _UA_SecurityGroupDataType_init(
      p,
    );
  }

  late final _UA_SecurityGroupDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecurityGroupDataType>)>>(
          'UA_SecurityGroupDataType_init');
  late final _UA_SecurityGroupDataType_init =
      _UA_SecurityGroupDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_SecurityGroupDataType>)>();

  ffi.Pointer<UA_SecurityGroupDataType> UA_SecurityGroupDataType_new() {
    return _UA_SecurityGroupDataType_new();
  }

  late final _UA_SecurityGroupDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SecurityGroupDataType> Function()>>('UA_SecurityGroupDataType_new');
  late final _UA_SecurityGroupDataType_new =
      _UA_SecurityGroupDataType_newPtr.asFunction<ffi.Pointer<UA_SecurityGroupDataType> Function()>();

  int UA_SecurityGroupDataType_copy(
    ffi.Pointer<UA_SecurityGroupDataType> src,
    ffi.Pointer<UA_SecurityGroupDataType> dst,
  ) {
    return _UA_SecurityGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SecurityGroupDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityGroupDataType>,
              ffi.Pointer<UA_SecurityGroupDataType>)>>('UA_SecurityGroupDataType_copy');
  late final _UA_SecurityGroupDataType_copy = _UA_SecurityGroupDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityGroupDataType>, ffi.Pointer<UA_SecurityGroupDataType>)>();

  void UA_SecurityGroupDataType_clear(
    ffi.Pointer<UA_SecurityGroupDataType> p,
  ) {
    return _UA_SecurityGroupDataType_clear(
      p,
    );
  }

  late final _UA_SecurityGroupDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecurityGroupDataType>)>>(
          'UA_SecurityGroupDataType_clear');
  late final _UA_SecurityGroupDataType_clear =
      _UA_SecurityGroupDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_SecurityGroupDataType>)>();

  void UA_SecurityGroupDataType_delete(
    ffi.Pointer<UA_SecurityGroupDataType> p,
  ) {
    return _UA_SecurityGroupDataType_delete(
      p,
    );
  }

  late final _UA_SecurityGroupDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecurityGroupDataType>)>>(
          'UA_SecurityGroupDataType_delete');
  late final _UA_SecurityGroupDataType_delete =
      _UA_SecurityGroupDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_SecurityGroupDataType>)>();

  bool UA_SecurityGroupDataType_equal(
    ffi.Pointer<UA_SecurityGroupDataType> p1,
    ffi.Pointer<UA_SecurityGroupDataType> p2,
  ) {
    return _UA_SecurityGroupDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SecurityGroupDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SecurityGroupDataType>,
              ffi.Pointer<UA_SecurityGroupDataType>)>>('UA_SecurityGroupDataType_equal');
  late final _UA_SecurityGroupDataType_equal = _UA_SecurityGroupDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SecurityGroupDataType>, ffi.Pointer<UA_SecurityGroupDataType>)>();

  void UA_PubSubKeyPushTargetDataType_init(
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> p,
  ) {
    return _UA_PubSubKeyPushTargetDataType_init(
      p,
    );
  }

  late final _UA_PubSubKeyPushTargetDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>>(
          'UA_PubSubKeyPushTargetDataType_init');
  late final _UA_PubSubKeyPushTargetDataType_init =
      _UA_PubSubKeyPushTargetDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>();

  ffi.Pointer<UA_PubSubKeyPushTargetDataType> UA_PubSubKeyPushTargetDataType_new() {
    return _UA_PubSubKeyPushTargetDataType_new();
  }

  late final _UA_PubSubKeyPushTargetDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubKeyPushTargetDataType> Function()>>(
          'UA_PubSubKeyPushTargetDataType_new');
  late final _UA_PubSubKeyPushTargetDataType_new =
      _UA_PubSubKeyPushTargetDataType_newPtr.asFunction<ffi.Pointer<UA_PubSubKeyPushTargetDataType> Function()>();

  int UA_PubSubKeyPushTargetDataType_copy(
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> src,
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> dst,
  ) {
    return _UA_PubSubKeyPushTargetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubKeyPushTargetDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>,
              ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>>('UA_PubSubKeyPushTargetDataType_copy');
  late final _UA_PubSubKeyPushTargetDataType_copy = _UA_PubSubKeyPushTargetDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>, ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>();

  void UA_PubSubKeyPushTargetDataType_clear(
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> p,
  ) {
    return _UA_PubSubKeyPushTargetDataType_clear(
      p,
    );
  }

  late final _UA_PubSubKeyPushTargetDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>>(
          'UA_PubSubKeyPushTargetDataType_clear');
  late final _UA_PubSubKeyPushTargetDataType_clear =
      _UA_PubSubKeyPushTargetDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>();

  void UA_PubSubKeyPushTargetDataType_delete(
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> p,
  ) {
    return _UA_PubSubKeyPushTargetDataType_delete(
      p,
    );
  }

  late final _UA_PubSubKeyPushTargetDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>>(
          'UA_PubSubKeyPushTargetDataType_delete');
  late final _UA_PubSubKeyPushTargetDataType_delete = _UA_PubSubKeyPushTargetDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>();

  bool UA_PubSubKeyPushTargetDataType_equal(
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> p1,
    ffi.Pointer<UA_PubSubKeyPushTargetDataType> p2,
  ) {
    return _UA_PubSubKeyPushTargetDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubKeyPushTargetDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>,
              ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>>('UA_PubSubKeyPushTargetDataType_equal');
  late final _UA_PubSubKeyPushTargetDataType_equal = _UA_PubSubKeyPushTargetDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubKeyPushTargetDataType>, ffi.Pointer<UA_PubSubKeyPushTargetDataType>)>();

  void UA_EnumDefinition_init(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_init(
      p,
    );
  }

  late final _UA_EnumDefinition_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>('UA_EnumDefinition_init');
  late final _UA_EnumDefinition_init =
      _UA_EnumDefinition_initPtr.asFunction<void Function(ffi.Pointer<UA_EnumDefinition>)>();

  ffi.Pointer<UA_EnumDefinition> UA_EnumDefinition_new() {
    return _UA_EnumDefinition_new();
  }

  late final _UA_EnumDefinition_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDefinition> Function()>>('UA_EnumDefinition_new');
  late final _UA_EnumDefinition_new = _UA_EnumDefinition_newPtr.asFunction<ffi.Pointer<UA_EnumDefinition> Function()>();

  int UA_EnumDefinition_copy(
    ffi.Pointer<UA_EnumDefinition> src,
    ffi.Pointer<UA_EnumDefinition> dst,
  ) {
    return _UA_EnumDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDefinition_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_copy');
  late final _UA_EnumDefinition_copy = _UA_EnumDefinition_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_clear(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_clear(
      p,
    );
  }

  late final _UA_EnumDefinition_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>('UA_EnumDefinition_clear');
  late final _UA_EnumDefinition_clear =
      _UA_EnumDefinition_clearPtr.asFunction<void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_delete(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_delete(
      p,
    );
  }

  late final _UA_EnumDefinition_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>('UA_EnumDefinition_delete');
  late final _UA_EnumDefinition_delete =
      _UA_EnumDefinition_deletePtr.asFunction<void Function(ffi.Pointer<UA_EnumDefinition>)>();

  bool UA_EnumDefinition_equal(
    ffi.Pointer<UA_EnumDefinition> p1,
    ffi.Pointer<UA_EnumDefinition> p2,
  ) {
    return _UA_EnumDefinition_equal(
      p1,
      p2,
    );
  }

  late final _UA_EnumDefinition_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>>(
          'UA_EnumDefinition_equal');
  late final _UA_EnumDefinition_equal = _UA_EnumDefinition_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>();

  void UA_ReadEventDetails_init(
    ffi.Pointer<UA_ReadEventDetails> p,
  ) {
    return _UA_ReadEventDetails_init(
      p,
    );
  }

  late final _UA_ReadEventDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadEventDetails>)>>('UA_ReadEventDetails_init');
  late final _UA_ReadEventDetails_init =
      _UA_ReadEventDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadEventDetails>)>();

  ffi.Pointer<UA_ReadEventDetails> UA_ReadEventDetails_new() {
    return _UA_ReadEventDetails_new();
  }

  late final _UA_ReadEventDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadEventDetails> Function()>>('UA_ReadEventDetails_new');
  late final _UA_ReadEventDetails_new =
      _UA_ReadEventDetails_newPtr.asFunction<ffi.Pointer<UA_ReadEventDetails> Function()>();

  int UA_ReadEventDetails_copy(
    ffi.Pointer<UA_ReadEventDetails> src,
    ffi.Pointer<UA_ReadEventDetails> dst,
  ) {
    return _UA_ReadEventDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadEventDetails_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadEventDetails>, ffi.Pointer<UA_ReadEventDetails>)>>(
      'UA_ReadEventDetails_copy');
  late final _UA_ReadEventDetails_copy = _UA_ReadEventDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadEventDetails>, ffi.Pointer<UA_ReadEventDetails>)>();

  void UA_ReadEventDetails_clear(
    ffi.Pointer<UA_ReadEventDetails> p,
  ) {
    return _UA_ReadEventDetails_clear(
      p,
    );
  }

  late final _UA_ReadEventDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadEventDetails>)>>('UA_ReadEventDetails_clear');
  late final _UA_ReadEventDetails_clear =
      _UA_ReadEventDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadEventDetails>)>();

  void UA_ReadEventDetails_delete(
    ffi.Pointer<UA_ReadEventDetails> p,
  ) {
    return _UA_ReadEventDetails_delete(
      p,
    );
  }

  late final _UA_ReadEventDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadEventDetails>)>>('UA_ReadEventDetails_delete');
  late final _UA_ReadEventDetails_delete =
      _UA_ReadEventDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadEventDetails>)>();

  bool UA_ReadEventDetails_equal(
    ffi.Pointer<UA_ReadEventDetails> p1,
    ffi.Pointer<UA_ReadEventDetails> p2,
  ) {
    return _UA_ReadEventDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadEventDetails_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReadEventDetails>, ffi.Pointer<UA_ReadEventDetails>)>>(
      'UA_ReadEventDetails_equal');
  late final _UA_ReadEventDetails_equal = _UA_ReadEventDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReadEventDetails>, ffi.Pointer<UA_ReadEventDetails>)>();

  void UA_ReadProcessedDetails_init(
    ffi.Pointer<UA_ReadProcessedDetails> p,
  ) {
    return _UA_ReadProcessedDetails_init(
      p,
    );
  }

  late final _UA_ReadProcessedDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadProcessedDetails>)>>(
          'UA_ReadProcessedDetails_init');
  late final _UA_ReadProcessedDetails_init =
      _UA_ReadProcessedDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_ReadProcessedDetails>)>();

  ffi.Pointer<UA_ReadProcessedDetails> UA_ReadProcessedDetails_new() {
    return _UA_ReadProcessedDetails_new();
  }

  late final _UA_ReadProcessedDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadProcessedDetails> Function()>>('UA_ReadProcessedDetails_new');
  late final _UA_ReadProcessedDetails_new =
      _UA_ReadProcessedDetails_newPtr.asFunction<ffi.Pointer<UA_ReadProcessedDetails> Function()>();

  int UA_ReadProcessedDetails_copy(
    ffi.Pointer<UA_ReadProcessedDetails> src,
    ffi.Pointer<UA_ReadProcessedDetails> dst,
  ) {
    return _UA_ReadProcessedDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadProcessedDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadProcessedDetails>,
              ffi.Pointer<UA_ReadProcessedDetails>)>>('UA_ReadProcessedDetails_copy');
  late final _UA_ReadProcessedDetails_copy = _UA_ReadProcessedDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadProcessedDetails>, ffi.Pointer<UA_ReadProcessedDetails>)>();

  void UA_ReadProcessedDetails_clear(
    ffi.Pointer<UA_ReadProcessedDetails> p,
  ) {
    return _UA_ReadProcessedDetails_clear(
      p,
    );
  }

  late final _UA_ReadProcessedDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadProcessedDetails>)>>(
          'UA_ReadProcessedDetails_clear');
  late final _UA_ReadProcessedDetails_clear =
      _UA_ReadProcessedDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReadProcessedDetails>)>();

  void UA_ReadProcessedDetails_delete(
    ffi.Pointer<UA_ReadProcessedDetails> p,
  ) {
    return _UA_ReadProcessedDetails_delete(
      p,
    );
  }

  late final _UA_ReadProcessedDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadProcessedDetails>)>>(
          'UA_ReadProcessedDetails_delete');
  late final _UA_ReadProcessedDetails_delete =
      _UA_ReadProcessedDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReadProcessedDetails>)>();

  bool UA_ReadProcessedDetails_equal(
    ffi.Pointer<UA_ReadProcessedDetails> p1,
    ffi.Pointer<UA_ReadProcessedDetails> p2,
  ) {
    return _UA_ReadProcessedDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReadProcessedDetails_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReadProcessedDetails>,
              ffi.Pointer<UA_ReadProcessedDetails>)>>('UA_ReadProcessedDetails_equal');
  late final _UA_ReadProcessedDetails_equal = _UA_ReadProcessedDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReadProcessedDetails>, ffi.Pointer<UA_ReadProcessedDetails>)>();

  void UA_ModificationInfo_init(
    ffi.Pointer<UA_ModificationInfo> p,
  ) {
    return _UA_ModificationInfo_init(
      p,
    );
  }

  late final _UA_ModificationInfo_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModificationInfo>)>>('UA_ModificationInfo_init');
  late final _UA_ModificationInfo_init =
      _UA_ModificationInfo_initPtr.asFunction<void Function(ffi.Pointer<UA_ModificationInfo>)>();

  ffi.Pointer<UA_ModificationInfo> UA_ModificationInfo_new() {
    return _UA_ModificationInfo_new();
  }

  late final _UA_ModificationInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ModificationInfo> Function()>>('UA_ModificationInfo_new');
  late final _UA_ModificationInfo_new =
      _UA_ModificationInfo_newPtr.asFunction<ffi.Pointer<UA_ModificationInfo> Function()>();

  int UA_ModificationInfo_copy(
    ffi.Pointer<UA_ModificationInfo> src,
    ffi.Pointer<UA_ModificationInfo> dst,
  ) {
    return _UA_ModificationInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_ModificationInfo_copyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ModificationInfo>, ffi.Pointer<UA_ModificationInfo>)>>(
      'UA_ModificationInfo_copy');
  late final _UA_ModificationInfo_copy = _UA_ModificationInfo_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ModificationInfo>, ffi.Pointer<UA_ModificationInfo>)>();

  void UA_ModificationInfo_clear(
    ffi.Pointer<UA_ModificationInfo> p,
  ) {
    return _UA_ModificationInfo_clear(
      p,
    );
  }

  late final _UA_ModificationInfo_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModificationInfo>)>>('UA_ModificationInfo_clear');
  late final _UA_ModificationInfo_clear =
      _UA_ModificationInfo_clearPtr.asFunction<void Function(ffi.Pointer<UA_ModificationInfo>)>();

  void UA_ModificationInfo_delete(
    ffi.Pointer<UA_ModificationInfo> p,
  ) {
    return _UA_ModificationInfo_delete(
      p,
    );
  }

  late final _UA_ModificationInfo_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ModificationInfo>)>>('UA_ModificationInfo_delete');
  late final _UA_ModificationInfo_delete =
      _UA_ModificationInfo_deletePtr.asFunction<void Function(ffi.Pointer<UA_ModificationInfo>)>();

  bool UA_ModificationInfo_equal(
    ffi.Pointer<UA_ModificationInfo> p1,
    ffi.Pointer<UA_ModificationInfo> p2,
  ) {
    return _UA_ModificationInfo_equal(
      p1,
      p2,
    );
  }

  late final _UA_ModificationInfo_equalPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ModificationInfo>, ffi.Pointer<UA_ModificationInfo>)>>(
      'UA_ModificationInfo_equal');
  late final _UA_ModificationInfo_equal = _UA_ModificationInfo_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ModificationInfo>, ffi.Pointer<UA_ModificationInfo>)>();

  void UA_HistoryModifiedData_init(
    ffi.Pointer<UA_HistoryModifiedData> p,
  ) {
    return _UA_HistoryModifiedData_init(
      p,
    );
  }

  late final _UA_HistoryModifiedData_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryModifiedData>)>>(
          'UA_HistoryModifiedData_init');
  late final _UA_HistoryModifiedData_init =
      _UA_HistoryModifiedData_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryModifiedData>)>();

  ffi.Pointer<UA_HistoryModifiedData> UA_HistoryModifiedData_new() {
    return _UA_HistoryModifiedData_new();
  }

  late final _UA_HistoryModifiedData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryModifiedData> Function()>>('UA_HistoryModifiedData_new');
  late final _UA_HistoryModifiedData_new =
      _UA_HistoryModifiedData_newPtr.asFunction<ffi.Pointer<UA_HistoryModifiedData> Function()>();

  int UA_HistoryModifiedData_copy(
    ffi.Pointer<UA_HistoryModifiedData> src,
    ffi.Pointer<UA_HistoryModifiedData> dst,
  ) {
    return _UA_HistoryModifiedData_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryModifiedData_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_HistoryModifiedData>,
              ffi.Pointer<UA_HistoryModifiedData>)>>('UA_HistoryModifiedData_copy');
  late final _UA_HistoryModifiedData_copy = _UA_HistoryModifiedData_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_HistoryModifiedData>, ffi.Pointer<UA_HistoryModifiedData>)>();

  void UA_HistoryModifiedData_clear(
    ffi.Pointer<UA_HistoryModifiedData> p,
  ) {
    return _UA_HistoryModifiedData_clear(
      p,
    );
  }

  late final _UA_HistoryModifiedData_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryModifiedData>)>>(
          'UA_HistoryModifiedData_clear');
  late final _UA_HistoryModifiedData_clear =
      _UA_HistoryModifiedData_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryModifiedData>)>();

  void UA_HistoryModifiedData_delete(
    ffi.Pointer<UA_HistoryModifiedData> p,
  ) {
    return _UA_HistoryModifiedData_delete(
      p,
    );
  }

  late final _UA_HistoryModifiedData_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryModifiedData>)>>(
          'UA_HistoryModifiedData_delete');
  late final _UA_HistoryModifiedData_delete =
      _UA_HistoryModifiedData_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryModifiedData>)>();

  bool UA_HistoryModifiedData_equal(
    ffi.Pointer<UA_HistoryModifiedData> p1,
    ffi.Pointer<UA_HistoryModifiedData> p2,
  ) {
    return _UA_HistoryModifiedData_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryModifiedData_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryModifiedData>, ffi.Pointer<UA_HistoryModifiedData>)>>(
      'UA_HistoryModifiedData_equal');
  late final _UA_HistoryModifiedData_equal = _UA_HistoryModifiedData_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_HistoryModifiedData>, ffi.Pointer<UA_HistoryModifiedData>)>();

  void UA_HistoryEvent_init(
    ffi.Pointer<UA_HistoryEvent> p,
  ) {
    return _UA_HistoryEvent_init(
      p,
    );
  }

  late final _UA_HistoryEvent_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEvent>)>>('UA_HistoryEvent_init');
  late final _UA_HistoryEvent_init = _UA_HistoryEvent_initPtr.asFunction<void Function(ffi.Pointer<UA_HistoryEvent>)>();

  ffi.Pointer<UA_HistoryEvent> UA_HistoryEvent_new() {
    return _UA_HistoryEvent_new();
  }

  late final _UA_HistoryEvent_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_HistoryEvent> Function()>>('UA_HistoryEvent_new');
  late final _UA_HistoryEvent_new = _UA_HistoryEvent_newPtr.asFunction<ffi.Pointer<UA_HistoryEvent> Function()>();

  int UA_HistoryEvent_copy(
    ffi.Pointer<UA_HistoryEvent> src,
    ffi.Pointer<UA_HistoryEvent> dst,
  ) {
    return _UA_HistoryEvent_copy(
      src,
      dst,
    );
  }

  late final _UA_HistoryEvent_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_HistoryEvent>, ffi.Pointer<UA_HistoryEvent>)>>(
          'UA_HistoryEvent_copy');
  late final _UA_HistoryEvent_copy =
      _UA_HistoryEvent_copyPtr.asFunction<int Function(ffi.Pointer<UA_HistoryEvent>, ffi.Pointer<UA_HistoryEvent>)>();

  void UA_HistoryEvent_clear(
    ffi.Pointer<UA_HistoryEvent> p,
  ) {
    return _UA_HistoryEvent_clear(
      p,
    );
  }

  late final _UA_HistoryEvent_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEvent>)>>('UA_HistoryEvent_clear');
  late final _UA_HistoryEvent_clear =
      _UA_HistoryEvent_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryEvent>)>();

  void UA_HistoryEvent_delete(
    ffi.Pointer<UA_HistoryEvent> p,
  ) {
    return _UA_HistoryEvent_delete(
      p,
    );
  }

  late final _UA_HistoryEvent_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryEvent>)>>('UA_HistoryEvent_delete');
  late final _UA_HistoryEvent_delete =
      _UA_HistoryEvent_deletePtr.asFunction<void Function(ffi.Pointer<UA_HistoryEvent>)>();

  bool UA_HistoryEvent_equal(
    ffi.Pointer<UA_HistoryEvent> p1,
    ffi.Pointer<UA_HistoryEvent> p2,
  ) {
    return _UA_HistoryEvent_equal(
      p1,
      p2,
    );
  }

  late final _UA_HistoryEvent_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_HistoryEvent>, ffi.Pointer<UA_HistoryEvent>)>>(
          'UA_HistoryEvent_equal');
  late final _UA_HistoryEvent_equal =
      _UA_HistoryEvent_equalPtr.asFunction<bool Function(ffi.Pointer<UA_HistoryEvent>, ffi.Pointer<UA_HistoryEvent>)>();

  void UA_UpdateEventDetails_init(
    ffi.Pointer<UA_UpdateEventDetails> p,
  ) {
    return _UA_UpdateEventDetails_init(
      p,
    );
  }

  late final _UA_UpdateEventDetails_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateEventDetails>)>>('UA_UpdateEventDetails_init');
  late final _UA_UpdateEventDetails_init =
      _UA_UpdateEventDetails_initPtr.asFunction<void Function(ffi.Pointer<UA_UpdateEventDetails>)>();

  ffi.Pointer<UA_UpdateEventDetails> UA_UpdateEventDetails_new() {
    return _UA_UpdateEventDetails_new();
  }

  late final _UA_UpdateEventDetails_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UpdateEventDetails> Function()>>('UA_UpdateEventDetails_new');
  late final _UA_UpdateEventDetails_new =
      _UA_UpdateEventDetails_newPtr.asFunction<ffi.Pointer<UA_UpdateEventDetails> Function()>();

  int UA_UpdateEventDetails_copy(
    ffi.Pointer<UA_UpdateEventDetails> src,
    ffi.Pointer<UA_UpdateEventDetails> dst,
  ) {
    return _UA_UpdateEventDetails_copy(
      src,
      dst,
    );
  }

  late final _UA_UpdateEventDetails_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UpdateEventDetails>, ffi.Pointer<UA_UpdateEventDetails>)>>('UA_UpdateEventDetails_copy');
  late final _UA_UpdateEventDetails_copy = _UA_UpdateEventDetails_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UpdateEventDetails>, ffi.Pointer<UA_UpdateEventDetails>)>();

  void UA_UpdateEventDetails_clear(
    ffi.Pointer<UA_UpdateEventDetails> p,
  ) {
    return _UA_UpdateEventDetails_clear(
      p,
    );
  }

  late final _UA_UpdateEventDetails_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateEventDetails>)>>('UA_UpdateEventDetails_clear');
  late final _UA_UpdateEventDetails_clear =
      _UA_UpdateEventDetails_clearPtr.asFunction<void Function(ffi.Pointer<UA_UpdateEventDetails>)>();

  void UA_UpdateEventDetails_delete(
    ffi.Pointer<UA_UpdateEventDetails> p,
  ) {
    return _UA_UpdateEventDetails_delete(
      p,
    );
  }

  late final _UA_UpdateEventDetails_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UpdateEventDetails>)>>(
          'UA_UpdateEventDetails_delete');
  late final _UA_UpdateEventDetails_delete =
      _UA_UpdateEventDetails_deletePtr.asFunction<void Function(ffi.Pointer<UA_UpdateEventDetails>)>();

  bool UA_UpdateEventDetails_equal(
    ffi.Pointer<UA_UpdateEventDetails> p1,
    ffi.Pointer<UA_UpdateEventDetails> p2,
  ) {
    return _UA_UpdateEventDetails_equal(
      p1,
      p2,
    );
  }

  late final _UA_UpdateEventDetails_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_UpdateEventDetails>, ffi.Pointer<UA_UpdateEventDetails>)>>(
      'UA_UpdateEventDetails_equal');
  late final _UA_UpdateEventDetails_equal = _UA_UpdateEventDetails_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UpdateEventDetails>, ffi.Pointer<UA_UpdateEventDetails>)>();

  void UA_DataChangeNotification_init(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_init(
      p,
    );
  }

  late final _UA_DataChangeNotification_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
          'UA_DataChangeNotification_init');
  late final _UA_DataChangeNotification_init =
      _UA_DataChangeNotification_initPtr.asFunction<void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  ffi.Pointer<UA_DataChangeNotification> UA_DataChangeNotification_new() {
    return _UA_DataChangeNotification_new();
  }

  late final _UA_DataChangeNotification_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataChangeNotification> Function()>>('UA_DataChangeNotification_new');
  late final _UA_DataChangeNotification_new =
      _UA_DataChangeNotification_newPtr.asFunction<ffi.Pointer<UA_DataChangeNotification> Function()>();

  int UA_DataChangeNotification_copy(
    ffi.Pointer<UA_DataChangeNotification> src,
    ffi.Pointer<UA_DataChangeNotification> dst,
  ) {
    return _UA_DataChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeNotification_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataChangeNotification>,
              ffi.Pointer<UA_DataChangeNotification>)>>('UA_DataChangeNotification_copy');
  late final _UA_DataChangeNotification_copy = _UA_DataChangeNotification_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataChangeNotification>, ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_clear(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_clear(
      p,
    );
  }

  late final _UA_DataChangeNotification_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
          'UA_DataChangeNotification_clear');
  late final _UA_DataChangeNotification_clear =
      _UA_DataChangeNotification_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_delete(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_delete(
      p,
    );
  }

  late final _UA_DataChangeNotification_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
          'UA_DataChangeNotification_delete');
  late final _UA_DataChangeNotification_delete =
      _UA_DataChangeNotification_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  bool UA_DataChangeNotification_equal(
    ffi.Pointer<UA_DataChangeNotification> p1,
    ffi.Pointer<UA_DataChangeNotification> p2,
  ) {
    return _UA_DataChangeNotification_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataChangeNotification_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataChangeNotification>,
              ffi.Pointer<UA_DataChangeNotification>)>>('UA_DataChangeNotification_equal');
  late final _UA_DataChangeNotification_equal = _UA_DataChangeNotification_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataChangeNotification>, ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_EventNotificationList_init(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_init(
      p,
    );
  }

  late final _UA_EventNotificationList_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
          'UA_EventNotificationList_init');
  late final _UA_EventNotificationList_init =
      _UA_EventNotificationList_initPtr.asFunction<void Function(ffi.Pointer<UA_EventNotificationList>)>();

  ffi.Pointer<UA_EventNotificationList> UA_EventNotificationList_new() {
    return _UA_EventNotificationList_new();
  }

  late final _UA_EventNotificationList_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventNotificationList> Function()>>('UA_EventNotificationList_new');
  late final _UA_EventNotificationList_new =
      _UA_EventNotificationList_newPtr.asFunction<ffi.Pointer<UA_EventNotificationList> Function()>();

  int UA_EventNotificationList_copy(
    ffi.Pointer<UA_EventNotificationList> src,
    ffi.Pointer<UA_EventNotificationList> dst,
  ) {
    return _UA_EventNotificationList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventNotificationList_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventNotificationList>,
              ffi.Pointer<UA_EventNotificationList>)>>('UA_EventNotificationList_copy');
  late final _UA_EventNotificationList_copy = _UA_EventNotificationList_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventNotificationList>, ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_clear(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_clear(
      p,
    );
  }

  late final _UA_EventNotificationList_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
          'UA_EventNotificationList_clear');
  late final _UA_EventNotificationList_clear =
      _UA_EventNotificationList_clearPtr.asFunction<void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_delete(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_delete(
      p,
    );
  }

  late final _UA_EventNotificationList_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
          'UA_EventNotificationList_delete');
  late final _UA_EventNotificationList_delete =
      _UA_EventNotificationList_deletePtr.asFunction<void Function(ffi.Pointer<UA_EventNotificationList>)>();

  bool UA_EventNotificationList_equal(
    ffi.Pointer<UA_EventNotificationList> p1,
    ffi.Pointer<UA_EventNotificationList> p2,
  ) {
    return _UA_EventNotificationList_equal(
      p1,
      p2,
    );
  }

  late final _UA_EventNotificationList_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_EventNotificationList>,
              ffi.Pointer<UA_EventNotificationList>)>>('UA_EventNotificationList_equal');
  late final _UA_EventNotificationList_equal = _UA_EventNotificationList_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EventNotificationList>, ffi.Pointer<UA_EventNotificationList>)>();

  void UA_SessionDiagnosticsDataType_init(
    ffi.Pointer<UA_SessionDiagnosticsDataType> p,
  ) {
    return _UA_SessionDiagnosticsDataType_init(
      p,
    );
  }

  late final _UA_SessionDiagnosticsDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>>(
          'UA_SessionDiagnosticsDataType_init');
  late final _UA_SessionDiagnosticsDataType_init =
      _UA_SessionDiagnosticsDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>();

  ffi.Pointer<UA_SessionDiagnosticsDataType> UA_SessionDiagnosticsDataType_new() {
    return _UA_SessionDiagnosticsDataType_new();
  }

  late final _UA_SessionDiagnosticsDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SessionDiagnosticsDataType> Function()>>(
          'UA_SessionDiagnosticsDataType_new');
  late final _UA_SessionDiagnosticsDataType_new =
      _UA_SessionDiagnosticsDataType_newPtr.asFunction<ffi.Pointer<UA_SessionDiagnosticsDataType> Function()>();

  int UA_SessionDiagnosticsDataType_copy(
    ffi.Pointer<UA_SessionDiagnosticsDataType> src,
    ffi.Pointer<UA_SessionDiagnosticsDataType> dst,
  ) {
    return _UA_SessionDiagnosticsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SessionDiagnosticsDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SessionDiagnosticsDataType>,
              ffi.Pointer<UA_SessionDiagnosticsDataType>)>>('UA_SessionDiagnosticsDataType_copy');
  late final _UA_SessionDiagnosticsDataType_copy = _UA_SessionDiagnosticsDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SessionDiagnosticsDataType>, ffi.Pointer<UA_SessionDiagnosticsDataType>)>();

  void UA_SessionDiagnosticsDataType_clear(
    ffi.Pointer<UA_SessionDiagnosticsDataType> p,
  ) {
    return _UA_SessionDiagnosticsDataType_clear(
      p,
    );
  }

  late final _UA_SessionDiagnosticsDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>>(
          'UA_SessionDiagnosticsDataType_clear');
  late final _UA_SessionDiagnosticsDataType_clear =
      _UA_SessionDiagnosticsDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>();

  void UA_SessionDiagnosticsDataType_delete(
    ffi.Pointer<UA_SessionDiagnosticsDataType> p,
  ) {
    return _UA_SessionDiagnosticsDataType_delete(
      p,
    );
  }

  late final _UA_SessionDiagnosticsDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>>(
          'UA_SessionDiagnosticsDataType_delete');
  late final _UA_SessionDiagnosticsDataType_delete =
      _UA_SessionDiagnosticsDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_SessionDiagnosticsDataType>)>();

  bool UA_SessionDiagnosticsDataType_equal(
    ffi.Pointer<UA_SessionDiagnosticsDataType> p1,
    ffi.Pointer<UA_SessionDiagnosticsDataType> p2,
  ) {
    return _UA_SessionDiagnosticsDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_SessionDiagnosticsDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_SessionDiagnosticsDataType>,
              ffi.Pointer<UA_SessionDiagnosticsDataType>)>>('UA_SessionDiagnosticsDataType_equal');
  late final _UA_SessionDiagnosticsDataType_equal = _UA_SessionDiagnosticsDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_SessionDiagnosticsDataType>, ffi.Pointer<UA_SessionDiagnosticsDataType>)>();

  void UA_EnumDescription_init(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_init(
      p,
    );
  }

  late final _UA_EnumDescription_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>('UA_EnumDescription_init');
  late final _UA_EnumDescription_init =
      _UA_EnumDescription_initPtr.asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  ffi.Pointer<UA_EnumDescription> UA_EnumDescription_new() {
    return _UA_EnumDescription_new();
  }

  late final _UA_EnumDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDescription> Function()>>('UA_EnumDescription_new');
  late final _UA_EnumDescription_new =
      _UA_EnumDescription_newPtr.asFunction<ffi.Pointer<UA_EnumDescription> Function()>();

  int UA_EnumDescription_copy(
    ffi.Pointer<UA_EnumDescription> src,
    ffi.Pointer<UA_EnumDescription> dst,
  ) {
    return _UA_EnumDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDescription_copyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_copy');
  late final _UA_EnumDescription_copy = _UA_EnumDescription_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_clear(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_clear(
      p,
    );
  }

  late final _UA_EnumDescription_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>('UA_EnumDescription_clear');
  late final _UA_EnumDescription_clear =
      _UA_EnumDescription_clearPtr.asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_delete(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_delete(
      p,
    );
  }

  late final _UA_EnumDescription_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>('UA_EnumDescription_delete');
  late final _UA_EnumDescription_delete =
      _UA_EnumDescription_deletePtr.asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  bool UA_EnumDescription_equal(
    ffi.Pointer<UA_EnumDescription> p1,
    ffi.Pointer<UA_EnumDescription> p2,
  ) {
    return _UA_EnumDescription_equal(
      p1,
      p2,
    );
  }

  late final _UA_EnumDescription_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>>(
          'UA_EnumDescription_equal');
  late final _UA_EnumDescription_equal = _UA_EnumDescription_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>();

  void UA_UABinaryFileDataType_init(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_init(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
          'UA_UABinaryFileDataType_init');
  late final _UA_UABinaryFileDataType_init =
      _UA_UABinaryFileDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  ffi.Pointer<UA_UABinaryFileDataType> UA_UABinaryFileDataType_new() {
    return _UA_UABinaryFileDataType_new();
  }

  late final _UA_UABinaryFileDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>>('UA_UABinaryFileDataType_new');
  late final _UA_UABinaryFileDataType_new =
      _UA_UABinaryFileDataType_newPtr.asFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>();

  int UA_UABinaryFileDataType_copy(
    ffi.Pointer<UA_UABinaryFileDataType> src,
    ffi.Pointer<UA_UABinaryFileDataType> dst,
  ) {
    return _UA_UABinaryFileDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UABinaryFileDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UABinaryFileDataType>,
              ffi.Pointer<UA_UABinaryFileDataType>)>>('UA_UABinaryFileDataType_copy');
  late final _UA_UABinaryFileDataType_copy = _UA_UABinaryFileDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UABinaryFileDataType>, ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_clear(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_clear(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
          'UA_UABinaryFileDataType_clear');
  late final _UA_UABinaryFileDataType_clear =
      _UA_UABinaryFileDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_delete(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_delete(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
          'UA_UABinaryFileDataType_delete');
  late final _UA_UABinaryFileDataType_delete =
      _UA_UABinaryFileDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  bool UA_UABinaryFileDataType_equal(
    ffi.Pointer<UA_UABinaryFileDataType> p1,
    ffi.Pointer<UA_UABinaryFileDataType> p2,
  ) {
    return _UA_UABinaryFileDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_UABinaryFileDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_UABinaryFileDataType>,
              ffi.Pointer<UA_UABinaryFileDataType>)>>('UA_UABinaryFileDataType_equal');
  late final _UA_UABinaryFileDataType_equal = _UA_UABinaryFileDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_UABinaryFileDataType>, ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_DataSetMetaDataType_init(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_init(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
          'UA_DataSetMetaDataType_init');
  late final _UA_DataSetMetaDataType_init =
      _UA_DataSetMetaDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  ffi.Pointer<UA_DataSetMetaDataType> UA_DataSetMetaDataType_new() {
    return _UA_DataSetMetaDataType_new();
  }

  late final _UA_DataSetMetaDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>>('UA_DataSetMetaDataType_new');
  late final _UA_DataSetMetaDataType_new =
      _UA_DataSetMetaDataType_newPtr.asFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>();

  int UA_DataSetMetaDataType_copy(
    ffi.Pointer<UA_DataSetMetaDataType> src,
    ffi.Pointer<UA_DataSetMetaDataType> dst,
  ) {
    return _UA_DataSetMetaDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetMetaDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetMetaDataType>,
              ffi.Pointer<UA_DataSetMetaDataType>)>>('UA_DataSetMetaDataType_copy');
  late final _UA_DataSetMetaDataType_copy = _UA_DataSetMetaDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetMetaDataType>, ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_clear(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_clear(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
          'UA_DataSetMetaDataType_clear');
  late final _UA_DataSetMetaDataType_clear =
      _UA_DataSetMetaDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_delete(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_delete(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
          'UA_DataSetMetaDataType_delete');
  late final _UA_DataSetMetaDataType_delete =
      _UA_DataSetMetaDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  bool UA_DataSetMetaDataType_equal(
    ffi.Pointer<UA_DataSetMetaDataType> p1,
    ffi.Pointer<UA_DataSetMetaDataType> p2,
  ) {
    return _UA_DataSetMetaDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetMetaDataType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataSetMetaDataType>, ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_equal');
  late final _UA_DataSetMetaDataType_equal = _UA_DataSetMetaDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataSetMetaDataType>, ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_PublishedDataSetDataType_init(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
          'UA_PublishedDataSetDataType_init');
  late final _UA_PublishedDataSetDataType_init =
      _UA_PublishedDataSetDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  ffi.Pointer<UA_PublishedDataSetDataType> UA_PublishedDataSetDataType_new() {
    return _UA_PublishedDataSetDataType_new();
  }

  late final _UA_PublishedDataSetDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishedDataSetDataType> Function()>>(
          'UA_PublishedDataSetDataType_new');
  late final _UA_PublishedDataSetDataType_new =
      _UA_PublishedDataSetDataType_newPtr.asFunction<ffi.Pointer<UA_PublishedDataSetDataType> Function()>();

  int UA_PublishedDataSetDataType_copy(
    ffi.Pointer<UA_PublishedDataSetDataType> src,
    ffi.Pointer<UA_PublishedDataSetDataType> dst,
  ) {
    return _UA_PublishedDataSetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataSetDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishedDataSetDataType>,
              ffi.Pointer<UA_PublishedDataSetDataType>)>>('UA_PublishedDataSetDataType_copy');
  late final _UA_PublishedDataSetDataType_copy = _UA_PublishedDataSetDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PublishedDataSetDataType>, ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_clear(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
          'UA_PublishedDataSetDataType_clear');
  late final _UA_PublishedDataSetDataType_clear =
      _UA_PublishedDataSetDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_delete(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
          'UA_PublishedDataSetDataType_delete');
  late final _UA_PublishedDataSetDataType_delete =
      _UA_PublishedDataSetDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  bool UA_PublishedDataSetDataType_equal(
    ffi.Pointer<UA_PublishedDataSetDataType> p1,
    ffi.Pointer<UA_PublishedDataSetDataType> p2,
  ) {
    return _UA_PublishedDataSetDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PublishedDataSetDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PublishedDataSetDataType>,
              ffi.Pointer<UA_PublishedDataSetDataType>)>>('UA_PublishedDataSetDataType_equal');
  late final _UA_PublishedDataSetDataType_equal = _UA_PublishedDataSetDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PublishedDataSetDataType>, ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_DataSetReaderDataType_init(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_init(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
          'UA_DataSetReaderDataType_init');
  late final _UA_DataSetReaderDataType_init =
      _UA_DataSetReaderDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  ffi.Pointer<UA_DataSetReaderDataType> UA_DataSetReaderDataType_new() {
    return _UA_DataSetReaderDataType_new();
  }

  late final _UA_DataSetReaderDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>>('UA_DataSetReaderDataType_new');
  late final _UA_DataSetReaderDataType_new =
      _UA_DataSetReaderDataType_newPtr.asFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>();

  int UA_DataSetReaderDataType_copy(
    ffi.Pointer<UA_DataSetReaderDataType> src,
    ffi.Pointer<UA_DataSetReaderDataType> dst,
  ) {
    return _UA_DataSetReaderDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetReaderDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetReaderDataType>,
              ffi.Pointer<UA_DataSetReaderDataType>)>>('UA_DataSetReaderDataType_copy');
  late final _UA_DataSetReaderDataType_copy = _UA_DataSetReaderDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetReaderDataType>, ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_clear(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_clear(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
          'UA_DataSetReaderDataType_clear');
  late final _UA_DataSetReaderDataType_clear =
      _UA_DataSetReaderDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_delete(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_delete(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
          'UA_DataSetReaderDataType_delete');
  late final _UA_DataSetReaderDataType_delete =
      _UA_DataSetReaderDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  bool UA_DataSetReaderDataType_equal(
    ffi.Pointer<UA_DataSetReaderDataType> p1,
    ffi.Pointer<UA_DataSetReaderDataType> p2,
  ) {
    return _UA_DataSetReaderDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataSetReaderDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataSetReaderDataType>,
              ffi.Pointer<UA_DataSetReaderDataType>)>>('UA_DataSetReaderDataType_equal');
  late final _UA_DataSetReaderDataType_equal = _UA_DataSetReaderDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataSetReaderDataType>, ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_TargetVariablesDataType_init(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_init(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
          'UA_TargetVariablesDataType_init');
  late final _UA_TargetVariablesDataType_init =
      _UA_TargetVariablesDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  ffi.Pointer<UA_TargetVariablesDataType> UA_TargetVariablesDataType_new() {
    return _UA_TargetVariablesDataType_new();
  }

  late final _UA_TargetVariablesDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TargetVariablesDataType> Function()>>('UA_TargetVariablesDataType_new');
  late final _UA_TargetVariablesDataType_new =
      _UA_TargetVariablesDataType_newPtr.asFunction<ffi.Pointer<UA_TargetVariablesDataType> Function()>();

  int UA_TargetVariablesDataType_copy(
    ffi.Pointer<UA_TargetVariablesDataType> src,
    ffi.Pointer<UA_TargetVariablesDataType> dst,
  ) {
    return _UA_TargetVariablesDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TargetVariablesDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TargetVariablesDataType>,
              ffi.Pointer<UA_TargetVariablesDataType>)>>('UA_TargetVariablesDataType_copy');
  late final _UA_TargetVariablesDataType_copy = _UA_TargetVariablesDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_TargetVariablesDataType>, ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_clear(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_clear(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
          'UA_TargetVariablesDataType_clear');
  late final _UA_TargetVariablesDataType_clear =
      _UA_TargetVariablesDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_delete(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_delete(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
          'UA_TargetVariablesDataType_delete');
  late final _UA_TargetVariablesDataType_delete =
      _UA_TargetVariablesDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  bool UA_TargetVariablesDataType_equal(
    ffi.Pointer<UA_TargetVariablesDataType> p1,
    ffi.Pointer<UA_TargetVariablesDataType> p2,
  ) {
    return _UA_TargetVariablesDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_TargetVariablesDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TargetVariablesDataType>,
              ffi.Pointer<UA_TargetVariablesDataType>)>>('UA_TargetVariablesDataType_equal');
  late final _UA_TargetVariablesDataType_equal = _UA_TargetVariablesDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_TargetVariablesDataType>, ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_StandaloneSubscribedDataSetDataType_init(
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetDataType_init(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>>(
          'UA_StandaloneSubscribedDataSetDataType_init');
  late final _UA_StandaloneSubscribedDataSetDataType_init = _UA_StandaloneSubscribedDataSetDataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>();

  ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> UA_StandaloneSubscribedDataSetDataType_new() {
    return _UA_StandaloneSubscribedDataSetDataType_new();
  }

  late final _UA_StandaloneSubscribedDataSetDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> Function()>>(
          'UA_StandaloneSubscribedDataSetDataType_new');
  late final _UA_StandaloneSubscribedDataSetDataType_new = _UA_StandaloneSubscribedDataSetDataType_newPtr.asFunction<
      ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> Function()>();

  int UA_StandaloneSubscribedDataSetDataType_copy(
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> src,
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> dst,
  ) {
    return _UA_StandaloneSubscribedDataSetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_StandaloneSubscribedDataSetDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>,
              ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>>('UA_StandaloneSubscribedDataSetDataType_copy');
  late final _UA_StandaloneSubscribedDataSetDataType_copy = _UA_StandaloneSubscribedDataSetDataType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>, ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>();

  void UA_StandaloneSubscribedDataSetDataType_clear(
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetDataType_clear(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>>(
          'UA_StandaloneSubscribedDataSetDataType_clear');
  late final _UA_StandaloneSubscribedDataSetDataType_clear = _UA_StandaloneSubscribedDataSetDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>();

  void UA_StandaloneSubscribedDataSetDataType_delete(
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> p,
  ) {
    return _UA_StandaloneSubscribedDataSetDataType_delete(
      p,
    );
  }

  late final _UA_StandaloneSubscribedDataSetDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>>(
          'UA_StandaloneSubscribedDataSetDataType_delete');
  late final _UA_StandaloneSubscribedDataSetDataType_delete = _UA_StandaloneSubscribedDataSetDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>();

  bool UA_StandaloneSubscribedDataSetDataType_equal(
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> p1,
    ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> p2,
  ) {
    return _UA_StandaloneSubscribedDataSetDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_StandaloneSubscribedDataSetDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>,
              ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>>('UA_StandaloneSubscribedDataSetDataType_equal');
  late final _UA_StandaloneSubscribedDataSetDataType_equal =
      _UA_StandaloneSubscribedDataSetDataType_equalPtr.asFunction<
          bool Function(ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>,
              ffi.Pointer<UA_StandaloneSubscribedDataSetDataType>)>();

  void UA_DataTypeSchemaHeader_init(
    ffi.Pointer<UA_DataTypeSchemaHeader> p,
  ) {
    return _UA_DataTypeSchemaHeader_init(
      p,
    );
  }

  late final _UA_DataTypeSchemaHeader_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>>(
          'UA_DataTypeSchemaHeader_init');
  late final _UA_DataTypeSchemaHeader_init =
      _UA_DataTypeSchemaHeader_initPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>();

  ffi.Pointer<UA_DataTypeSchemaHeader> UA_DataTypeSchemaHeader_new() {
    return _UA_DataTypeSchemaHeader_new();
  }

  late final _UA_DataTypeSchemaHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataTypeSchemaHeader> Function()>>('UA_DataTypeSchemaHeader_new');
  late final _UA_DataTypeSchemaHeader_new =
      _UA_DataTypeSchemaHeader_newPtr.asFunction<ffi.Pointer<UA_DataTypeSchemaHeader> Function()>();

  int UA_DataTypeSchemaHeader_copy(
    ffi.Pointer<UA_DataTypeSchemaHeader> src,
    ffi.Pointer<UA_DataTypeSchemaHeader> dst,
  ) {
    return _UA_DataTypeSchemaHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeSchemaHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataTypeSchemaHeader>,
              ffi.Pointer<UA_DataTypeSchemaHeader>)>>('UA_DataTypeSchemaHeader_copy');
  late final _UA_DataTypeSchemaHeader_copy = _UA_DataTypeSchemaHeader_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataTypeSchemaHeader>, ffi.Pointer<UA_DataTypeSchemaHeader>)>();

  void UA_DataTypeSchemaHeader_clear(
    ffi.Pointer<UA_DataTypeSchemaHeader> p,
  ) {
    return _UA_DataTypeSchemaHeader_clear(
      p,
    );
  }

  late final _UA_DataTypeSchemaHeader_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>>(
          'UA_DataTypeSchemaHeader_clear');
  late final _UA_DataTypeSchemaHeader_clear =
      _UA_DataTypeSchemaHeader_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>();

  void UA_DataTypeSchemaHeader_delete(
    ffi.Pointer<UA_DataTypeSchemaHeader> p,
  ) {
    return _UA_DataTypeSchemaHeader_delete(
      p,
    );
  }

  late final _UA_DataTypeSchemaHeader_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>>(
          'UA_DataTypeSchemaHeader_delete');
  late final _UA_DataTypeSchemaHeader_delete =
      _UA_DataTypeSchemaHeader_deletePtr.asFunction<void Function(ffi.Pointer<UA_DataTypeSchemaHeader>)>();

  bool UA_DataTypeSchemaHeader_equal(
    ffi.Pointer<UA_DataTypeSchemaHeader> p1,
    ffi.Pointer<UA_DataTypeSchemaHeader> p2,
  ) {
    return _UA_DataTypeSchemaHeader_equal(
      p1,
      p2,
    );
  }

  late final _UA_DataTypeSchemaHeader_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_DataTypeSchemaHeader>,
              ffi.Pointer<UA_DataTypeSchemaHeader>)>>('UA_DataTypeSchemaHeader_equal');
  late final _UA_DataTypeSchemaHeader_equal = _UA_DataTypeSchemaHeader_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataTypeSchemaHeader>, ffi.Pointer<UA_DataTypeSchemaHeader>)>();

  void UA_ReaderGroupDataType_init(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_init(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
          'UA_ReaderGroupDataType_init');
  late final _UA_ReaderGroupDataType_init =
      _UA_ReaderGroupDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  ffi.Pointer<UA_ReaderGroupDataType> UA_ReaderGroupDataType_new() {
    return _UA_ReaderGroupDataType_new();
  }

  late final _UA_ReaderGroupDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>>('UA_ReaderGroupDataType_new');
  late final _UA_ReaderGroupDataType_new =
      _UA_ReaderGroupDataType_newPtr.asFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>();

  int UA_ReaderGroupDataType_copy(
    ffi.Pointer<UA_ReaderGroupDataType> src,
    ffi.Pointer<UA_ReaderGroupDataType> dst,
  ) {
    return _UA_ReaderGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ReaderGroupDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReaderGroupDataType>,
              ffi.Pointer<UA_ReaderGroupDataType>)>>('UA_ReaderGroupDataType_copy');
  late final _UA_ReaderGroupDataType_copy = _UA_ReaderGroupDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReaderGroupDataType>, ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_clear(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_clear(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
          'UA_ReaderGroupDataType_clear');
  late final _UA_ReaderGroupDataType_clear =
      _UA_ReaderGroupDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_delete(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_delete(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
          'UA_ReaderGroupDataType_delete');
  late final _UA_ReaderGroupDataType_delete =
      _UA_ReaderGroupDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  bool UA_ReaderGroupDataType_equal(
    ffi.Pointer<UA_ReaderGroupDataType> p1,
    ffi.Pointer<UA_ReaderGroupDataType> p2,
  ) {
    return _UA_ReaderGroupDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_ReaderGroupDataType_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ReaderGroupDataType>, ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_equal');
  late final _UA_ReaderGroupDataType_equal = _UA_ReaderGroupDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ReaderGroupDataType>, ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_PubSubConnectionDataType_init(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_init(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
          'UA_PubSubConnectionDataType_init');
  late final _UA_PubSubConnectionDataType_init =
      _UA_PubSubConnectionDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  ffi.Pointer<UA_PubSubConnectionDataType> UA_PubSubConnectionDataType_new() {
    return _UA_PubSubConnectionDataType_new();
  }

  late final _UA_PubSubConnectionDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConnectionDataType> Function()>>(
          'UA_PubSubConnectionDataType_new');
  late final _UA_PubSubConnectionDataType_new =
      _UA_PubSubConnectionDataType_newPtr.asFunction<ffi.Pointer<UA_PubSubConnectionDataType> Function()>();

  int UA_PubSubConnectionDataType_copy(
    ffi.Pointer<UA_PubSubConnectionDataType> src,
    ffi.Pointer<UA_PubSubConnectionDataType> dst,
  ) {
    return _UA_PubSubConnectionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConnectionDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConnectionDataType>,
              ffi.Pointer<UA_PubSubConnectionDataType>)>>('UA_PubSubConnectionDataType_copy');
  late final _UA_PubSubConnectionDataType_copy = _UA_PubSubConnectionDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConnectionDataType>, ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_clear(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
          'UA_PubSubConnectionDataType_clear');
  late final _UA_PubSubConnectionDataType_clear =
      _UA_PubSubConnectionDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_delete(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
          'UA_PubSubConnectionDataType_delete');
  late final _UA_PubSubConnectionDataType_delete =
      _UA_PubSubConnectionDataType_deletePtr.asFunction<void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  bool UA_PubSubConnectionDataType_equal(
    ffi.Pointer<UA_PubSubConnectionDataType> p1,
    ffi.Pointer<UA_PubSubConnectionDataType> p2,
  ) {
    return _UA_PubSubConnectionDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConnectionDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConnectionDataType>,
              ffi.Pointer<UA_PubSubConnectionDataType>)>>('UA_PubSubConnectionDataType_equal');
  late final _UA_PubSubConnectionDataType_equal = _UA_PubSubConnectionDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubConnectionDataType>, ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConfigurationDataType_init(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
          'UA_PubSubConfigurationDataType_init');
  late final _UA_PubSubConfigurationDataType_init =
      _UA_PubSubConfigurationDataType_initPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  ffi.Pointer<UA_PubSubConfigurationDataType> UA_PubSubConfigurationDataType_new() {
    return _UA_PubSubConfigurationDataType_new();
  }

  late final _UA_PubSubConfigurationDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConfigurationDataType> Function()>>(
          'UA_PubSubConfigurationDataType_new');
  late final _UA_PubSubConfigurationDataType_new =
      _UA_PubSubConfigurationDataType_newPtr.asFunction<ffi.Pointer<UA_PubSubConfigurationDataType> Function()>();

  int UA_PubSubConfigurationDataType_copy(
    ffi.Pointer<UA_PubSubConfigurationDataType> src,
    ffi.Pointer<UA_PubSubConfigurationDataType> dst,
  ) {
    return _UA_PubSubConfigurationDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConfigurationDataType>,
              ffi.Pointer<UA_PubSubConfigurationDataType>)>>('UA_PubSubConfigurationDataType_copy');
  late final _UA_PubSubConfigurationDataType_copy = _UA_PubSubConfigurationDataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConfigurationDataType>, ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_clear(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
          'UA_PubSubConfigurationDataType_clear');
  late final _UA_PubSubConfigurationDataType_clear =
      _UA_PubSubConfigurationDataType_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_delete(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
          'UA_PubSubConfigurationDataType_delete');
  late final _UA_PubSubConfigurationDataType_delete = _UA_PubSubConfigurationDataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  bool UA_PubSubConfigurationDataType_equal(
    ffi.Pointer<UA_PubSubConfigurationDataType> p1,
    ffi.Pointer<UA_PubSubConfigurationDataType> p2,
  ) {
    return _UA_PubSubConfigurationDataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConfigurationDataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConfigurationDataType>,
              ffi.Pointer<UA_PubSubConfigurationDataType>)>>('UA_PubSubConfigurationDataType_equal');
  late final _UA_PubSubConfigurationDataType_equal = _UA_PubSubConfigurationDataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubConfigurationDataType>, ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfiguration2DataType_init(
    ffi.Pointer<UA_PubSubConfiguration2DataType> p,
  ) {
    return _UA_PubSubConfiguration2DataType_init(
      p,
    );
  }

  late final _UA_PubSubConfiguration2DataType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>>(
          'UA_PubSubConfiguration2DataType_init');
  late final _UA_PubSubConfiguration2DataType_init = _UA_PubSubConfiguration2DataType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>();

  ffi.Pointer<UA_PubSubConfiguration2DataType> UA_PubSubConfiguration2DataType_new() {
    return _UA_PubSubConfiguration2DataType_new();
  }

  late final _UA_PubSubConfiguration2DataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PubSubConfiguration2DataType> Function()>>(
          'UA_PubSubConfiguration2DataType_new');
  late final _UA_PubSubConfiguration2DataType_new =
      _UA_PubSubConfiguration2DataType_newPtr.asFunction<ffi.Pointer<UA_PubSubConfiguration2DataType> Function()>();

  int UA_PubSubConfiguration2DataType_copy(
    ffi.Pointer<UA_PubSubConfiguration2DataType> src,
    ffi.Pointer<UA_PubSubConfiguration2DataType> dst,
  ) {
    return _UA_PubSubConfiguration2DataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfiguration2DataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConfiguration2DataType>,
              ffi.Pointer<UA_PubSubConfiguration2DataType>)>>('UA_PubSubConfiguration2DataType_copy');
  late final _UA_PubSubConfiguration2DataType_copy = _UA_PubSubConfiguration2DataType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConfiguration2DataType>, ffi.Pointer<UA_PubSubConfiguration2DataType>)>();

  void UA_PubSubConfiguration2DataType_clear(
    ffi.Pointer<UA_PubSubConfiguration2DataType> p,
  ) {
    return _UA_PubSubConfiguration2DataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfiguration2DataType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>>(
          'UA_PubSubConfiguration2DataType_clear');
  late final _UA_PubSubConfiguration2DataType_clear = _UA_PubSubConfiguration2DataType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>();

  void UA_PubSubConfiguration2DataType_delete(
    ffi.Pointer<UA_PubSubConfiguration2DataType> p,
  ) {
    return _UA_PubSubConfiguration2DataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfiguration2DataType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>>(
          'UA_PubSubConfiguration2DataType_delete');
  late final _UA_PubSubConfiguration2DataType_delete = _UA_PubSubConfiguration2DataType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_PubSubConfiguration2DataType>)>();

  bool UA_PubSubConfiguration2DataType_equal(
    ffi.Pointer<UA_PubSubConfiguration2DataType> p1,
    ffi.Pointer<UA_PubSubConfiguration2DataType> p2,
  ) {
    return _UA_PubSubConfiguration2DataType_equal(
      p1,
      p2,
    );
  }

  late final _UA_PubSubConfiguration2DataType_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_PubSubConfiguration2DataType>,
              ffi.Pointer<UA_PubSubConfiguration2DataType>)>>('UA_PubSubConfiguration2DataType_equal');
  late final _UA_PubSubConfiguration2DataType_equal = _UA_PubSubConfiguration2DataType_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_PubSubConfiguration2DataType>, ffi.Pointer<UA_PubSubConfiguration2DataType>)>();

  int UA_EventFilter_parse(
    ffi.Pointer<UA_EventFilter> filter,
    UA_ByteString content,
    ffi.Pointer<UA_EventFilterParserOptions> options,
  ) {
    return _UA_EventFilter_parse(
      filter,
      content,
      options,
    );
  }

  late final _UA_EventFilter_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFilter>, UA_ByteString,
              ffi.Pointer<UA_EventFilterParserOptions>)>>('UA_EventFilter_parse');
  late final _UA_EventFilter_parse = _UA_EventFilter_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_EventFilter>, UA_ByteString, ffi.Pointer<UA_EventFilterParserOptions>)>();

  /// Random Number Generator
  /// -----------------------
  /// If UA_MULTITHREADING is defined, then the seed is stored in thread
  /// local storage. The seed is initialized for every thread in the
  /// server/client.
  void UA_random_seed(
    int seed,
  ) {
    return _UA_random_seed(
      seed,
    );
  }

  late final _UA_random_seedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(UA_UInt64)>>('UA_random_seed');
  late final _UA_random_seed = _UA_random_seedPtr.asFunction<void Function(int)>();

  void UA_random_seed_deterministic(
    int seed,
  ) {
    return _UA_random_seed_deterministic(
      seed,
    );
  }

  late final _UA_random_seed_deterministicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UA_UInt64)>>('UA_random_seed_deterministic');
  late final _UA_random_seed_deterministic = _UA_random_seed_deterministicPtr.asFunction<void Function(int)>();

  int UA_UInt32_random() {
    return _UA_UInt32_random();
  }

  late final _UA_UInt32_randomPtr = _lookup<ffi.NativeFunction<UA_UInt32 Function()>>('UA_UInt32_random');
  late final _UA_UInt32_random = _UA_UInt32_randomPtr.asFunction<int Function()>();

  UA_Guid UA_Guid_random() {
    return _UA_Guid_random();
  }

  late final _UA_Guid_randomPtr = _lookup<ffi.NativeFunction<UA_Guid Function()>>('UA_Guid_random');
  late final _UA_Guid_random = _UA_Guid_randomPtr.asFunction<UA_Guid Function()>();

  late final ffi.Pointer<UA_KeyValueMap> _UA_KEYVALUEMAP_NULL = _lookup<UA_KeyValueMap>('UA_KEYVALUEMAP_NULL');

  UA_KeyValueMap get UA_KEYVALUEMAP_NULL => _UA_KEYVALUEMAP_NULL.ref;

  ffi.Pointer<UA_KeyValueMap> UA_KeyValueMap_new() {
    return _UA_KeyValueMap_new();
  }

  late final _UA_KeyValueMap_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_KeyValueMap> Function()>>('UA_KeyValueMap_new');
  late final _UA_KeyValueMap_new = _UA_KeyValueMap_newPtr.asFunction<ffi.Pointer<UA_KeyValueMap> Function()>();

  void UA_KeyValueMap_clear(
    ffi.Pointer<UA_KeyValueMap> map,
  ) {
    return _UA_KeyValueMap_clear(
      map,
    );
  }

  late final _UA_KeyValueMap_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValueMap>)>>('UA_KeyValueMap_clear');
  late final _UA_KeyValueMap_clear = _UA_KeyValueMap_clearPtr.asFunction<void Function(ffi.Pointer<UA_KeyValueMap>)>();

  void UA_KeyValueMap_delete(
    ffi.Pointer<UA_KeyValueMap> map,
  ) {
    return _UA_KeyValueMap_delete(
      map,
    );
  }

  late final _UA_KeyValueMap_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValueMap>)>>('UA_KeyValueMap_delete');
  late final _UA_KeyValueMap_delete =
      _UA_KeyValueMap_deletePtr.asFunction<void Function(ffi.Pointer<UA_KeyValueMap>)>();

  bool UA_KeyValueMap_isEmpty(
    ffi.Pointer<UA_KeyValueMap> map,
  ) {
    return _UA_KeyValueMap_isEmpty(
      map,
    );
  }

  late final _UA_KeyValueMap_isEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_KeyValueMap>)>>('UA_KeyValueMap_isEmpty');
  late final _UA_KeyValueMap_isEmpty =
      _UA_KeyValueMap_isEmptyPtr.asFunction<bool Function(ffi.Pointer<UA_KeyValueMap>)>();

  bool UA_KeyValueMap_contains(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
  ) {
    return _UA_KeyValueMap_contains(
      map,
      key,
    );
  }

  late final _UA_KeyValueMap_containsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>>(
          'UA_KeyValueMap_contains');
  late final _UA_KeyValueMap_contains =
      _UA_KeyValueMap_containsPtr.asFunction<bool Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>();

  int UA_KeyValueMap_set(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_KeyValueMap_set(
      map,
      key,
      value,
    );
  }

  late final _UA_KeyValueMap_setPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>>('UA_KeyValueMap_set');
  late final _UA_KeyValueMap_set = _UA_KeyValueMap_setPtr.asFunction<
      int Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_KeyValueMap_setScalar(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_setScalar(
      map,
      key,
      p,
      type,
    );
  }

  late final _UA_KeyValueMap_setScalarPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_setScalar');
  late final _UA_KeyValueMap_setScalar = _UA_KeyValueMap_setScalarPtr.asFunction<
      int Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_get(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
  ) {
    return _UA_KeyValueMap_get(
      map,
      key,
    );
  }

  late final _UA_KeyValueMap_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>>(
          'UA_KeyValueMap_get');
  late final _UA_KeyValueMap_get = _UA_KeyValueMap_getPtr.asFunction<
      ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>();

  ffi.Pointer<ffi.Void> UA_KeyValueMap_getScalar(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_getScalar(
      map,
      key,
      type,
    );
  }

  late final _UA_KeyValueMap_getScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_getScalar');
  late final _UA_KeyValueMap_getScalar = _UA_KeyValueMap_getScalarPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName, ffi.Pointer<UA_DataType>)>();

  int UA_KeyValueMap_remove(
    ffi.Pointer<UA_KeyValueMap> map,
    UA_QualifiedName key,
  ) {
    return _UA_KeyValueMap_remove(
      map,
      key,
    );
  }

  late final _UA_KeyValueMap_removePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>>(
          'UA_KeyValueMap_remove');
  late final _UA_KeyValueMap_remove =
      _UA_KeyValueMap_removePtr.asFunction<int Function(ffi.Pointer<UA_KeyValueMap>, UA_QualifiedName)>();

  int UA_KeyValueMap_copy(
    ffi.Pointer<UA_KeyValueMap> src,
    ffi.Pointer<UA_KeyValueMap> dst,
  ) {
    return _UA_KeyValueMap_copy(
      src,
      dst,
    );
  }

  late final _UA_KeyValueMap_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_KeyValueMap>, ffi.Pointer<UA_KeyValueMap>)>>(
          'UA_KeyValueMap_copy');
  late final _UA_KeyValueMap_copy =
      _UA_KeyValueMap_copyPtr.asFunction<int Function(ffi.Pointer<UA_KeyValueMap>, ffi.Pointer<UA_KeyValueMap>)>();

  int UA_KeyValueMap_merge(
    ffi.Pointer<UA_KeyValueMap> lhs,
    ffi.Pointer<UA_KeyValueMap> rhs,
  ) {
    return _UA_KeyValueMap_merge(
      lhs,
      rhs,
    );
  }

  late final _UA_KeyValueMap_mergePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_KeyValueMap>, ffi.Pointer<UA_KeyValueMap>)>>(
          'UA_KeyValueMap_merge');
  late final _UA_KeyValueMap_merge =
      _UA_KeyValueMap_mergePtr.asFunction<int Function(ffi.Pointer<UA_KeyValueMap>, ffi.Pointer<UA_KeyValueMap>)>();

  /// .. _default-node-attributes:
  ///
  /// Default Node Attributes
  /// -----------------------
  /// Default node attributes to simplify the use of the AddNodes services. For
  /// example, Setting the ValueRank and AccessLevel to zero is often an unintended
  /// setting and leads to errors that are hard to track down.
  late final ffi.Pointer<UA_VariableAttributes> _UA_VariableAttributes_default =
      _lookup<UA_VariableAttributes>('UA_VariableAttributes_default');

  UA_VariableAttributes get UA_VariableAttributes_default => _UA_VariableAttributes_default.ref;

  late final ffi.Pointer<UA_VariableTypeAttributes> _UA_VariableTypeAttributes_default =
      _lookup<UA_VariableTypeAttributes>('UA_VariableTypeAttributes_default');

  UA_VariableTypeAttributes get UA_VariableTypeAttributes_default => _UA_VariableTypeAttributes_default.ref;

  late final ffi.Pointer<UA_MethodAttributes> _UA_MethodAttributes_default =
      _lookup<UA_MethodAttributes>('UA_MethodAttributes_default');

  UA_MethodAttributes get UA_MethodAttributes_default => _UA_MethodAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectAttributes> _UA_ObjectAttributes_default =
      _lookup<UA_ObjectAttributes>('UA_ObjectAttributes_default');

  UA_ObjectAttributes get UA_ObjectAttributes_default => _UA_ObjectAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectTypeAttributes> _UA_ObjectTypeAttributes_default =
      _lookup<UA_ObjectTypeAttributes>('UA_ObjectTypeAttributes_default');

  UA_ObjectTypeAttributes get UA_ObjectTypeAttributes_default => _UA_ObjectTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ReferenceTypeAttributes> _UA_ReferenceTypeAttributes_default =
      _lookup<UA_ReferenceTypeAttributes>('UA_ReferenceTypeAttributes_default');

  UA_ReferenceTypeAttributes get UA_ReferenceTypeAttributes_default => _UA_ReferenceTypeAttributes_default.ref;

  late final ffi.Pointer<UA_DataTypeAttributes> _UA_DataTypeAttributes_default =
      _lookup<UA_DataTypeAttributes>('UA_DataTypeAttributes_default');

  UA_DataTypeAttributes get UA_DataTypeAttributes_default => _UA_DataTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ViewAttributes> _UA_ViewAttributes_default =
      _lookup<UA_ViewAttributes>('UA_ViewAttributes_default');

  UA_ViewAttributes get UA_ViewAttributes_default => _UA_ViewAttributes_default.ref;

  int UA_parseEndpointUrl(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> outHostname,
    ffi.Pointer<UA_UInt16> outPort,
    ffi.Pointer<UA_String> outPath,
  ) {
    return _UA_parseEndpointUrl(
      endpointUrl,
      outHostname,
      outPort,
      outPath,
    );
  }

  late final _UA_parseEndpointUrlPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_String>)>>('UA_parseEndpointUrl');
  late final _UA_parseEndpointUrl = _UA_parseEndpointUrlPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_String>)>();

  int UA_parseEndpointUrlEthernet(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> target,
    ffi.Pointer<UA_UInt16> vid,
    ffi.Pointer<UA_Byte> pcp,
  ) {
    return _UA_parseEndpointUrlEthernet(
      endpointUrl,
      target,
      vid,
      pcp,
    );
  }

  late final _UA_parseEndpointUrlEthernetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_Byte>)>>('UA_parseEndpointUrlEthernet');
  late final _UA_parseEndpointUrlEthernet = _UA_parseEndpointUrlEthernetPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_Byte>)>();

  int UA_readNumber(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
  ) {
    return _UA_readNumber(
      buf,
      buflen,
      number,
    );
  }

  late final _UA_readNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size, ffi.Pointer<UA_UInt32>)>>(
          'UA_readNumber');
  late final _UA_readNumber =
      _UA_readNumberPtr.asFunction<int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>)>();

  int UA_readNumberWithBase(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
    int base,
  ) {
    return _UA_readNumberWithBase(
      buf,
      buflen,
      number,
      base,
    );
  }

  late final _UA_readNumberWithBasePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size, ffi.Pointer<UA_UInt32>, UA_Byte)>>(
          'UA_readNumberWithBase');
  late final _UA_readNumberWithBase =
      _UA_readNumberWithBasePtr.asFunction<int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>, int)>();

  int UA_RelativePath_parse(
    ffi.Pointer<UA_RelativePath> rp,
    UA_String str,
  ) {
    return _UA_RelativePath_parse(
      rp,
      str,
    );
  }

  late final _UA_RelativePath_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RelativePath>, UA_String)>>(
          'UA_RelativePath_parse');
  late final _UA_RelativePath_parse =
      _UA_RelativePath_parsePtr.asFunction<int Function(ffi.Pointer<UA_RelativePath>, UA_String)>();

  int UA_RelativePath_parseWithServer(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_RelativePath> rp,
    UA_String str,
  ) {
    return _UA_RelativePath_parseWithServer(
      server,
      rp,
      str,
    );
  }

  late final _UA_RelativePath_parseWithServerPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_RelativePath>, UA_String)>>(
      'UA_RelativePath_parseWithServer');
  late final _UA_RelativePath_parseWithServer = _UA_RelativePath_parseWithServerPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_RelativePath>, UA_String)>();

  int UA_RelativePath_print(
    ffi.Pointer<UA_RelativePath> rp,
    ffi.Pointer<UA_String> out,
  ) {
    return _UA_RelativePath_print(
      rp,
      out,
    );
  }

  late final _UA_RelativePath_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_String>)>>(
          'UA_RelativePath_print');
  late final _UA_RelativePath_print =
      _UA_RelativePath_printPtr.asFunction<int Function(ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_String>)>();

  int UA_ReadValueId_parse(
    ffi.Pointer<UA_ReadValueId> rvi,
    UA_String str,
  ) {
    return _UA_ReadValueId_parse(
      rvi,
      str,
    );
  }

  late final _UA_ReadValueId_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadValueId>, UA_String)>>(
          'UA_ReadValueId_parse');
  late final _UA_ReadValueId_parse =
      _UA_ReadValueId_parsePtr.asFunction<int Function(ffi.Pointer<UA_ReadValueId>, UA_String)>();

  int UA_AttributeOperand_parse(
    ffi.Pointer<UA_AttributeOperand> ao,
    UA_String str,
  ) {
    return _UA_AttributeOperand_parse(
      ao,
      str,
    );
  }

  late final _UA_AttributeOperand_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AttributeOperand>, UA_String)>>(
          'UA_AttributeOperand_parse');
  late final _UA_AttributeOperand_parse =
      _UA_AttributeOperand_parsePtr.asFunction<int Function(ffi.Pointer<UA_AttributeOperand>, UA_String)>();

  int UA_SimpleAttributeOperand_parse(
    ffi.Pointer<UA_SimpleAttributeOperand> sao,
    UA_String str,
  ) {
    return _UA_SimpleAttributeOperand_parse(
      sao,
      str,
    );
  }

  late final _UA_SimpleAttributeOperand_parsePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_SimpleAttributeOperand>, UA_String)>>(
          'UA_SimpleAttributeOperand_parse');
  late final _UA_SimpleAttributeOperand_parse =
      _UA_SimpleAttributeOperand_parsePtr.asFunction<int Function(ffi.Pointer<UA_SimpleAttributeOperand>, UA_String)>();

  int UA_ReadValueId_print(
    ffi.Pointer<UA_ReadValueId> rvi,
    ffi.Pointer<UA_String> out,
  ) {
    return _UA_ReadValueId_print(
      rvi,
      out,
    );
  }

  late final _UA_ReadValueId_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_String>)>>(
          'UA_ReadValueId_print');
  late final _UA_ReadValueId_print =
      _UA_ReadValueId_printPtr.asFunction<int Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_String>)>();

  int UA_AttributeOperand_print(
    ffi.Pointer<UA_AttributeOperand> ao,
    ffi.Pointer<UA_String> out,
  ) {
    return _UA_AttributeOperand_print(
      ao,
      out,
    );
  }

  late final _UA_AttributeOperand_printPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_String>)>>(
          'UA_AttributeOperand_print');
  late final _UA_AttributeOperand_print = _UA_AttributeOperand_printPtr.asFunction<
      int Function(ffi.Pointer<UA_AttributeOperand>, ffi.Pointer<UA_String>)>();

  int UA_SimpleAttributeOperand_print(
    ffi.Pointer<UA_SimpleAttributeOperand> sao,
    ffi.Pointer<UA_String> out,
  ) {
    return _UA_SimpleAttributeOperand_print(
      sao,
      out,
    );
  }

  late final _UA_SimpleAttributeOperand_printPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_SimpleAttributeOperand>, ffi.Pointer<UA_String>)>>(
      'UA_SimpleAttributeOperand_print');
  late final _UA_SimpleAttributeOperand_print = _UA_SimpleAttributeOperand_printPtr.asFunction<
      int Function(ffi.Pointer<UA_SimpleAttributeOperand>, ffi.Pointer<UA_String>)>();

  /// Cryptography Helpers
  /// --------------------
  bool UA_constantTimeEqual(
    ffi.Pointer<ffi.Void> ptr1,
    ffi.Pointer<ffi.Void> ptr2,
    int length,
  ) {
    return _UA_constantTimeEqual(
      ptr1,
      ptr2,
      length,
    );
  }

  late final _UA_constantTimeEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>(
          'UA_constantTimeEqual');
  late final _UA_constantTimeEqual =
      _UA_constantTimeEqualPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void UA_ByteString_memZero(
    ffi.Pointer<UA_ByteString> bs,
  ) {
    return _UA_ByteString_memZero(
      bs,
    );
  }

  late final _UA_ByteString_memZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>('UA_ByteString_memZero');
  late final _UA_ByteString_memZero = _UA_ByteString_memZeroPtr.asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  /// Trustlist Helpers
  /// -----------------
  int UA_TrustListDataType_add(
    ffi.Pointer<UA_TrustListDataType> src,
    ffi.Pointer<UA_TrustListDataType> dst,
  ) {
    return _UA_TrustListDataType_add(
      src,
      dst,
    );
  }

  late final _UA_TrustListDataType_addPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_add');
  late final _UA_TrustListDataType_add = _UA_TrustListDataType_addPtr.asFunction<
      int Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>();

  int UA_TrustListDataType_set(
    ffi.Pointer<UA_TrustListDataType> src,
    ffi.Pointer<UA_TrustListDataType> dst,
  ) {
    return _UA_TrustListDataType_set(
      src,
      dst,
    );
  }

  late final _UA_TrustListDataType_setPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_set');
  late final _UA_TrustListDataType_set = _UA_TrustListDataType_setPtr.asFunction<
      int Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>();

  int UA_TrustListDataType_remove(
    ffi.Pointer<UA_TrustListDataType> src,
    ffi.Pointer<UA_TrustListDataType> dst,
  ) {
    return _UA_TrustListDataType_remove(
      src,
      dst,
    );
  }

  late final _UA_TrustListDataType_removePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>>('UA_TrustListDataType_remove');
  late final _UA_TrustListDataType_remove = _UA_TrustListDataType_removePtr.asFunction<
      int Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_TrustListDataType>)>();

  bool UA_TrustListDataType_contains(
    ffi.Pointer<UA_TrustListDataType> trustList,
    ffi.Pointer<UA_ByteString> certificate,
    UA_TrustListMasks mask,
  ) {
    return _UA_TrustListDataType_contains(
      trustList,
      certificate,
      mask.value,
    );
  }

  late final _UA_TrustListDataType_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_ByteString>,
              ffi.UnsignedInt)>>('UA_TrustListDataType_contains');
  late final _UA_TrustListDataType_contains = _UA_TrustListDataType_containsPtr.asFunction<
      bool Function(ffi.Pointer<UA_TrustListDataType>, ffi.Pointer<UA_ByteString>, int)>();

  int UA_TrustListDataType_getSize(
    ffi.Pointer<UA_TrustListDataType> trustList,
  ) {
    return _UA_TrustListDataType_getSize(
      trustList,
    );
  }

  late final _UA_TrustListDataType_getSizePtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_TrustListDataType>)>>(
          'UA_TrustListDataType_getSize');
  late final _UA_TrustListDataType_getSize =
      _UA_TrustListDataType_getSizePtr.asFunction<int Function(ffi.Pointer<UA_TrustListDataType>)>();

  DartUA_StatusCode UA_CertificateUtils_verifyApplicationURI(
    UA_RuleHandling ruleHandling,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_String> applicationURI,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_CertificateUtils_verifyApplicationURI(
      ruleHandling.value,
      certificate,
      applicationURI,
      logger,
    );
  }

  late final _UA_CertificateUtils_verifyApplicationURIPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.UnsignedInt, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_Logger>)>>('UA_CertificateUtils_verifyApplicationURI');
  late final _UA_CertificateUtils_verifyApplicationURI = _UA_CertificateUtils_verifyApplicationURIPtr.asFunction<
      int Function(int, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>, ffi.Pointer<UA_Logger>)>();

  int UA_CertificateUtils_getExpirationDate(
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_DateTime> expiryDateTime,
  ) {
    return _UA_CertificateUtils_getExpirationDate(
      certificate,
      expiryDateTime,
    );
  }

  late final _UA_CertificateUtils_getExpirationDatePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_DateTime>)>>(
          'UA_CertificateUtils_getExpirationDate');
  late final _UA_CertificateUtils_getExpirationDate = _UA_CertificateUtils_getExpirationDatePtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_DateTime>)>();

  int UA_CertificateUtils_getSubjectName(
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_String> subjectName,
  ) {
    return _UA_CertificateUtils_getSubjectName(
      certificate,
      subjectName,
    );
  }

  late final _UA_CertificateUtils_getSubjectNamePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>>(
          'UA_CertificateUtils_getSubjectName');
  late final _UA_CertificateUtils_getSubjectName = _UA_CertificateUtils_getSubjectNamePtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_CertificateUtils_getThumbprint(
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_String> thumbprint,
  ) {
    return _UA_CertificateUtils_getThumbprint(
      certificate,
      thumbprint,
    );
  }

  late final _UA_CertificateUtils_getThumbprintPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>>(
          'UA_CertificateUtils_getThumbprint');
  late final _UA_CertificateUtils_getThumbprint = _UA_CertificateUtils_getThumbprintPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_CertificateUtils_getKeySize(
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<ffi.Size> keySize,
  ) {
    return _UA_CertificateUtils_getKeySize(
      certificate,
      keySize,
    );
  }

  late final _UA_CertificateUtils_getKeySizePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>)>>(
          'UA_CertificateUtils_getKeySize');
  late final _UA_CertificateUtils_getKeySize =
      _UA_CertificateUtils_getKeySizePtr.asFunction<int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>)>();

  int UA_CertificateUtils_comparePublicKeys(
    ffi.Pointer<UA_ByteString> certificate1,
    ffi.Pointer<UA_ByteString> certificate2,
  ) {
    return _UA_CertificateUtils_comparePublicKeys(
      certificate1,
      certificate2,
    );
  }

  late final _UA_CertificateUtils_comparePublicKeysPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>>(
          'UA_CertificateUtils_comparePublicKeys');
  late final _UA_CertificateUtils_comparePublicKeys = _UA_CertificateUtils_comparePublicKeysPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_CertificateUtils_checkKeyPair(
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_CertificateUtils_checkKeyPair(
      certificate,
      privateKey,
    );
  }

  late final _UA_CertificateUtils_checkKeyPairPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>>(
          'UA_CertificateUtils_checkKeyPair');
  late final _UA_CertificateUtils_checkKeyPair = _UA_CertificateUtils_checkKeyPairPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_CertificateUtils_checkCA(
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_CertificateUtils_checkCA(
      certificate,
    );
  }

  late final _UA_CertificateUtils_checkCAPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>)>>('UA_CertificateUtils_checkCA');
  late final _UA_CertificateUtils_checkCA =
      _UA_CertificateUtils_checkCAPtr.asFunction<int Function(ffi.Pointer<UA_ByteString>)>();

  int UA_CertificateUtils_decryptPrivateKey(
    UA_ByteString privateKey,
    UA_ByteString password,
    ffi.Pointer<UA_ByteString> outDerKey,
  ) {
    return _UA_CertificateUtils_decryptPrivateKey(
      privateKey,
      password,
      outDerKey,
    );
  }

  late final _UA_CertificateUtils_decryptPrivateKeyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(UA_ByteString, UA_ByteString, ffi.Pointer<UA_ByteString>)>>(
          'UA_CertificateUtils_decryptPrivateKey');
  late final _UA_CertificateUtils_decryptPrivateKey = _UA_CertificateUtils_decryptPrivateKeyPtr.asFunction<
      int Function(UA_ByteString, UA_ByteString, ffi.Pointer<UA_ByteString>)>();

  /// amalgamated original file "/include/open62541/plugin/securitypolicy.h"
  late final ffi.Pointer<UA_String> _UA_SECURITY_POLICY_NONE_URI = _lookup<UA_String>('UA_SECURITY_POLICY_NONE_URI');

  UA_String get UA_SECURITY_POLICY_NONE_URI => _UA_SECURITY_POLICY_NONE_URI.ref;

  /// POSIX EventLop Implementation
  /// -----------------------------
  /// The POSIX compatibility of Win32 is 'close enough'. So a joint implementation
  /// is provided. The configuration paramaters must be set before starting the
  /// EventLoop.
  ///
  /// **Clock configuration (Linux and BSDs only)**
  ///
  /// 0:clock-source [int32]
  /// Clock source (default: CLOCK_REALTIME).
  ///
  /// 0:clock-source-monotonic [int32]:
  /// Clock source used for time intervals. A non-monotonic source can be used as
  /// well. But expect accordingly longer sleep-times for timed events when the
  /// clock is set to the past. See the man-page of "clock_gettime" on how to get
  /// a clock source id for a character-device such as /dev/ptp0. (default:
  /// CLOCK_MONOTONIC_RAW)
  ffi.Pointer<UA_EventLoop> UA_EventLoop_new_POSIX(
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_EventLoop_new_POSIX(
      logger,
    );
  }

  late final _UA_EventLoop_new_POSIXPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventLoop> Function(ffi.Pointer<UA_Logger>)>>('UA_EventLoop_new_POSIX');
  late final _UA_EventLoop_new_POSIX =
      _UA_EventLoop_new_POSIXPtr.asFunction<ffi.Pointer<UA_EventLoop> Function(ffi.Pointer<UA_Logger>)>();

  /// TCP Connection Manager
  /// ~~~~~~~~~~~~~~~~~~~~~~
  /// Listens on the network and manages TCP connections. This should be available
  /// for all architectures.
  ///
  /// The `openConnection` callback is used to create both client and server
  /// sockets. A server socket listens and accepts incoming connections (creates an
  /// active connection). This is distinguished by the key-value parameters passed
  /// to `openConnection`. Note that a single call to `openConnection` for a server
  /// connection may actually create multiple connections (one per hostname /
  /// device).
  ///
  /// The `connectionCallback` of the server socket and `context` of the server
  /// socket is reused for each new connection. But the key-value parameters for
  /// the first callback are different between server and client connections.
  ///
  /// **Configuration parameters for the ConnectionManager (set before start)**
  ///
  /// 0:recv-bufsize [uint32]
  /// Size of the buffer that is statically allocated for receiving messages
  /// (default 64kB).
  ///
  /// 0:send-bufsize [uint32]
  /// Size of the statically allocated buffer for sending messages. This then
  /// becomes an upper bound for the message size. If undefined a fresh buffer
  /// is allocated for every `allocNetworkBuffer` (default: no buffer).
  ///
  /// **Open Connection Parameters:**
  ///
  /// 0:address [string | array of string]
  /// Hostname or IPv4/v6 address for the connection (scalar parameter required
  /// for active connections). For listen-connections the address contains the
  /// local hostnames or IP addresses for listening. If undefined, listen on all
  /// interfaces INADDR_ANY. (default: undefined)
  ///
  /// 0:port [uint16]
  /// Port of the target host (required).
  ///
  /// 0:listen [boolean]
  /// Listen-connection or active-connection (default: false)
  ///
  /// 0:validate [boolean]
  /// If true, the connection setup will act as a dry-run without actually
  /// creating any connection but solely validating the provided parameters
  /// (default: false)
  ///
  /// **Active Connection Connection Callback Parameters (first callback only):**
  ///
  /// 0:remote-address [string]
  /// Address of the remote side (hostname or IP address).
  ///
  /// **Listen Connection Connection Callback Parameters (first callback only):**
  ///
  /// 0:listen-address [string]
  /// Local address (IP or hostname) for the new listen-connection.
  ///
  /// 0:listen-port [uint16]
  /// Port on which the new connection listens.
  ///
  /// **Send Parameters:**
  ///
  /// No additional parameters for sending over an established TCP socket
  /// defined.
  ffi.Pointer<UA_ConnectionManager> UA_ConnectionManager_new_POSIX_TCP(
    UA_String eventSourceName,
  ) {
    return _UA_ConnectionManager_new_POSIX_TCP(
      eventSourceName,
    );
  }

  late final _UA_ConnectionManager_new_POSIX_TCPPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>>(
          'UA_ConnectionManager_new_POSIX_TCP');
  late final _UA_ConnectionManager_new_POSIX_TCP =
      _UA_ConnectionManager_new_POSIX_TCPPtr.asFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>();

  /// UDP Connection Manager
  /// ~~~~~~~~~~~~~~~~~~~~~~
  /// Manages UDP connections. This should be available for all architectures. The
  /// configuration parameters have to set before calling _start to take effect.
  ///
  /// **Configuration parameters for the ConnectionManager (set before start)**
  ///
  /// 0:recv-bufsize [uint32]
  /// Size of the buffer that is statically allocated for receiving messages
  /// (default 64kB).
  ///
  /// 0:send-bufsize [uint32]
  /// Size of the statically allocated buffer for sending messages. This then
  /// becomes an upper bound for the message size. If undefined a fresh buffer
  /// is allocated for every `allocNetworkBuffer` (default: no buffer).
  ///
  /// **Open Connection Parameters:**
  ///
  /// 0:listen [boolean]
  /// Use the connection for listening or for sending (default: false)
  ///
  /// 0:address [string | string array]
  /// Hostname (or IPv4/v6 address) for sending or receiving. A scalar is
  /// required for sending. For listening a string array for the list-hostnames
  /// is possible as well (default: list on all hostnames).
  ///
  /// 0:port [uint16]
  /// Port for sending or listening (required).
  ///
  /// 0:interface [string]
  /// Network interface for listening or sending (e.g. when using multicast
  /// addresses). Can be either the IP address of the network interface
  /// or the interface name (e.g. 'eth0').
  ///
  /// 0:ttl [uint32]
  /// Multicast time to live, (optional, default: 1 - meaning multicast is
  /// available only to the local subnet).
  ///
  /// 0:loopback [boolean]
  /// Whether or not to use multicast loopback, enabling local interfaces
  /// belonging to the multicast group to receive packages. (default: enabled).
  ///
  /// 0:reuse [boolean]
  /// Enables sharing of the same listening address on different sockets
  /// (default: disabled).
  ///
  /// 0:sockpriority [uint32]
  /// The socket priority (optional) - only available on linux. packets with a
  /// higher priority may be processed first depending on the selected device
  /// queueing discipline. Setting a priority outside the range 0 to 6 requires
  /// the CAP_NET_ADMIN capability (on Linux).
  ///
  /// 0:validate [boolean]
  /// If true, the connection setup will act as a dry-run without actually
  /// creating any connection but solely validating the provided parameters
  /// (default: false)
  ///
  /// **Connection Callback Parameters:**
  ///
  /// 0:remote-address [string]
  /// Contains the remote IP address.
  ///
  /// 0:remote-port [uint16]
  /// Contains the remote port.
  ///
  /// **Send Parameters:**
  ///
  /// No additional parameters for sending over an UDP connection defined.
  ffi.Pointer<UA_ConnectionManager> UA_ConnectionManager_new_POSIX_UDP(
    UA_String eventSourceName,
  ) {
    return _UA_ConnectionManager_new_POSIX_UDP(
      eventSourceName,
    );
  }

  late final _UA_ConnectionManager_new_POSIX_UDPPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>>(
          'UA_ConnectionManager_new_POSIX_UDP');
  late final _UA_ConnectionManager_new_POSIX_UDP =
      _UA_ConnectionManager_new_POSIX_UDPPtr.asFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>();

  /// MQTT Connection Manager
  /// ~~~~~~~~~~~~~~~~~~~~~~~
  /// The MQTT ConnectionManager reuses the TCP ConnectionManager that is
  /// configured in the EventLoop. Hence the MQTT ConnectionManager is platform
  /// agnostic and does not require porting. An MQTT connection is for a
  /// combination of broker and topic. The MQTT ConnectionManager can group
  /// connections to the same broker in the background. Hence adding multiple
  /// connections for the same broker is "cheap". To have individual control,
  /// separate connections are created for each topic and for each direction
  /// (publishing / subscribing).
  ///
  /// **Open Connection Parameters:**
  ///
  /// 0:address [string]
  /// Hostname or IPv4/v6 address of the MQTT broker (required).
  ///
  /// 0:port [uint16]
  /// Port of the MQTT broker (default: 1883).
  ///
  /// 0:username [string]
  /// Username to use (default: none)
  ///
  /// 0:password [string]
  /// Password to use (default: none)
  ///
  /// 0:keep-alive [uint16]
  /// Number of seconds for the keep-alive (ping) (default: 400).
  ///
  /// 0:validate [boolean]
  /// If true, the connection setup will act as a dry-run without actually
  /// creating any connection but solely validating the provided parameters
  /// (default: false)
  ///
  /// 0:topic [string]
  /// Topic to which the connection is associated (required).
  ///
  /// 0:subscribe [bool]
  /// Subscribe to the topic (default: false). Otherwise it is only possible to
  /// publish on the topic. Subscribed topics can also be published to.
  ///
  /// **Connection Callback Parameters:**
  ///
  /// 0:topic [string]
  /// The value set during connect.
  ///
  /// 0:subscribe [bool]
  /// The value set during connect.
  ///
  /// **Send Parameters:**
  ///
  /// No additional parameters for sending over an Ethernet connection defined.
  ffi.Pointer<UA_ConnectionManager> UA_ConnectionManager_new_MQTT(
    UA_String eventSourceName,
  ) {
    return _UA_ConnectionManager_new_MQTT(
      eventSourceName,
    );
  }

  late final _UA_ConnectionManager_new_MQTTPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>>(
          'UA_ConnectionManager_new_MQTT');
  late final _UA_ConnectionManager_new_MQTT =
      _UA_ConnectionManager_new_MQTTPtr.asFunction<ffi.Pointer<UA_ConnectionManager> Function(UA_String)>();

  /// Signal Interrupt Manager
  /// ~~~~~~~~~~~~~~~~~~~~~~~~
  /// Create an instance of the interrupt manager that handles POSX signals. This
  /// interrupt manager takes the numerical interrupt identifiers from <signal.h>
  /// for the interruptHandle.
  ffi.Pointer<UA_InterruptManager> UA_InterruptManager_new_POSIX(
    UA_String eventSourceName,
  ) {
    return _UA_InterruptManager_new_POSIX(
      eventSourceName,
    );
  }

  late final _UA_InterruptManager_new_POSIXPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_InterruptManager> Function(UA_String)>>(
          'UA_InterruptManager_new_POSIX');
  late final _UA_InterruptManager_new_POSIX =
      _UA_InterruptManager_new_POSIXPtr.asFunction<ffi.Pointer<UA_InterruptManager> Function(UA_String)>();

  late final ffi.Pointer<UA_ReferenceTypeSet> _UA_REFERENCETYPESET_NONE =
      _lookup<UA_ReferenceTypeSet>('UA_REFERENCETYPESET_NONE');

  UA_ReferenceTypeSet get UA_REFERENCETYPESET_NONE => _UA_REFERENCETYPESET_NONE.ref;

  late final ffi.Pointer<UA_ReferenceTypeSet> _UA_REFERENCETYPESET_ALL =
      _lookup<UA_ReferenceTypeSet>('UA_REFERENCETYPESET_ALL');

  UA_ReferenceTypeSet get UA_REFERENCETYPESET_ALL => _UA_REFERENCETYPESET_ALL.ref;

  void UA_NodePointer_clear(
    ffi.Pointer<UA_NodePointer> np,
  ) {
    return _UA_NodePointer_clear(
      np,
    );
  }

  late final _UA_NodePointer_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodePointer>)>>('UA_NodePointer_clear');
  late final _UA_NodePointer_clear = _UA_NodePointer_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodePointer>)>();

  int UA_NodePointer_copy(
    UA_NodePointer in$,
    ffi.Pointer<UA_NodePointer> out,
  ) {
    return _UA_NodePointer_copy(
      in$,
      out,
    );
  }

  late final _UA_NodePointer_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(UA_NodePointer, ffi.Pointer<UA_NodePointer>)>>(
          'UA_NodePointer_copy');
  late final _UA_NodePointer_copy =
      _UA_NodePointer_copyPtr.asFunction<int Function(UA_NodePointer, ffi.Pointer<UA_NodePointer>)>();

  bool UA_NodePointer_isLocal(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_isLocal(
      np,
    );
  }

  late final _UA_NodePointer_isLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_NodePointer)>>('UA_NodePointer_isLocal');
  late final _UA_NodePointer_isLocal = _UA_NodePointer_isLocalPtr.asFunction<bool Function(UA_NodePointer)>();

  UA_Order UA_NodePointer_order(
    UA_NodePointer p1,
    UA_NodePointer p2,
  ) {
    return UA_Order.fromValue(_UA_NodePointer_order(
      p1,
      p2,
    ));
  }

  late final _UA_NodePointer_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(UA_NodePointer, UA_NodePointer)>>('UA_NodePointer_order');
  late final _UA_NodePointer_order =
      _UA_NodePointer_orderPtr.asFunction<int Function(UA_NodePointer, UA_NodePointer)>();

  UA_NodePointer UA_NodePointer_fromNodeId(
    ffi.Pointer<UA_NodeId> id,
  ) {
    return _UA_NodePointer_fromNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>>('UA_NodePointer_fromNodeId');
  late final _UA_NodePointer_fromNodeId =
      _UA_NodePointer_fromNodeIdPtr.asFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>();

  UA_NodePointer UA_NodePointer_fromExpandedNodeId(
    ffi.Pointer<UA_ExpandedNodeId> id,
  ) {
    return _UA_NodePointer_fromExpandedNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromExpandedNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
          'UA_NodePointer_fromExpandedNodeId');
  late final _UA_NodePointer_fromExpandedNodeId =
      _UA_NodePointer_fromExpandedNodeIdPtr.asFunction<UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  UA_ExpandedNodeId UA_NodePointer_toExpandedNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toExpandedNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toExpandedNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodePointer)>>('UA_NodePointer_toExpandedNodeId');
  late final _UA_NodePointer_toExpandedNodeId =
      _UA_NodePointer_toExpandedNodeIdPtr.asFunction<UA_ExpandedNodeId Function(UA_NodePointer)>();

  UA_NodeId UA_NodePointer_toNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_NodePointer)>>('UA_NodePointer_toNodeId');
  late final _UA_NodePointer_toNodeId = _UA_NodePointer_toNodeIdPtr.asFunction<UA_NodeId Function(UA_NodePointer)>();

  ffi.Pointer<ffi.Void> UA_NodeReferenceKind_iterate(
    ffi.Pointer<UA_NodeReferenceKind> rk,
    UA_NodeReferenceKind_iterateCallback callback,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_NodeReferenceKind_iterate(
      rk,
      callback,
      context,
    );
  }

  late final _UA_NodeReferenceKind_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_NodeReferenceKind>, UA_NodeReferenceKind_iterateCallback,
              ffi.Pointer<ffi.Void>)>>('UA_NodeReferenceKind_iterate');
  late final _UA_NodeReferenceKind_iterate = _UA_NodeReferenceKind_iteratePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<UA_NodeReferenceKind>, UA_NodeReferenceKind_iterateCallback, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<UA_ReferenceTarget> UA_NodeReferenceKind_findTarget(
    ffi.Pointer<UA_NodeReferenceKind> rk,
    ffi.Pointer<UA_ExpandedNodeId> targetId,
  ) {
    return _UA_NodeReferenceKind_findTarget(
      rk,
      targetId,
    );
  }

  late final _UA_NodeReferenceKind_findTargetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ReferenceTarget> Function(
              ffi.Pointer<UA_NodeReferenceKind>, ffi.Pointer<UA_ExpandedNodeId>)>>('UA_NodeReferenceKind_findTarget');
  late final _UA_NodeReferenceKind_findTarget = _UA_NodeReferenceKind_findTargetPtr.asFunction<
      ffi.Pointer<UA_ReferenceTarget> Function(ffi.Pointer<UA_NodeReferenceKind>, ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_NodeReferenceKind_switch(
    ffi.Pointer<UA_NodeReferenceKind> rk,
  ) {
    return _UA_NodeReferenceKind_switch(
      rk,
    );
  }

  late final _UA_NodeReferenceKind_switchPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NodeReferenceKind>)>>(
          'UA_NodeReferenceKind_switch');
  late final _UA_NodeReferenceKind_switch =
      _UA_NodeReferenceKind_switchPtr.asFunction<int Function(ffi.Pointer<UA_NodeReferenceKind>)>();

  int UA_Node_setAttributes(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<ffi.Void> attributes,
    ffi.Pointer<UA_DataType> attributeType,
  ) {
    return _UA_Node_setAttributes(
      node,
      attributes,
      attributeType,
    );
  }

  late final _UA_Node_setAttributesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_Node_setAttributes');
  late final _UA_Node_setAttributes = _UA_Node_setAttributesPtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Node_copy(
    ffi.Pointer<UA_Node> src,
    ffi.Pointer<UA_Node> dst,
  ) {
    return _UA_Node_copy(
      src,
      dst,
    );
  }

  late final _UA_Node_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>>('UA_Node_copy');
  late final _UA_Node_copy = _UA_Node_copyPtr.asFunction<int Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>();

  ffi.Pointer<UA_Node> UA_Node_copy_alloc(
    ffi.Pointer<UA_Node> src,
  ) {
    return _UA_Node_copy_alloc(
      src,
    );
  }

  late final _UA_Node_copy_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>>('UA_Node_copy_alloc');
  late final _UA_Node_copy_alloc =
      _UA_Node_copy_allocPtr.asFunction<ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>();

  int UA_Node_addReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
    int targetBrowseNameHash,
  ) {
    return _UA_Node_addReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
      targetBrowseNameHash,
    );
  }

  late final _UA_Node_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Node>, UA_Byte, ffi.Bool, ffi.Pointer<UA_ExpandedNodeId>,
              UA_UInt32)>>('UA_Node_addReference');
  late final _UA_Node_addReference = _UA_Node_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, int, bool, ffi.Pointer<UA_ExpandedNodeId>, int)>();

  int UA_Node_deleteReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
  ) {
    return _UA_Node_deleteReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
    );
  }

  late final _UA_Node_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>, UA_Byte, ffi.Bool, ffi.Pointer<UA_ExpandedNodeId>)>>('UA_Node_deleteReference');
  late final _UA_Node_deleteReference = _UA_Node_deleteReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, int, bool, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_Node_deleteReferencesSubset(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<UA_ReferenceTypeSet> keepSet,
  ) {
    return _UA_Node_deleteReferencesSubset(
      node,
      keepSet,
    );
  }

  late final _UA_Node_deleteReferencesSubsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>>(
          'UA_Node_deleteReferencesSubset');
  late final _UA_Node_deleteReferencesSubset = _UA_Node_deleteReferencesSubsetPtr.asFunction<
      void Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>();

  void UA_Node_deleteReferences(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_deleteReferences(
      node,
    );
  }

  late final _UA_Node_deleteReferencesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>('UA_Node_deleteReferences');
  late final _UA_Node_deleteReferences = _UA_Node_deleteReferencesPtr.asFunction<void Function(ffi.Pointer<UA_Node>)>();

  void UA_Node_clear(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_clear(
      node,
    );
  }

  late final _UA_Node_clearPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>('UA_Node_clear');
  late final _UA_Node_clear = _UA_Node_clearPtr.asFunction<void Function(ffi.Pointer<UA_Node>)>();

  int UA_ClientConfig_copy(
    ffi.Pointer<UA_ClientConfig> src,
    ffi.Pointer<UA_ClientConfig> dst,
  ) {
    return _UA_ClientConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_ClientConfig_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ClientConfig>, ffi.Pointer<UA_ClientConfig>)>>(
          'UA_ClientConfig_copy');
  late final _UA_ClientConfig_copy =
      _UA_ClientConfig_copyPtr.asFunction<int Function(ffi.Pointer<UA_ClientConfig>, ffi.Pointer<UA_ClientConfig>)>();

  void UA_ClientConfig_delete(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_delete(
      config,
    );
  }

  late final _UA_ClientConfig_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ClientConfig>)>>('UA_ClientConfig_delete');
  late final _UA_ClientConfig_delete =
      _UA_ClientConfig_deletePtr.asFunction<void Function(ffi.Pointer<UA_ClientConfig>)>();

  void UA_ClientConfig_clear(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_clear(
      config,
    );
  }

  late final _UA_ClientConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ClientConfig>)>>('UA_ClientConfig_clear');
  late final _UA_ClientConfig_clear =
      _UA_ClientConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_ClientConfig>)>();

  int UA_ClientConfig_setAuthenticationUsername(
    ffi.Pointer<UA_ClientConfig> config,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _UA_ClientConfig_setAuthenticationUsername(
      config,
      username,
      password,
    );
  }

  late final _UA_ClientConfig_setAuthenticationUsernamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ClientConfig>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_ClientConfig_setAuthenticationUsername');
  late final _UA_ClientConfig_setAuthenticationUsername = _UA_ClientConfig_setAuthenticationUsernamePtr.asFunction<
      int Function(ffi.Pointer<UA_ClientConfig>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<UA_Client> UA_Client_new() {
    return _UA_Client_new();
  }

  late final _UA_Client_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Client> Function()>>('UA_Client_new');
  late final _UA_Client_new = _UA_Client_newPtr.asFunction<ffi.Pointer<UA_Client> Function()>();

  ffi.Pointer<UA_Client> UA_Client_newWithConfig(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_Client_newWithConfig(
      config,
    );
  }

  late final _UA_Client_newWithConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Client> Function(ffi.Pointer<UA_ClientConfig>)>>(
          'UA_Client_newWithConfig');
  late final _UA_Client_newWithConfig =
      _UA_Client_newWithConfigPtr.asFunction<ffi.Pointer<UA_Client> Function(ffi.Pointer<UA_ClientConfig>)>();

  void UA_Client_getState(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.UnsignedInt> channelState,
    ffi.Pointer<ffi.UnsignedInt> sessionState,
    ffi.Pointer<UA_StatusCode> connectStatus,
  ) {
    return _UA_Client_getState(
      client,
      channelState,
      sessionState,
      connectStatus,
    );
  }

  late final _UA_Client_getStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<UA_StatusCode>)>>('UA_Client_getState');
  late final _UA_Client_getState = _UA_Client_getStatePtr.asFunction<
      void Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_ClientConfig> UA_Client_getConfig(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_getConfig(
      client,
    );
  }

  late final _UA_Client_getConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ClientConfig> Function(ffi.Pointer<UA_Client>)>>('UA_Client_getConfig');
  late final _UA_Client_getConfig =
      _UA_Client_getConfigPtr.asFunction<ffi.Pointer<UA_ClientConfig> Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_delete(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_delete(
      client,
    );
  }

  late final _UA_Client_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>('UA_Client_delete');
  late final _UA_Client_delete = _UA_Client_deletePtr.asFunction<void Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_run_iterate(
    ffi.Pointer<UA_Client> client,
    int timeout,
  ) {
    return _UA_Client_run_iterate(
      client,
      timeout,
    );
  }

  late final _UA_Client_run_iteratePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32)>>('UA_Client_run_iterate');
  late final _UA_Client_run_iterate = _UA_Client_run_iteratePtr.asFunction<int Function(ffi.Pointer<UA_Client>, int)>();

  /// Connect to a Server
  /// -------------------
  ///
  /// A Client connecting to an OPC UA Server first opens a SecureChannel and on
  /// top of that opens a Session. The Session can also be moved to another
  /// SecureChannel. The Session lifetime is typically longer than the
  /// SecureChannel.
  ///
  /// The methods below are used to connect a client with a server. The supplied
  /// arguments (for example the EndpointUrl or username/password) are first copied
  /// into the client config. This is the same as modifying the client config first
  /// and then connecting without these extra arguments.
  ///
  /// Once a connection is established, the client keeps the connection open and
  /// reconnects if necessary. But as the client has no dedicated thread, it might
  /// be necessary to call ``UA_Client_run_iterate`` in an interval for the
  /// housekeeping tasks. Note normal Service-calls (like reading a value) also
  /// triggers the scheduled house-keeping tasks.
  int UA_Client_connect(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connect(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>>(
          'UA_Client_connect');
  late final _UA_Client_connect =
      _UA_Client_connectPtr.asFunction<int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectUsername(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _UA_Client_connectUsername(
      client,
      endpointUrl,
      username,
      password,
    );
  }

  late final _UA_Client_connectUsernamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectUsername');
  late final _UA_Client_connectUsername = _UA_Client_connectUsernamePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannel(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannel(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>>(
          'UA_Client_connectSecureChannel');
  late final _UA_Client_connectSecureChannel =
      _UA_Client_connectSecureChannelPtr.asFunction<int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>>(
          'UA_Client_connectAsync');
  late final _UA_Client_connectAsync =
      _UA_Client_connectAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannelAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannelAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>>(
          'UA_Client_connectSecureChannelAsync');
  late final _UA_Client_connectSecureChannelAsync =
      _UA_Client_connectSecureChannelAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_startListeningForReverseConnect(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_String> listenHostnames,
    int listenHostnamesLength,
    int port,
  ) {
    return _UA_Client_startListeningForReverseConnect(
      client,
      listenHostnames,
      listenHostnamesLength,
      port,
    );
  }

  late final _UA_Client_startListeningForReverseConnectPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>, ffi.Size, UA_UInt16)>>(
      'UA_Client_startListeningForReverseConnect');
  late final _UA_Client_startListeningForReverseConnect = _UA_Client_startListeningForReverseConnectPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>, int, int)>();

  int UA_Client_disconnect(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnect(
      client,
    );
  }

  late final _UA_Client_disconnectPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>('UA_Client_disconnect');
  late final _UA_Client_disconnect = _UA_Client_disconnectPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectAsync(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectAsync(
      client,
    );
  }

  late final _UA_Client_disconnectAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>('UA_Client_disconnectAsync');
  late final _UA_Client_disconnectAsync =
      _UA_Client_disconnectAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectSecureChannel(
      client,
    );
  }

  late final _UA_Client_disconnectSecureChannelPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>('UA_Client_disconnectSecureChannel');
  late final _UA_Client_disconnectSecureChannel =
      _UA_Client_disconnectSecureChannelPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectSecureChannelAsync(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectSecureChannelAsync(
      client,
    );
  }

  late final _UA_Client_disconnectSecureChannelAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_disconnectSecureChannelAsync');
  late final _UA_Client_disconnectSecureChannelAsync =
      _UA_Client_disconnectSecureChannelAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_getSessionAuthenticationToken(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> authenticationToken,
    ffi.Pointer<UA_ByteString> serverNonce,
  ) {
    return _UA_Client_getSessionAuthenticationToken(
      client,
      authenticationToken,
      serverNonce,
    );
  }

  late final _UA_Client_getSessionAuthenticationTokenPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_ByteString>)>>('UA_Client_getSessionAuthenticationToken');
  late final _UA_Client_getSessionAuthenticationToken = _UA_Client_getSessionAuthenticationTokenPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_ByteString>)>();

  int UA_Client_activateCurrentSession(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_activateCurrentSession(
      client,
    );
  }

  late final _UA_Client_activateCurrentSessionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>('UA_Client_activateCurrentSession');
  late final _UA_Client_activateCurrentSession =
      _UA_Client_activateCurrentSessionPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_activateCurrentSessionAsync(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_activateCurrentSessionAsync(
      client,
    );
  }

  late final _UA_Client_activateCurrentSessionAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_activateCurrentSessionAsync');
  late final _UA_Client_activateCurrentSessionAsync =
      _UA_Client_activateCurrentSessionAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_activateSession(
    ffi.Pointer<UA_Client> client,
    UA_NodeId authenticationToken,
    UA_ByteString serverNonce,
  ) {
    return _UA_Client_activateSession(
      client,
      authenticationToken,
      serverNonce,
    );
  }

  late final _UA_Client_activateSessionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ByteString)>>(
          'UA_Client_activateSession');
  late final _UA_Client_activateSession =
      _UA_Client_activateSessionPtr.asFunction<int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ByteString)>();

  int UA_Client_activateSessionAsync(
    ffi.Pointer<UA_Client> client,
    UA_NodeId authenticationToken,
    UA_ByteString serverNonce,
  ) {
    return _UA_Client_activateSessionAsync(
      client,
      authenticationToken,
      serverNonce,
    );
  }

  late final _UA_Client_activateSessionAsyncPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ByteString)>>(
          'UA_Client_activateSessionAsync');
  late final _UA_Client_activateSessionAsync =
      _UA_Client_activateSessionAsyncPtr.asFunction<int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ByteString)>();

  int UA_Client_getEndpoints(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    ffi.Pointer<ffi.Size> endpointDescriptionsSize,
    ffi.Pointer<ffi.Pointer<UA_EndpointDescription>> endpointDescriptions,
  ) {
    return _UA_Client_getEndpoints(
      client,
      serverUrl,
      endpointDescriptionsSize,
      endpointDescriptions,
    );
  }

  late final _UA_Client_getEndpointsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>>('UA_Client_getEndpoints');
  late final _UA_Client_getEndpoints = _UA_Client_getEndpointsPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>();

  int UA_Client_findServers(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    int serverUrisSize,
    ffi.Pointer<UA_String> serverUris,
    int localeIdsSize,
    ffi.Pointer<UA_String> localeIds,
    ffi.Pointer<ffi.Size> registeredServersSize,
    ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>> registeredServers,
  ) {
    return _UA_Client_findServers(
      client,
      serverUrl,
      serverUrisSize,
      serverUris,
      localeIdsSize,
      localeIds,
      registeredServersSize,
      registeredServers,
    );
  }

  late final _UA_Client_findServersPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<UA_String>,
              ffi.Size,
              ffi.Pointer<UA_String>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>>('UA_Client_findServers');
  late final _UA_Client_findServers = _UA_Client_findServersPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<UA_String>, int,
          ffi.Pointer<UA_String>, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>();

  int UA_Client_findServersOnNetwork(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    int startingRecordId,
    int maxRecordsToReturn,
    int serverCapabilityFilterSize,
    ffi.Pointer<UA_String> serverCapabilityFilter,
    ffi.Pointer<ffi.Size> serverOnNetworkSize,
    ffi.Pointer<ffi.Pointer<UA_ServerOnNetwork>> serverOnNetwork,
  ) {
    return _UA_Client_findServersOnNetwork(
      client,
      serverUrl,
      startingRecordId,
      maxRecordsToReturn,
      serverCapabilityFilterSize,
      serverCapabilityFilter,
      serverOnNetworkSize,
      serverOnNetwork,
    );
  }

  late final _UA_Client_findServersOnNetworkPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>,
              UA_UInt32,
              UA_UInt32,
              ffi.Size,
              ffi.Pointer<UA_String>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_ServerOnNetwork>>)>>('UA_Client_findServersOnNetwork');
  late final _UA_Client_findServersOnNetwork = _UA_Client_findServersOnNetworkPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<UA_String>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_ServerOnNetwork>>)>();

  /// .. _client-services:
  ///
  /// Services
  /// --------
  ///
  /// The raw OPC UA services are exposed to the client. A Request-message
  /// typically contains an array of operations to be performed by the server. The
  /// convenience-methods from ``ua_client_highlevel.h`` are used to call
  /// individual operations and are often easier to use. For performance reasons it
  /// might however be better to request many operations in a single message.
  ///
  /// The raw Service-calls return the entire Response-message. Check the
  /// ResponseHeader for the overall StatusCode. The operations within the
  /// Service-call may return individual StatusCodes in addition.
  ///
  /// Note that some Services are not exposed here. For example, there is a
  /// dedicated client API for Subscriptions and for Session management.
  ///
  /// Attribute Service Set
  /// ~~~~~~~~~~~~~~~~~~~~~
  /// This Service Set provides Services to access Attributes that are part of
  /// Nodes.
  UA_ReadResponse UA_Client_Service_read(
    ffi.Pointer<UA_Client> client,
    UA_ReadRequest req,
  ) {
    return _UA_Client_Service_read(
      client,
      req,
    );
  }

  late final _UA_Client_Service_readPtr =
      _lookup<ffi.NativeFunction<UA_ReadResponse Function(ffi.Pointer<UA_Client>, UA_ReadRequest)>>(
          'UA_Client_Service_read');
  late final _UA_Client_Service_read =
      _UA_Client_Service_readPtr.asFunction<UA_ReadResponse Function(ffi.Pointer<UA_Client>, UA_ReadRequest)>();

  UA_WriteResponse UA_Client_Service_write(
    ffi.Pointer<UA_Client> client,
    UA_WriteRequest req,
  ) {
    return _UA_Client_Service_write(
      client,
      req,
    );
  }

  late final _UA_Client_Service_writePtr =
      _lookup<ffi.NativeFunction<UA_WriteResponse Function(ffi.Pointer<UA_Client>, UA_WriteRequest)>>(
          'UA_Client_Service_write');
  late final _UA_Client_Service_write =
      _UA_Client_Service_writePtr.asFunction<UA_WriteResponse Function(ffi.Pointer<UA_Client>, UA_WriteRequest)>();

  UA_HistoryReadResponse UA_Client_Service_historyRead(
    ffi.Pointer<UA_Client> client,
    UA_HistoryReadRequest req,
  ) {
    return _UA_Client_Service_historyRead(
      client,
      req,
    );
  }

  late final _UA_Client_Service_historyReadPtr =
      _lookup<ffi.NativeFunction<UA_HistoryReadResponse Function(ffi.Pointer<UA_Client>, UA_HistoryReadRequest)>>(
          'UA_Client_Service_historyRead');
  late final _UA_Client_Service_historyRead = _UA_Client_Service_historyReadPtr.asFunction<
      UA_HistoryReadResponse Function(ffi.Pointer<UA_Client>, UA_HistoryReadRequest)>();

  UA_HistoryUpdateResponse UA_Client_Service_historyUpdate(
    ffi.Pointer<UA_Client> client,
    UA_HistoryUpdateRequest req,
  ) {
    return _UA_Client_Service_historyUpdate(
      client,
      req,
    );
  }

  late final _UA_Client_Service_historyUpdatePtr =
      _lookup<ffi.NativeFunction<UA_HistoryUpdateResponse Function(ffi.Pointer<UA_Client>, UA_HistoryUpdateRequest)>>(
          'UA_Client_Service_historyUpdate');
  late final _UA_Client_Service_historyUpdate = _UA_Client_Service_historyUpdatePtr.asFunction<
      UA_HistoryUpdateResponse Function(ffi.Pointer<UA_Client>, UA_HistoryUpdateRequest)>();

  /// Method Service Set
  /// ~~~~~~~~~~~~~~~~~~
  /// Methods represent the function calls of Objects. The Method Service Set
  /// defines the means to invoke Methods.
  UA_CallResponse UA_Client_Service_call(
    ffi.Pointer<UA_Client> client,
    UA_CallRequest req,
  ) {
    return _UA_Client_Service_call(
      client,
      req,
    );
  }

  late final _UA_Client_Service_callPtr =
      _lookup<ffi.NativeFunction<UA_CallResponse Function(ffi.Pointer<UA_Client>, UA_CallRequest)>>(
          'UA_Client_Service_call');
  late final _UA_Client_Service_call =
      _UA_Client_Service_callPtr.asFunction<UA_CallResponse Function(ffi.Pointer<UA_Client>, UA_CallRequest)>();

  /// NodeManagement Service Set
  /// ~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// This Service Set defines Services to add and delete AddressSpace Nodes and
  /// References between them.
  UA_AddNodesResponse UA_Client_Service_addNodes(
    ffi.Pointer<UA_Client> client,
    UA_AddNodesRequest req,
  ) {
    return _UA_Client_Service_addNodes(
      client,
      req,
    );
  }

  late final _UA_Client_Service_addNodesPtr =
      _lookup<ffi.NativeFunction<UA_AddNodesResponse Function(ffi.Pointer<UA_Client>, UA_AddNodesRequest)>>(
          'UA_Client_Service_addNodes');
  late final _UA_Client_Service_addNodes = _UA_Client_Service_addNodesPtr.asFunction<
      UA_AddNodesResponse Function(ffi.Pointer<UA_Client>, UA_AddNodesRequest)>();

  UA_AddReferencesResponse UA_Client_Service_addReferences(
    ffi.Pointer<UA_Client> client,
    UA_AddReferencesRequest req,
  ) {
    return _UA_Client_Service_addReferences(
      client,
      req,
    );
  }

  late final _UA_Client_Service_addReferencesPtr =
      _lookup<ffi.NativeFunction<UA_AddReferencesResponse Function(ffi.Pointer<UA_Client>, UA_AddReferencesRequest)>>(
          'UA_Client_Service_addReferences');
  late final _UA_Client_Service_addReferences = _UA_Client_Service_addReferencesPtr.asFunction<
      UA_AddReferencesResponse Function(ffi.Pointer<UA_Client>, UA_AddReferencesRequest)>();

  UA_DeleteNodesResponse UA_Client_Service_deleteNodes(
    ffi.Pointer<UA_Client> client,
    UA_DeleteNodesRequest req,
  ) {
    return _UA_Client_Service_deleteNodes(
      client,
      req,
    );
  }

  late final _UA_Client_Service_deleteNodesPtr =
      _lookup<ffi.NativeFunction<UA_DeleteNodesResponse Function(ffi.Pointer<UA_Client>, UA_DeleteNodesRequest)>>(
          'UA_Client_Service_deleteNodes');
  late final _UA_Client_Service_deleteNodes = _UA_Client_Service_deleteNodesPtr.asFunction<
      UA_DeleteNodesResponse Function(ffi.Pointer<UA_Client>, UA_DeleteNodesRequest)>();

  UA_DeleteReferencesResponse UA_Client_Service_deleteReferences(
    ffi.Pointer<UA_Client> client,
    UA_DeleteReferencesRequest req,
  ) {
    return _UA_Client_Service_deleteReferences(
      client,
      req,
    );
  }

  late final _UA_Client_Service_deleteReferencesPtr = _lookup<
          ffi.NativeFunction<UA_DeleteReferencesResponse Function(ffi.Pointer<UA_Client>, UA_DeleteReferencesRequest)>>(
      'UA_Client_Service_deleteReferences');
  late final _UA_Client_Service_deleteReferences = _UA_Client_Service_deleteReferencesPtr.asFunction<
      UA_DeleteReferencesResponse Function(ffi.Pointer<UA_Client>, UA_DeleteReferencesRequest)>();

  /// View Service Set
  /// ~~~~~~~~~~~~~~~~
  /// Clients use the browse Services of the View Service Set to navigate through
  /// the AddressSpace or through a View which is a subset of the AddressSpace.
  UA_BrowseResponse UA_Client_Service_browse(
    ffi.Pointer<UA_Client> client,
    UA_BrowseRequest req,
  ) {
    return _UA_Client_Service_browse(
      client,
      req,
    );
  }

  late final _UA_Client_Service_browsePtr =
      _lookup<ffi.NativeFunction<UA_BrowseResponse Function(ffi.Pointer<UA_Client>, UA_BrowseRequest)>>(
          'UA_Client_Service_browse');
  late final _UA_Client_Service_browse =
      _UA_Client_Service_browsePtr.asFunction<UA_BrowseResponse Function(ffi.Pointer<UA_Client>, UA_BrowseRequest)>();

  UA_BrowseNextResponse UA_Client_Service_browseNext(
    ffi.Pointer<UA_Client> client,
    UA_BrowseNextRequest req,
  ) {
    return _UA_Client_Service_browseNext(
      client,
      req,
    );
  }

  late final _UA_Client_Service_browseNextPtr =
      _lookup<ffi.NativeFunction<UA_BrowseNextResponse Function(ffi.Pointer<UA_Client>, UA_BrowseNextRequest)>>(
          'UA_Client_Service_browseNext');
  late final _UA_Client_Service_browseNext = _UA_Client_Service_browseNextPtr.asFunction<
      UA_BrowseNextResponse Function(ffi.Pointer<UA_Client>, UA_BrowseNextRequest)>();

  UA_TranslateBrowsePathsToNodeIdsResponse UA_Client_Service_translateBrowsePathsToNodeIds(
    ffi.Pointer<UA_Client> client,
    UA_TranslateBrowsePathsToNodeIdsRequest req,
  ) {
    return _UA_Client_Service_translateBrowsePathsToNodeIds(
      client,
      req,
    );
  }

  late final _UA_Client_Service_translateBrowsePathsToNodeIdsPtr = _lookup<
      ffi.NativeFunction<
          UA_TranslateBrowsePathsToNodeIdsResponse Function(ffi.Pointer<UA_Client>,
              UA_TranslateBrowsePathsToNodeIdsRequest)>>('UA_Client_Service_translateBrowsePathsToNodeIds');
  late final _UA_Client_Service_translateBrowsePathsToNodeIds =
      _UA_Client_Service_translateBrowsePathsToNodeIdsPtr.asFunction<
          UA_TranslateBrowsePathsToNodeIdsResponse Function(
              ffi.Pointer<UA_Client>, UA_TranslateBrowsePathsToNodeIdsRequest)>();

  UA_RegisterNodesResponse UA_Client_Service_registerNodes(
    ffi.Pointer<UA_Client> client,
    UA_RegisterNodesRequest req,
  ) {
    return _UA_Client_Service_registerNodes(
      client,
      req,
    );
  }

  late final _UA_Client_Service_registerNodesPtr =
      _lookup<ffi.NativeFunction<UA_RegisterNodesResponse Function(ffi.Pointer<UA_Client>, UA_RegisterNodesRequest)>>(
          'UA_Client_Service_registerNodes');
  late final _UA_Client_Service_registerNodes = _UA_Client_Service_registerNodesPtr.asFunction<
      UA_RegisterNodesResponse Function(ffi.Pointer<UA_Client>, UA_RegisterNodesRequest)>();

  UA_UnregisterNodesResponse UA_Client_Service_unregisterNodes(
    ffi.Pointer<UA_Client> client,
    UA_UnregisterNodesRequest req,
  ) {
    return _UA_Client_Service_unregisterNodes(
      client,
      req,
    );
  }

  late final _UA_Client_Service_unregisterNodesPtr = _lookup<
          ffi.NativeFunction<UA_UnregisterNodesResponse Function(ffi.Pointer<UA_Client>, UA_UnregisterNodesRequest)>>(
      'UA_Client_Service_unregisterNodes');
  late final _UA_Client_Service_unregisterNodes = _UA_Client_Service_unregisterNodesPtr.asFunction<
      UA_UnregisterNodesResponse Function(ffi.Pointer<UA_Client>, UA_UnregisterNodesRequest)>();

  /// Client Utility Functions
  /// ------------------------
  ffi.Pointer<UA_DataType> UA_Client_findDataType(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Client_findDataType(
      client,
      typeId,
    );
  }

  late final _UA_Client_findDataTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>)>>(
          'UA_Client_findDataType');
  late final _UA_Client_findDataType = _UA_Client_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_getNamespaceUri(
    ffi.Pointer<UA_Client> client,
    int index,
    ffi.Pointer<UA_String> nsUri,
  ) {
    return _UA_Client_getNamespaceUri(
      client,
      index,
      nsUri,
    );
  }

  late final _UA_Client_getNamespaceUriPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt16, ffi.Pointer<UA_String>)>>(
          'UA_Client_getNamespaceUri');
  late final _UA_Client_getNamespaceUri =
      _UA_Client_getNamespaceUriPtr.asFunction<int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<UA_String>)>();

  int UA_Client_getNamespaceIndex(
    ffi.Pointer<UA_Client> client,
    UA_String nsUri,
    ffi.Pointer<UA_UInt16> outIndex,
  ) {
    return _UA_Client_getNamespaceIndex(
      client,
      nsUri,
      outIndex,
    );
  }

  late final _UA_Client_getNamespaceIndexPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_String, ffi.Pointer<UA_UInt16>)>>(
          'UA_Client_getNamespaceIndex');
  late final _UA_Client_getNamespaceIndex = _UA_Client_getNamespaceIndexPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_String, ffi.Pointer<UA_UInt16>)>();

  int UA_Client_addNamespace(
    ffi.Pointer<UA_Client> client,
    UA_String nsUri,
    ffi.Pointer<UA_UInt16> outIndex,
  ) {
    return _UA_Client_addNamespace(
      client,
      nsUri,
      outIndex,
    );
  }

  late final _UA_Client_addNamespacePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_String, ffi.Pointer<UA_UInt16>)>>(
          'UA_Client_addNamespace');
  late final _UA_Client_addNamespace =
      _UA_Client_addNamespacePtr.asFunction<int Function(ffi.Pointer<UA_Client>, UA_String, ffi.Pointer<UA_UInt16>)>();

  /// Connection Attributes
  /// ~~~~~~~~~~~~~~~~~~~~~
  ///
  /// Besides the client configuration, some attributes of the connection are
  /// defined only at runtime. For example the choice of SecurityPolicy or the
  /// ApplicationDescripton from the server. This API allows to access such
  /// connection attributes.
  ///
  /// The currently defined connection attributes are:
  ///
  /// - ``0:serverDescription`` (``UA_ApplicationDescription``): Server description
  /// - ``0:securityPolicyUri`` (``UA_String``): Uri of the SecurityPolicy used
  /// - ``0:securityMode`` (``UA_MessageSecurityMode``): SecurityMode of the SecureChannel
  int UA_Client_getConnectionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Client_getConnectionAttribute(
      client,
      key,
      outValue,
    );
  }

  late final _UA_Client_getConnectionAttributePtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>>(
      'UA_Client_getConnectionAttribute');
  late final _UA_Client_getConnectionAttribute = _UA_Client_getConnectionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Client_getConnectionAttributeCopy(
    ffi.Pointer<UA_Client> client,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Client_getConnectionAttributeCopy(
      client,
      key,
      outValue,
    );
  }

  late final _UA_Client_getConnectionAttributeCopyPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>>(
      'UA_Client_getConnectionAttributeCopy');
  late final _UA_Client_getConnectionAttributeCopy = _UA_Client_getConnectionAttributeCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Client_getConnectionAttribute_scalar(
    ffi.Pointer<UA_Client> client,
    UA_QualifiedName key,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Void> outValue,
  ) {
    return _UA_Client_getConnectionAttribute_scalar(
      client,
      key,
      type,
      outValue,
    );
  }

  late final _UA_Client_getConnectionAttribute_scalarPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>)>>('UA_Client_getConnectionAttribute_scalar');
  late final _UA_Client_getConnectionAttribute_scalar = _UA_Client_getConnectionAttribute_scalarPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_QualifiedName, ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>)>();

  int UA_Client_addTimedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addTimedCallback(
      client,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Client_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_ClientCallback, ffi.Pointer<ffi.Void>, UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addTimedCallback');
  late final _UA_Client_addTimedCallback = _UA_Client_addTimedCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_ClientCallback, ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_addRepeatedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addRepeatedCallback(
      client,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Client_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_ClientCallback, ffi.Pointer<ffi.Void>, UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addRepeatedCallback');
  late final _UA_Client_addRepeatedCallback = _UA_Client_addRepeatedCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_ClientCallback, ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Client> client,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Client_changeRepeatedCallbackInterval(
      client,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Client_changeRepeatedCallbackIntervalPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt64, UA_Double)>>(
          'UA_Client_changeRepeatedCallbackInterval');
  late final _UA_Client_changeRepeatedCallbackInterval =
      _UA_Client_changeRepeatedCallbackIntervalPtr.asFunction<int Function(ffi.Pointer<UA_Client>, int, double)>();

  void UA_Client_removeCallback(
    ffi.Pointer<UA_Client> client,
    int callbackId,
  ) {
    return _UA_Client_removeCallback(
      client,
      callbackId,
    );
  }

  late final _UA_Client_removeCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>, UA_UInt64)>>('UA_Client_removeCallback');
  late final _UA_Client_removeCallback =
      _UA_Client_removeCallbackPtr.asFunction<void Function(ffi.Pointer<UA_Client>, int)>();

  int __UA_Client_AsyncService(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> request,
    ffi.Pointer<UA_DataType> requestType,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<UA_DataType> responseType,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return ___UA_Client_AsyncService(
      client,
      request,
      requestType,
      callback,
      responseType,
      userdata,
      requestId,
    );
  }

  late final ___UA_Client_AsyncServicePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('__UA_Client_AsyncService');
  late final ___UA_Client_AsyncService = ___UA_Client_AsyncServicePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          UA_ClientAsyncServiceCallback, ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_cancelByRequestHandle(
    ffi.Pointer<UA_Client> client,
    int requestHandle,
    ffi.Pointer<UA_UInt32> cancelCount,
  ) {
    return _UA_Client_cancelByRequestHandle(
      client,
      requestHandle,
      cancelCount,
    );
  }

  late final _UA_Client_cancelByRequestHandlePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_cancelByRequestHandle');
  late final _UA_Client_cancelByRequestHandle = _UA_Client_cancelByRequestHandlePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_cancelByRequestId(
    ffi.Pointer<UA_Client> client,
    int requestId,
    ffi.Pointer<UA_UInt32> cancelCount,
  ) {
    return _UA_Client_cancelByRequestId(
      client,
      requestId,
      cancelCount,
    );
  }

  late final _UA_Client_cancelByRequestIdPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_cancelByRequestId');
  late final _UA_Client_cancelByRequestId =
      _UA_Client_cancelByRequestIdPtr.asFunction<int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_renewSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_renewSecureChannel(
      client,
    );
  }

  late final _UA_Client_renewSecureChannelPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>('UA_Client_renewSecureChannel');
  late final _UA_Client_renewSecureChannel =
      _UA_Client_renewSecureChannelPtr.asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_sendAsyncReadRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadRequest> request,
    UA_ClientAsyncReadCallback readCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncReadRequest(
      client,
      request,
      readCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncReadRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ReadRequest>, UA_ClientAsyncReadCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncReadRequest');
  late final _UA_Client_sendAsyncReadRequest = _UA_Client_sendAsyncReadRequestPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ReadRequest>, UA_ClientAsyncReadCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncWriteRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_WriteRequest> request,
    UA_ClientAsyncWriteCallback writeCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncWriteRequest(
      client,
      request,
      writeCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncWriteRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_WriteRequest>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncWriteRequest');
  late final _UA_Client_sendAsyncWriteRequest = _UA_Client_sendAsyncWriteRequestPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_WriteRequest>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncBrowseRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_BrowseRequest> request,
    UA_ClientAsyncBrowseCallback browseCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncBrowseRequest(
      client,
      request,
      browseCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncBrowseRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_BrowseRequest>, UA_ClientAsyncBrowseCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncBrowseRequest');
  late final _UA_Client_sendAsyncBrowseRequest = _UA_Client_sendAsyncBrowseRequestPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_BrowseRequest>, UA_ClientAsyncBrowseCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncBrowseNextRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_BrowseNextRequest> request,
    UA_ClientAsyncBrowseNextCallback browseNextCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncBrowseNextRequest(
      client,
      request,
      browseNextCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncBrowseNextRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_BrowseNextRequest>,
              UA_ClientAsyncBrowseNextCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncBrowseNextRequest');
  late final _UA_Client_sendAsyncBrowseNextRequest = _UA_Client_sendAsyncBrowseNextRequestPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_BrowseNextRequest>, UA_ClientAsyncBrowseNextCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  DartUA_StatusCode UA_Client_readAttribute_async(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadValueId> rvi,
    UA_TimestampsToReturn timestampsToReturn,
    UA_ClientAsyncReadAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAttribute_async(
      client,
      rvi,
      timestampsToReturn.value,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadValueId>,
              ffi.UnsignedInt,
              UA_ClientAsyncReadAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readAttribute_async');
  late final _UA_Client_readAttribute_async = _UA_Client_readAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ReadValueId>, int, UA_ClientAsyncReadAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadValueAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readValueAttribute_async');
  late final _UA_Client_readValueAttribute_async = _UA_Client_readValueAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadValueAttributeCallback, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDataTypeAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDataTypeAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDataTypeAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDataTypeAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readDataTypeAttribute_async');
  late final _UA_Client_readDataTypeAttribute_async = _UA_Client_readDataTypeAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDataTypeAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readArrayDimensionsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientReadArrayDimensionsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readArrayDimensionsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readArrayDimensionsAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientReadArrayDimensionsAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readArrayDimensionsAttribute_async');
  late final _UA_Client_readArrayDimensionsAttribute_async =
      _UA_Client_readArrayDimensionsAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientReadArrayDimensionsAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadNodeClassAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readNodeClassAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readNodeClassAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadNodeClassAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readNodeClassAttribute_async');
  late final _UA_Client_readNodeClassAttribute_async = _UA_Client_readNodeClassAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadNodeClassAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadBrowseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readBrowseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readBrowseNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadBrowseNameAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readBrowseNameAttribute_async');
  late final _UA_Client_readBrowseNameAttribute_async = _UA_Client_readBrowseNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadBrowseNameAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDisplayNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDisplayNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDisplayNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDisplayNameAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readDisplayNameAttribute_async');
  late final _UA_Client_readDisplayNameAttribute_async = _UA_Client_readDisplayNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDisplayNameAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDescriptionAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDescriptionAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDescriptionAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDescriptionAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readDescriptionAttribute_async');
  late final _UA_Client_readDescriptionAttribute_async = _UA_Client_readDescriptionAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadDescriptionAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readWriteMaskAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readWriteMaskAttribute_async');
  late final _UA_Client_readWriteMaskAttribute_async = _UA_Client_readWriteMaskAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadWriteMaskAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserWriteMaskAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readUserWriteMaskAttribute_async');
  late final _UA_Client_readUserWriteMaskAttribute_async = _UA_Client_readUserWriteMaskAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserWriteMaskAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadIsAbstractAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readIsAbstractAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readIsAbstractAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadIsAbstractAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readIsAbstractAttribute_async');
  late final _UA_Client_readIsAbstractAttribute_async = _UA_Client_readIsAbstractAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadIsAbstractAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadSymmetricAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readSymmetricAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readSymmetricAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadSymmetricAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readSymmetricAttribute_async');
  late final _UA_Client_readSymmetricAttribute_async = _UA_Client_readSymmetricAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadSymmetricAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadInverseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readInverseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readInverseNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadInverseNameAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readInverseNameAttribute_async');
  late final _UA_Client_readInverseNameAttribute_async = _UA_Client_readInverseNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadInverseNameAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadContainsNoLoopsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readContainsNoLoopsAttribute_async');
  late final _UA_Client_readContainsNoLoopsAttribute_async =
      _UA_Client_readContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadEventNotifierAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readEventNotifierAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readEventNotifierAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadEventNotifierAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readEventNotifierAttribute_async');
  late final _UA_Client_readEventNotifierAttribute_async = _UA_Client_readEventNotifierAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadEventNotifierAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueRankAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueRankAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueRankAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadValueRankAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readValueRankAttribute_async');
  late final _UA_Client_readValueRankAttribute_async = _UA_Client_readValueRankAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadValueRankAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAccessLevelAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readAccessLevelAttribute_async');
  late final _UA_Client_readAccessLevelAttribute_async = _UA_Client_readAccessLevelAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadAccessLevelAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAccessLevelExAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadAccessLevelExAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAccessLevelExAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAccessLevelExAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadAccessLevelExAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readAccessLevelExAttribute_async');
  late final _UA_Client_readAccessLevelExAttribute_async = _UA_Client_readAccessLevelExAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadAccessLevelExAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserAccessLevelAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readUserAccessLevelAttribute_async');
  late final _UA_Client_readUserAccessLevelAttribute_async =
      _UA_Client_readUserAccessLevelAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_readMinimumSamplingIntervalAttribute_async =
      _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadHistorizingAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readHistorizingAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readHistorizingAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadHistorizingAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readHistorizingAttribute_async');
  late final _UA_Client_readHistorizingAttribute_async = _UA_Client_readHistorizingAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadHistorizingAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readExecutableAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readExecutableAttribute_async');
  late final _UA_Client_readExecutableAttribute_async = _UA_Client_readExecutableAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadExecutableAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserExecutableAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_readUserExecutableAttribute_async');
  late final _UA_Client_readUserExecutableAttribute_async = _UA_Client_readUserExecutableAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_ClientAsyncReadUserExecutableAttributeCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeIdAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeIdAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeIdAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeNodeIdAttribute_async');
  late final _UA_Client_writeNodeIdAttribute_async = _UA_Client_writeNodeIdAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.UnsignedInt> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeClassAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeClassAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.UnsignedInt>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeNodeClassAttribute_async');
  late final _UA_Client_writeNodeClassAttribute_async = _UA_Client_writeNodeClassAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeBrowseNameAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeBrowseNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_QualifiedName>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeBrowseNameAttribute_async');
  late final _UA_Client_writeBrowseNameAttribute_async = _UA_Client_writeBrowseNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_QualifiedName>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDisplayNameAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDisplayNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeDisplayNameAttribute_async');
  late final _UA_Client_writeDisplayNameAttribute_async = _UA_Client_writeDisplayNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDescriptionAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDescriptionAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeDescriptionAttribute_async');
  late final _UA_Client_writeDescriptionAttribute_async = _UA_Client_writeDescriptionAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeWriteMaskAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeWriteMaskAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeWriteMaskAttribute_async');
  late final _UA_Client_writeWriteMaskAttribute_async = _UA_Client_writeWriteMaskAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeIsAbstractAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeIsAbstractAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeIsAbstractAttribute_async');
  late final _UA_Client_writeIsAbstractAttribute_async = _UA_Client_writeIsAbstractAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeSymmetricAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeSymmetricAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeSymmetricAttribute_async');
  late final _UA_Client_writeSymmetricAttribute_async = _UA_Client_writeSymmetricAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeInverseNameAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeInverseNameAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeInverseNameAttribute_async');
  late final _UA_Client_writeInverseNameAttribute_async = _UA_Client_writeInverseNameAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeContainsNoLoopsAttribute_async');
  late final _UA_Client_writeContainsNoLoopsAttribute_async =
      _UA_Client_writeContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeEventNotifierAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeEventNotifierAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeEventNotifierAttribute_async');
  late final _UA_Client_writeEventNotifierAttribute_async = _UA_Client_writeEventNotifierAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeValueAttribute_async');
  late final _UA_Client_writeValueAttribute_async = _UA_Client_writeValueAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDataTypeAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDataTypeAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeDataTypeAttribute_async');
  late final _UA_Client_writeDataTypeAttribute_async = _UA_Client_writeDataTypeAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueRankAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueRankAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeValueRankAttribute_async');
  late final _UA_Client_writeValueRankAttribute_async = _UA_Client_writeValueRankAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeAccessLevelAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeAccessLevelAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeAccessLevelAttribute_async');
  late final _UA_Client_writeAccessLevelAttribute_async = _UA_Client_writeAccessLevelAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute_async =
      _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeHistorizingAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeHistorizingAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeHistorizingAttribute_async');
  late final _UA_Client_writeHistorizingAttribute_async = _UA_Client_writeHistorizingAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeExecutableAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeExecutableAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeExecutableAttribute_async');
  late final _UA_Client_writeExecutableAttribute_async = _UA_Client_writeExecutableAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelExAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> attr,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeAccessLevelExAttribute_async(
      client,
      nodeId,
      attr,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeAccessLevelExAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>, UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_writeAccessLevelExAttribute_async');
  late final _UA_Client_writeAccessLevelExAttribute_async = _UA_Client_writeAccessLevelExAttribute_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>, UA_ClientAsyncWriteCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_call_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    UA_ClientAsyncCallCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_call_async(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_call_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, ffi.Size, ffi.Pointer<UA_Variant>,
              UA_ClientAsyncCallCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_call_async');
  late final _UA_Client_call_async = _UA_Client_call_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, int, ffi.Pointer<UA_Variant>,
          UA_ClientAsyncCallCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableNode_async');
  late final _UA_Client_addVariableNode_async = _UA_Client_addVariableNode_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_VariableAttributes,
          ffi.Pointer<UA_NodeId>,
          UA_ClientAsyncAddNodesCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableTypeNode_async');
  late final _UA_Client_addVariableTypeNode_async = _UA_Client_addVariableTypeNode_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_VariableTypeAttributes,
          ffi.Pointer<UA_NodeId>, UA_ClientAsyncAddNodesCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectNode_async');
  late final _UA_Client_addObjectNode_async = _UA_Client_addObjectNode_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_ObjectAttributes,
          ffi.Pointer<UA_NodeId>,
          UA_ClientAsyncAddNodesCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectTypeNode_async');
  late final _UA_Client_addObjectTypeNode_async = _UA_Client_addObjectTypeNode_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ObjectTypeAttributes,
          ffi.Pointer<UA_NodeId>, UA_ClientAsyncAddNodesCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addViewNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addViewNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addViewNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addViewNode_async');
  late final _UA_Client_addViewNode_async = _UA_Client_addViewNode_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ViewAttributes,
          ffi.Pointer<UA_NodeId>, UA_ClientAsyncAddNodesCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addReferenceTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addReferenceTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addReferenceTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addReferenceTypeNode_async');
  late final _UA_Client_addReferenceTypeNode_async = _UA_Client_addReferenceTypeNode_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_ReferenceTypeAttributes,
          ffi.Pointer<UA_NodeId>,
          UA_ClientAsyncAddNodesCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addDataTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addDataTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addDataTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addDataTypeNode_async');
  late final _UA_Client_addDataTypeNode_async = _UA_Client_addDataTypeNode_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_DataTypeAttributes,
          ffi.Pointer<UA_NodeId>, UA_ClientAsyncAddNodesCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addMethodNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addMethodNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addMethodNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addMethodNode_async');
  late final _UA_Client_addMethodNode_async = _UA_Client_addMethodNode_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_MethodAttributes,
          ffi.Pointer<UA_NodeId>, UA_ClientAsyncAddNodesCallback, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  UA_CreateSubscriptionResponse UA_Client_Subscriptions_create(
    ffi.Pointer<UA_Client> client,
    UA_CreateSubscriptionRequest request,
    ffi.Pointer<ffi.Void> subscriptionContext,
    UA_Client_StatusChangeNotificationCallback statusChangeCallback,
    UA_Client_DeleteSubscriptionCallback deleteCallback,
  ) {
    return _UA_Client_Subscriptions_create(
      client,
      request,
      subscriptionContext,
      statusChangeCallback,
      deleteCallback,
    );
  }

  late final _UA_Client_Subscriptions_createPtr = _lookup<
      ffi.NativeFunction<
          UA_CreateSubscriptionResponse Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback)>>('UA_Client_Subscriptions_create');
  late final _UA_Client_Subscriptions_create = _UA_Client_Subscriptions_createPtr.asFunction<
      UA_CreateSubscriptionResponse Function(ffi.Pointer<UA_Client>, UA_CreateSubscriptionRequest,
          ffi.Pointer<ffi.Void>, UA_Client_StatusChangeNotificationCallback, UA_Client_DeleteSubscriptionCallback)>();

  int UA_Client_Subscriptions_create_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateSubscriptionRequest request,
    ffi.Pointer<ffi.Void> subscriptionContext,
    UA_Client_StatusChangeNotificationCallback statusChangeCallback,
    UA_Client_DeleteSubscriptionCallback deleteCallback,
    UA_ClientAsyncCreateSubscriptionCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_create_async(
      client,
      request,
      subscriptionContext,
      statusChangeCallback,
      deleteCallback,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_create_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback,
              UA_ClientAsyncCreateSubscriptionCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_create_async');
  late final _UA_Client_Subscriptions_create_async = _UA_Client_Subscriptions_create_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_CreateSubscriptionRequest,
          ffi.Pointer<ffi.Void>,
          UA_Client_StatusChangeNotificationCallback,
          UA_Client_DeleteSubscriptionCallback,
          UA_ClientAsyncCreateSubscriptionCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  UA_ModifySubscriptionResponse UA_Client_Subscriptions_modify(
    ffi.Pointer<UA_Client> client,
    UA_ModifySubscriptionRequest request,
  ) {
    return _UA_Client_Subscriptions_modify(
      client,
      request,
    );
  }

  late final _UA_Client_Subscriptions_modifyPtr = _lookup<
      ffi.NativeFunction<
          UA_ModifySubscriptionResponse Function(
              ffi.Pointer<UA_Client>, UA_ModifySubscriptionRequest)>>('UA_Client_Subscriptions_modify');
  late final _UA_Client_Subscriptions_modify = _UA_Client_Subscriptions_modifyPtr.asFunction<
      UA_ModifySubscriptionResponse Function(ffi.Pointer<UA_Client>, UA_ModifySubscriptionRequest)>();

  int UA_Client_Subscriptions_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifySubscriptionRequest request,
    UA_ClientAsyncModifySubscriptionCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_modify_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ModifySubscriptionRequest,
              UA_ClientAsyncModifySubscriptionCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_modify_async');
  late final _UA_Client_Subscriptions_modify_async = _UA_Client_Subscriptions_modify_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_ModifySubscriptionRequest, UA_ClientAsyncModifySubscriptionCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  UA_DeleteSubscriptionsResponse UA_Client_Subscriptions_delete(
    ffi.Pointer<UA_Client> client,
    UA_DeleteSubscriptionsRequest request,
  ) {
    return _UA_Client_Subscriptions_delete(
      client,
      request,
    );
  }

  late final _UA_Client_Subscriptions_deletePtr = _lookup<
      ffi.NativeFunction<
          UA_DeleteSubscriptionsResponse Function(
              ffi.Pointer<UA_Client>, UA_DeleteSubscriptionsRequest)>>('UA_Client_Subscriptions_delete');
  late final _UA_Client_Subscriptions_delete = _UA_Client_Subscriptions_deletePtr.asFunction<
      UA_DeleteSubscriptionsResponse Function(ffi.Pointer<UA_Client>, UA_DeleteSubscriptionsRequest)>();

  int UA_Client_Subscriptions_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteSubscriptionsRequest request,
    UA_ClientAsyncDeleteSubscriptionsCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_delete_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteSubscriptionsRequest,
              UA_ClientAsyncDeleteSubscriptionsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_delete_async');
  late final _UA_Client_Subscriptions_delete_async = _UA_Client_Subscriptions_delete_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_DeleteSubscriptionsRequest, UA_ClientAsyncDeleteSubscriptionsCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
  ) {
    return _UA_Client_Subscriptions_deleteSingle(
      client,
      subscriptionId,
    );
  }

  late final _UA_Client_Subscriptions_deleteSinglePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32)>>(
          'UA_Client_Subscriptions_deleteSingle');
  late final _UA_Client_Subscriptions_deleteSingle =
      _UA_Client_Subscriptions_deleteSinglePtr.asFunction<int Function(ffi.Pointer<UA_Client>, int)>();

  int UA_Client_Subscriptions_getContext(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    ffi.Pointer<ffi.Pointer<ffi.Void>> subContext,
  ) {
    return _UA_Client_Subscriptions_getContext(
      client,
      subscriptionId,
      subContext,
    );
  }

  late final _UA_Client_Subscriptions_getContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('UA_Client_Subscriptions_getContext');
  late final _UA_Client_Subscriptions_getContext = _UA_Client_Subscriptions_getContextPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int UA_Client_Subscriptions_setContext(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    ffi.Pointer<ffi.Void> subContext,
  ) {
    return _UA_Client_Subscriptions_setContext(
      client,
      subscriptionId,
      subContext,
    );
  }

  late final _UA_Client_Subscriptions_setContextPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, ffi.Pointer<ffi.Void>)>>(
          'UA_Client_Subscriptions_setContext');
  late final _UA_Client_Subscriptions_setContext = _UA_Client_Subscriptions_setContextPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<ffi.Void>)>();

  UA_SetPublishingModeResponse UA_Client_Subscriptions_setPublishingMode(
    ffi.Pointer<UA_Client> client,
    UA_SetPublishingModeRequest request,
  ) {
    return _UA_Client_Subscriptions_setPublishingMode(
      client,
      request,
    );
  }

  late final _UA_Client_Subscriptions_setPublishingModePtr = _lookup<
          ffi
          .NativeFunction<UA_SetPublishingModeResponse Function(ffi.Pointer<UA_Client>, UA_SetPublishingModeRequest)>>(
      'UA_Client_Subscriptions_setPublishingMode');
  late final _UA_Client_Subscriptions_setPublishingMode = _UA_Client_Subscriptions_setPublishingModePtr.asFunction<
      UA_SetPublishingModeResponse Function(ffi.Pointer<UA_Client>, UA_SetPublishingModeRequest)>();

  UA_CreateMonitoredItemsResponse UA_Client_MonitoredItems_createDataChanges(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_DataChangeNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
  ) {
    return _UA_Client_MonitoredItems_createDataChanges(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChangesPtr = _lookup<
      ffi.NativeFunction<
          UA_CreateMonitoredItemsResponse Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>)>>('UA_Client_MonitoredItems_createDataChanges');
  late final _UA_Client_MonitoredItems_createDataChanges = _UA_Client_MonitoredItems_createDataChangesPtr.asFunction<
      UA_CreateMonitoredItemsResponse Function(
          ffi.Pointer<UA_Client>,
          UA_CreateMonitoredItemsRequest,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
          ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>)>();

  int UA_Client_MonitoredItems_createDataChanges_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_DataChangeNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncCreateMonitoredItemsCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createDataChanges_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChanges_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncCreateMonitoredItemsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_createDataChanges_async');
  late final _UA_Client_MonitoredItems_createDataChanges_async =
      _UA_Client_MonitoredItems_createDataChanges_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncCreateMonitoredItemsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createDataChange(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subscriptionId,
    UA_TimestampsToReturn timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_DataChangeNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createDataChange(
      client,
      subscriptionId,
      timestampsToReturn.value,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChangePtr = _lookup<
      ffi.NativeFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              UA_UInt32,
              ffi.UnsignedInt,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_DataChangeNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>>('UA_Client_MonitoredItems_createDataChange');
  late final _UA_Client_MonitoredItems_createDataChange = _UA_Client_MonitoredItems_createDataChangePtr.asFunction<
      UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Client>, int, int, UA_MonitoredItemCreateRequest,
          ffi.Pointer<ffi.Void>, UA_Client_DataChangeNotificationCallback, UA_Client_DeleteMonitoredItemCallback)>();

  UA_CreateMonitoredItemsResponse UA_Client_MonitoredItems_createEvents(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_EventNotificationCallback> callback,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createEvents(
      client,
      request,
      contexts,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createEventsPtr = _lookup<
      ffi.NativeFunction<
          UA_CreateMonitoredItemsResponse Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_EventNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>)>>('UA_Client_MonitoredItems_createEvents');
  late final _UA_Client_MonitoredItems_createEvents = _UA_Client_MonitoredItems_createEventsPtr.asFunction<
      UA_CreateMonitoredItemsResponse Function(
          ffi.Pointer<UA_Client>,
          UA_CreateMonitoredItemsRequest,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<UA_Client_EventNotificationCallback>,
          ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>)>();

  int UA_Client_MonitoredItems_createEvents_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_EventNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncCreateMonitoredItemsCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createEvents_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createEvents_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_EventNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncCreateMonitoredItemsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_createEvents_async');
  late final _UA_Client_MonitoredItems_createEvents_async = _UA_Client_MonitoredItems_createEvents_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_CreateMonitoredItemsRequest,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<UA_Client_EventNotificationCallback>,
          ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
          UA_ClientAsyncCreateMonitoredItemsCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createEvent(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subscriptionId,
    UA_TimestampsToReturn timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_EventNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createEvent(
      client,
      subscriptionId,
      timestampsToReturn.value,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createEventPtr = _lookup<
      ffi.NativeFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              UA_UInt32,
              ffi.UnsignedInt,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_EventNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>>('UA_Client_MonitoredItems_createEvent');
  late final _UA_Client_MonitoredItems_createEvent = _UA_Client_MonitoredItems_createEventPtr.asFunction<
      UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Client>, int, int, UA_MonitoredItemCreateRequest,
          ffi.Pointer<ffi.Void>, UA_Client_EventNotificationCallback, UA_Client_DeleteMonitoredItemCallback)>();

  UA_DeleteMonitoredItemsResponse UA_Client_MonitoredItems_delete(
    ffi.Pointer<UA_Client> client,
    UA_DeleteMonitoredItemsRequest arg1,
  ) {
    return _UA_Client_MonitoredItems_delete(
      client,
      arg1,
    );
  }

  late final _UA_Client_MonitoredItems_deletePtr = _lookup<
      ffi.NativeFunction<
          UA_DeleteMonitoredItemsResponse Function(
              ffi.Pointer<UA_Client>, UA_DeleteMonitoredItemsRequest)>>('UA_Client_MonitoredItems_delete');
  late final _UA_Client_MonitoredItems_delete = _UA_Client_MonitoredItems_deletePtr.asFunction<
      UA_DeleteMonitoredItemsResponse Function(ffi.Pointer<UA_Client>, UA_DeleteMonitoredItemsRequest)>();

  int UA_Client_MonitoredItems_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteMonitoredItemsRequest request,
    UA_ClientAsyncDeleteMonitoredItemsCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_delete_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteMonitoredItemsRequest,
              UA_ClientAsyncDeleteMonitoredItemsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_delete_async');
  late final _UA_Client_MonitoredItems_delete_async = _UA_Client_MonitoredItems_delete_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_DeleteMonitoredItemsRequest, UA_ClientAsyncDeleteMonitoredItemsCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int monitoredItemId,
  ) {
    return _UA_Client_MonitoredItems_deleteSingle(
      client,
      subscriptionId,
      monitoredItemId,
    );
  }

  late final _UA_Client_MonitoredItems_deleteSinglePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, UA_UInt32)>>(
          'UA_Client_MonitoredItems_deleteSingle');
  late final _UA_Client_MonitoredItems_deleteSingle =
      _UA_Client_MonitoredItems_deleteSinglePtr.asFunction<int Function(ffi.Pointer<UA_Client>, int, int)>();

  /// The "ClientHandle" is part of the MonitoredItem configuration. The handle is
  /// set internally and not exposed to the user.
  UA_ModifyMonitoredItemsResponse UA_Client_MonitoredItems_modify(
    ffi.Pointer<UA_Client> client,
    UA_ModifyMonitoredItemsRequest request,
  ) {
    return _UA_Client_MonitoredItems_modify(
      client,
      request,
    );
  }

  late final _UA_Client_MonitoredItems_modifyPtr = _lookup<
      ffi.NativeFunction<
          UA_ModifyMonitoredItemsResponse Function(
              ffi.Pointer<UA_Client>, UA_ModifyMonitoredItemsRequest)>>('UA_Client_MonitoredItems_modify');
  late final _UA_Client_MonitoredItems_modify = _UA_Client_MonitoredItems_modifyPtr.asFunction<
      UA_ModifyMonitoredItemsResponse Function(ffi.Pointer<UA_Client>, UA_ModifyMonitoredItemsRequest)>();

  int UA_Client_MonitoredItems_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifyMonitoredItemsRequest request,
    UA_ClientAsyncModifyMonitoredItemsCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_modify_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ModifyMonitoredItemsRequest,
              UA_ClientAsyncModifyMonitoredItemsCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_modify_async');
  late final _UA_Client_MonitoredItems_modify_async = _UA_Client_MonitoredItems_modify_asyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_ModifyMonitoredItemsRequest, UA_ClientAsyncModifyMonitoredItemsCallback,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  UA_SetMonitoringModeResponse UA_Client_MonitoredItems_setMonitoringMode(
    ffi.Pointer<UA_Client> client,
    UA_SetMonitoringModeRequest request,
  ) {
    return _UA_Client_MonitoredItems_setMonitoringMode(
      client,
      request,
    );
  }

  late final _UA_Client_MonitoredItems_setMonitoringModePtr = _lookup<
          ffi
          .NativeFunction<UA_SetMonitoringModeResponse Function(ffi.Pointer<UA_Client>, UA_SetMonitoringModeRequest)>>(
      'UA_Client_MonitoredItems_setMonitoringMode');
  late final _UA_Client_MonitoredItems_setMonitoringMode = _UA_Client_MonitoredItems_setMonitoringModePtr.asFunction<
      UA_SetMonitoringModeResponse Function(ffi.Pointer<UA_Client>, UA_SetMonitoringModeRequest)>();

  int UA_Client_MonitoredItems_setMonitoringMode_async(
    ffi.Pointer<UA_Client> client,
    UA_SetMonitoringModeRequest request,
    UA_ClientAsyncSetMonitoringModeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setMonitoringMode_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_SetMonitoringModeRequest,
              UA_ClientAsyncSetMonitoringModeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_setMonitoringMode_async');
  late final _UA_Client_MonitoredItems_setMonitoringMode_async =
      _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_SetMonitoringModeRequest, UA_ClientAsyncSetMonitoringModeCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  UA_SetTriggeringResponse UA_Client_MonitoredItems_setTriggering(
    ffi.Pointer<UA_Client> client,
    UA_SetTriggeringRequest request,
  ) {
    return _UA_Client_MonitoredItems_setTriggering(
      client,
      request,
    );
  }

  late final _UA_Client_MonitoredItems_setTriggeringPtr =
      _lookup<ffi.NativeFunction<UA_SetTriggeringResponse Function(ffi.Pointer<UA_Client>, UA_SetTriggeringRequest)>>(
          'UA_Client_MonitoredItems_setTriggering');
  late final _UA_Client_MonitoredItems_setTriggering = _UA_Client_MonitoredItems_setTriggeringPtr.asFunction<
      UA_SetTriggeringResponse Function(ffi.Pointer<UA_Client>, UA_SetTriggeringRequest)>();

  int UA_Client_MonitoredItems_setTriggering_async(
    ffi.Pointer<UA_Client> client,
    UA_SetTriggeringRequest request,
    UA_ClientAsyncSetTriggeringCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setTriggering_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setTriggering_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_SetTriggeringRequest, UA_ClientAsyncSetTriggeringCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>>('UA_Client_MonitoredItems_setTriggering_async');
  late final _UA_Client_MonitoredItems_setTriggering_async =
      _UA_Client_MonitoredItems_setTriggering_asyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_SetTriggeringRequest, UA_ClientAsyncSetTriggeringCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItem_getContext(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int monitoredItemId,
    ffi.Pointer<ffi.Pointer<ffi.Void>> monContext,
  ) {
    return _UA_Client_MonitoredItem_getContext(
      client,
      subscriptionId,
      monitoredItemId,
      monContext,
    );
  }

  late final _UA_Client_MonitoredItem_getContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, UA_UInt32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('UA_Client_MonitoredItem_getContext');
  late final _UA_Client_MonitoredItem_getContext = _UA_Client_MonitoredItem_getContextPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int UA_Client_MonitoredItem_setContext(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int monitoredItemId,
    ffi.Pointer<ffi.Void> monContext,
  ) {
    return _UA_Client_MonitoredItem_setContext(
      client,
      subscriptionId,
      monitoredItemId,
      monContext,
    );
  }

  late final _UA_Client_MonitoredItem_setContextPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32, UA_UInt32, ffi.Pointer<ffi.Void>)>>(
      'UA_Client_MonitoredItem_setContext');
  late final _UA_Client_MonitoredItem_setContext = _UA_Client_MonitoredItem_setContextPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, int, ffi.Pointer<ffi.Void>)>();

  /// .. _client-highlevel:
  ///
  /// Highlevel Client Functionality
  /// ------------------------------
  ///
  /// The following definitions are convenience functions making use of the
  /// standard OPC UA services in the background. This is a less flexible way of
  /// handling the stack, because at many places sensible defaults are presumed; at
  /// the same time using these functions is the easiest way of implementing an OPC
  /// UA application, as you will not have to consider all the details that go into
  /// the OPC UA services. If more flexibility is needed, you can always achieve
  /// the same functionality using the raw :ref:`OPC UA services
  /// <client-services>`.
  ///
  /// Read Attributes
  /// ~~~~~~~~~~~~~~~
  ///
  /// The following functions can be used to retrieve a single node attribute. Use
  /// the regular service to read several attributes at once.
  UA_DataValue UA_Client_read(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadValueId> rvi,
  ) {
    return _UA_Client_read(
      client,
      rvi,
    );
  }

  late final _UA_Client_readPtr =
      _lookup<ffi.NativeFunction<UA_DataValue Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ReadValueId>)>>(
          'UA_Client_read');
  late final _UA_Client_read =
      _UA_Client_readPtr.asFunction<UA_DataValue Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ReadValueId>)>();

  DartUA_StatusCode __UA_Client_readAttribute(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_AttributeId attributeId,
    ffi.Pointer<ffi.Void> out,
    ffi.Pointer<UA_DataType> outDataType,
  ) {
    return ___UA_Client_readAttribute(
      client,
      nodeId,
      attributeId.value,
      out,
      outDataType,
    );
  }

  late final ___UA_Client_readAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('__UA_Client_readAttribute');
  late final ___UA_Client_readAttribute = ___UA_Client_readAttributePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Client_readNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Client_readNodeIdAttribute(
      client,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Client_readNodeIdAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Client_readNodeIdAttribute');
  late final _UA_Client_readNodeIdAttribute = _UA_Client_readNodeIdAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.UnsignedInt> outNodeClass,
  ) {
    return _UA_Client_readNodeClassAttribute(
      client,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Client_readNodeClassAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Client_readNodeClassAttribute');
  late final _UA_Client_readNodeClassAttribute = _UA_Client_readNodeClassAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Client_readBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Client_readBrowseNameAttribute(
      client,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Client_readBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_readBrowseNameAttribute');
  late final _UA_Client_readBrowseNameAttribute = _UA_Client_readBrowseNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_readDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Client_readDisplayNameAttribute(
      client,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Client_readDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDisplayNameAttribute');
  late final _UA_Client_readDisplayNameAttribute = _UA_Client_readDisplayNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Client_readDescriptionAttribute(
      client,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Client_readDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDescriptionAttribute');
  late final _UA_Client_readDescriptionAttribute = _UA_Client_readDescriptionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Client_readWriteMaskAttribute(
      client,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Client_readWriteMaskAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_readWriteMaskAttribute');
  late final _UA_Client_readWriteMaskAttribute = _UA_Client_readWriteMaskAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outUserWriteMask,
  ) {
    return _UA_Client_readUserWriteMaskAttribute(
      client,
      nodeId,
      outUserWriteMask,
    );
  }

  late final _UA_Client_readUserWriteMaskAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_readUserWriteMaskAttribute');
  late final _UA_Client_readUserWriteMaskAttribute = _UA_Client_readUserWriteMaskAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Client_readIsAbstractAttribute(
      client,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Client_readIsAbstractAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readIsAbstractAttribute');
  late final _UA_Client_readIsAbstractAttribute = _UA_Client_readIsAbstractAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Client_readSymmetricAttribute(
      client,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Client_readSymmetricAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readSymmetricAttribute');
  late final _UA_Client_readSymmetricAttribute = _UA_Client_readSymmetricAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Client_readInverseNameAttribute(
      client,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Client_readInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readInverseNameAttribute');
  late final _UA_Client_readInverseNameAttribute = _UA_Client_readInverseNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute(
      client,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readContainsNoLoopsAttribute');
  late final _UA_Client_readContainsNoLoopsAttribute = _UA_Client_readContainsNoLoopsAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Client_readEventNotifierAttribute(
      client,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Client_readEventNotifierAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_readEventNotifierAttribute');
  late final _UA_Client_readEventNotifierAttribute = _UA_Client_readEventNotifierAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Client_readValueAttribute(
      client,
      nodeId,
      outValue,
    );
  }

  late final _UA_Client_readValueAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>>(
          'UA_Client_readValueAttribute');
  late final _UA_Client_readValueAttribute = _UA_Client_readValueAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_readDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Client_readDataTypeAttribute(
      client,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Client_readDataTypeAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Client_readDataTypeAttribute');
  late final _UA_Client_readDataTypeAttribute = _UA_Client_readDataTypeAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Client_readValueRankAttribute(
      client,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Client_readValueRankAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>>(
          'UA_Client_readValueRankAttribute');
  late final _UA_Client_readValueRankAttribute = _UA_Client_readValueRankAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_readArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Size> outArrayDimensionsSize,
    ffi.Pointer<ffi.Pointer<UA_UInt32>> outArrayDimensions,
  ) {
    return _UA_Client_readArrayDimensionsAttribute(
      client,
      nodeId,
      outArrayDimensionsSize,
      outArrayDimensions,
    );
  }

  late final _UA_Client_readArrayDimensionsAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_UInt32>>)>>('UA_Client_readArrayDimensionsAttribute');
  late final _UA_Client_readArrayDimensionsAttribute = _UA_Client_readArrayDimensionsAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_UInt32>>)>();

  int UA_Client_readAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Client_readAccessLevelAttribute(
      client,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Client_readAccessLevelAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_readAccessLevelAttribute');
  late final _UA_Client_readAccessLevelAttribute = _UA_Client_readAccessLevelAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readAccessLevelExAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outAccessLevelEx,
  ) {
    return _UA_Client_readAccessLevelExAttribute(
      client,
      nodeId,
      outAccessLevelEx,
    );
  }

  late final _UA_Client_readAccessLevelExAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_readAccessLevelExAttribute');
  late final _UA_Client_readAccessLevelExAttribute = _UA_Client_readAccessLevelExAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outUserAccessLevel,
  ) {
    return _UA_Client_readUserAccessLevelAttribute(
      client,
      nodeId,
      outUserAccessLevel,
    );
  }

  late final _UA_Client_readUserAccessLevelAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_readUserAccessLevelAttribute');
  late final _UA_Client_readUserAccessLevelAttribute = _UA_Client_readUserAccessLevelAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinSamplingInterval,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      outMinSamplingInterval,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
          'UA_Client_readMinimumSamplingIntervalAttribute');
  late final _UA_Client_readMinimumSamplingIntervalAttribute = _UA_Client_readMinimumSamplingIntervalAttributePtr
      .asFunction<int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_readHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Client_readHistorizingAttribute(
      client,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Client_readHistorizingAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readHistorizingAttribute');
  late final _UA_Client_readHistorizingAttribute = _UA_Client_readHistorizingAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Client_readExecutableAttribute(
      client,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Client_readExecutableAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readExecutableAttribute');
  late final _UA_Client_readExecutableAttribute = _UA_Client_readExecutableAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outUserExecutable,
  ) {
    return _UA_Client_readUserExecutableAttribute(
      client,
      nodeId,
      outUserExecutable,
    );
  }

  late final _UA_Client_readUserExecutableAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_readUserExecutableAttribute');
  late final _UA_Client_readUserExecutableAttribute = _UA_Client_readUserExecutableAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  DartUA_StatusCode UA_Client_HistoryRead_events(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_HistoricalIteratorCallback callback,
    DartUA_DateTime startTime,
    DartUA_DateTime endTime,
    UA_String indexRange,
    UA_EventFilter filter,
    DartUA_UInt32 numValuesPerNode,
    UA_TimestampsToReturn timestampsToReturn,
    ffi.Pointer<ffi.Void> callbackContext,
  ) {
    return _UA_Client_HistoryRead_events(
      client,
      nodeId,
      callback,
      startTime,
      endTime,
      indexRange,
      filter,
      numValuesPerNode,
      timestampsToReturn.value,
      callbackContext,
    );
  }

  late final _UA_Client_HistoryRead_eventsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_NodeId>,
              UA_HistoricalIteratorCallback,
              UA_DateTime,
              UA_DateTime,
              UA_String,
              UA_EventFilter,
              UA_UInt32,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('UA_Client_HistoryRead_events');
  late final _UA_Client_HistoryRead_events = _UA_Client_HistoryRead_eventsPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, UA_HistoricalIteratorCallback, int, int, UA_String,
          UA_EventFilter, int, int, ffi.Pointer<ffi.Void>)>();

  DartUA_StatusCode UA_Client_HistoryRead_raw(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_HistoricalIteratorCallback callback,
    DartUA_DateTime startTime,
    DartUA_DateTime endTime,
    UA_String indexRange,
    bool returnBounds,
    DartUA_UInt32 numValuesPerNode,
    UA_TimestampsToReturn timestampsToReturn,
    ffi.Pointer<ffi.Void> callbackContext,
  ) {
    return _UA_Client_HistoryRead_raw(
      client,
      nodeId,
      callback,
      startTime,
      endTime,
      indexRange,
      returnBounds,
      numValuesPerNode,
      timestampsToReturn.value,
      callbackContext,
    );
  }

  late final _UA_Client_HistoryRead_rawPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_NodeId>,
              UA_HistoricalIteratorCallback,
              UA_DateTime,
              UA_DateTime,
              UA_String,
              ffi.Bool,
              UA_UInt32,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('UA_Client_HistoryRead_raw');
  late final _UA_Client_HistoryRead_raw = _UA_Client_HistoryRead_rawPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, UA_HistoricalIteratorCallback, int, int, UA_String,
          bool, int, int, ffi.Pointer<ffi.Void>)>();

  DartUA_StatusCode UA_Client_HistoryRead_modified(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_HistoricalIteratorCallback callback,
    DartUA_DateTime startTime,
    DartUA_DateTime endTime,
    UA_String indexRange,
    bool returnBounds,
    DartUA_UInt32 numValuesPerNode,
    UA_TimestampsToReturn timestampsToReturn,
    ffi.Pointer<ffi.Void> callbackContext,
  ) {
    return _UA_Client_HistoryRead_modified(
      client,
      nodeId,
      callback,
      startTime,
      endTime,
      indexRange,
      returnBounds,
      numValuesPerNode,
      timestampsToReturn.value,
      callbackContext,
    );
  }

  late final _UA_Client_HistoryRead_modifiedPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_NodeId>,
              UA_HistoricalIteratorCallback,
              UA_DateTime,
              UA_DateTime,
              UA_String,
              ffi.Bool,
              UA_UInt32,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('UA_Client_HistoryRead_modified');
  late final _UA_Client_HistoryRead_modified = _UA_Client_HistoryRead_modifiedPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, UA_HistoricalIteratorCallback, int, int, UA_String,
          bool, int, int, ffi.Pointer<ffi.Void>)>();

  int UA_Client_HistoryUpdate_insert(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<UA_DataValue> value,
  ) {
    return _UA_Client_HistoryUpdate_insert(
      client,
      nodeId,
      value,
    );
  }

  late final _UA_Client_HistoryUpdate_insertPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_DataValue>)>>('UA_Client_HistoryUpdate_insert');
  late final _UA_Client_HistoryUpdate_insert = _UA_Client_HistoryUpdate_insertPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataValue>)>();

  int UA_Client_HistoryUpdate_replace(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<UA_DataValue> value,
  ) {
    return _UA_Client_HistoryUpdate_replace(
      client,
      nodeId,
      value,
    );
  }

  late final _UA_Client_HistoryUpdate_replacePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_DataValue>)>>('UA_Client_HistoryUpdate_replace');
  late final _UA_Client_HistoryUpdate_replace = _UA_Client_HistoryUpdate_replacePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataValue>)>();

  int UA_Client_HistoryUpdate_update(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<UA_DataValue> value,
  ) {
    return _UA_Client_HistoryUpdate_update(
      client,
      nodeId,
      value,
    );
  }

  late final _UA_Client_HistoryUpdate_updatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_DataValue>)>>('UA_Client_HistoryUpdate_update');
  late final _UA_Client_HistoryUpdate_update = _UA_Client_HistoryUpdate_updatePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataValue>)>();

  int UA_Client_HistoryUpdate_deleteRaw(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    int startTimestamp,
    int endTimestamp,
  ) {
    return _UA_Client_HistoryUpdate_deleteRaw(
      client,
      nodeId,
      startTimestamp,
      endTimestamp,
    );
  }

  late final _UA_Client_HistoryUpdate_deleteRawPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, UA_DateTime,
              UA_DateTime)>>('UA_Client_HistoryUpdate_deleteRaw');
  late final _UA_Client_HistoryUpdate_deleteRaw = _UA_Client_HistoryUpdate_deleteRawPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, int, int)>();

  /// Write Attributes
  /// ~~~~~~~~~~~~~~~~
  ///
  /// The following functions can be use to write a single node attribute at a
  /// time. Use the regular write service to write several attributes at once.
  int UA_Client_write(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_WriteValue> wv,
  ) {
    return _UA_Client_write(
      client,
      wv,
    );
  }

  late final _UA_Client_writePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_WriteValue>)>>(
          'UA_Client_write');
  late final _UA_Client_write =
      _UA_Client_writePtr.asFunction<int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_WriteValue>)>();

  DartUA_StatusCode __UA_Client_writeAttribute(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_AttributeId attributeId,
    ffi.Pointer<ffi.Void> in$,
    ffi.Pointer<UA_DataType> inDataType,
  ) {
    return ___UA_Client_writeAttribute(
      client,
      nodeId,
      attributeId.value,
      in$,
      inDataType,
    );
  }

  late final ___UA_Client_writeAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('__UA_Client_writeAttribute');
  late final ___UA_Client_writeAttribute = ___UA_Client_writeAttributePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Client_writeNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newNodeId,
  ) {
    return _UA_Client_writeNodeIdAttribute(
      client,
      nodeId,
      newNodeId,
    );
  }

  late final _UA_Client_writeNodeIdAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Client_writeNodeIdAttribute');
  late final _UA_Client_writeNodeIdAttribute = _UA_Client_writeNodeIdAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.UnsignedInt> newNodeClass,
  ) {
    return _UA_Client_writeNodeClassAttribute(
      client,
      nodeId,
      newNodeClass,
    );
  }

  late final _UA_Client_writeNodeClassAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Client_writeNodeClassAttribute');
  late final _UA_Client_writeNodeClassAttribute = _UA_Client_writeNodeClassAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Client_writeBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> newBrowseName,
  ) {
    return _UA_Client_writeBrowseNameAttribute(
      client,
      nodeId,
      newBrowseName,
    );
  }

  late final _UA_Client_writeBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_writeBrowseNameAttribute');
  late final _UA_Client_writeBrowseNameAttribute = _UA_Client_writeBrowseNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_writeDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDisplayName,
  ) {
    return _UA_Client_writeDisplayNameAttribute(
      client,
      nodeId,
      newDisplayName,
    );
  }

  late final _UA_Client_writeDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDisplayNameAttribute');
  late final _UA_Client_writeDisplayNameAttribute = _UA_Client_writeDisplayNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDescription,
  ) {
    return _UA_Client_writeDescriptionAttribute(
      client,
      nodeId,
      newDescription,
    );
  }

  late final _UA_Client_writeDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDescriptionAttribute');
  late final _UA_Client_writeDescriptionAttribute = _UA_Client_writeDescriptionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newWriteMask,
  ) {
    return _UA_Client_writeWriteMaskAttribute(
      client,
      nodeId,
      newWriteMask,
    );
  }

  late final _UA_Client_writeWriteMaskAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_writeWriteMaskAttribute');
  late final _UA_Client_writeWriteMaskAttribute = _UA_Client_writeWriteMaskAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newUserWriteMask,
  ) {
    return _UA_Client_writeUserWriteMaskAttribute(
      client,
      nodeId,
      newUserWriteMask,
    );
  }

  late final _UA_Client_writeUserWriteMaskAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_writeUserWriteMaskAttribute');
  late final _UA_Client_writeUserWriteMaskAttribute = _UA_Client_writeUserWriteMaskAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newIsAbstract,
  ) {
    return _UA_Client_writeIsAbstractAttribute(
      client,
      nodeId,
      newIsAbstract,
    );
  }

  late final _UA_Client_writeIsAbstractAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeIsAbstractAttribute');
  late final _UA_Client_writeIsAbstractAttribute = _UA_Client_writeIsAbstractAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newSymmetric,
  ) {
    return _UA_Client_writeSymmetricAttribute(
      client,
      nodeId,
      newSymmetric,
    );
  }

  late final _UA_Client_writeSymmetricAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeSymmetricAttribute');
  late final _UA_Client_writeSymmetricAttribute = _UA_Client_writeSymmetricAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newInverseName,
  ) {
    return _UA_Client_writeInverseNameAttribute(
      client,
      nodeId,
      newInverseName,
    );
  }

  late final _UA_Client_writeInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeInverseNameAttribute');
  late final _UA_Client_writeInverseNameAttribute = _UA_Client_writeInverseNameAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newContainsNoLoops,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute(
      client,
      nodeId,
      newContainsNoLoops,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeContainsNoLoopsAttribute');
  late final _UA_Client_writeContainsNoLoopsAttribute = _UA_Client_writeContainsNoLoopsAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newEventNotifier,
  ) {
    return _UA_Client_writeEventNotifierAttribute(
      client,
      nodeId,
      newEventNotifier,
    );
  }

  late final _UA_Client_writeEventNotifierAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_writeEventNotifierAttribute');
  late final _UA_Client_writeEventNotifierAttribute = _UA_Client_writeEventNotifierAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> newValue,
  ) {
    return _UA_Client_writeValueAttribute(
      client,
      nodeId,
      newValue,
    );
  }

  late final _UA_Client_writeValueAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>>(
          'UA_Client_writeValueAttribute');
  late final _UA_Client_writeValueAttribute = _UA_Client_writeValueAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_writeValueAttribute_scalar(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Void> newValue,
    ffi.Pointer<UA_DataType> valueType,
  ) {
    return _UA_Client_writeValueAttribute_scalar(
      client,
      nodeId,
      newValue,
      valueType,
    );
  }

  late final _UA_Client_writeValueAttribute_scalarPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Client_writeValueAttribute_scalar');
  late final _UA_Client_writeValueAttribute_scalar = _UA_Client_writeValueAttribute_scalarPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Client_writeValueAttributeEx(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_DataValue> newValue,
  ) {
    return _UA_Client_writeValueAttributeEx(
      client,
      nodeId,
      newValue,
    );
  }

  late final _UA_Client_writeValueAttributeExPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_DataValue>)>>(
          'UA_Client_writeValueAttributeEx');
  late final _UA_Client_writeValueAttributeEx = _UA_Client_writeValueAttributeExPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_DataValue>)>();

  int UA_Client_writeDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newDataType,
  ) {
    return _UA_Client_writeDataTypeAttribute(
      client,
      nodeId,
      newDataType,
    );
  }

  late final _UA_Client_writeDataTypeAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Client_writeDataTypeAttribute');
  late final _UA_Client_writeDataTypeAttribute = _UA_Client_writeDataTypeAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> newValueRank,
  ) {
    return _UA_Client_writeValueRankAttribute(
      client,
      nodeId,
      newValueRank,
    );
  }

  late final _UA_Client_writeValueRankAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>>(
          'UA_Client_writeValueRankAttribute');
  late final _UA_Client_writeValueRankAttribute = _UA_Client_writeValueRankAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_writeArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    int newArrayDimensionsSize,
    ffi.Pointer<UA_UInt32> newArrayDimensions,
  ) {
    return _UA_Client_writeArrayDimensionsAttribute(
      client,
      nodeId,
      newArrayDimensionsSize,
      newArrayDimensions,
    );
  }

  late final _UA_Client_writeArrayDimensionsAttributePtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Size, ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeArrayDimensionsAttribute');
  late final _UA_Client_writeArrayDimensionsAttribute = _UA_Client_writeArrayDimensionsAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, int, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newAccessLevel,
  ) {
    return _UA_Client_writeAccessLevelAttribute(
      client,
      nodeId,
      newAccessLevel,
    );
  }

  late final _UA_Client_writeAccessLevelAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_writeAccessLevelAttribute');
  late final _UA_Client_writeAccessLevelAttribute = _UA_Client_writeAccessLevelAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeAccessLevelExAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newAccessLevelEx,
  ) {
    return _UA_Client_writeAccessLevelExAttribute(
      client,
      nodeId,
      newAccessLevelEx,
    );
  }

  late final _UA_Client_writeAccessLevelExAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_writeAccessLevelExAttribute');
  late final _UA_Client_writeAccessLevelExAttribute = _UA_Client_writeAccessLevelExAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newUserAccessLevel,
  ) {
    return _UA_Client_writeUserAccessLevelAttribute(
      client,
      nodeId,
      newUserAccessLevel,
    );
  }

  late final _UA_Client_writeUserAccessLevelAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Client_writeUserAccessLevelAttribute');
  late final _UA_Client_writeUserAccessLevelAttribute = _UA_Client_writeUserAccessLevelAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> newMinInterval,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      newMinInterval,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
          'UA_Client_writeMinimumSamplingIntervalAttribute');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute = _UA_Client_writeMinimumSamplingIntervalAttributePtr
      .asFunction<int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_writeHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newHistorizing,
  ) {
    return _UA_Client_writeHistorizingAttribute(
      client,
      nodeId,
      newHistorizing,
    );
  }

  late final _UA_Client_writeHistorizingAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeHistorizingAttribute');
  late final _UA_Client_writeHistorizingAttribute = _UA_Client_writeHistorizingAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newExecutable,
  ) {
    return _UA_Client_writeExecutableAttribute(
      client,
      nodeId,
      newExecutable,
    );
  }

  late final _UA_Client_writeExecutableAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeExecutableAttribute');
  late final _UA_Client_writeExecutableAttribute = _UA_Client_writeExecutableAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newUserExecutable,
  ) {
    return _UA_Client_writeUserExecutableAttribute(
      client,
      nodeId,
      newUserExecutable,
    );
  }

  late final _UA_Client_writeUserExecutableAttributePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Client_writeUserExecutableAttribute');
  late final _UA_Client_writeUserExecutableAttribute = _UA_Client_writeUserExecutableAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  /// Method Calling
  /// ~~~~~~~~~~~~~~
  int UA_Client_call(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Pointer<ffi.Size> outputSize,
    ffi.Pointer<ffi.Pointer<UA_Variant>> output,
  ) {
    return _UA_Client_call(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      outputSize,
      output,
    );
  }

  late final _UA_Client_callPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, ffi.Size, ffi.Pointer<UA_Variant>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_Variant>>)>>('UA_Client_call');
  late final _UA_Client_call = _UA_Client_callPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, int, ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_Variant>>)>();

  /// Browsing
  /// ~~~~~~~~
  UA_BrowseResult UA_Client_browse(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ViewDescription> view,
    int requestedMaxReferencesPerNode,
    ffi.Pointer<UA_BrowseDescription> nodesToBrowse,
  ) {
    return _UA_Client_browse(
      client,
      view,
      requestedMaxReferencesPerNode,
      nodesToBrowse,
    );
  }

  late final _UA_Client_browsePtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_ViewDescription>, UA_UInt32,
              ffi.Pointer<UA_BrowseDescription>)>>('UA_Client_browse');
  late final _UA_Client_browse = _UA_Client_browsePtr.asFunction<
      UA_BrowseResult Function(
          ffi.Pointer<UA_Client>, ffi.Pointer<UA_ViewDescription>, int, ffi.Pointer<UA_BrowseDescription>)>();

  UA_BrowseResult UA_Client_browseNext(
    ffi.Pointer<UA_Client> client,
    bool releaseContinuationPoint,
    UA_ByteString continuationPoint,
  ) {
    return _UA_Client_browseNext(
      client,
      releaseContinuationPoint,
      continuationPoint,
    );
  }

  late final _UA_Client_browseNextPtr =
      _lookup<ffi.NativeFunction<UA_BrowseResult Function(ffi.Pointer<UA_Client>, ffi.Bool, UA_ByteString)>>(
          'UA_Client_browseNext');
  late final _UA_Client_browseNext =
      _UA_Client_browseNextPtr.asFunction<UA_BrowseResult Function(ffi.Pointer<UA_Client>, bool, UA_ByteString)>();

  UA_BrowsePathResult UA_Client_translateBrowsePathToNodeIds(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_BrowsePath> browsePath,
  ) {
    return _UA_Client_translateBrowsePathToNodeIds(
      client,
      browsePath,
    );
  }

  late final _UA_Client_translateBrowsePathToNodeIdsPtr =
      _lookup<ffi.NativeFunction<UA_BrowsePathResult Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_BrowsePath>)>>(
          'UA_Client_translateBrowsePathToNodeIds');
  late final _UA_Client_translateBrowsePathToNodeIds = _UA_Client_translateBrowsePathToNodeIdsPtr.asFunction<
      UA_BrowsePathResult Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_BrowsePath>)>();

  /// Node Management
  /// ~~~~~~~~~~~~~~~
  /// See the section on :ref:`server-side node management <addnodes>`.
  DartUA_StatusCode UA_Client_addReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_String targetServerUri,
    UA_ExpandedNodeId targetNodeId,
    UA_NodeClass targetNodeClass,
  ) {
    return _UA_Client_addReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetServerUri,
      targetNodeId,
      targetNodeClass.value,
    );
  }

  late final _UA_Client_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, ffi.Bool, UA_String, UA_ExpandedNodeId,
              ffi.UnsignedInt)>>('UA_Client_addReference');
  late final _UA_Client_addReference = _UA_Client_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool, UA_String, UA_ExpandedNodeId, int)>();

  int UA_Client_deleteReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Client_deleteReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Client_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, ffi.Bool, UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Client_deleteReference');
  late final _UA_Client_deleteReference = _UA_Client_deleteReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool, UA_ExpandedNodeId, bool)>();

  int UA_Client_deleteNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    bool deleteTargetReferences,
  ) {
    return _UA_Client_deleteNode(
      client,
      nodeId,
      deleteTargetReferences,
    );
  }

  late final _UA_Client_deleteNodePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Bool)>>(
          'UA_Client_deleteNode');
  late final _UA_Client_deleteNode =
      _UA_Client_deleteNodePtr.asFunction<int Function(ffi.Pointer<UA_Client>, UA_NodeId, bool)>();

  DartUA_StatusCode __UA_Client_addNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeClass nodeClass,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    ffi.Pointer<UA_NodeAttributes> attr,
    ffi.Pointer<UA_DataType> attributeType,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return ___UA_Client_addNode(
      client,
      nodeClass.value,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      attributeType,
      outNewNodeId,
    );
  }

  late final ___UA_Client_addNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.UnsignedInt,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              ffi.Pointer<UA_NodeAttributes>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_NodeId>)>>('__UA_Client_addNode');
  late final ___UA_Client_addNode = ___UA_Client_addNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_DataType>, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addVariableNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
              UA_VariableAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableNode');
  late final _UA_Client_addVariableNode = _UA_Client_addVariableNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_VariableAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addVariableTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_VariableTypeAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableTypeNode');
  late final _UA_Client_addVariableTypeNode = _UA_Client_addVariableTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_VariableTypeAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
              UA_ObjectAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectNode');
  late final _UA_Client_addObjectNode = _UA_Client_addObjectNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_ObjectAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_ObjectTypeAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectTypeNode');
  late final _UA_Client_addObjectTypeNode = _UA_Client_addObjectTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ObjectTypeAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addViewNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addViewNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_ViewAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addViewNode');
  late final _UA_Client_addViewNode = _UA_Client_addViewNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ViewAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addReferenceTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addReferenceTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_ReferenceTypeAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addReferenceTypeNode');
  late final _UA_Client_addReferenceTypeNode = _UA_Client_addReferenceTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
          UA_ReferenceTypeAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addDataTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addDataTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_DataTypeAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addDataTypeNode');
  late final _UA_Client_addDataTypeNode = _UA_Client_addDataTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_DataTypeAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addMethodNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addMethodNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_MethodAttributes, ffi.Pointer<UA_NodeId>)>>('UA_Client_addMethodNode');
  late final _UA_Client_addMethodNode = _UA_Client_addMethodNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_MethodAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_NamespaceGetIndex(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_String> namespaceUri,
    ffi.Pointer<UA_UInt16> namespaceIndex,
  ) {
    return _UA_Client_NamespaceGetIndex(
      client,
      namespaceUri,
      namespaceIndex,
    );
  }

  late final _UA_Client_NamespaceGetIndexPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>)>>('UA_Client_NamespaceGetIndex');
  late final _UA_Client_NamespaceGetIndex = _UA_Client_NamespaceGetIndexPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>, ffi.Pointer<UA_UInt16>)>();

  int UA_Client_forEachChildNodeCall(
    ffi.Pointer<UA_Client> client,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Client_forEachChildNodeCall(
      client,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Client_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Client_forEachChildNodeCall');
  late final _UA_Client_forEachChildNodeCall = _UA_Client_forEachChildNodeCallPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  int UA_PublisherId_copy(
    ffi.Pointer<UA_PublisherId> src,
    ffi.Pointer<UA_PublisherId> dst,
  ) {
    return _UA_PublisherId_copy(
      src,
      dst,
    );
  }

  late final _UA_PublisherId_copyPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_PublisherId>)>>(
          'UA_PublisherId_copy');
  late final _UA_PublisherId_copy =
      _UA_PublisherId_copyPtr.asFunction<int Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_PublisherId>)>();

  void UA_PublisherId_clear(
    ffi.Pointer<UA_PublisherId> p,
  ) {
    return _UA_PublisherId_clear(
      p,
    );
  }

  late final _UA_PublisherId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublisherId>)>>('UA_PublisherId_clear');
  late final _UA_PublisherId_clear = _UA_PublisherId_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublisherId>)>();

  int UA_PublisherId_fromVariant(
    ffi.Pointer<UA_PublisherId> p,
    ffi.Pointer<UA_Variant> src,
  ) {
    return _UA_PublisherId_fromVariant(
      p,
      src,
    );
  }

  late final _UA_PublisherId_fromVariantPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_Variant>)>>(
          'UA_PublisherId_fromVariant');
  late final _UA_PublisherId_fromVariant =
      _UA_PublisherId_fromVariantPtr.asFunction<int Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_Variant>)>();

  void UA_PublisherId_toVariant(
    ffi.Pointer<UA_PublisherId> p,
    ffi.Pointer<UA_Variant> dst,
  ) {
    return _UA_PublisherId_toVariant(
      p,
      dst,
    );
  }

  late final _UA_PublisherId_toVariantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_Variant>)>>(
          'UA_PublisherId_toVariant');
  late final _UA_PublisherId_toVariant =
      _UA_PublisherId_toVariantPtr.asFunction<void Function(ffi.Pointer<UA_PublisherId>, ffi.Pointer<UA_Variant>)>();

  int UA_Server_enableAllPubSubComponents(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_enableAllPubSubComponents(
      server,
    );
  }

  late final _UA_Server_enableAllPubSubComponentsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
          'UA_Server_enableAllPubSubComponents');
  late final _UA_Server_enableAllPubSubComponents =
      _UA_Server_enableAllPubSubComponentsPtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  void UA_Server_disableAllPubSubComponents(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_disableAllPubSubComponents(
      server,
    );
  }

  late final _UA_Server_disableAllPubSubComponentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>)>>('UA_Server_disableAllPubSubComponents');
  late final _UA_Server_disableAllPubSubComponents =
      _UA_Server_disableAllPubSubComponentsPtr.asFunction<void Function(ffi.Pointer<UA_Server>)>();

  int UA_PubSubConnectionConfig_copy(
    ffi.Pointer<UA_PubSubConnectionConfig> src,
    ffi.Pointer<UA_PubSubConnectionConfig> dst,
  ) {
    return _UA_PubSubConnectionConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConnectionConfig_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_PubSubConnectionConfig>)>>('UA_PubSubConnectionConfig_copy');
  late final _UA_PubSubConnectionConfig_copy = _UA_PubSubConnectionConfig_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubConnectionConfig>, ffi.Pointer<UA_PubSubConnectionConfig>)>();

  void UA_PubSubConnectionConfig_clear(
    ffi.Pointer<UA_PubSubConnectionConfig> cfg,
  ) {
    return _UA_PubSubConnectionConfig_clear(
      cfg,
    );
  }

  late final _UA_PubSubConnectionConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubConnectionConfig>)>>(
          'UA_PubSubConnectionConfig_clear');
  late final _UA_PubSubConnectionConfig_clear =
      _UA_PubSubConnectionConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubConnectionConfig>)>();

  int UA_Server_addPubSubConnection(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig,
    ffi.Pointer<UA_NodeId> connectionId,
  ) {
    return _UA_Server_addPubSubConnection(
      server,
      connectionConfig,
      connectionId,
    );
  }

  late final _UA_Server_addPubSubConnectionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPubSubConnection');
  late final _UA_Server_addPubSubConnection = _UA_Server_addPubSubConnectionPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_PubSubConnectionConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_enablePubSubConnection(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
  ) {
    return _UA_Server_enablePubSubConnection(
      server,
      connectionId,
    );
  }

  late final _UA_Server_enablePubSubConnectionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_enablePubSubConnection');
  late final _UA_Server_enablePubSubConnection =
      _UA_Server_enablePubSubConnectionPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_disablePubSubConnection(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
  ) {
    return _UA_Server_disablePubSubConnection(
      server,
      connectionId,
    );
  }

  late final _UA_Server_disablePubSubConnectionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_disablePubSubConnection');
  late final _UA_Server_disablePubSubConnection =
      _UA_Server_disablePubSubConnectionPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_processPubSubConnectionReceive(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
    UA_ByteString packet,
  ) {
    return _UA_Server_processPubSubConnectionReceive(
      server,
      connectionId,
      packet,
    );
  }

  late final _UA_Server_processPubSubConnectionReceivePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ByteString)>>(
          'UA_Server_processPubSubConnectionReceive');
  late final _UA_Server_processPubSubConnectionReceive = _UA_Server_processPubSubConnectionReceivePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ByteString)>();

  int UA_Server_getPubSubConnectionConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
    ffi.Pointer<UA_PubSubConnectionConfig> config,
  ) {
    return _UA_Server_getPubSubConnectionConfig(
      server,
      connectionId,
      config,
    );
  }

  late final _UA_Server_getPubSubConnectionConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubConnectionConfig>)>>('UA_Server_getPubSubConnectionConfig');
  late final _UA_Server_getPubSubConnectionConfig = _UA_Server_getPubSubConnectionConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_PubSubConnectionConfig>)>();

  int UA_Server_updatePubSubConnectionConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
    ffi.Pointer<UA_PubSubConnectionConfig> config,
  ) {
    return _UA_Server_updatePubSubConnectionConfig(
      server,
      connectionId,
      config,
    );
  }

  late final _UA_Server_updatePubSubConnectionConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubConnectionConfig>)>>('UA_Server_updatePubSubConnectionConfig');
  late final _UA_Server_updatePubSubConnectionConfig = _UA_Server_updatePubSubConnectionConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_PubSubConnectionConfig>)>();

  int UA_Server_removePubSubConnection(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
  ) {
    return _UA_Server_removePubSubConnection(
      server,
      connectionId,
    );
  }

  late final _UA_Server_removePubSubConnectionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removePubSubConnection');
  late final _UA_Server_removePubSubConnection =
      _UA_Server_removePubSubConnectionPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_PublishedDataSetConfig_clear(
    ffi.Pointer<UA_PublishedDataSetConfig> pdsConfig,
  ) {
    return _UA_PublishedDataSetConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_PublishedDataSetConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>>(
          'UA_PublishedDataSetConfig_clear');
  late final _UA_PublishedDataSetConfig_clear =
      _UA_PublishedDataSetConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>();

  UA_AddPublishedDataSetResult UA_Server_addPublishedDataSet(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PublishedDataSetConfig> pdsConfig,
    ffi.Pointer<UA_NodeId> pdsId,
  ) {
    return _UA_Server_addPublishedDataSet(
      server,
      pdsConfig,
      pdsId,
    );
  }

  late final _UA_Server_addPublishedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_AddPublishedDataSetResult Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPublishedDataSet');
  late final _UA_Server_addPublishedDataSet = _UA_Server_addPublishedDataSetPtr.asFunction<
      UA_AddPublishedDataSetResult Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_PublishedDataSetConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getPublishedDataSetConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pdsId,
    ffi.Pointer<UA_PublishedDataSetConfig> config,
  ) {
    return _UA_Server_getPublishedDataSetConfig(
      server,
      pdsId,
      config,
    );
  }

  late final _UA_Server_getPublishedDataSetConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PublishedDataSetConfig>)>>('UA_Server_getPublishedDataSetConfig');
  late final _UA_Server_getPublishedDataSetConfig = _UA_Server_getPublishedDataSetConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_PublishedDataSetConfig>)>();

  int UA_Server_getPublishedDataSetMetaData(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pdsId,
    ffi.Pointer<UA_DataSetMetaDataType> metaData,
  ) {
    return _UA_Server_getPublishedDataSetMetaData(
      server,
      pdsId,
      metaData,
    );
  }

  late final _UA_Server_getPublishedDataSetMetaDataPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetMetaDataType>)>>('UA_Server_getPublishedDataSetMetaData');
  late final _UA_Server_getPublishedDataSetMetaData = _UA_Server_getPublishedDataSetMetaDataPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetMetaDataType>)>();

  int UA_Server_removePublishedDataSet(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pdsId,
  ) {
    return _UA_Server_removePublishedDataSet(
      server,
      pdsId,
    );
  }

  late final _UA_Server_removePublishedDataSetPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removePublishedDataSet');
  late final _UA_Server_removePublishedDataSet =
      _UA_Server_removePublishedDataSetPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetFieldConfig_clear(
    ffi.Pointer<UA_DataSetFieldConfig> dataSetFieldConfig,
  ) {
    return _UA_DataSetFieldConfig_clear(
      dataSetFieldConfig,
    );
  }

  late final _UA_DataSetFieldConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetFieldConfig>)>>('UA_DataSetFieldConfig_clear');
  late final _UA_DataSetFieldConfig_clear =
      _UA_DataSetFieldConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_addDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId publishedDataSet,
    ffi.Pointer<UA_DataSetFieldConfig> fieldConfig,
    ffi.Pointer<UA_NodeId> fieldId,
  ) {
    return _UA_Server_addDataSetField(
      server,
      publishedDataSet,
      fieldConfig,
      fieldId,
    );
  }

  late final _UA_Server_addDataSetFieldPtr = _lookup<
      ffi.NativeFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetFieldConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetField');
  late final _UA_Server_addDataSetField = _UA_Server_addDataSetFieldPtr.asFunction<
      UA_DataSetFieldResult Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetFieldConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetFieldConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsfId,
    ffi.Pointer<UA_DataSetFieldConfig> config,
  ) {
    return _UA_Server_getDataSetFieldConfig(
      server,
      dsfId,
      config,
    );
  }

  late final _UA_Server_getDataSetFieldConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>)>>('UA_Server_getDataSetFieldConfig');
  late final _UA_Server_getDataSetFieldConfig = _UA_Server_getDataSetFieldConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_removeDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsfId,
  ) {
    return _UA_Server_removeDataSetField(
      server,
      dsfId,
    );
  }

  late final _UA_Server_removeDataSetFieldPtr =
      _lookup<ffi.NativeFunction<UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeDataSetField');
  late final _UA_Server_removeDataSetField =
      _UA_Server_removeDataSetFieldPtr.asFunction<UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_WriterGroupConfig_clear(
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
  ) {
    return _UA_WriterGroupConfig_clear(
      writerGroupConfig,
    );
  }

  late final _UA_WriterGroupConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriterGroupConfig>)>>('UA_WriterGroupConfig_clear');
  late final _UA_WriterGroupConfig_clear =
      _UA_WriterGroupConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_addWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
    ffi.Pointer<UA_NodeId> wgId,
  ) {
    return _UA_Server_addWriterGroup(
      server,
      connection,
      writerGroupConfig,
      wgId,
    );
  }

  late final _UA_Server_addWriterGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_WriterGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addWriterGroup');
  late final _UA_Server_addWriterGroup = _UA_Server_addWriterGroupPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_WriterGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_getWriterGroupConfig(
      server,
      wgId,
      config,
    );
  }

  late final _UA_Server_getWriterGroupConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_WriterGroupConfig>)>>('UA_Server_getWriterGroupConfig');
  late final _UA_Server_getWriterGroupConfig = _UA_Server_getWriterGroupConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_updateWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_updateWriterGroupConfig(
      server,
      wgId,
      config,
    );
  }

  late final _UA_Server_updateWriterGroupConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>)>>('UA_Server_updateWriterGroupConfig');
  late final _UA_Server_updateWriterGroupConfig = _UA_Server_updateWriterGroupConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_getWriterGroupState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _UA_Server_getWriterGroupState(
      server,
      wgId,
      state,
    );
  }

  late final _UA_Server_getWriterGroupStatePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Server_getWriterGroupState');
  late final _UA_Server_getWriterGroupState = _UA_Server_getWriterGroupStatePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Server_triggerWriterGroupPublish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
  ) {
    return _UA_Server_triggerWriterGroupPublish(
      server,
      wgId,
    );
  }

  late final _UA_Server_triggerWriterGroupPublishPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_triggerWriterGroupPublish');
  late final _UA_Server_triggerWriterGroupPublish =
      _UA_Server_triggerWriterGroupPublishPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_getWriterGroupLastPublishTimestamp(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
    ffi.Pointer<UA_DateTime> timestamp,
  ) {
    return _UA_Server_getWriterGroupLastPublishTimestamp(
      server,
      wgId,
      timestamp,
    );
  }

  late final _UA_Server_getWriterGroupLastPublishTimestampPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DateTime>)>>(
          'UA_Server_getWriterGroupLastPublishTimestamp');
  late final _UA_Server_getWriterGroupLastPublishTimestamp = _UA_Server_getWriterGroupLastPublishTimestampPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DateTime>)>();

  int UA_Server_removeWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
  ) {
    return _UA_Server_removeWriterGroup(
      server,
      wgId,
    );
  }

  late final _UA_Server_removeWriterGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeWriterGroup');
  late final _UA_Server_removeWriterGroup =
      _UA_Server_removeWriterGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_enableWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
  ) {
    return _UA_Server_enableWriterGroup(
      server,
      wgId,
    );
  }

  late final _UA_Server_enableWriterGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_enableWriterGroup');
  late final _UA_Server_enableWriterGroup =
      _UA_Server_enableWriterGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_disableWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
  ) {
    return _UA_Server_disableWriterGroup(
      server,
      wgId,
    );
  }

  late final _UA_Server_disableWriterGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_disableWriterGroup');
  late final _UA_Server_disableWriterGroup =
      _UA_Server_disableWriterGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setWriterGroupEncryptionKeys(
    ffi.Pointer<UA_Server> server,
    UA_NodeId wgId,
    int securityTokenId,
    UA_ByteString signingKey,
    UA_ByteString encryptingKey,
    UA_ByteString keyNonce,
  ) {
    return _UA_Server_setWriterGroupEncryptionKeys(
      server,
      wgId,
      securityTokenId,
      signingKey,
      encryptingKey,
      keyNonce,
    );
  }

  late final _UA_Server_setWriterGroupEncryptionKeysPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_UInt32, UA_ByteString, UA_ByteString,
              UA_ByteString)>>('UA_Server_setWriterGroupEncryptionKeys');
  late final _UA_Server_setWriterGroupEncryptionKeys = _UA_Server_setWriterGroupEncryptionKeysPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, int, UA_ByteString, UA_ByteString, UA_ByteString)>();

  void UA_DataSetWriterConfig_clear(
    ffi.Pointer<UA_DataSetWriterConfig> pdsConfig,
  ) {
    return _UA_DataSetWriterConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_DataSetWriterConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetWriterConfig>)>>(
          'UA_DataSetWriterConfig_clear');
  late final _UA_DataSetWriterConfig_clear =
      _UA_DataSetWriterConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_addDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
    UA_NodeId dataSet,
    ffi.Pointer<UA_DataSetWriterConfig> dataSetWriterConfig,
    ffi.Pointer<UA_NodeId> dswId,
  ) {
    return _UA_Server_addDataSetWriter(
      server,
      writerGroup,
      dataSet,
      dataSetWriterConfig,
      dswId,
    );
  }

  late final _UA_Server_addDataSetWriterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Pointer<UA_DataSetWriterConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetWriter');
  late final _UA_Server_addDataSetWriter = _UA_Server_addDataSetWriterPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Pointer<UA_DataSetWriterConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetWriterConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
    ffi.Pointer<UA_DataSetWriterConfig> config,
  ) {
    return _UA_Server_getDataSetWriterConfig(
      server,
      dswId,
      config,
    );
  }

  late final _UA_Server_getDataSetWriterConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>)>>('UA_Server_getDataSetWriterConfig');
  late final _UA_Server_getDataSetWriterConfig = _UA_Server_getDataSetWriterConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_updateDataSetWriterConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
    ffi.Pointer<UA_DataSetWriterConfig> config,
  ) {
    return _UA_Server_updateDataSetWriterConfig(
      server,
      dswId,
      config,
    );
  }

  late final _UA_Server_updateDataSetWriterConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>)>>('UA_Server_updateDataSetWriterConfig');
  late final _UA_Server_updateDataSetWriterConfig = _UA_Server_updateDataSetWriterConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_enableDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
  ) {
    return _UA_Server_enableDataSetWriter(
      server,
      dswId,
    );
  }

  late final _UA_Server_enableDataSetWriterPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_enableDataSetWriter');
  late final _UA_Server_enableDataSetWriter =
      _UA_Server_enableDataSetWriterPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_disableDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
  ) {
    return _UA_Server_disableDataSetWriter(
      server,
      dswId,
    );
  }

  late final _UA_Server_disableDataSetWriterPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_disableDataSetWriter');
  late final _UA_Server_disableDataSetWriter =
      _UA_Server_disableDataSetWriterPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_getDataSetWriterState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _UA_Server_getDataSetWriterState(
      server,
      dswId,
      state,
    );
  }

  late final _UA_Server_getDataSetWriterStatePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Server_getDataSetWriterState');
  late final _UA_Server_getDataSetWriterState = _UA_Server_getDataSetWriterStatePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Server_removeDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dswId,
  ) {
    return _UA_Server_removeDataSetWriter(
      server,
      dswId,
    );
  }

  late final _UA_Server_removeDataSetWriterPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeDataSetWriter');
  late final _UA_Server_removeDataSetWriter =
      _UA_Server_removeDataSetWriterPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_SubscribedDataSetConfig_clear(
    ffi.Pointer<UA_SubscribedDataSetConfig> sdsConfig,
  ) {
    return _UA_SubscribedDataSetConfig_clear(
      sdsConfig,
    );
  }

  late final _UA_SubscribedDataSetConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SubscribedDataSetConfig>)>>(
          'UA_SubscribedDataSetConfig_clear');
  late final _UA_SubscribedDataSetConfig_clear =
      _UA_SubscribedDataSetConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_SubscribedDataSetConfig>)>();

  int UA_Server_addSubscribedDataSet(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_SubscribedDataSetConfig> sdsConfig,
    ffi.Pointer<UA_NodeId> sdsId,
  ) {
    return _UA_Server_addSubscribedDataSet(
      server,
      sdsConfig,
      sdsId,
    );
  }

  late final _UA_Server_addSubscribedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_SubscribedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addSubscribedDataSet');
  late final _UA_Server_addSubscribedDataSet = _UA_Server_addSubscribedDataSetPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_SubscribedDataSetConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_removeSubscribedDataSet(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sdsId,
  ) {
    return _UA_Server_removeSubscribedDataSet(
      server,
      sdsId,
    );
  }

  late final _UA_Server_removeSubscribedDataSetPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeSubscribedDataSet');
  late final _UA_Server_removeSubscribedDataSet =
      _UA_Server_removeSubscribedDataSetPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_DataSetReaderConfig_copy(
    ffi.Pointer<UA_DataSetReaderConfig> src,
    ffi.Pointer<UA_DataSetReaderConfig> dst,
  ) {
    return _UA_DataSetReaderConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetReaderConfig_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetReaderConfig>,
              ffi.Pointer<UA_DataSetReaderConfig>)>>('UA_DataSetReaderConfig_copy');
  late final _UA_DataSetReaderConfig_copy = _UA_DataSetReaderConfig_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataSetReaderConfig>, ffi.Pointer<UA_DataSetReaderConfig>)>();

  void UA_DataSetReaderConfig_clear(
    ffi.Pointer<UA_DataSetReaderConfig> cfg,
  ) {
    return _UA_DataSetReaderConfig_clear(
      cfg,
    );
  }

  late final _UA_DataSetReaderConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetReaderConfig>)>>(
          'UA_DataSetReaderConfig_clear');
  late final _UA_DataSetReaderConfig_clear =
      _UA_DataSetReaderConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_getDataSetReaderConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_getDataSetReaderConfig(
      server,
      dsrId,
      config,
    );
  }

  late final _UA_Server_getDataSetReaderConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>>('UA_Server_getDataSetReaderConfig');
  late final _UA_Server_getDataSetReaderConfig = _UA_Server_getDataSetReaderConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_getDataSetReaderState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _UA_Server_getDataSetReaderState(
      server,
      dsrId,
      state,
    );
  }

  late final _UA_Server_getDataSetReaderStatePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Server_getDataSetReaderState');
  late final _UA_Server_getDataSetReaderState = _UA_Server_getDataSetReaderStatePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Server_addDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
    ffi.Pointer<UA_DataSetReaderConfig> config,
    ffi.Pointer<UA_NodeId> dsrId,
  ) {
    return _UA_Server_addDataSetReader(
      server,
      readerGroupId,
      config,
      dsrId,
    );
  }

  late final _UA_Server_addDataSetReaderPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetReader');
  late final _UA_Server_addDataSetReader = _UA_Server_addDataSetReaderPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_updateDataSetReaderConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_updateDataSetReaderConfig(
      server,
      dsrId,
      config,
    );
  }

  late final _UA_Server_updateDataSetReaderConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>>('UA_Server_updateDataSetReaderConfig');
  late final _UA_Server_updateDataSetReaderConfig = _UA_Server_updateDataSetReaderConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_removeDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
  ) {
    return _UA_Server_removeDataSetReader(
      server,
      dsrId,
    );
  }

  late final _UA_Server_removeDataSetReaderPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeDataSetReader');
  late final _UA_Server_removeDataSetReader =
      _UA_Server_removeDataSetReaderPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_enableDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
  ) {
    return _UA_Server_enableDataSetReader(
      server,
      dsrId,
    );
  }

  late final _UA_Server_enableDataSetReaderPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_enableDataSetReader');
  late final _UA_Server_enableDataSetReader =
      _UA_Server_enableDataSetReaderPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_disableDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
  ) {
    return _UA_Server_disableDataSetReader(
      server,
      dsrId,
    );
  }

  late final _UA_Server_disableDataSetReaderPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_disableDataSetReader');
  late final _UA_Server_disableDataSetReader =
      _UA_Server_disableDataSetReaderPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setDataSetReaderTargetVariables(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsrId,
    int targetVariablesSize,
    ffi.Pointer<UA_FieldTargetDataType> targetVariables,
  ) {
    return _UA_Server_setDataSetReaderTargetVariables(
      server,
      dsrId,
      targetVariablesSize,
      targetVariables,
    );
  }

  late final _UA_Server_setDataSetReaderTargetVariablesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Size,
              ffi.Pointer<UA_FieldTargetDataType>)>>('UA_Server_setDataSetReaderTargetVariables');
  late final _UA_Server_setDataSetReaderTargetVariables = _UA_Server_setDataSetReaderTargetVariablesPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, int, ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_ReaderGroupConfig_clear(
    ffi.Pointer<UA_ReaderGroupConfig> readerGroupConfig,
  ) {
    return _UA_ReaderGroupConfig_clear(
      readerGroupConfig,
    );
  }

  late final _UA_ReaderGroupConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReaderGroupConfig>)>>('UA_ReaderGroupConfig_clear');
  late final _UA_ReaderGroupConfig_clear =
      _UA_ReaderGroupConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_getReaderGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
    ffi.Pointer<UA_ReaderGroupConfig> config,
  ) {
    return _UA_Server_getReaderGroupConfig(
      server,
      rgId,
      config,
    );
  }

  late final _UA_Server_getReaderGroupConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ReaderGroupConfig>)>>('UA_Server_getReaderGroupConfig');
  late final _UA_Server_getReaderGroupConfig = _UA_Server_getReaderGroupConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_getReaderGroupState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _UA_Server_getReaderGroupState(
      server,
      rgId,
      state,
    );
  }

  late final _UA_Server_getReaderGroupStatePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Server_getReaderGroupState');
  late final _UA_Server_getReaderGroupState = _UA_Server_getReaderGroupStatePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Server_addReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionId,
    ffi.Pointer<UA_ReaderGroupConfig> config,
    ffi.Pointer<UA_NodeId> rgId,
  ) {
    return _UA_Server_addReaderGroup(
      server,
      connectionId,
      config,
      rgId,
    );
  }

  late final _UA_Server_addReaderGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ReaderGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReaderGroup');
  late final _UA_Server_addReaderGroup = _UA_Server_addReaderGroupPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ReaderGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_updateReaderGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
    ffi.Pointer<UA_ReaderGroupConfig> config,
  ) {
    return _UA_Server_updateReaderGroupConfig(
      server,
      rgId,
      config,
    );
  }

  late final _UA_Server_updateReaderGroupConfigPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>)>>('UA_Server_updateReaderGroupConfig');
  late final _UA_Server_updateReaderGroupConfig = _UA_Server_updateReaderGroupConfigPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_removeReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
  ) {
    return _UA_Server_removeReaderGroup(
      server,
      rgId,
    );
  }

  late final _UA_Server_removeReaderGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_removeReaderGroup');
  late final _UA_Server_removeReaderGroup =
      _UA_Server_removeReaderGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_enableReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
  ) {
    return _UA_Server_enableReaderGroup(
      server,
      rgId,
    );
  }

  late final _UA_Server_enableReaderGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_enableReaderGroup');
  late final _UA_Server_enableReaderGroup =
      _UA_Server_enableReaderGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_disableReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
  ) {
    return _UA_Server_disableReaderGroup(
      server,
      rgId,
    );
  }

  late final _UA_Server_disableReaderGroupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_disableReaderGroup');
  late final _UA_Server_disableReaderGroup =
      _UA_Server_disableReaderGroupPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setReaderGroupEncryptionKeys(
    ffi.Pointer<UA_Server> server,
    UA_NodeId rgId,
    int securityTokenId,
    UA_ByteString signingKey,
    UA_ByteString encryptingKey,
    UA_ByteString keyNonce,
  ) {
    return _UA_Server_setReaderGroupEncryptionKeys(
      server,
      rgId,
      securityTokenId,
      signingKey,
      encryptingKey,
      keyNonce,
    );
  }

  late final _UA_Server_setReaderGroupEncryptionKeysPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_UInt32, UA_ByteString, UA_ByteString,
              UA_ByteString)>>('UA_Server_setReaderGroupEncryptionKeys');
  late final _UA_Server_setReaderGroupEncryptionKeys = _UA_Server_setReaderGroupEncryptionKeysPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, int, UA_ByteString, UA_ByteString, UA_ByteString)>();

  void UA_PubSubOffsetTable_clear(
    ffi.Pointer<UA_PubSubOffsetTable> ot,
  ) {
    return _UA_PubSubOffsetTable_clear(
      ot,
    );
  }

  late final _UA_PubSubOffsetTable_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubOffsetTable>)>>('UA_PubSubOffsetTable_clear');
  late final _UA_PubSubOffsetTable_clear =
      _UA_PubSubOffsetTable_clearPtr.asFunction<void Function(ffi.Pointer<UA_PubSubOffsetTable>)>();

  int UA_Server_computeWriterGroupOffsetTable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroupId,
    ffi.Pointer<UA_PubSubOffsetTable> ot,
  ) {
    return _UA_Server_computeWriterGroupOffsetTable(
      server,
      writerGroupId,
      ot,
    );
  }

  late final _UA_Server_computeWriterGroupOffsetTablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubOffsetTable>)>>('UA_Server_computeWriterGroupOffsetTable');
  late final _UA_Server_computeWriterGroupOffsetTable = _UA_Server_computeWriterGroupOffsetTablePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_PubSubOffsetTable>)>();

  int UA_Server_computeReaderGroupOffsetTable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
    ffi.Pointer<UA_PubSubOffsetTable> ot,
  ) {
    return _UA_Server_computeReaderGroupOffsetTable(
      server,
      readerGroupId,
      ot,
    );
  }

  late final _UA_Server_computeReaderGroupOffsetTablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubOffsetTable>)>>('UA_Server_computeReaderGroupOffsetTable');
  late final _UA_Server_computeReaderGroupOffsetTable = _UA_Server_computeReaderGroupOffsetTablePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_PubSubOffsetTable>)>();

  void UA_ServerConfig_clear(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_clear(
      config,
    );
  }

  late final _UA_ServerConfig_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_clear');
  late final _UA_ServerConfig_clear =
      _UA_ServerConfig_clearPtr.asFunction<void Function(ffi.Pointer<UA_ServerConfig>)>();

  /// .. _server-lifecycle:
  ///
  /// Server Lifecycle
  /// ----------------
  ///
  /// The server continuously listens on the network to consume incoming messages.
  /// Furthermore the server internally registers timed callbacks. For the control
  /// flow of the server, these are the options (with increasing complexity):
  ///
  /// - Run ``UA_Server_runUntilInterrupt`` or similar.
  /// - Run ``UA_Server_run_startup`` followed by repeated calls of
  /// ``UA_Server_run_iterate`` during the server lifetime.
  /// - Configure an external EventLoop and run ``UA_Server_run_startup`` to
  /// register sockets and timed callbacks.
  ffi.Pointer<UA_Server> UA_Server_new() {
    return _UA_Server_new();
  }

  late final _UA_Server_newPtr = _lookup<ffi.NativeFunction<ffi.Pointer<UA_Server> Function()>>('UA_Server_new');
  late final _UA_Server_new = _UA_Server_newPtr.asFunction<ffi.Pointer<UA_Server> Function()>();

  ffi.Pointer<UA_Server> UA_Server_newWithConfig(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_Server_newWithConfig(
      config,
    );
  }

  late final _UA_Server_newWithConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Server> Function(ffi.Pointer<UA_ServerConfig>)>>(
          'UA_Server_newWithConfig');
  late final _UA_Server_newWithConfig =
      _UA_Server_newWithConfigPtr.asFunction<ffi.Pointer<UA_Server> Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_Server_delete(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_delete(
      server,
    );
  }

  late final _UA_Server_deletePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>('UA_Server_delete');
  late final _UA_Server_delete = _UA_Server_deletePtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_ServerConfig> UA_Server_getConfig(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getConfig(
      server,
    );
  }

  late final _UA_Server_getConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServerConfig> Function(ffi.Pointer<UA_Server>)>>('UA_Server_getConfig');
  late final _UA_Server_getConfig =
      _UA_Server_getConfigPtr.asFunction<ffi.Pointer<UA_ServerConfig> Function(ffi.Pointer<UA_Server>)>();

  UA_LifecycleState UA_Server_getLifecycleState(
    ffi.Pointer<UA_Server> server,
  ) {
    return UA_LifecycleState.fromValue(_UA_Server_getLifecycleState(
      server,
    ));
  }

  late final _UA_Server_getLifecycleStatePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<UA_Server>)>>('UA_Server_getLifecycleState');
  late final _UA_Server_getLifecycleState =
      _UA_Server_getLifecycleStatePtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Bool> running,
  ) {
    return _UA_Server_run(
      server,
      running,
    );
  }

  late final _UA_Server_runPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_run');
  late final _UA_Server_run =
      _UA_Server_runPtr.asFunction<int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_runUntilInterrupt(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_runUntilInterrupt(
      server,
    );
  }

  late final _UA_Server_runUntilInterruptPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>('UA_Server_runUntilInterrupt');
  late final _UA_Server_runUntilInterrupt =
      _UA_Server_runUntilInterruptPtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run_startup(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_startup(
      server,
    );
  }

  late final _UA_Server_run_startupPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>('UA_Server_run_startup');
  late final _UA_Server_run_startup = _UA_Server_run_startupPtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run_iterate(
    ffi.Pointer<UA_Server> server,
    bool waitInternal,
  ) {
    return _UA_Server_run_iterate(
      server,
      waitInternal,
    );
  }

  late final _UA_Server_run_iteratePtr =
      _lookup<ffi.NativeFunction<UA_UInt16 Function(ffi.Pointer<UA_Server>, ffi.Bool)>>('UA_Server_run_iterate');
  late final _UA_Server_run_iterate =
      _UA_Server_run_iteratePtr.asFunction<int Function(ffi.Pointer<UA_Server>, bool)>();

  int UA_Server_run_shutdown(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_shutdown(
      server,
    );
  }

  late final _UA_Server_run_shutdownPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>('UA_Server_run_shutdown');
  late final _UA_Server_run_shutdown = _UA_Server_run_shutdownPtr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  /// Session Handling
  /// ----------------
  /// A new session is announced via the AccessControl plugin. The session
  /// identifier is forwarded to the relevant callbacks back into userland. The
  /// following methods enable an interaction with a particular session.
  int UA_Server_closeSession(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
  ) {
    return _UA_Server_closeSession(
      server,
      sessionId,
    );
  }

  late final _UA_Server_closeSessionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>>(
          'UA_Server_closeSession');
  late final _UA_Server_closeSession =
      _UA_Server_closeSessionPtr.asFunction<int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  /// Session attributes: Besides the user-definable session context pointer (set
  /// by the AccessControl plugin when the Session is created), a session carries
  /// attributes in a key-value list. Some attributes are present in every session
  /// and shown in the list below. Additional attributes can be manually set as
  /// meta-data.
  ///
  /// Always present as session attributes are:
  ///
  /// - ``0:localeIds`` (``UA_String``): List of preferred languages (read-only)
  /// - ``0:clientDescription`` (``UA_ApplicationDescription``): Client description (read-only)
  /// - ``0:sessionName`` (``String``): Client-defined name of the session (read-only)
  /// - ``0:clientUserId`` (``String``): User identifier used to activate the session (read-only)
  int UA_Server_getSessionAttribute(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Server_getSessionAttribute(
      server,
      sessionId,
      key,
      outValue,
    );
  }

  late final _UA_Server_getSessionAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionAttribute');
  late final _UA_Server_getSessionAttribute = _UA_Server_getSessionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionAttributeCopy(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Server_getSessionAttributeCopy(
      server,
      sessionId,
      key,
      outValue,
    );
  }

  late final _UA_Server_getSessionAttributeCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionAttributeCopy');
  late final _UA_Server_getSessionAttributeCopy = _UA_Server_getSessionAttributeCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionAttribute_scalar(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    UA_QualifiedName key,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Void> outValue,
  ) {
    return _UA_Server_getSessionAttribute_scalar(
      server,
      sessionId,
      key,
      type,
      outValue,
    );
  }

  late final _UA_Server_getSessionAttribute_scalarPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName,
              ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>)>>('UA_Server_getSessionAttribute_scalar');
  late final _UA_Server_getSessionAttribute_scalar = _UA_Server_getSessionAttribute_scalarPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName, ffi.Pointer<UA_DataType>,
          ffi.Pointer<ffi.Void>)>();

  int UA_Server_setSessionAttribute(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    UA_QualifiedName key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_Server_setSessionAttribute(
      server,
      sessionId,
      key,
      value,
    );
  }

  late final _UA_Server_setSessionAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_setSessionAttribute');
  late final _UA_Server_setSessionAttribute = _UA_Server_setSessionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Server_deleteSessionAttribute(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    UA_QualifiedName key,
  ) {
    return _UA_Server_deleteSessionAttribute(
      server,
      sessionId,
      key,
    );
  }

  late final _UA_Server_deleteSessionAttributePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName)>>(
      'UA_Server_deleteSessionAttribute');
  late final _UA_Server_deleteSessionAttribute = _UA_Server_deleteSessionAttributePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, UA_QualifiedName)>();

  UA_DataValue UA_Server_read(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReadValueId> item,
    UA_TimestampsToReturn timestamps,
  ) {
    return _UA_Server_read(
      server,
      item,
      timestamps.value,
    );
  }

  late final _UA_Server_readPtr = _lookup<
          ffi
          .NativeFunction<UA_DataValue Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReadValueId>, ffi.UnsignedInt)>>(
      'UA_Server_read');
  late final _UA_Server_read =
      _UA_Server_readPtr.asFunction<UA_DataValue Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReadValueId>, int)>();

  DartUA_StatusCode __UA_Server_read(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_AttributeId attributeId,
    ffi.Pointer<ffi.Void> v,
  ) {
    return ___UA_Server_read(
      server,
      nodeId,
      attributeId.value,
      v,
    );
  }

  late final ___UA_Server_readPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('__UA_Server_read');
  late final ___UA_Server_read = ___UA_Server_readPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, int, ffi.Pointer<ffi.Void>)>();

  int UA_Server_readNodeId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_readNodeId(
      server,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Server_readNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Server_readNodeId');
  late final _UA_Server_readNodeId =
      _UA_Server_readNodeIdPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readNodeClass(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.UnsignedInt> outNodeClass,
  ) {
    return _UA_Server_readNodeClass(
      server,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Server_readNodeClassPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>>(
      'UA_Server_readNodeClass');
  late final _UA_Server_readNodeClass = _UA_Server_readNodeClassPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.UnsignedInt>)>();

  int UA_Server_readBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Server_readBrowseName(
      server,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Server_readBrowseNamePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Server_readBrowseName');
  late final _UA_Server_readBrowseName = _UA_Server_readBrowseNamePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_readDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Server_readDisplayName(
      server,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Server_readDisplayNamePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Server_readDisplayName');
  late final _UA_Server_readDisplayName = _UA_Server_readDisplayNamePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Server_readDescription(
      server,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Server_readDescriptionPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Server_readDescription');
  late final _UA_Server_readDescription = _UA_Server_readDescriptionPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Server_readWriteMask(
      server,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Server_readWriteMaskPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Server_readWriteMask');
  late final _UA_Server_readWriteMask =
      _UA_Server_readWriteMaskPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Server_readIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Server_readIsAbstract(
      server,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Server_readIsAbstractPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_readIsAbstract');
  late final _UA_Server_readIsAbstract =
      _UA_Server_readIsAbstractPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readSymmetric(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Server_readSymmetric(
      server,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Server_readSymmetricPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_readSymmetric');
  late final _UA_Server_readSymmetric =
      _UA_Server_readSymmetricPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Server_readInverseName(
      server,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Server_readInverseNamePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Server_readInverseName');
  late final _UA_Server_readInverseName = _UA_Server_readInverseNamePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readContainsNoLoops(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Server_readContainsNoLoops(
      server,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Server_readContainsNoLoopsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_readContainsNoLoops');
  late final _UA_Server_readContainsNoLoops = _UA_Server_readContainsNoLoopsPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Server_readEventNotifier(
      server,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Server_readEventNotifierPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Server_readEventNotifier');
  late final _UA_Server_readEventNotifier = _UA_Server_readEventNotifierPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Server_readValue(
      server,
      nodeId,
      outValue,
    );
  }

  late final _UA_Server_readValuePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>>(
          'UA_Server_readValue');
  late final _UA_Server_readValue =
      _UA_Server_readValuePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Server_readDataType(
      server,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Server_readDataTypePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Server_readDataType');
  late final _UA_Server_readDataType =
      _UA_Server_readDataTypePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Server_readValueRank(
      server,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Server_readValueRankPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Int32>)>>(
          'UA_Server_readValueRank');
  late final _UA_Server_readValueRank =
      _UA_Server_readValueRankPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Server_readArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outArrayDimensions,
  ) {
    return _UA_Server_readArrayDimensions(
      server,
      nodeId,
      outArrayDimensions,
    );
  }

  late final _UA_Server_readArrayDimensionsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>>(
          'UA_Server_readArrayDimensions');
  late final _UA_Server_readArrayDimensions = _UA_Server_readArrayDimensionsPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Server_readAccessLevel(
      server,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Server_readAccessLevelPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
          'UA_Server_readAccessLevel');
  late final _UA_Server_readAccessLevel =
      _UA_Server_readAccessLevelPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readAccessLevelEx(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outAccessLevelEx,
  ) {
    return _UA_Server_readAccessLevelEx(
      server,
      nodeId,
      outAccessLevelEx,
    );
  }

  late final _UA_Server_readAccessLevelExPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
          'UA_Server_readAccessLevelEx');
  late final _UA_Server_readAccessLevelEx = _UA_Server_readAccessLevelExPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Server_readMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinimumSamplingInterval,
  ) {
    return _UA_Server_readMinimumSamplingInterval(
      server,
      nodeId,
      outMinimumSamplingInterval,
    );
  }

  late final _UA_Server_readMinimumSamplingIntervalPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
          'UA_Server_readMinimumSamplingInterval');
  late final _UA_Server_readMinimumSamplingInterval = _UA_Server_readMinimumSamplingIntervalPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Server_readHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Server_readHistorizing(
      server,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Server_readHistorizingPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_readHistorizing');
  late final _UA_Server_readHistorizing = _UA_Server_readHistorizingPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Server_readExecutable(
      server,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Server_readExecutablePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
          'UA_Server_readExecutable');
  late final _UA_Server_readExecutable =
      _UA_Server_readExecutablePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_write(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriteValue> value,
  ) {
    return _UA_Server_write(
      server,
      value,
    );
  }

  late final _UA_Server_writePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriteValue>)>>(
          'UA_Server_write');
  late final _UA_Server_write =
      _UA_Server_writePtr.asFunction<int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriteValue>)>();

  DartUA_StatusCode __UA_Server_write(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_AttributeId attributeId,
    ffi.Pointer<UA_DataType> attr_type,
    ffi.Pointer<ffi.Void> attr,
  ) {
    return ___UA_Server_write(
      server,
      nodeId,
      attributeId.value,
      attr_type,
      attr,
    );
  }

  late final ___UA_Server_writePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, ffi.UnsignedInt,
              ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>)>>('__UA_Server_write');
  late final ___UA_Server_write = ___UA_Server_writePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, int, ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>)>();

  int UA_Server_writeBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_QualifiedName browseName,
  ) {
    return _UA_Server_writeBrowseName(
      server,
      nodeId,
      browseName,
    );
  }

  late final _UA_Server_writeBrowseNamePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName)>>(
          'UA_Server_writeBrowseName');
  late final _UA_Server_writeBrowseName =
      _UA_Server_writeBrowseNamePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName)>();

  int UA_Server_writeDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText displayName,
  ) {
    return _UA_Server_writeDisplayName(
      server,
      nodeId,
      displayName,
    );
  }

  late final _UA_Server_writeDisplayNamePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>>(
          'UA_Server_writeDisplayName');
  late final _UA_Server_writeDisplayName =
      _UA_Server_writeDisplayNamePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText description,
  ) {
    return _UA_Server_writeDescription(
      server,
      nodeId,
      description,
    );
  }

  late final _UA_Server_writeDescriptionPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>>(
          'UA_Server_writeDescription');
  late final _UA_Server_writeDescription =
      _UA_Server_writeDescriptionPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int writeMask,
  ) {
    return _UA_Server_writeWriteMask(
      server,
      nodeId,
      writeMask,
    );
  }

  late final _UA_Server_writeWriteMaskPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_UInt32)>>(
          'UA_Server_writeWriteMask');
  late final _UA_Server_writeWriteMask =
      _UA_Server_writeWriteMaskPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool isAbstract,
  ) {
    return _UA_Server_writeIsAbstract(
      server,
      nodeId,
      isAbstract,
    );
  }

  late final _UA_Server_writeIsAbstractPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Bool)>>(
          'UA_Server_writeIsAbstract');
  late final _UA_Server_writeIsAbstract =
      _UA_Server_writeIsAbstractPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText inverseName,
  ) {
    return _UA_Server_writeInverseName(
      server,
      nodeId,
      inverseName,
    );
  }

  late final _UA_Server_writeInverseNamePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>>(
          'UA_Server_writeInverseName');
  late final _UA_Server_writeInverseName =
      _UA_Server_writeInverseNamePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int eventNotifier,
  ) {
    return _UA_Server_writeEventNotifier(
      server,
      nodeId,
      eventNotifier,
    );
  }

  late final _UA_Server_writeEventNotifierPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Byte)>>(
          'UA_Server_writeEventNotifier');
  late final _UA_Server_writeEventNotifier =
      _UA_Server_writeEventNotifierPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant value,
  ) {
    return _UA_Server_writeValue(
      server,
      nodeId,
      value,
    );
  }

  late final _UA_Server_writeValuePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>>(
          'UA_Server_writeValue');
  late final _UA_Server_writeValue =
      _UA_Server_writeValuePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeDataValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_DataValue value,
  ) {
    return _UA_Server_writeDataValue(
      server,
      nodeId,
      value,
    );
  }

  late final _UA_Server_writeDataValuePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataValue)>>(
          'UA_Server_writeDataValue');
  late final _UA_Server_writeDataValue =
      _UA_Server_writeDataValuePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataValue)>();

  int UA_Server_writeDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeId dataType,
  ) {
    return _UA_Server_writeDataType(
      server,
      nodeId,
      dataType,
    );
  }

  late final _UA_Server_writeDataTypePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId)>>(
          'UA_Server_writeDataType');
  late final _UA_Server_writeDataType =
      _UA_Server_writeDataTypePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId)>();

  int UA_Server_writeValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int valueRank,
  ) {
    return _UA_Server_writeValueRank(
      server,
      nodeId,
      valueRank,
    );
  }

  late final _UA_Server_writeValueRankPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Int32)>>(
          'UA_Server_writeValueRank');
  late final _UA_Server_writeValueRank =
      _UA_Server_writeValueRankPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant arrayDimensions,
  ) {
    return _UA_Server_writeArrayDimensions(
      server,
      nodeId,
      arrayDimensions,
    );
  }

  late final _UA_Server_writeArrayDimensionsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>>(
          'UA_Server_writeArrayDimensions');
  late final _UA_Server_writeArrayDimensions =
      _UA_Server_writeArrayDimensionsPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int accessLevel,
  ) {
    return _UA_Server_writeAccessLevel(
      server,
      nodeId,
      accessLevel,
    );
  }

  late final _UA_Server_writeAccessLevelPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Byte)>>(
          'UA_Server_writeAccessLevel');
  late final _UA_Server_writeAccessLevel =
      _UA_Server_writeAccessLevelPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeAccessLevelEx(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int accessLevelEx,
  ) {
    return _UA_Server_writeAccessLevelEx(
      server,
      nodeId,
      accessLevelEx,
    );
  }

  late final _UA_Server_writeAccessLevelExPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_UInt32)>>(
          'UA_Server_writeAccessLevelEx');
  late final _UA_Server_writeAccessLevelEx =
      _UA_Server_writeAccessLevelExPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    double miniumSamplingInterval,
  ) {
    return _UA_Server_writeMinimumSamplingInterval(
      server,
      nodeId,
      miniumSamplingInterval,
    );
  }

  late final _UA_Server_writeMinimumSamplingIntervalPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Double)>>(
          'UA_Server_writeMinimumSamplingInterval');
  late final _UA_Server_writeMinimumSamplingInterval =
      _UA_Server_writeMinimumSamplingIntervalPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, double)>();

  int UA_Server_writeHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool historizing,
  ) {
    return _UA_Server_writeHistorizing(
      server,
      nodeId,
      historizing,
    );
  }

  late final _UA_Server_writeHistorizingPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Bool)>>(
          'UA_Server_writeHistorizing');
  late final _UA_Server_writeHistorizing =
      _UA_Server_writeHistorizingPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool executable,
  ) {
    return _UA_Server_writeExecutable(
      server,
      nodeId,
      executable,
    );
  }

  late final _UA_Server_writeExecutablePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Bool)>>(
          'UA_Server_writeExecutable');
  late final _UA_Server_writeExecutable =
      _UA_Server_writeExecutablePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  /// Browsing
  /// --------
  UA_BrowseResult UA_Server_browse(
    ffi.Pointer<UA_Server> server,
    int maxReferences,
    ffi.Pointer<UA_BrowseDescription> bd,
  ) {
    return _UA_Server_browse(
      server,
      maxReferences,
      bd,
    );
  }

  late final _UA_Server_browsePtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(
              ffi.Pointer<UA_Server>, UA_UInt32, ffi.Pointer<UA_BrowseDescription>)>>('UA_Server_browse');
  late final _UA_Server_browse = _UA_Server_browsePtr.asFunction<
      UA_BrowseResult Function(ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_BrowseDescription>)>();

  UA_BrowseResult UA_Server_browseNext(
    ffi.Pointer<UA_Server> server,
    bool releaseContinuationPoint,
    ffi.Pointer<UA_ByteString> continuationPoint,
  ) {
    return _UA_Server_browseNext(
      server,
      releaseContinuationPoint,
      continuationPoint,
    );
  }

  late final _UA_Server_browseNextPtr = _lookup<
          ffi.NativeFunction<UA_BrowseResult Function(ffi.Pointer<UA_Server>, ffi.Bool, ffi.Pointer<UA_ByteString>)>>(
      'UA_Server_browseNext');
  late final _UA_Server_browseNext = _UA_Server_browseNextPtr.asFunction<
      UA_BrowseResult Function(ffi.Pointer<UA_Server>, bool, ffi.Pointer<UA_ByteString>)>();

  int UA_Server_browseRecursive(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowseDescription> bd,
    ffi.Pointer<ffi.Size> resultsSize,
    ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>> results,
  ) {
    return _UA_Server_browseRecursive(
      server,
      bd,
      resultsSize,
      results,
    );
  }

  late final _UA_Server_browseRecursivePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>>('UA_Server_browseRecursive');
  late final _UA_Server_browseRecursive = _UA_Server_browseRecursivePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowseDescription>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>();

  UA_BrowsePathResult UA_Server_translateBrowsePathToNodeIds(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowsePath> browsePath,
  ) {
    return _UA_Server_translateBrowsePathToNodeIds(
      server,
      browsePath,
    );
  }

  late final _UA_Server_translateBrowsePathToNodeIdsPtr =
      _lookup<ffi.NativeFunction<UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>>(
          'UA_Server_translateBrowsePathToNodeIds');
  late final _UA_Server_translateBrowsePathToNodeIds = _UA_Server_translateBrowsePathToNodeIdsPtr.asFunction<
      UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>();

  UA_BrowsePathResult UA_Server_browseSimplifiedBrowsePath(
    ffi.Pointer<UA_Server> server,
    UA_NodeId origin,
    int browsePathSize,
    ffi.Pointer<UA_QualifiedName> browsePath,
  ) {
    return _UA_Server_browseSimplifiedBrowsePath(
      server,
      origin,
      browsePathSize,
      browsePath,
    );
  }

  late final _UA_Server_browseSimplifiedBrowsePathPtr = _lookup<
      ffi.NativeFunction<
          UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Size,
              ffi.Pointer<UA_QualifiedName>)>>('UA_Server_browseSimplifiedBrowsePath');
  late final _UA_Server_browseSimplifiedBrowsePath = _UA_Server_browseSimplifiedBrowsePathPtr.asFunction<
      UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId, int, ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_forEachChildNodeCall(
    ffi.Pointer<UA_Server> server,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Server_forEachChildNodeCall(
      server,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Server_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Server_forEachChildNodeCall');
  late final _UA_Server_forEachChildNodeCall = _UA_Server_forEachChildNodeCallPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  /// Discovery
  /// ---------
  ///
  /// Registering at a Discovery Server
  /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  int UA_Server_registerDiscovery(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ClientConfig> cc,
    UA_String discoveryServerUrl,
    UA_String semaphoreFilePath,
  ) {
    return _UA_Server_registerDiscovery(
      server,
      cc,
      discoveryServerUrl,
      semaphoreFilePath,
    );
  }

  late final _UA_Server_registerDiscoveryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ClientConfig>, UA_String,
              UA_String)>>('UA_Server_registerDiscovery');
  late final _UA_Server_registerDiscovery = _UA_Server_registerDiscoveryPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ClientConfig>, UA_String, UA_String)>();

  int UA_Server_deregisterDiscovery(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ClientConfig> cc,
    UA_String discoveryServerUrl,
  ) {
    return _UA_Server_deregisterDiscovery(
      server,
      cc,
      discoveryServerUrl,
    );
  }

  late final _UA_Server_deregisterDiscoveryPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ClientConfig>, UA_String)>>(
      'UA_Server_deregisterDiscovery');
  late final _UA_Server_deregisterDiscovery = _UA_Server_deregisterDiscoveryPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ClientConfig>, UA_String)>();

  void UA_Server_setRegisterServerCallback(
    ffi.Pointer<UA_Server> server,
    UA_Server_registerServerCallback cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _UA_Server_setRegisterServerCallback(
      server,
      cb,
      data,
    );
  }

  late final _UA_Server_setRegisterServerCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>, UA_Server_registerServerCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setRegisterServerCallback');
  late final _UA_Server_setRegisterServerCallback = _UA_Server_setRegisterServerCallbackPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, UA_Server_registerServerCallback, ffi.Pointer<ffi.Void>)>();

  /// Information Model Callbacks
  /// ---------------------------
  /// There are three places where a callback from an information model to
  /// user-defined code can happen.
  ///
  /// - Custom node constructors and destructors
  /// - Linking VariableNodes with an external data source
  /// - MethodNode callbacks
  void UA_Server_setAdminSessionContext(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_Server_setAdminSessionContext(
      server,
      context,
    );
  }

  late final _UA_Server_setAdminSessionContextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Void>)>>(
          'UA_Server_setAdminSessionContext');
  late final _UA_Server_setAdminSessionContext =
      _UA_Server_setAdminSessionContextPtr.asFunction<void Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Void>)>();

  int UA_Server_setNodeTypeLifecycle(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeTypeLifecycle lifecycle,
  ) {
    return _UA_Server_setNodeTypeLifecycle(
      server,
      nodeId,
      lifecycle,
    );
  }

  late final _UA_Server_setNodeTypeLifecyclePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeTypeLifecycle)>>(
          'UA_Server_setNodeTypeLifecycle');
  late final _UA_Server_setNodeTypeLifecycle = _UA_Server_setNodeTypeLifecyclePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeTypeLifecycle)>();

  int UA_Server_getNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext,
  ) {
    return _UA_Server_getNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_getNodeContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('UA_Server_getNodeContext');
  late final _UA_Server_getNodeContext = _UA_Server_getNodeContextPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int UA_Server_setNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
  ) {
    return _UA_Server_setNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_setNodeContextPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Void>)>>(
          'UA_Server_setNodeContext');
  late final _UA_Server_setNodeContext =
      _UA_Server_setNodeContextPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Void>)>();

  /// .. _datasource:
  ///
  /// Data Source Callback
  /// ~~~~~~~~~~~~~~~~~~~~
  /// The server has a unique way of dealing with the content of variables. Instead
  /// of storing a variant attached to the variable node, the node can point to a
  /// function with a local data provider. Whenever the value attribute is read,
  /// the function will be called and asked to provide a UA_DataValue return value
  /// that contains the value content and additional timestamps.
  ///
  /// It is expected that the read callback is implemented. The write callback can
  /// be set to a null-pointer.
  int UA_Server_setVariableNode_dataSource(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_DataSource dataSource,
  ) {
    return _UA_Server_setVariableNode_dataSource(
      server,
      nodeId,
      dataSource,
    );
  }

  late final _UA_Server_setVariableNode_dataSourcePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataSource)>>(
          'UA_Server_setVariableNode_dataSource');
  late final _UA_Server_setVariableNode_dataSource = _UA_Server_setVariableNode_dataSourcePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataSource)>();

  int UA_Server_setVariableNode_valueCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_ValueCallback callback,
  ) {
    return _UA_Server_setVariableNode_valueCallback(
      server,
      nodeId,
      callback,
    );
  }

  late final _UA_Server_setVariableNode_valueCallbackPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueCallback)>>(
          'UA_Server_setVariableNode_valueCallback');
  late final _UA_Server_setVariableNode_valueCallback = _UA_Server_setVariableNode_valueCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueCallback)>();

  int UA_Server_setVariableNode_valueBackend(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_ValueBackend valueBackend,
  ) {
    return _UA_Server_setVariableNode_valueBackend(
      server,
      nodeId,
      valueBackend,
    );
  }

  late final _UA_Server_setVariableNode_valueBackendPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueBackend)>>(
          'UA_Server_setVariableNode_valueBackend');
  late final _UA_Server_setVariableNode_valueBackend = _UA_Server_setVariableNode_valueBackendPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueBackend)>();

  int UA_Server_deleteMonitoredItem(
    ffi.Pointer<UA_Server> server,
    int monitoredItemId,
  ) {
    return _UA_Server_deleteMonitoredItem(
      server,
      monitoredItemId,
    );
  }

  late final _UA_Server_deleteMonitoredItemPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_UInt32)>>(
          'UA_Server_deleteMonitoredItem');
  late final _UA_Server_deleteMonitoredItem =
      _UA_Server_deleteMonitoredItemPtr.asFunction<int Function(ffi.Pointer<UA_Server>, int)>();

  UA_MonitoredItemCreateResult UA_Server_createDataChangeMonitoredItem(
    ffi.Pointer<UA_Server> server,
    UA_TimestampsToReturn timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    UA_Server_DataChangeNotificationCallback callback,
  ) {
    return _UA_Server_createDataChangeMonitoredItem(
      server,
      timestampsToReturn.value,
      item,
      monitoredItemContext,
      callback,
    );
  }

  late final _UA_Server_createDataChangeMonitoredItemPtr = _lookup<
      ffi.NativeFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Server>,
              ffi.UnsignedInt,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Server_DataChangeNotificationCallback)>>('UA_Server_createDataChangeMonitoredItem');
  late final _UA_Server_createDataChangeMonitoredItem = _UA_Server_createDataChangeMonitoredItemPtr.asFunction<
      UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Server>, int, UA_MonitoredItemCreateRequest,
          ffi.Pointer<ffi.Void>, UA_Server_DataChangeNotificationCallback)>();

  UA_MonitoredItemCreateResult UA_Server_createEventMonitoredItem(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_EventFilter filter,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    UA_Server_EventNotificationCallback callback,
  ) {
    return _UA_Server_createEventMonitoredItem(
      server,
      nodeId,
      filter,
      monitoredItemContext,
      callback,
    );
  }

  late final _UA_Server_createEventMonitoredItemPtr = _lookup<
      ffi.NativeFunction<
          UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_EventFilter,
              ffi.Pointer<ffi.Void>, UA_Server_EventNotificationCallback)>>('UA_Server_createEventMonitoredItem');
  late final _UA_Server_createEventMonitoredItem = _UA_Server_createEventMonitoredItemPtr.asFunction<
      UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_EventFilter, ffi.Pointer<ffi.Void>,
          UA_Server_EventNotificationCallback)>();

  UA_MonitoredItemCreateResult UA_Server_createEventMonitoredItemEx(
    ffi.Pointer<UA_Server> server,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    UA_Server_EventNotificationCallback callback,
  ) {
    return _UA_Server_createEventMonitoredItemEx(
      server,
      item,
      monitoredItemContext,
      callback,
    );
  }

  late final _UA_Server_createEventMonitoredItemExPtr = _lookup<
      ffi.NativeFunction<
          UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Server>, UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>, UA_Server_EventNotificationCallback)>>('UA_Server_createEventMonitoredItemEx');
  late final _UA_Server_createEventMonitoredItemEx = _UA_Server_createEventMonitoredItemExPtr.asFunction<
      UA_MonitoredItemCreateResult Function(ffi.Pointer<UA_Server>, UA_MonitoredItemCreateRequest,
          ffi.Pointer<ffi.Void>, UA_Server_EventNotificationCallback)>();

  int UA_Server_setMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    UA_MethodCallback methodCallback,
  ) {
    return _UA_Server_setMethodNodeCallback(
      server,
      methodNodeId,
      methodCallback,
    );
  }

  late final _UA_Server_setMethodNodeCallbackPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback)>>(
          'UA_Server_setMethodNodeCallback');
  late final _UA_Server_setMethodNodeCallback = _UA_Server_setMethodNodeCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback)>();

  int UA_Server_getMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    ffi.Pointer<UA_MethodCallback> outMethodCallback,
  ) {
    return _UA_Server_getMethodNodeCallback(
      server,
      methodNodeId,
      outMethodCallback,
    );
  }

  late final _UA_Server_getMethodNodeCallbackPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_MethodCallback>)>>(
      'UA_Server_getMethodNodeCallback');
  late final _UA_Server_getMethodNodeCallback = _UA_Server_getMethodNodeCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_MethodCallback>)>();

  UA_CallMethodResult UA_Server_call(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_CallMethodRequest> request,
  ) {
    return _UA_Server_call(
      server,
      request,
    );
  }

  late final _UA_Server_callPtr = _lookup<
          ffi.NativeFunction<UA_CallMethodResult Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_Server_call');
  late final _UA_Server_call = _UA_Server_callPtr.asFunction<
      UA_CallMethodResult Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_CallMethodRequest>)>();

  /// .. _addnodes:
  ///
  /// Node Management
  /// ---------------
  /// When creating dynamic node instances at runtime, chances are that you will
  /// not care about the specific NodeId of the new node, as long as you can
  /// reference it later. When passing numeric NodeIds with a numeric identifier 0,
  /// the stack evaluates this as "select a random unassigned numeric NodeId in
  /// that namespace". To find out which NodeId was actually assigned to the new
  /// node, you may pass a pointer `outNewNodeId`, which will (after a successful
  /// node insertion) contain the nodeId of the new node. You may also pass a
  /// ``NULL`` pointer if this result is not needed.
  ///
  /// See the Section :ref:`node-lifecycle` on constructors and on attaching
  /// user-defined data to nodes.
  ///
  /// The Section :ref:`default-node-attributes` contains useful starting points
  /// for defining node attributes. Forgetting to set the ValueRank or the
  /// AccessLevel leads to errors that can be hard to track down for new users. The
  /// default attributes have a high likelihood to "do the right thing".
  ///
  /// The methods for node addition and deletion take mostly const arguments that
  /// are not modified. When creating a node, a deep copy of the node identifier,
  /// node attributes, etc. is created. Therefore, it is possible to call for
  /// example ``UA_Server_addVariablenode`` with a value attribute (a
  /// :ref:`variant`) pointing to a memory location on the stack. If you need
  /// changes to a variable value to manifest at a specific memory location, please
  /// use a :ref:`datasource` or a :ref:`value-callback`.
  DartUA_StatusCode __UA_Server_addNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeClass nodeClass,
    ffi.Pointer<UA_NodeId> requestedNewNodeId,
    ffi.Pointer<UA_NodeId> parentNodeId,
    ffi.Pointer<UA_NodeId> referenceTypeId,
    UA_QualifiedName browseName,
    ffi.Pointer<UA_NodeId> typeDefinition,
    ffi.Pointer<UA_NodeAttributes> attr,
    ffi.Pointer<UA_DataType> attributeType,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return ___UA_Server_addNode(
      server,
      nodeClass.value,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      attributeType,
      nodeContext,
      outNewNodeId,
    );
  }

  late final ___UA_Server_addNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.UnsignedInt,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>,
              UA_QualifiedName,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeAttributes>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('__UA_Server_addNode');
  late final ___UA_Server_addNode = ___UA_Server_addNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          int,
          ffi.Pointer<UA_NodeId>,
          ffi.Pointer<UA_NodeId>,
          ffi.Pointer<UA_NodeId>,
          UA_QualifiedName,
          ffi.Pointer<UA_NodeId>,
          ffi.Pointer<UA_NodeAttributes>,
          ffi.Pointer<UA_DataType>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
              UA_VariableAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableNode');
  late final _UA_Server_addVariableNode = _UA_Server_addVariableNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_VariableAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addVariableTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableTypeNode');
  late final _UA_Server_addVariableTypeNode = _UA_Server_addVariableTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_VariableTypeAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
              UA_ObjectAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectNode');
  late final _UA_Server_addObjectNode = _UA_Server_addObjectNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_ObjectAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_ObjectTypeAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectTypeNode');
  late final _UA_Server_addObjectTypeNode = _UA_Server_addObjectTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ObjectTypeAttributes,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addViewNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addViewNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_ViewAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>>('UA_Server_addViewNode');
  late final _UA_Server_addViewNode = _UA_Server_addViewNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_ViewAttributes,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addReferenceTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addReferenceTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReferenceTypeNode');
  late final _UA_Server_addReferenceTypeNode = _UA_Server_addReferenceTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
          UA_ReferenceTypeAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName,
              UA_DataTypeAttributes, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataTypeNode');
  late final _UA_Server_addDataTypeNode = _UA_Server_addDataTypeNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_DataTypeAttributes,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataSourceVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    UA_DataSource dataSource,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataSourceVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      dataSource,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataSourceVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              UA_DataSource,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSourceVariableNode');
  late final _UA_Server_addDataSourceVariableNode = _UA_Server_addDataSourceVariableNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          UA_VariableAttributes, UA_DataSource, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_setVariableNodeDynamic(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool isDynamic,
  ) {
    return _UA_Server_setVariableNodeDynamic(
      server,
      nodeId,
      isDynamic,
    );
  }

  late final _UA_Server_setVariableNodeDynamicPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Bool)>>(
          'UA_Server_setVariableNodeDynamic');
  late final _UA_Server_setVariableNodeDynamic =
      _UA_Server_setVariableNodeDynamicPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_addMethodNodeEx(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    UA_NodeId inputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> inputArgumentsOutNewNodeId,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    UA_NodeId outputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> outputArgumentsOutNewNodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNodeEx(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      inputArgumentsRequestedNewNodeId,
      inputArgumentsOutNewNodeId,
      outputArgumentsSize,
      outputArguments,
      outputArgumentsRequestedNewNodeId,
      outputArgumentsOutNewNodeId,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodeExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNodeEx');
  late final _UA_Server_addMethodNodeEx = _UA_Server_addMethodNodeExPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_MethodAttributes,
          UA_MethodCallback,
          int,
          ffi.Pointer<UA_Argument>,
          UA_NodeId,
          ffi.Pointer<UA_NodeId>,
          int,
          ffi.Pointer<UA_Argument>,
          UA_NodeId,
          ffi.Pointer<UA_NodeId>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addMethodNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNode');
  late final _UA_Server_addMethodNode = _UA_Server_addMethodNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_MethodAttributes,
          UA_MethodCallback,
          int,
          ffi.Pointer<UA_Argument>,
          int,
          ffi.Pointer<UA_Argument>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  /// The method pair UA_Server_addNode_begin and _finish splits the AddNodes
  /// service in two parts. This is useful if the node shall be modified before
  /// finish the instantiation. For example to add children with specific NodeIds.
  /// Otherwise, mandatory children (e.g. of an ObjectType) are added with
  /// pseudo-random unique NodeIds. Existing children are detected during the
  /// _finish part via their matching BrowseName.
  ///
  /// The _begin method:
  /// - prepares the node and adds it to the nodestore
  /// - copies some unassigned attributes from the TypeDefinition node internally
  /// - adds the references to the parent (and the TypeDefinition if applicable)
  /// - performs type-checking of variables.
  ///
  /// You can add an object node without a parent if you set the parentNodeId and
  /// referenceTypeId to UA_NODE_ID_NULL. Then you need to add the parent reference
  /// and hasTypeDef reference yourself before calling the _finish method.
  /// Not that this is only allowed for object nodes.
  ///
  /// The _finish method:
  /// - copies mandatory children
  /// - calls the node constructor(s) at the end
  /// - may remove the node if it encounters an error.
  ///
  /// The special UA_Server_addMethodNode_finish method needs to be used for method
  /// nodes, since there you need to explicitly specifiy the input and output
  /// arguments which are added in the finish step (if not yet already there)
  DartUA_StatusCode UA_Server_addNode_begin(
    ffi.Pointer<UA_Server> server,
    UA_NodeClass nodeClass,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    ffi.Pointer<ffi.Void> attr,
    ffi.Pointer<UA_DataType> attributeType,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addNode_begin(
      server,
      nodeClass.value,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      attributeType,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addNode_beginPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.UnsignedInt,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addNode_begin');
  late final _UA_Server_addNode_begin = _UA_Server_addNode_beginPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, int, UA_NodeId, UA_NodeId, UA_NodeId, UA_QualifiedName, UA_NodeId,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
  ) {
    return _UA_Server_addNode_finish(
      server,
      nodeId,
    );
  }

  late final _UA_Server_addNode_finishPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId)>>(
          'UA_Server_addNode_finish');
  late final _UA_Server_addNode_finish =
      _UA_Server_addNode_finishPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_addMethodNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
  ) {
    return _UA_Server_addMethodNode_finish(
      server,
      nodeId,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
    );
  }

  late final _UA_Server_addMethodNode_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback, ffi.Size,
              ffi.Pointer<UA_Argument>, ffi.Size, ffi.Pointer<UA_Argument>)>>('UA_Server_addMethodNode_finish');
  late final _UA_Server_addMethodNode_finish = _UA_Server_addMethodNode_finishPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback, int, ffi.Pointer<UA_Argument>, int,
          ffi.Pointer<UA_Argument>)>();

  int UA_Server_deleteNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool deleteReferences,
  ) {
    return _UA_Server_deleteNode(
      server,
      nodeId,
      deleteReferences,
    );
  }

  late final _UA_Server_deleteNodePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Bool)>>(
          'UA_Server_deleteNode');
  late final _UA_Server_deleteNode =
      _UA_Server_deleteNodePtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_addReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceId,
    UA_NodeId refTypeId,
    UA_ExpandedNodeId targetId,
    bool isForward,
  ) {
    return _UA_Server_addReference(
      server,
      sourceId,
      refTypeId,
      targetId,
      isForward,
    );
  }

  late final _UA_Server_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_ExpandedNodeId, ffi.Bool)>>('UA_Server_addReference');
  late final _UA_Server_addReference = _UA_Server_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_ExpandedNodeId, bool)>();

  int UA_Server_deleteReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Server_deleteReference(
      server,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Server_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Bool, UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Server_deleteReference');
  late final _UA_Server_deleteReference = _UA_Server_deleteReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, bool, UA_ExpandedNodeId, bool)>();

  int UA_Server_createEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventType,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_createEvent(
      server,
      eventType,
      outNodeId,
    );
  }

  late final _UA_Server_createEventPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>>(
          'UA_Server_createEvent');
  late final _UA_Server_createEvent =
      _UA_Server_createEventPtr.asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_triggerEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventNodeId,
    UA_NodeId originId,
    ffi.Pointer<UA_ByteString> outEventId,
    bool deleteEventNode,
  ) {
    return _UA_Server_triggerEvent(
      server,
      eventNodeId,
      originId,
      outEventId,
      deleteEventNode,
    );
  }

  late final _UA_Server_triggerEventPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Pointer<UA_ByteString>,
              ffi.Bool)>>('UA_Server_triggerEvent');
  late final _UA_Server_triggerEvent = _UA_Server_triggerEventPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Pointer<UA_ByteString>, bool)>();

  UA_ServerStatistics UA_Server_getStatistics(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getStatistics(
      server,
    );
  }

  late final _UA_Server_getStatisticsPtr =
      _lookup<ffi.NativeFunction<UA_ServerStatistics Function(ffi.Pointer<UA_Server>)>>('UA_Server_getStatistics');
  late final _UA_Server_getStatistics =
      _UA_Server_getStatisticsPtr.asFunction<UA_ServerStatistics Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_addReverseConnect(
    ffi.Pointer<UA_Server> server,
    UA_String url,
    UA_Server_ReverseConnectStateCallback stateCallback,
    ffi.Pointer<ffi.Void> callbackContext,
    ffi.Pointer<UA_UInt64> handle,
  ) {
    return _UA_Server_addReverseConnect(
      server,
      url,
      stateCallback,
      callbackContext,
      handle,
    );
  }

  late final _UA_Server_addReverseConnectPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_String, UA_Server_ReverseConnectStateCallback,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_UInt64>)>>('UA_Server_addReverseConnect');
  late final _UA_Server_addReverseConnect = _UA_Server_addReverseConnectPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_String, UA_Server_ReverseConnectStateCallback, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt64>)>();

  int UA_Server_removeReverseConnect(
    ffi.Pointer<UA_Server> server,
    int handle,
  ) {
    return _UA_Server_removeReverseConnect(
      server,
      handle,
    );
  }

  late final _UA_Server_removeReverseConnectPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_UInt64)>>(
          'UA_Server_removeReverseConnect');
  late final _UA_Server_removeReverseConnect =
      _UA_Server_removeReverseConnectPtr.asFunction<int Function(ffi.Pointer<UA_Server>, int)>();

  /// Utility Functions
  /// -----------------
  ffi.Pointer<UA_DataType> UA_Server_findDataType(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Server_findDataType(
      server,
      typeId,
    );
  }

  late final _UA_Server_findDataTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>>(
          'UA_Server_findDataType');
  late final _UA_Server_findDataType = _UA_Server_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNamespace(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_Server_addNamespace(
      server,
      name,
    );
  }

  late final _UA_Server_addNamespacePtr =
      _lookup<ffi.NativeFunction<UA_UInt16 Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Char>)>>(
          'UA_Server_addNamespace');
  late final _UA_Server_addNamespace =
      _UA_Server_addNamespacePtr.asFunction<int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Char>)>();

  int UA_Server_getNamespaceByName(
    ffi.Pointer<UA_Server> server,
    UA_String namespaceUri,
    ffi.Pointer<ffi.Size> foundIndex,
  ) {
    return _UA_Server_getNamespaceByName(
      server,
      namespaceUri,
      foundIndex,
    );
  }

  late final _UA_Server_getNamespaceByNamePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_String, ffi.Pointer<ffi.Size>)>>(
          'UA_Server_getNamespaceByName');
  late final _UA_Server_getNamespaceByName = _UA_Server_getNamespaceByNamePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_String, ffi.Pointer<ffi.Size>)>();

  int UA_Server_getNamespaceByIndex(
    ffi.Pointer<UA_Server> server,
    int namespaceIndex,
    ffi.Pointer<UA_String> foundUri,
  ) {
    return _UA_Server_getNamespaceByIndex(
      server,
      namespaceIndex,
      foundUri,
    );
  }

  late final _UA_Server_getNamespaceByIndexPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Size, ffi.Pointer<UA_String>)>>(
          'UA_Server_getNamespaceByIndex');
  late final _UA_Server_getNamespaceByIndex =
      _UA_Server_getNamespaceByIndexPtr.asFunction<int Function(ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_String>)>();

  int UA_Server_writeObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    UA_Variant value,
  ) {
    return _UA_Server_writeObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_writeObjectPropertyPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName, UA_Variant)>>(
      'UA_Server_writeObjectProperty');
  late final _UA_Server_writeObjectProperty = _UA_Server_writeObjectPropertyPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName, UA_Variant)>();

  int UA_Server_writeObjectProperty_scalar(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Server_writeObjectProperty_scalar(
      server,
      objectId,
      propertyName,
      value,
      type,
    );
  }

  late final _UA_Server_writeObjectProperty_scalarPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Server_writeObjectProperty_scalar');
  late final _UA_Server_writeObjectProperty_scalar = _UA_Server_writeObjectProperty_scalarPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Server_readObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_Server_readObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_readObjectPropertyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readObjectProperty');
  late final _UA_Server_readObjectProperty = _UA_Server_readObjectPropertyPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName, ffi.Pointer<UA_Variant>)>();

  int UA_Server_addTimedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addTimedCallback(
      server,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Server_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_ServerCallback, ffi.Pointer<ffi.Void>, UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addTimedCallback');
  late final _UA_Server_addTimedCallback = _UA_Server_addTimedCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_ServerCallback, ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_addRepeatedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addRepeatedCallback(
      server,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Server_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_ServerCallback, ffi.Pointer<ffi.Void>, UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addRepeatedCallback');
  late final _UA_Server_addRepeatedCallback = _UA_Server_addRepeatedCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_ServerCallback, ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Server> server,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Server_changeRepeatedCallbackInterval(
      server,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Server_changeRepeatedCallbackIntervalPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_UInt64, UA_Double)>>(
          'UA_Server_changeRepeatedCallbackInterval');
  late final _UA_Server_changeRepeatedCallbackInterval =
      _UA_Server_changeRepeatedCallbackIntervalPtr.asFunction<int Function(ffi.Pointer<UA_Server>, int, double)>();

  void UA_Server_removeCallback(
    ffi.Pointer<UA_Server> server,
    int callbackId,
  ) {
    return _UA_Server_removeCallback(
      server,
      callbackId,
    );
  }

  late final _UA_Server_removeCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>, UA_UInt64)>>('UA_Server_removeCallback');
  late final _UA_Server_removeCallback =
      _UA_Server_removeCallbackPtr.asFunction<void Function(ffi.Pointer<UA_Server>, int)>();

  /// Update the Server Certificate at Runtime
  /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// If certificateGroupId is null the DefaultApplicationGroup is used.
  int UA_Server_updateCertificate(
    ffi.Pointer<UA_Server> server,
    UA_NodeId certificateGroupId,
    UA_NodeId certificateTypeId,
    UA_ByteString certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_Server_updateCertificate(
      server,
      certificateGroupId,
      certificateTypeId,
      certificate,
      privateKey,
    );
  }

  late final _UA_Server_updateCertificatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_ByteString,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_updateCertificate');
  late final _UA_Server_updateCertificate = _UA_Server_updateCertificatePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, UA_ByteString, ffi.Pointer<UA_ByteString>)>();

  int UA_Server_createSigningRequest(
    ffi.Pointer<UA_Server> server,
    UA_NodeId certificateGroupId,
    UA_NodeId certificateTypeId,
    ffi.Pointer<UA_String> subjectName,
    ffi.Pointer<ffi.Bool> regenerateKey,
    ffi.Pointer<UA_ByteString> nonce,
    ffi.Pointer<UA_ByteString> csr,
  ) {
    return _UA_Server_createSigningRequest(
      server,
      certificateGroupId,
      certificateTypeId,
      subjectName,
      regenerateKey,
      nonce,
      csr,
    );
  }

  late final _UA_Server_createSigningRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              ffi.Pointer<UA_String>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_createSigningRequest');
  late final _UA_Server_createSigningRequest = _UA_Server_createSigningRequestPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, ffi.Pointer<UA_String>, ffi.Pointer<ffi.Bool>,
          ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_Server_addCertificates(
    ffi.Pointer<UA_Server> server,
    UA_NodeId certificateGroupId,
    ffi.Pointer<UA_ByteString> certificates,
    int certificatesSize,
    ffi.Pointer<UA_ByteString> crls,
    int crlsSize,
    bool isTrusted,
    bool appendCertificates,
  ) {
    return _UA_Server_addCertificates(
      server,
      certificateGroupId,
      certificates,
      certificatesSize,
      crls,
      crlsSize,
      isTrusted,
      appendCertificates,
    );
  }

  late final _UA_Server_addCertificatesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ByteString>, ffi.Size,
              ffi.Pointer<UA_ByteString>, ffi.Size, ffi.Bool, ffi.Bool)>>('UA_Server_addCertificates');
  late final _UA_Server_addCertificates = _UA_Server_addCertificatesPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ByteString>, int, ffi.Pointer<UA_ByteString>, int,
          bool, bool)>();

  int UA_Server_removeCertificates(
    ffi.Pointer<UA_Server> server,
    UA_NodeId certificateGroupId,
    ffi.Pointer<UA_ByteString> certificates,
    int certificatesSize,
    bool isTrusted,
  ) {
    return _UA_Server_removeCertificates(
      server,
      certificateGroupId,
      certificates,
      certificatesSize,
      isTrusted,
    );
  }

  late final _UA_Server_removeCertificatesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ByteString>, ffi.Size,
              ffi.Bool)>>('UA_Server_removeCertificates');
  late final _UA_Server_removeCertificates = _UA_Server_removeCertificatesPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_ByteString>, int, bool)>();

  void UA_NetworkMessage_clear(
    ffi.Pointer<UA_NetworkMessage> p,
  ) {
    return _UA_NetworkMessage_clear(
      p,
    );
  }

  late final _UA_NetworkMessage_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkMessage>)>>('UA_NetworkMessage_clear');
  late final _UA_NetworkMessage_clear =
      _UA_NetworkMessage_clearPtr.asFunction<void Function(ffi.Pointer<UA_NetworkMessage>)>();

  /// NetworkMessage Encoding
  /// ~~~~~~~~~~~~~~~~~~~~~~~
  int UA_NetworkMessage_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<UA_ByteString> outBuf,
  ) {
    return _UA_NetworkMessage_encodeBinary(
      src,
      outBuf,
    );
  }

  late final _UA_NetworkMessage_encodeBinaryPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_ByteString>)>>(
          'UA_NetworkMessage_encodeBinary');
  late final _UA_NetworkMessage_encodeBinary = _UA_NetworkMessage_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_ByteString>)>();

  int UA_NetworkMessage_calcSizeBinary(
    ffi.Pointer<UA_NetworkMessage> p,
  ) {
    return _UA_NetworkMessage_calcSizeBinary(
      p,
    );
  }

  late final _UA_NetworkMessage_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_NetworkMessage>)>>(
          'UA_NetworkMessage_calcSizeBinary');
  late final _UA_NetworkMessage_calcSizeBinary =
      _UA_NetworkMessage_calcSizeBinaryPtr.asFunction<int Function(ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessage_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<UA_NetworkMessage> dst,
    ffi.Pointer<UA_DecodeBinaryOptions> options,
  ) {
    return _UA_NetworkMessage_decodeBinary(
      src,
      dst,
      options,
    );
  }

  late final _UA_NetworkMessage_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<UA_DecodeBinaryOptions>)>>('UA_NetworkMessage_decodeBinary');
  late final _UA_NetworkMessage_decodeBinary = _UA_NetworkMessage_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_DecodeBinaryOptions>)>();

  int UA_NetworkMessage_encodeJson(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<UA_ByteString> outBuf,
    ffi.Pointer<UA_EncodeJsonOptions> options,
  ) {
    return _UA_NetworkMessage_encodeJson(
      src,
      outBuf,
      options,
    );
  }

  late final _UA_NetworkMessage_encodeJsonPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_EncodeJsonOptions>)>>('UA_NetworkMessage_encodeJson');
  late final _UA_NetworkMessage_encodeJson = _UA_NetworkMessage_encodeJsonPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_EncodeJsonOptions>)>();

  int UA_NetworkMessage_calcSizeJson(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<UA_EncodeJsonOptions> options,
  ) {
    return _UA_NetworkMessage_calcSizeJson(
      src,
      options,
    );
  }

  late final _UA_NetworkMessage_calcSizeJsonPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_EncodeJsonOptions>)>>(
          'UA_NetworkMessage_calcSizeJson');
  late final _UA_NetworkMessage_calcSizeJson = _UA_NetworkMessage_calcSizeJsonPtr.asFunction<
      int Function(ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_EncodeJsonOptions>)>();

  int UA_NetworkMessage_decodeJson(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<UA_NetworkMessage> dst,
    ffi.Pointer<UA_DecodeJsonOptions> options,
  ) {
    return _UA_NetworkMessage_decodeJson(
      src,
      dst,
      options,
    );
  }

  late final _UA_NetworkMessage_decodeJsonPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<UA_DecodeJsonOptions>)>>('UA_NetworkMessage_decodeJson');
  late final _UA_NetworkMessage_decodeJson = _UA_NetworkMessage_decodeJsonPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_NetworkMessage>, ffi.Pointer<UA_DecodeJsonOptions>)>();

  int UA_AccessControl_default(
    ffi.Pointer<UA_ServerConfig> config,
    bool allowAnonymous,
    ffi.Pointer<UA_String> userTokenPolicyUri,
    int usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
  ) {
    return _UA_AccessControl_default(
      config,
      allowAnonymous,
      userTokenPolicyUri,
      usernamePasswordLoginSize,
      usernamePasswordLogin,
    );
  }

  late final _UA_AccessControl_defaultPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Bool, ffi.Pointer<UA_String>, ffi.Size,
              ffi.Pointer<UA_UsernamePasswordLogin>)>>('UA_AccessControl_default');
  late final _UA_AccessControl_default = _UA_AccessControl_defaultPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ServerConfig>, bool, ffi.Pointer<UA_String>, int, ffi.Pointer<UA_UsernamePasswordLogin>)>();

  int UA_AccessControl_defaultWithLoginCallback(
    ffi.Pointer<UA_ServerConfig> config,
    bool allowAnonymous,
    ffi.Pointer<UA_String> userTokenPolicyUri,
    int usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
    UA_UsernamePasswordLoginCallback loginCallback,
    ffi.Pointer<ffi.Void> loginContext,
  ) {
    return _UA_AccessControl_defaultWithLoginCallback(
      config,
      allowAnonymous,
      userTokenPolicyUri,
      usernamePasswordLoginSize,
      usernamePasswordLogin,
      loginCallback,
      loginContext,
    );
  }

  late final _UA_AccessControl_defaultWithLoginCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>,
              ffi.Bool,
              ffi.Pointer<UA_String>,
              ffi.Size,
              ffi.Pointer<UA_UsernamePasswordLogin>,
              UA_UsernamePasswordLoginCallback,
              ffi.Pointer<ffi.Void>)>>('UA_AccessControl_defaultWithLoginCallback');
  late final _UA_AccessControl_defaultWithLoginCallback = _UA_AccessControl_defaultWithLoginCallbackPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, bool, ffi.Pointer<UA_String>, int,
          ffi.Pointer<UA_UsernamePasswordLogin>, UA_UsernamePasswordLoginCallback, ffi.Pointer<ffi.Void>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/certificategroup_default.h"
  void UA_CertificateGroup_AcceptAll(
    ffi.Pointer<UA_CertificateGroup> certGroup,
  ) {
    return _UA_CertificateGroup_AcceptAll(
      certGroup,
    );
  }

  late final _UA_CertificateGroup_AcceptAllPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CertificateGroup>)>>('UA_CertificateGroup_AcceptAll');
  late final _UA_CertificateGroup_AcceptAll =
      _UA_CertificateGroup_AcceptAllPtr.asFunction<void Function(ffi.Pointer<UA_CertificateGroup>)>();

  int UA_CertificateGroup_Memorystore(
    ffi.Pointer<UA_CertificateGroup> certGroup,
    ffi.Pointer<UA_NodeId> certificateGroupId,
    ffi.Pointer<UA_TrustListDataType> trustList,
    ffi.Pointer<UA_Logger> logger,
    ffi.Pointer<UA_KeyValueMap> params,
  ) {
    return _UA_CertificateGroup_Memorystore(
      certGroup,
      certificateGroupId,
      trustList,
      logger,
      params,
    );
  }

  late final _UA_CertificateGroup_MemorystorePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_TrustListDataType>,
              ffi.Pointer<UA_Logger>,
              ffi.Pointer<UA_KeyValueMap>)>>('UA_CertificateGroup_Memorystore');
  late final _UA_CertificateGroup_Memorystore = _UA_CertificateGroup_MemorystorePtr.asFunction<
      int Function(ffi.Pointer<UA_CertificateGroup>, ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_TrustListDataType>,
          ffi.Pointer<UA_Logger>, ffi.Pointer<UA_KeyValueMap>)>();

  int UA_CertificateGroup_Filestore(
    ffi.Pointer<UA_CertificateGroup> certGroup,
    ffi.Pointer<UA_NodeId> certificateGroupId,
    UA_String storePath,
    ffi.Pointer<UA_Logger> logger,
    ffi.Pointer<UA_KeyValueMap> params,
  ) {
    return _UA_CertificateGroup_Filestore(
      certGroup,
      certificateGroupId,
      storePath,
      logger,
      params,
    );
  }

  late final _UA_CertificateGroup_FilestorePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CertificateGroup>, ffi.Pointer<UA_NodeId>, UA_String,
              ffi.Pointer<UA_Logger>, ffi.Pointer<UA_KeyValueMap>)>>('UA_CertificateGroup_Filestore');
  late final _UA_CertificateGroup_Filestore = _UA_CertificateGroup_FilestorePtr.asFunction<
      int Function(ffi.Pointer<UA_CertificateGroup>, ffi.Pointer<UA_NodeId>, UA_String, ffi.Pointer<UA_Logger>,
          ffi.Pointer<UA_KeyValueMap>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/log_stdout.h"
  late final ffi.Pointer<UA_Logger> _UA_Log_Stdout_ = _lookup<UA_Logger>('UA_Log_Stdout_');

  UA_Logger get UA_Log_Stdout_ => _UA_Log_Stdout_.ref;

  late final ffi.Pointer<ffi.Pointer<UA_Logger>> _UA_Log_Stdout = _lookup<ffi.Pointer<UA_Logger>>('UA_Log_Stdout');

  ffi.Pointer<UA_Logger> get UA_Log_Stdout => _UA_Log_Stdout.value;

  set UA_Log_Stdout(ffi.Pointer<UA_Logger> value) => _UA_Log_Stdout.value = value;

  UA_Logger UA_Log_Stdout_withLevel(
    UA_LogLevel minlevel,
  ) {
    return _UA_Log_Stdout_withLevel(
      minlevel.value,
    );
  }

  late final _UA_Log_Stdout_withLevelPtr =
      _lookup<ffi.NativeFunction<UA_Logger Function(ffi.UnsignedInt)>>('UA_Log_Stdout_withLevel');
  late final _UA_Log_Stdout_withLevel = _UA_Log_Stdout_withLevelPtr.asFunction<UA_Logger Function(int)>();

  ffi.Pointer<UA_Logger> UA_Log_Stdout_new(
    UA_LogLevel minlevel,
  ) {
    return _UA_Log_Stdout_new(
      minlevel.value,
    );
  }

  late final _UA_Log_Stdout_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Logger> Function(ffi.UnsignedInt)>>('UA_Log_Stdout_new');
  late final _UA_Log_Stdout_new = _UA_Log_Stdout_newPtr.asFunction<ffi.Pointer<UA_Logger> Function(int)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/nodestore_default.h"
  int UA_Nodestore_HashMap(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_HashMap(
      ns,
    );
  }

  late final _UA_Nodestore_HashMapPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>('UA_Nodestore_HashMap');
  late final _UA_Nodestore_HashMap = _UA_Nodestore_HashMapPtr.asFunction<int Function(ffi.Pointer<UA_Nodestore>)>();

  int UA_Nodestore_ZipTree(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_ZipTree(
      ns,
    );
  }

  late final _UA_Nodestore_ZipTreePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>('UA_Nodestore_ZipTree');
  late final _UA_Nodestore_ZipTree = _UA_Nodestore_ZipTreePtr.asFunction<int Function(ffi.Pointer<UA_Nodestore>)>();

  /// /
  late final ffi.Pointer<UA_ConnectionConfig> _UA_ConnectionConfig_default =
      _lookup<UA_ConnectionConfig>('UA_ConnectionConfig_default');

  UA_ConnectionConfig get UA_ConnectionConfig_default => _UA_ConnectionConfig_default.ref;

  int UA_ServerConfig_setMinimalCustomBuffer(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
    int sendBufferSize,
    int recvBufferSize,
  ) {
    return _UA_ServerConfig_setMinimalCustomBuffer(
      config,
      portNumber,
      certificate,
      sendBufferSize,
      recvBufferSize,
    );
  }

  late final _UA_ServerConfig_setMinimalCustomBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16, ffi.Pointer<UA_ByteString>, UA_UInt32,
              UA_UInt32)>>('UA_ServerConfig_setMinimalCustomBuffer');
  late final _UA_ServerConfig_setMinimalCustomBuffer = _UA_ServerConfig_setMinimalCustomBufferPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>, int, int)>();

  int UA_ServerConfig_setMinimal(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_setMinimal(
      config,
      portNumber,
      certificate,
    );
  }

  late final _UA_ServerConfig_setMinimalPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16, ffi.Pointer<UA_ByteString>)>>(
      'UA_ServerConfig_setMinimal');
  late final _UA_ServerConfig_setMinimal = _UA_ServerConfig_setMinimalPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_setDefaultWithSecurityPolicies(
    ffi.Pointer<UA_ServerConfig> conf,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
    ffi.Pointer<UA_ByteString> trustList,
    int trustListSize,
    ffi.Pointer<UA_ByteString> issuerList,
    int issuerListSize,
    ffi.Pointer<UA_ByteString> revocationList,
    int revocationListSize,
  ) {
    return _UA_ServerConfig_setDefaultWithSecurityPolicies(
      conf,
      portNumber,
      certificate,
      privateKey,
      trustList,
      trustListSize,
      issuerList,
      issuerListSize,
      revocationList,
      revocationListSize,
    );
  }

  late final _UA_ServerConfig_setDefaultWithSecurityPoliciesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>,
              UA_UInt16,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Size,
              ffi.Pointer<UA_ByteString>,
              ffi.Size,
              ffi.Pointer<UA_ByteString>,
              ffi.Size)>>('UA_ServerConfig_setDefaultWithSecurityPolicies');
  late final _UA_ServerConfig_setDefaultWithSecurityPolicies =
      _UA_ServerConfig_setDefaultWithSecurityPoliciesPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>, int, ffi.Pointer<UA_ByteString>, int, ffi.Pointer<UA_ByteString>, int)>();

  int UA_ServerConfig_setDefaultWithSecureSecurityPolicies(
    ffi.Pointer<UA_ServerConfig> conf,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
    ffi.Pointer<UA_ByteString> trustList,
    int trustListSize,
    ffi.Pointer<UA_ByteString> issuerList,
    int issuerListSize,
    ffi.Pointer<UA_ByteString> revocationList,
    int revocationListSize,
  ) {
    return _UA_ServerConfig_setDefaultWithSecureSecurityPolicies(
      conf,
      portNumber,
      certificate,
      privateKey,
      trustList,
      trustListSize,
      issuerList,
      issuerListSize,
      revocationList,
      revocationListSize,
    );
  }

  late final _UA_ServerConfig_setDefaultWithSecureSecurityPoliciesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>,
              UA_UInt16,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Size,
              ffi.Pointer<UA_ByteString>,
              ffi.Size,
              ffi.Pointer<UA_ByteString>,
              ffi.Size)>>('UA_ServerConfig_setDefaultWithSecureSecurityPolicies');
  late final _UA_ServerConfig_setDefaultWithSecureSecurityPolicies =
      _UA_ServerConfig_setDefaultWithSecureSecurityPoliciesPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>, int, ffi.Pointer<UA_ByteString>, int, ffi.Pointer<UA_ByteString>, int)>();

  int UA_ServerConfig_setDefault(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_setDefault(
      config,
    );
  }

  late final _UA_ServerConfig_setDefaultPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setDefault');
  late final _UA_ServerConfig_setDefault =
      _UA_ServerConfig_setDefaultPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_setBasics(
    ffi.Pointer<UA_ServerConfig> conf,
  ) {
    return _UA_ServerConfig_setBasics(
      conf,
    );
  }

  late final _UA_ServerConfig_setBasicsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setBasics');
  late final _UA_ServerConfig_setBasics =
      _UA_ServerConfig_setBasicsPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_setBasics_withPort(
    ffi.Pointer<UA_ServerConfig> conf,
    int portNumber,
  ) {
    return _UA_ServerConfig_setBasics_withPort(
      conf,
      portNumber,
    );
  }

  late final _UA_ServerConfig_setBasics_withPortPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16)>>(
          'UA_ServerConfig_setBasics_withPort');
  late final _UA_ServerConfig_setBasics_withPort =
      _UA_ServerConfig_setBasics_withPortPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>, int)>();

  int UA_ServerConfig_addSecurityPolicyNone(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_addSecurityPolicyNone(
      config,
      certificate,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyNonePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>>(
          'UA_ServerConfig_addSecurityPolicyNone');
  late final _UA_ServerConfig_addSecurityPolicyNone = _UA_ServerConfig_addSecurityPolicyNonePtr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyBasic128Rsa15(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyBasic128Rsa15(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyBasic128Rsa15Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyBasic128Rsa15');
  late final _UA_ServerConfig_addSecurityPolicyBasic128Rsa15 = _UA_ServerConfig_addSecurityPolicyBasic128Rsa15Ptr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyBasic256(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyBasic256(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyBasic256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyBasic256');
  late final _UA_ServerConfig_addSecurityPolicyBasic256 = _UA_ServerConfig_addSecurityPolicyBasic256Ptr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyBasic256Sha256(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyBasic256Sha256(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyBasic256Sha256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyBasic256Sha256');
  late final _UA_ServerConfig_addSecurityPolicyBasic256Sha256 = _UA_ServerConfig_addSecurityPolicyBasic256Sha256Ptr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaep(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaep(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaepPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaep');
  late final _UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaep =
      _UA_ServerConfig_addSecurityPolicyAes128Sha256RsaOaepPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPss(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPss(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPssPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPss');
  late final _UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPss =
      _UA_ServerConfig_addSecurityPolicyAes256Sha256RsaPssPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addSecurityPolicyEccNistP256(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addSecurityPolicyEccNistP256(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyEccNistP256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addSecurityPolicyEccNistP256');
  late final _UA_ServerConfig_addSecurityPolicyEccNistP256 = _UA_ServerConfig_addSecurityPolicyEccNistP256Ptr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addAllSecurityPolicies(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addAllSecurityPolicies(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addAllSecurityPoliciesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addAllSecurityPolicies');
  late final _UA_ServerConfig_addAllSecurityPolicies = _UA_ServerConfig_addAllSecurityPoliciesPtr.asFunction<
      int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addAllSecureSecurityPolicies(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
    ffi.Pointer<UA_ByteString> privateKey,
  ) {
    return _UA_ServerConfig_addAllSecureSecurityPolicies(
      config,
      certificate,
      privateKey,
    );
  }

  late final _UA_ServerConfig_addAllSecureSecurityPoliciesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_addAllSecureSecurityPolicies');
  late final _UA_ServerConfig_addAllSecureSecurityPolicies = _UA_ServerConfig_addAllSecureSecurityPoliciesPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  DartUA_StatusCode UA_ServerConfig_addEndpoint(
    ffi.Pointer<UA_ServerConfig> config,
    UA_String securityPolicyUri,
    UA_MessageSecurityMode securityMode,
  ) {
    return _UA_ServerConfig_addEndpoint(
      config,
      securityPolicyUri,
      securityMode.value,
    );
  }

  late final _UA_ServerConfig_addEndpointPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_String, ffi.UnsignedInt)>>(
          'UA_ServerConfig_addEndpoint');
  late final _UA_ServerConfig_addEndpoint =
      _UA_ServerConfig_addEndpointPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>, UA_String, int)>();

  int UA_ServerConfig_addAllEndpoints(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_addAllEndpoints(
      config,
    );
  }

  late final _UA_ServerConfig_addAllEndpointsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>(
          'UA_ServerConfig_addAllEndpoints');
  late final _UA_ServerConfig_addAllEndpoints =
      _UA_ServerConfig_addAllEndpointsPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_addAllSecureEndpoints(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_addAllSecureEndpoints(
      config,
    );
  }

  late final _UA_ServerConfig_addAllSecureEndpointsPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>(
          'UA_ServerConfig_addAllSecureEndpoints');
  late final _UA_ServerConfig_addAllSecureEndpoints =
      _UA_ServerConfig_addAllSecureEndpointsPtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  /// amalgamated original file "/plugins/include/open62541/client_config_default.h"
  int UA_ClientConfig_setDefault(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_setDefault(
      config,
    );
  }

  late final _UA_ClientConfig_setDefaultPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ClientConfig>)>>('UA_ClientConfig_setDefault');
  late final _UA_ClientConfig_setDefault =
      _UA_ClientConfig_setDefaultPtr.asFunction<int Function(ffi.Pointer<UA_ClientConfig>)>();

  int UA_ClientConfig_setDefaultEncryption(
    ffi.Pointer<UA_ClientConfig> config,
    UA_ByteString localCertificate,
    UA_ByteString privateKey,
    ffi.Pointer<UA_ByteString> trustList,
    int trustListSize,
    ffi.Pointer<UA_ByteString> revocationList,
    int revocationListSize,
  ) {
    return _UA_ClientConfig_setDefaultEncryption(
      config,
      localCertificate,
      privateKey,
      trustList,
      trustListSize,
      revocationList,
      revocationListSize,
    );
  }

  late final _UA_ClientConfig_setDefaultEncryptionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ClientConfig>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_ByteString>,
              ffi.Size, ffi.Pointer<UA_ByteString>, ffi.Size)>>('UA_ClientConfig_setDefaultEncryption');
  late final _UA_ClientConfig_setDefaultEncryption = _UA_ClientConfig_setDefaultEncryptionPtr.asFunction<
      int Function(ffi.Pointer<UA_ClientConfig>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_ByteString>, int,
          ffi.Pointer<UA_ByteString>, int)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/securitypolicy_default.h"
  int UA_SecurityPolicy_None(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_None(
      policy,
      localCertificate,
      logger,
    );
  }

  late final _UA_SecurityPolicy_NonePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_None');
  late final _UA_SecurityPolicy_None = _UA_SecurityPolicy_NonePtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_SecurityPolicy_Basic128Rsa15(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_Basic128Rsa15(
      policy,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_Basic128Rsa15Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_Basic128Rsa15');
  late final _UA_SecurityPolicy_Basic128Rsa15 = _UA_SecurityPolicy_Basic128Rsa15Ptr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_SecurityPolicy_Basic256(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_Basic256(
      policy,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_Basic256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_Basic256');
  late final _UA_SecurityPolicy_Basic256 = _UA_SecurityPolicy_Basic256Ptr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_SecurityPolicy_Basic256Sha256(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_Basic256Sha256(
      policy,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_Basic256Sha256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_Basic256Sha256');
  late final _UA_SecurityPolicy_Basic256Sha256 = _UA_SecurityPolicy_Basic256Sha256Ptr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_SecurityPolicy_Aes128Sha256RsaOaep(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_Aes128Sha256RsaOaep(
      policy,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_Aes128Sha256RsaOaepPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_Aes128Sha256RsaOaep');
  late final _UA_SecurityPolicy_Aes128Sha256RsaOaep = _UA_SecurityPolicy_Aes128Sha256RsaOaepPtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_SecurityPolicy_Aes256Sha256RsaPss(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_Aes256Sha256RsaPss(
      policy,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_Aes256Sha256RsaPssPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_Aes256Sha256RsaPss');
  late final _UA_SecurityPolicy_Aes256Sha256RsaPss = _UA_SecurityPolicy_Aes256Sha256RsaPssPtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  DartUA_StatusCode UA_SecurityPolicy_EccNistP256(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ApplicationType applicationType,
    UA_ByteString localCertificate,
    UA_ByteString localPrivateKey,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_EccNistP256(
      policy,
      applicationType.value,
      localCertificate,
      localPrivateKey,
      logger,
    );
  }

  late final _UA_SecurityPolicy_EccNistP256Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, ffi.UnsignedInt, UA_ByteString, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_EccNistP256');
  late final _UA_SecurityPolicy_EccNistP256 = _UA_SecurityPolicy_EccNistP256Ptr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, int, UA_ByteString, UA_ByteString, ffi.Pointer<UA_Logger>)>();

  int UA_PubSubSecurityPolicy_Aes128Ctr(
    ffi.Pointer<UA_PubSubSecurityPolicy> policy,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_PubSubSecurityPolicy_Aes128Ctr(
      policy,
      logger,
    );
  }

  late final _UA_PubSubSecurityPolicy_Aes128CtrPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PubSubSecurityPolicy>, ffi.Pointer<UA_Logger>)>>(
          'UA_PubSubSecurityPolicy_Aes128Ctr');
  late final _UA_PubSubSecurityPolicy_Aes128Ctr = _UA_PubSubSecurityPolicy_Aes128CtrPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubSecurityPolicy>, ffi.Pointer<UA_Logger>)>();

  int UA_PubSubSecurityPolicy_Aes256Ctr(
    ffi.Pointer<UA_PubSubSecurityPolicy> policy,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_PubSubSecurityPolicy_Aes256Ctr(
      policy,
      logger,
    );
  }

  late final _UA_PubSubSecurityPolicy_Aes256CtrPtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_PubSubSecurityPolicy>, ffi.Pointer<UA_Logger>)>>(
          'UA_PubSubSecurityPolicy_Aes256Ctr');
  late final _UA_PubSubSecurityPolicy_Aes256Ctr = _UA_PubSubSecurityPolicy_Aes256CtrPtr.asFunction<
      int Function(ffi.Pointer<UA_PubSubSecurityPolicy>, ffi.Pointer<UA_Logger>)>();

  /// Create a self-signed certificate
  ///
  /// It is recommended to store the generated certificate on disk for reuse, so the
  /// application can be recognized across several executions.
  ///
  /// \param subject Elements for the subject,
  /// e.g. ["C=DE", "O=SampleOrganization", "CN=Open62541Server@localhost"]
  /// \param subjectAltName Elements for SubjectAltName,
  /// e.g. ["DNS:localhost", "URI:urn:open62541.server.application"]
  /// \param params key value map with optional parameters:
  /// - expires-in-days after these the cert expires default: 365
  /// - key-size-bits Size of the generated key in bits. Possible values are:
  /// [0, 1024 (deprecated), 2048, 4096] default: 4096
  DartUA_StatusCode UA_CreateCertificate(
    ffi.Pointer<UA_Logger> logger,
    ffi.Pointer<UA_String> subject,
    int subjectSize,
    ffi.Pointer<UA_String> subjectAltName,
    int subjectAltNameSize,
    UA_CertificateFormat certFormat,
    ffi.Pointer<UA_KeyValueMap> params,
    ffi.Pointer<UA_ByteString> outPrivateKey,
    ffi.Pointer<UA_ByteString> outCertificate,
  ) {
    return _UA_CreateCertificate(
      logger,
      subject,
      subjectSize,
      subjectAltName,
      subjectAltNameSize,
      certFormat.value,
      params,
      outPrivateKey,
      outCertificate,
    );
  }

  late final _UA_CreateCertificatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Logger>,
              ffi.Pointer<UA_String>,
              ffi.Size,
              ffi.Pointer<UA_String>,
              ffi.Size,
              ffi.UnsignedInt,
              ffi.Pointer<UA_KeyValueMap>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_CreateCertificate');
  late final _UA_CreateCertificate = _UA_CreateCertificatePtr.asFunction<
      int Function(ffi.Pointer<UA_Logger>, ffi.Pointer<UA_String>, int, ffi.Pointer<UA_String>, int, int,
          ffi.Pointer<UA_KeyValueMap>, ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('printf');
  late final _printf = _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp = _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp = _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp = _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>('clearerr');
  late final _clearerr = _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>(
          'fgets');
  late final _fgets =
      _fgetsPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>('fputc');
  late final _fputc = _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>>(
      'fread');
  late final _fread = _freadPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek = _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr = _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>('ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Pointer<FILE>)>>(
      'fwrite');
  late final _fwrite = _fwritePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>('perror');
  late final _perror = _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>('putc');
  late final _putc = _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('remove');
  late final _remove = _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>('rewind');
  late final _rewind = _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>('scanf');
  late final _scanf = _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr.asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size)>>(
          'setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr = _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>('ungetc');
  late final _ungetc = _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list$1 arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list$1 arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list$1)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list$1)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list$1 arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list$1)>>(
          'vsprintf');
  late final _vsprintf =
      _vsprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list$1)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr.asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('__srget');
  late final ___srget = ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list$1 arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>>('__svfscanf');
  late final ___svfscanf =
      ___svfscanfPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>('__swbuf');
  late final ___swbuf = ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>('flockfile');
  late final _flockfile = _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('ftrylockfile');
  late final _ftrylockfile = _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>('funlockfile');
  late final _funlockfile = _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc_unlocked');
  late final _getc_unlocked = _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked = _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>('putc_unlocked');
  late final _putc_unlocked = _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar_unlocked');
  late final _putchar_unlocked = _putchar_unlockedPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
          'tempnam');
  late final _tempnam =
      _tempnamPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko = _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr = _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list$1 arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list$1)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list$1 arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list$1)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list$1)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list$1 arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>, va_list$1)>>(
          'vsnprintf');
  late final _vsnprintf =
      _vsnprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list$1)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list$1 arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list$1)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list$1)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size, ffi.Pointer<ffi.Char>)>>(
          '__sprintf_chk');
  late final ___sprintf_chk =
      ___sprintf_chkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size, ffi.Pointer<ffi.Char>)>>(
      '__snprintf_chk');
  late final ___snprintf_chk =
      ___snprintf_chkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list$1 arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size, ffi.Pointer<ffi.Char>, va_list$1)>>('__vsprintf_chk');
  late final ___vsprintf_chk =
      ___vsprintf_chkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list$1)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list$1 arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size, ffi.Pointer<ffi.Char>,
              va_list$1)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>, va_list$1)>();

  ffi.Pointer<ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__error');
  late final ___error = ___errorPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<UA_Server> UA_Server_newFromFile(
    UA_ByteString json_config,
  ) {
    return _UA_Server_newFromFile(
      json_config,
    );
  }

  late final _UA_Server_newFromFilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Server> Function(UA_ByteString)>>('UA_Server_newFromFile');
  late final _UA_Server_newFromFile =
      _UA_Server_newFromFilePtr.asFunction<ffi.Pointer<UA_Server> Function(UA_ByteString)>();

  int UA_ServerConfig_updateFromFile(
    ffi.Pointer<UA_ServerConfig> config,
    UA_ByteString json_config,
  ) {
    return _UA_ServerConfig_updateFromFile(
      config,
      json_config,
    );
  }

  late final _UA_ServerConfig_updateFromFilePtr =
      _lookup<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_ByteString)>>(
          'UA_ServerConfig_updateFromFile');
  late final _UA_ServerConfig_updateFromFile =
      _UA_ServerConfig_updateFromFilePtr.asFunction<int Function(ffi.Pointer<UA_ServerConfig>, UA_ByteString)>();

  UA_HistoryDatabase UA_HistoryDatabase_default(
    UA_HistoryDataGathering gathering,
  ) {
    return _UA_HistoryDatabase_default(
      gathering,
    );
  }

  late final _UA_HistoryDatabase_defaultPtr =
      _lookup<ffi.NativeFunction<UA_HistoryDatabase Function(UA_HistoryDataGathering)>>('UA_HistoryDatabase_default');
  late final _UA_HistoryDatabase_default =
      _UA_HistoryDatabase_defaultPtr.asFunction<UA_HistoryDatabase Function(UA_HistoryDataGathering)>();

  UA_HistoryDataGathering UA_HistoryDataGathering_Default(
    int initialNodeIdStoreSize,
  ) {
    return _UA_HistoryDataGathering_Default(
      initialNodeIdStoreSize,
    );
  }

  late final _UA_HistoryDataGathering_DefaultPtr =
      _lookup<ffi.NativeFunction<UA_HistoryDataGathering Function(ffi.Size)>>('UA_HistoryDataGathering_Default');
  late final _UA_HistoryDataGathering_Default =
      _UA_HistoryDataGathering_DefaultPtr.asFunction<UA_HistoryDataGathering Function(int)>();

  UA_HistoryDataGathering UA_HistoryDataGathering_Circular(
    int initialNodeIdStoreSize,
  ) {
    return _UA_HistoryDataGathering_Circular(
      initialNodeIdStoreSize,
    );
  }

  late final _UA_HistoryDataGathering_CircularPtr =
      _lookup<ffi.NativeFunction<UA_HistoryDataGathering Function(ffi.Size)>>('UA_HistoryDataGathering_Circular');
  late final _UA_HistoryDataGathering_Circular =
      _UA_HistoryDataGathering_CircularPtr.asFunction<UA_HistoryDataGathering Function(int)>();

  UA_HistoryDataBackend UA_HistoryDataBackend_Memory(
    int initialNodeIdStoreSize,
    int initialDataStoreSize,
  ) {
    return _UA_HistoryDataBackend_Memory(
      initialNodeIdStoreSize,
      initialDataStoreSize,
    );
  }

  late final _UA_HistoryDataBackend_MemoryPtr =
      _lookup<ffi.NativeFunction<UA_HistoryDataBackend Function(ffi.Size, ffi.Size)>>('UA_HistoryDataBackend_Memory');
  late final _UA_HistoryDataBackend_Memory =
      _UA_HistoryDataBackend_MemoryPtr.asFunction<UA_HistoryDataBackend Function(int, int)>();

  UA_HistoryDataBackend UA_HistoryDataBackend_Memory_Circular(
    int initialNodeIdStoreSize,
    int initialDataStoreSize,
  ) {
    return _UA_HistoryDataBackend_Memory_Circular(
      initialNodeIdStoreSize,
      initialDataStoreSize,
    );
  }

  late final _UA_HistoryDataBackend_Memory_CircularPtr =
      _lookup<ffi.NativeFunction<UA_HistoryDataBackend Function(ffi.Size, ffi.Size)>>(
          'UA_HistoryDataBackend_Memory_Circular');
  late final _UA_HistoryDataBackend_Memory_Circular =
      _UA_HistoryDataBackend_Memory_CircularPtr.asFunction<UA_HistoryDataBackend Function(int, int)>();

  void UA_HistoryDataBackend_Memory_clear(
    ffi.Pointer<UA_HistoryDataBackend> backend,
  ) {
    return _UA_HistoryDataBackend_Memory_clear(
      backend,
    );
  }

  late final _UA_HistoryDataBackend_Memory_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryDataBackend>)>>(
          'UA_HistoryDataBackend_Memory_clear');
  late final _UA_HistoryDataBackend_Memory_clear =
      _UA_HistoryDataBackend_Memory_clearPtr.asFunction<void Function(ffi.Pointer<UA_HistoryDataBackend>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final open62541 _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<UA_DataType> get UA_TYPES => _library._UA_TYPES;
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef syscall_arg_t = u_int64_t;
typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef __gnuc_va_list = __builtin_va_list;
typedef va_list = __builtin_va_list;
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError('Unknown value for idtype_t: $value'),
      };
}

typedef pid_t = __darwin_pid_t;
typedef id_t = __darwin_id_t;
typedef sig_atomic_t = ffi.Int;
typedef Dartsig_atomic_t = int;

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

typedef mcontext_t = ffi.Pointer<__darwin_mcontext64>;
typedef pthread_attr_t = __darwin_pthread_attr_t;

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef stack_t = __darwin_sigaltstack;

final class __darwin_ucontext extends ffi.Opaque {}

typedef ucontext_t = __darwin_ucontext;
typedef sigset_t = __darwin_sigset_t;
typedef uid_t = __darwin_uid_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>> sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef siginfo_t = __siginfo;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> __sa_handler;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u$1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u$1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef rlim_t = __uint64_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Long> ru_opaque;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

/// amalgamated original file "/include/open62541/common.h"
final class UA_Server extends ffi.Opaque {}

typedef UA_ServerCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);
typedef DartUA_ServerCallbackFunction = void Function(ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);
typedef UA_ServerCallback = ffi.Pointer<ffi.NativeFunction<UA_ServerCallbackFunction>>;

/// .. _logging:
///
/// Logging Plugin API
/// ==================
///
/// Servers and clients define a logger in their configuration. The logger is a
/// plugin. A default plugin that logs to ``stdout`` is provided as an example.
/// The logger plugin is stateful and can point to custom data. So it is possible
/// to keep open file handlers in the logger context.
///
/// Every log message consists of a log level, a log category and a string
/// message content. The timestamp of the log message is created within the
/// logger.
enum UA_LogLevel {
  UA_LOGLEVEL_TRACE(100),
  UA_LOGLEVEL_DEBUG(200),
  UA_LOGLEVEL_INFO(300),
  UA_LOGLEVEL_WARNING(400),
  UA_LOGLEVEL_ERROR(500),
  UA_LOGLEVEL_FATAL(600);

  final int value;
  const UA_LogLevel(this.value);

  static UA_LogLevel fromValue(int value) => switch (value) {
        100 => UA_LOGLEVEL_TRACE,
        200 => UA_LOGLEVEL_DEBUG,
        300 => UA_LOGLEVEL_INFO,
        400 => UA_LOGLEVEL_WARNING,
        500 => UA_LOGLEVEL_ERROR,
        600 => UA_LOGLEVEL_FATAL,
        _ => throw ArgumentError('Unknown value for UA_LogLevel: $value'),
      };
}

enum UA_LogCategory {
  UA_LOGCATEGORY_NETWORK(0),
  UA_LOGCATEGORY_SECURECHANNEL(1),
  UA_LOGCATEGORY_SESSION(2),
  UA_LOGCATEGORY_SERVER(3),
  UA_LOGCATEGORY_CLIENT(4),
  UA_LOGCATEGORY_USERLAND(5),
  UA_LOGCATEGORY_SECURITYPOLICY(6),
  UA_LOGCATEGORY_EVENTLOOP(7),
  UA_LOGCATEGORY_PUBSUB(8),
  UA_LOGCATEGORY_DISCOVERY(9);

  static const UA_LOGCATEGORY_SECURITY = UA_LOGCATEGORY_SECURITYPOLICY;

  final int value;
  const UA_LogCategory(this.value);

  static UA_LogCategory fromValue(int value) => switch (value) {
        0 => UA_LOGCATEGORY_NETWORK,
        1 => UA_LOGCATEGORY_SECURECHANNEL,
        2 => UA_LOGCATEGORY_SESSION,
        3 => UA_LOGCATEGORY_SERVER,
        4 => UA_LOGCATEGORY_CLIENT,
        5 => UA_LOGCATEGORY_USERLAND,
        6 => UA_LOGCATEGORY_SECURITYPOLICY,
        7 => UA_LOGCATEGORY_EVENTLOOP,
        8 => UA_LOGCATEGORY_PUBSUB,
        9 => UA_LOGCATEGORY_DISCOVERY,
        _ => throw ArgumentError('Unknown value for UA_LogCategory: $value'),
      };

  @override
  String toString() {
    if (this == UA_LOGCATEGORY_SECURITYPOLICY)
      return "UA_LogCategory.UA_LOGCATEGORY_SECURITYPOLICY, UA_LogCategory.UA_LOGCATEGORY_SECURITY";
    return super.toString();
  }
}

final class UA_Logger extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> logContext, ffi.UnsignedInt level, ffi.UnsignedInt category,
              ffi.Pointer<ffi.Char> msg, va_list args)>> log;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Logger> logger)>> clear;
}

/// Byte
/// ^^^^
/// An integer value between 0 and 255.
typedef UA_Byte = ffi.Uint8;
typedef DartUA_Byte = int;

/// String
/// ^^^^^^
/// A sequence of Unicode characters. Strings are just an array of UA_Byte.
final class UA_String extends ffi.Struct {
  @ffi.Size()
  external int length;

  external ffi.Pointer<UA_Byte> data;
}

/// .. _datetime:
///
/// DateTime
/// ^^^^^^^^
/// An instance in time. A DateTime value is encoded as a 64-bit signed integer
/// which represents the number of 100 nanosecond intervals since January 1, 1601
/// (UTC).
///
/// The methods providing an interface to the system clock are architecture-
/// specific. Usually, they provide a UTC clock that includes leap seconds. The
/// OPC UA standard allows the use of International Atomic Time (TAI) for the
/// DateTime instead. But this is still unusual and not implemented for most
/// SDKs. Currently (2019), UTC and TAI are 37 seconds apart due to leap
/// seconds.
typedef UA_DateTime = ffi.Int64;
typedef DartUA_DateTime = int;

final class UA_BuildInfo extends ffi.Struct {
  external UA_String productUri;

  external UA_String manufacturerName;

  external UA_String productName;

  external UA_String softwareVersion;

  external UA_String buildNumber;

  @UA_DateTime()
  external int buildDate;
}

/// LocalizedText
/// ^^^^^^^^^^^^^
/// Human readable text with an optional locale identifier.
final class UA_LocalizedText extends ffi.Struct {
  external UA_String locale;

  external UA_String text;
}

enum UA_ApplicationType {
  UA_APPLICATIONTYPE_SERVER(0),
  UA_APPLICATIONTYPE_CLIENT(1),
  UA_APPLICATIONTYPE_CLIENTANDSERVER(2),
  UA_APPLICATIONTYPE_DISCOVERYSERVER(3),
  __UA_APPLICATIONTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_ApplicationType(this.value);

  static UA_ApplicationType fromValue(int value) => switch (value) {
        0 => UA_APPLICATIONTYPE_SERVER,
        1 => UA_APPLICATIONTYPE_CLIENT,
        2 => UA_APPLICATIONTYPE_CLIENTANDSERVER,
        3 => UA_APPLICATIONTYPE_DISCOVERYSERVER,
        2147483647 => __UA_APPLICATIONTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_ApplicationType: $value'),
      };
}

final class UA_ApplicationDescription extends ffi.Struct {
  external UA_String applicationUri;

  external UA_String productUri;

  external UA_LocalizedText applicationName;

  @ffi.UnsignedInt()
  external int applicationTypeAsInt;

  UA_ApplicationType get applicationType => UA_ApplicationType.fromValue(applicationTypeAsInt);

  external UA_String gatewayServerUri;

  external UA_String discoveryProfileUri;

  @ffi.Size()
  external int discoveryUrlsSize;

  external ffi.Pointer<UA_String> discoveryUrls;
}

/// Double
/// ^^^^^^
/// An IEEE double precision (64 bit) floating point value.
typedef UA_Double = ffi.Double;
typedef DartUA_Double = double;

/// Lifecycle States
/// ----------------
/// Generic lifecycle states. The STOPPING state indicates that the lifecycle is
/// being terminated. But it might take time to (asynchronously) perform a
/// graceful shutdown.
enum UA_LifecycleState {
  UA_LIFECYCLESTATE_STOPPED(0),
  UA_LIFECYCLESTATE_STARTED(1),
  UA_LIFECYCLESTATE_STOPPING(2);

  final int value;
  const UA_LifecycleState(this.value);

  static UA_LifecycleState fromValue(int value) => switch (value) {
        0 => UA_LIFECYCLESTATE_STOPPED,
        1 => UA_LIFECYCLESTATE_STARTED,
        2 => UA_LIFECYCLESTATE_STOPPING,
        _ => throw ArgumentError('Unknown value for UA_LifecycleState: $value'),
      };
}

/// .. _rule-handling:
///
/// Rule Handling
/// -------------
/// The RuleHanding settings define how error cases that result from rules in the
/// OPC UA specification shall be handled. The rule handling can be softened,
/// e.g. to workaround misbehaving implementations or to mitigate the impact of
/// additional rules that are introduced in later versions of the OPC UA
/// specification.
enum UA_RuleHandling {
  UA_RULEHANDLING_DEFAULT(0),
  UA_RULEHANDLING_ABORT(1),
  UA_RULEHANDLING_WARN(2),
  UA_RULEHANDLING_ACCEPT(3);

  final int value;
  const UA_RuleHandling(this.value);

  static UA_RuleHandling fromValue(int value) => switch (value) {
        0 => UA_RULEHANDLING_DEFAULT,
        1 => UA_RULEHANDLING_ABORT,
        2 => UA_RULEHANDLING_WARN,
        3 => UA_RULEHANDLING_ACCEPT,
        _ => throw ArgumentError('Unknown value for UA_RuleHandling: $value'),
      };
}

/// UInt16
/// ^^^^^^
/// An integer value between 0 and 65 535.
typedef UA_UInt16 = ffi.Uint16;
typedef DartUA_UInt16 = int;

/// .. _nodeid:
///
/// NodeId
/// ^^^^^^
/// An identifier for a node in the address space of an OPC UA Server.
enum UA_NodeIdType {
  UA_NODEIDTYPE_NUMERIC(0),
  UA_NODEIDTYPE_STRING(3),
  UA_NODEIDTYPE_GUID(4),
  UA_NODEIDTYPE_BYTESTRING(5);

  final int value;
  const UA_NodeIdType(this.value);

  static UA_NodeIdType fromValue(int value) => switch (value) {
        0 => UA_NODEIDTYPE_NUMERIC,
        3 => UA_NODEIDTYPE_STRING,
        4 => UA_NODEIDTYPE_GUID,
        5 => UA_NODEIDTYPE_BYTESTRING,
        _ => throw ArgumentError('Unknown value for UA_NodeIdType: $value'),
      };
}

/// UInt32
/// ^^^^^^
/// An integer value between 0 and 4 294 967 295.
typedef UA_UInt32 = ffi.Uint32;
typedef DartUA_UInt32 = int;

/// Guid
/// ^^^^
/// A 16 byte value that can be used as a globally unique identifier.
final class UA_Guid extends ffi.Struct {
  @UA_UInt32()
  external int data1;

  @UA_UInt16()
  external int data2;

  @UA_UInt16()
  external int data3;

  @ffi.Array.multi([8])
  external ffi.Array<UA_Byte> data4;
}

/// ByteString
/// ^^^^^^^^^^
/// A sequence of octets.
typedef UA_ByteString = UA_String;

final class UnnamedUnion1 extends ffi.Union {
  @UA_UInt32()
  external int numeric;

  external UA_String string;

  external UA_Guid guid;

  external UA_ByteString byteString;
}

final class UA_NodeId extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  @ffi.UnsignedInt()
  external int identifierTypeAsInt;

  UA_NodeIdType get identifierType => UA_NodeIdType.fromValue(identifierTypeAsInt);

  external UnnamedUnion1 identifier;
}

/// .. _generic-types:
///
/// Generic Type Handling
/// ---------------------
///
/// All information about a (builtin/structured) data type is stored in a
/// ``UA_DataType``. The array ``UA_TYPES`` contains the description of all
/// standard-defined types. This type description is used for the following
/// generic operations that work on all types:
///
/// - ``void T_init(T *ptr)``: Initialize the data type. This is synonymous with
/// zeroing out the memory, i.e. ``memset(ptr, 0, sizeof(T))``.
/// - ``T* T_new()``: Allocate and return the memory for the data type. The
/// value is already initialized.
/// - ``UA_StatusCode T_copy(const T *src, T *dst)``: Copy the content of the
/// data type. Returns ``UA_STATUSCODE_GOOD`` or
/// ``UA_STATUSCODE_BADOUTOFMEMORY``.
/// - ``void T_clear(T *ptr)``: Delete the dynamically allocated content
/// of the data type and perform a ``T_init`` to reset the type.
/// - ``void T_delete(T *ptr)``: Delete the content of the data type and the
/// memory for the data type itself.
/// - ``void T_equal(T *p1, T *p2)``: Compare whether ``p1`` and ``p2`` have
/// identical content. You can use ``UA_order`` if an absolute ordering
/// is required.
///
/// Specializations, such as ``UA_Int32_new()`` are derived from the generic
/// type operations as static inline functions.
final class UA_DataTypeMember extends ffi.Struct {
  external ffi.Pointer<ffi.Char> memberName;

  external ffi.Pointer<UA_DataType> memberType;

  @UA_Byte()
  external int substitute;
}

/// .. _variant:
///
/// Variant
/// ^^^^^^^
///
/// Variants may contain values of any type together with a description of the
/// content. See the section on :ref:`generic-types` on how types are described.
/// The standard mandates that variants contain built-in data types only. If the
/// value is not of a builtin type, it is wrapped into an :ref:`extensionobject`.
/// open62541 hides this wrapping transparently in the encoding layer. If the
/// data type is unknown to the receiver, the variant contains the original
/// ExtensionObject in binary or XML encoding.
///
/// Variants may contain a scalar value or an array. For details on the handling
/// of arrays, see the section on :ref:`array-handling`. Array variants can have
/// an additional dimensionality (matrix, 3-tensor, ...) defined in an array of
/// dimension lengths. The actual values are kept in an array of dimensions one.
/// For users who work with higher-dimensions arrays directly, keep in mind that
/// dimensions of higher rank are serialized first (the highest rank dimension
/// has stride 1 and elements follow each other directly). Usually it is simplest
/// to interact with higher-dimensional arrays via ``UA_NumericRange``
/// descriptions (see :ref:`array-handling`).
///
/// To differentiate between scalar / array variants, the following definition is
/// used. ``UA_Variant_isScalar`` provides simplified access to these checks.
///
/// - ``arrayLength == 0 && data == NULL``: undefined array of length -1
/// - ``arrayLength == 0 && data == UA_EMPTY_ARRAY_SENTINEL``: array of length 0
/// - ``arrayLength == 0 && data > UA_EMPTY_ARRAY_SENTINEL``: scalar value
/// - ``arrayLength > 0``: array of the given length
///
/// Variants can also be *empty*. Then, the pointer to the type description is
/// ``NULL``.
final class UA_DataType extends ffi.Struct {
  external ffi.Pointer<ffi.Char> typeName;

  external UA_NodeId typeId;

  external UA_NodeId binaryEncodingId;

  @UA_UInt32()
  external int substitute;

  external ffi.Pointer<UA_DataTypeMember> members;
}

final class UA_DataTypeArray extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> next;

  @ffi.Size()
  external int typesSize;

  external ffi.Pointer<UA_DataType> types;

  @ffi.Bool()
  external bool cleanup;
}

/// .. _qualifiedname:
///
/// QualifiedName
/// ^^^^^^^^^^^^^
/// A name qualified by a namespace.
final class UA_QualifiedName extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  external UA_String name;
}

enum UA_VariantStorageType {
  UA_VARIANT_DATA(0),
  UA_VARIANT_DATA_NODELETE(1);

  final int value;
  const UA_VariantStorageType(this.value);

  static UA_VariantStorageType fromValue(int value) => switch (value) {
        0 => UA_VARIANT_DATA,
        1 => UA_VARIANT_DATA_NODELETE,
        _ => throw ArgumentError('Unknown value for UA_VariantStorageType: $value'),
      };
}

final class UA_Variant extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  @ffi.UnsignedInt()
  external int storageTypeAsInt;

  UA_VariantStorageType get storageType => UA_VariantStorageType.fromValue(storageTypeAsInt);

  @ffi.Size()
  external int arrayLength;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;
}

final class UA_KeyValuePair extends ffi.Struct {
  external UA_QualifiedName key;

  external UA_Variant value;
}

/// Key Value Map
/// -------------
/// Helper functions to work with configuration parameters in an array of
/// UA_KeyValuePair. Lookup is linear. So this is for small numbers of keys. The
/// methods below that accept a `const UA_KeyValueMap` as an argument also accept
/// NULL for that argument and treat it as an empty map.
final class UA_KeyValueMap extends ffi.Struct {
  @ffi.Size()
  external int mapSize;

  external ffi.Pointer<UA_KeyValuePair> map;
}

enum UA_EventLoopState {
  UA_EVENTLOOPSTATE_FRESH(0),
  UA_EVENTLOOPSTATE_STOPPED(1),
  UA_EVENTLOOPSTATE_STARTED(2),
  UA_EVENTLOOPSTATE_STOPPING(3);

  final int value;
  const UA_EventLoopState(this.value);

  static UA_EventLoopState fromValue(int value) => switch (value) {
        0 => UA_EVENTLOOPSTATE_FRESH,
        1 => UA_EVENTLOOPSTATE_STOPPED,
        2 => UA_EVENTLOOPSTATE_STARTED,
        3 => UA_EVENTLOOPSTATE_STOPPING,
        _ => throw ArgumentError('Unknown value for UA_EventLoopState: $value'),
      };
}

/// .. _statuscode:
///
/// StatusCode
/// ^^^^^^^^^^
/// A numeric identifier for an error or condition that is associated with a
/// value or an operation. See the section :ref:`statuscodes` for the meaning of
/// a specific code.
///
/// Each StatusCode has one of three "severity" bit-flags:
/// Good, Uncertain, Bad. An additional reason is indicated by the SubCode
/// bitfield.
///
/// - A StatusCode with severity Good means that the value is of good quality.
/// - A StatusCode with severity Uncertain means that the quality of the value is
/// uncertain for reasons indicated by the SubCode.
/// - A StatusCode with severity Bad means that the value is not usable for
/// reasons indicated by the SubCode.
typedef UA_StatusCode = ffi.Uint32;
typedef DartUA_StatusCode = int;

/// Int64
/// ^^^^^
/// An integer value between -9 223 372 036 854 775 808 and
/// 9 223 372 036 854 775 807.
typedef UA_Int64 = ffi.Int64;
typedef DartUA_Int64 = int;
typedef UA_CallbackFunction = ffi.Void Function(ffi.Pointer<ffi.Void> application, ffi.Pointer<ffi.Void> context);
typedef DartUA_CallbackFunction = void Function(ffi.Pointer<ffi.Void> application, ffi.Pointer<ffi.Void> context);

/// Event Loop
/// ----------
/// The EventLoop implementation is part of the selected architecture. For
/// example, "Win32/POSIX" stands for a Windows environment with an EventLoop
/// that uses the POSIX API. Several EventLoops can be instantiated in parallel.
/// But the globally defined functions are the same everywhere.
typedef UA_Callback = ffi.Pointer<ffi.NativeFunction<UA_CallbackFunction>>;

/// EventLoop Plugin API
/// ====================
/// An OPC UA-enabled application can have several clients and servers. And
/// server can serve different transport-level protocols for OPC UA. The
/// EventLoop is a central module that provides a unified control-flow for all of
/// these. Hence, several applications can share an EventLoop.
///
/// The EventLoop and the ConnectionManager implementation is
/// architecture-specific. The goal is to have a single call to "poll" (epoll,
/// kqueue, ...) in the EventLoop that covers all ConnectionManagers. Hence the
/// EventLoop plugin implementation must know implementation details of the
/// ConnectionManager implementations. So the EventLoop can extract socket
/// information, etc. from the ConnectionManagers.
///
/// Timer Policies
/// --------------
/// A timer comes with a periodic interval in which a callback is executed. If an
/// application is congested the interval can be missed. Two different policies
/// can be used when this happens. Either schedule the next execution after the
/// interval has elapsed again from the current time onwards or stay within the
/// regular interval with respect to the original basetime.
enum UA_TimerPolicy {
  UA_TIMERPOLICY_ONCE(0),
  UA_TIMERPOLICY_CURRENTTIME(1),
  UA_TIMERPOLICY_BASETIME(2);

  final int value;
  const UA_TimerPolicy(this.value);

  static UA_TimerPolicy fromValue(int value) => switch (value) {
        0 => UA_TIMERPOLICY_ONCE,
        1 => UA_TIMERPOLICY_CURRENTTIME,
        2 => UA_TIMERPOLICY_BASETIME,
        _ => throw ArgumentError('Unknown value for UA_TimerPolicy: $value'),
      };
}

/// UInt64
/// ^^^^^^
/// An integer value between 0 and 18 446 744 073 709 551 615.
typedef UA_UInt64 = ffi.Uint64;
typedef DartUA_UInt64 = int;

final class UA_DelayedCallback extends ffi.Struct {
  external ffi.Pointer<UA_DelayedCallback> next;

  external UA_Callback callback;

  external ffi.Pointer<ffi.Void> application;

  external ffi.Pointer<ffi.Void> context;
}

enum UA_EventSourceType {
  UA_EVENTSOURCETYPE_CONNECTIONMANAGER(0),
  UA_EVENTSOURCETYPE_INTERRUPTMANAGER(1);

  final int value;
  const UA_EventSourceType(this.value);

  static UA_EventSourceType fromValue(int value) => switch (value) {
        0 => UA_EVENTSOURCETYPE_CONNECTIONMANAGER,
        1 => UA_EVENTSOURCETYPE_INTERRUPTMANAGER,
        _ => throw ArgumentError('Unknown value for UA_EventSourceType: $value'),
      };
}

/// Event Source
/// ------------
/// Event Sources are attached to an EventLoop. Typically the event source and
/// the EventLoop are developed together and share a private API in the
/// background.
enum UA_EventSourceState {
  UA_EVENTSOURCESTATE_FRESH(0),
  UA_EVENTSOURCESTATE_STOPPED(1),
  UA_EVENTSOURCESTATE_STARTING(2),
  UA_EVENTSOURCESTATE_STARTED(3),
  UA_EVENTSOURCESTATE_STOPPING(4);

  final int value;
  const UA_EventSourceState(this.value);

  static UA_EventSourceState fromValue(int value) => switch (value) {
        0 => UA_EVENTSOURCESTATE_FRESH,
        1 => UA_EVENTSOURCESTATE_STOPPED,
        2 => UA_EVENTSOURCESTATE_STARTING,
        3 => UA_EVENTSOURCESTATE_STARTED,
        4 => UA_EVENTSOURCESTATE_STOPPING,
        _ => throw ArgumentError('Unknown value for UA_EventSourceState: $value'),
      };
}

final class UA_EventSource extends ffi.Struct {
  external ffi.Pointer<UA_EventSource> next;

  @ffi.UnsignedInt()
  external int eventSourceTypeAsInt;

  UA_EventSourceType get eventSourceType => UA_EventSourceType.fromValue(eventSourceTypeAsInt);

  external UA_String name;

  external ffi.Pointer<UA_EventLoop> eventLoop;

  external UA_KeyValueMap params;

  @ffi.UnsignedInt()
  external int stateAsInt;

  UA_EventSourceState get state => UA_EventSourceState.fromValue(stateAsInt);

  external ffi.Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventSource> es)>> start;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventSource> es)>> stop;

  external ffi.Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventSource> es)>> free;
}

/// amalgamated original file "/include/open62541/plugin/eventloop.h"
final class UA_EventLoop extends ffi.Struct {
  external ffi.Pointer<UA_Logger> logger;

  external UA_KeyValueMap params;

  @ffi.UnsignedInt()
  external int stateAsInt;

  UA_EventLoopState get state => UA_EventLoopState.fromValue(stateAsInt);

  external ffi.Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el)>> start;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el)>> stop;

  external ffi.Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el)>> free;

  external ffi.Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el, UA_UInt32 timeout)>> run;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el)>> cancel;

  external ffi.Pointer<ffi.NativeFunction<UA_DateTime Function(ffi.Pointer<UA_EventLoop> el)>> dateTime_now;

  external ffi.Pointer<ffi.NativeFunction<UA_DateTime Function(ffi.Pointer<UA_EventLoop> el)>> dateTime_nowMonotonic;

  external ffi.Pointer<ffi.NativeFunction<UA_Int64 Function(ffi.Pointer<UA_EventLoop> el)>> dateTime_localTimeUtcOffset;

  external ffi.Pointer<ffi.NativeFunction<UA_DateTime Function(ffi.Pointer<UA_EventLoop> el)>> nextTimer;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_EventLoop> el,
              UA_Callback cb,
              ffi.Pointer<ffi.Void> application,
              ffi.Pointer<ffi.Void> data,
              UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime,
              ffi.UnsignedInt timerPolicy,
              ffi.Pointer<UA_UInt64> timerId)>> addTimer;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el, UA_UInt64 timerId, UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime, ffi.UnsignedInt timerPolicy)>> modifyTimer;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el, UA_UInt64 timerId)>>
      removeTimer;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el, ffi.Pointer<UA_DelayedCallback> dc)>>
      addDelayedCallback;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el, ffi.Pointer<UA_DelayedCallback> dc)>>
      removeDelayedCallback;

  external ffi.Pointer<UA_EventSource> eventSources;

  external ffi
      .Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el, ffi.Pointer<UA_EventSource> es)>>
      registerEventSource;

  external ffi
      .Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_EventLoop> el, ffi.Pointer<UA_EventSource> es)>>
      deregisterEventSource;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el)>> lock;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventLoop> el)>> unlock;
}

/// SecurityPolicy Plugin API
/// =========================
final class UA_SecurityPolicySignatureAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> verify;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> sign;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalSignatureSize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteSignatureSize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>> getLocalKeyLength;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>> getRemoteKeyLength;
}

final class UA_SecurityPolicyEncryptionAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> data)>> encrypt;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> data)>> decrypt;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>> getLocalKeyLength;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>> getRemoteKeyLength;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>> getRemoteBlockSize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemotePlainTextBlockSize;
}

final class UA_SecurityPolicyCryptoModule extends ffi.Struct {
  external UA_SecurityPolicySignatureAlgorithm signatureAlgorithm;

  external UA_SecurityPolicyEncryptionAlgorithm encryptionAlgorithm;
}

final class UA_SecurityPolicyAsymmetricModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy> securityPolicy, ffi.Pointer<UA_ByteString> certificate,
              ffi.Pointer<UA_ByteString> thumbprint)>> makeCertificateThumbprint;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> securityPolicy, ffi.Pointer<UA_ByteString> certificateThumbprint)>>
      compareCertificateThumbprint;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicySymmetricModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> policyContext, ffi.Pointer<UA_ByteString> secret,
              ffi.Pointer<UA_ByteString> seed, ffi.Pointer<UA_ByteString> out)>> generateKey;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> policyContext, ffi.Pointer<UA_ByteString> out)>>
      generateNonce;

  @ffi.Size()
  external int secureChannelNonceLength;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicyChannelModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> securityPolicy,
              ffi.Pointer<UA_ByteString> remoteCertificate,
              ffi.Pointer<ffi.Pointer<ffi.Void>> channelContext)>> newContext;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> channelContext)>> deleteContext;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> key)>>
      setLocalSymEncryptingKey;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> key)>>
      setLocalSymSigningKey;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> iv)>>
      setLocalSymIv;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> key)>>
      setRemoteSymEncryptingKey;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> key)>>
      setRemoteSymSigningKey;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> iv)>>
      setRemoteSymIv;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext, ffi.Pointer<UA_ByteString> certificate)>>
      compareCertificate;
}

final class UA_SecurityPolicy extends ffi.Struct {
  external ffi.Pointer<ffi.Void> policyContext;

  external UA_String policyUri;

  @UA_Byte()
  external int securityLevel;

  external UA_ByteString localCertificate;

  external UA_NodeId certificateGroupId;

  external UA_NodeId certificateTypeId;

  external UA_SecurityPolicyAsymmetricModule asymmetricModule;

  external UA_SecurityPolicySymmetricModule symmetricModule;

  external UA_SecurityPolicySignatureAlgorithm certificateSigningAlgorithm;

  external UA_SecurityPolicyChannelModule channelModule;

  external ffi.Pointer<UA_Logger> logger;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> policy, UA_ByteString newCertificate, UA_ByteString newPrivateKey)>>
      updateCertificateAndPrivateKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> securityPolicy,
              ffi.Pointer<UA_String> subjectName,
              ffi.Pointer<UA_ByteString> nonce,
              ffi.Pointer<UA_KeyValueMap> params,
              ffi.Pointer<UA_ByteString> csr,
              ffi.Pointer<UA_ByteString> newPrivateKey)>> createSigningRequest;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecurityPolicy> policy)>> clear;
}

enum UA_MessageSecurityMode {
  UA_MESSAGESECURITYMODE_INVALID(0),
  UA_MESSAGESECURITYMODE_NONE(1),
  UA_MESSAGESECURITYMODE_SIGN(2),
  UA_MESSAGESECURITYMODE_SIGNANDENCRYPT(3),
  __UA_MESSAGESECURITYMODE_FORCE32BIT(2147483647);

  final int value;
  const UA_MessageSecurityMode(this.value);

  static UA_MessageSecurityMode fromValue(int value) => switch (value) {
        0 => UA_MESSAGESECURITYMODE_INVALID,
        1 => UA_MESSAGESECURITYMODE_NONE,
        2 => UA_MESSAGESECURITYMODE_SIGN,
        3 => UA_MESSAGESECURITYMODE_SIGNANDENCRYPT,
        2147483647 => __UA_MESSAGESECURITYMODE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_MessageSecurityMode: $value'),
      };
}

enum UA_UserTokenType {
  UA_USERTOKENTYPE_ANONYMOUS(0),
  UA_USERTOKENTYPE_USERNAME(1),
  UA_USERTOKENTYPE_CERTIFICATE(2),
  UA_USERTOKENTYPE_ISSUEDTOKEN(3),
  __UA_USERTOKENTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_UserTokenType(this.value);

  static UA_UserTokenType fromValue(int value) => switch (value) {
        0 => UA_USERTOKENTYPE_ANONYMOUS,
        1 => UA_USERTOKENTYPE_USERNAME,
        2 => UA_USERTOKENTYPE_CERTIFICATE,
        3 => UA_USERTOKENTYPE_ISSUEDTOKEN,
        2147483647 => __UA_USERTOKENTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_UserTokenType: $value'),
      };
}

final class UA_UserTokenPolicy extends ffi.Struct {
  external UA_String policyId;

  @ffi.UnsignedInt()
  external int tokenTypeAsInt;

  UA_UserTokenType get tokenType => UA_UserTokenType.fromValue(tokenTypeAsInt);

  external UA_String issuedTokenType;

  external UA_String issuerEndpointUrl;

  external UA_String securityPolicyUri;
}

final class UA_EndpointDescription extends ffi.Struct {
  external UA_String endpointUrl;

  external UA_ApplicationDescription server;

  external UA_ByteString serverCertificate;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityPolicyUri;

  @ffi.Size()
  external int userIdentityTokensSize;

  external ffi.Pointer<UA_UserTokenPolicy> userIdentityTokens;

  external UA_String transportProfileUri;

  @UA_Byte()
  external int securityLevel;
}

final class UA_TrustListDataType extends ffi.Struct {
  @UA_UInt32()
  external int specifiedLists;

  @ffi.Size()
  external int trustedCertificatesSize;

  external ffi.Pointer<UA_ByteString> trustedCertificates;

  @ffi.Size()
  external int trustedCrlsSize;

  external ffi.Pointer<UA_ByteString> trustedCrls;

  @ffi.Size()
  external int issuerCertificatesSize;

  external ffi.Pointer<UA_ByteString> issuerCertificates;

  @ffi.Size()
  external int issuerCrlsSize;

  external ffi.Pointer<UA_ByteString> issuerCrls;
}

/// CertificateGroup Plugin API
/// ---------------------------
final class UA_CertificateGroup extends ffi.Struct {
  external UA_NodeId certificateGroupId;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<UA_Logger> logging;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup, ffi.Pointer<UA_TrustListDataType> trustList)>> getTrustList;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup, ffi.Pointer<UA_TrustListDataType> trustList)>> setTrustList;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup, ffi.Pointer<UA_TrustListDataType> trustList)>> addToTrustList;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_CertificateGroup> certGroup, ffi.Pointer<UA_TrustListDataType> trustList)>>
      removeFromTrustList;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup,
              ffi.Pointer<ffi.Pointer<UA_ByteString>> rejectedList,
              ffi.Pointer<ffi.Size> rejectedListSize)>> getRejectedList;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup,
              ffi.Pointer<UA_ByteString> certificate,
              ffi.Bool isTrusted,
              ffi.Pointer<ffi.Pointer<UA_ByteString>> crls,
              ffi.Pointer<ffi.Size> crlsSize)>> getCertificateCrls;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_CertificateGroup> certGroup, ffi.Pointer<UA_ByteString> certificate)>> verifyCertificate;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CertificateGroup> certGroup)>> clear;
}

/// .. _extensionobject:
///
/// ExtensionObject
/// ^^^^^^^^^^^^^^^
///
/// ExtensionObjects may contain scalars of any data type. Even those that are
/// unknown to the receiver. See the section on :ref:`generic-types` on how types
/// are described. If the received data type is unknown, the encoded string and
/// target NodeId is stored instead of the decoded value.
enum UA_ExtensionObjectEncoding {
  UA_EXTENSIONOBJECT_ENCODED_NOBODY(0),
  UA_EXTENSIONOBJECT_ENCODED_BYTESTRING(1),
  UA_EXTENSIONOBJECT_ENCODED_XML(2),
  UA_EXTENSIONOBJECT_DECODED(3),
  UA_EXTENSIONOBJECT_DECODED_NODELETE(4);

  final int value;
  const UA_ExtensionObjectEncoding(this.value);

  static UA_ExtensionObjectEncoding fromValue(int value) => switch (value) {
        0 => UA_EXTENSIONOBJECT_ENCODED_NOBODY,
        1 => UA_EXTENSIONOBJECT_ENCODED_BYTESTRING,
        2 => UA_EXTENSIONOBJECT_ENCODED_XML,
        3 => UA_EXTENSIONOBJECT_DECODED,
        4 => UA_EXTENSIONOBJECT_DECODED_NODELETE,
        _ => throw ArgumentError('Unknown value for UA_ExtensionObjectEncoding: $value'),
      };
}

final class UnnamedStruct1 extends ffi.Struct {
  external UA_NodeId typeId;

  external UA_ByteString body;
}

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  external ffi.Pointer<ffi.Void> data;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct1 encoded;

  external UnnamedStruct2 decoded;
}

final class UA_ExtensionObject extends ffi.Struct {
  @ffi.UnsignedInt()
  external int encodingAsInt;

  UA_ExtensionObjectEncoding get encoding => UA_ExtensionObjectEncoding.fromValue(encodingAsInt);

  external UnnamedUnion2 content;
}

/// .. _expandednodeid:
///
/// ExpandedNodeId
/// ^^^^^^^^^^^^^^
/// A NodeId that allows the namespace URI to be specified instead of an index.
final class UA_ExpandedNodeId extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String namespaceUri;

  @UA_UInt32()
  external int serverIndex;
}

enum UA_NodeClass {
  UA_NODECLASS_UNSPECIFIED(0),
  UA_NODECLASS_OBJECT(1),
  UA_NODECLASS_VARIABLE(2),
  UA_NODECLASS_METHOD(4),
  UA_NODECLASS_OBJECTTYPE(8),
  UA_NODECLASS_VARIABLETYPE(16),
  UA_NODECLASS_REFERENCETYPE(32),
  UA_NODECLASS_DATATYPE(64),
  UA_NODECLASS_VIEW(128),
  __UA_NODECLASS_FORCE32BIT(2147483647);

  final int value;
  const UA_NodeClass(this.value);

  static UA_NodeClass fromValue(int value) => switch (value) {
        0 => UA_NODECLASS_UNSPECIFIED,
        1 => UA_NODECLASS_OBJECT,
        2 => UA_NODECLASS_VARIABLE,
        4 => UA_NODECLASS_METHOD,
        8 => UA_NODECLASS_OBJECTTYPE,
        16 => UA_NODECLASS_VARIABLETYPE,
        32 => UA_NODECLASS_REFERENCETYPE,
        64 => UA_NODECLASS_DATATYPE,
        128 => UA_NODECLASS_VIEW,
        2147483647 => __UA_NODECLASS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_NodeClass: $value'),
      };
}

final class UA_AddNodesItem extends ffi.Struct {
  external UA_ExpandedNodeId parentNodeId;

  external UA_NodeId referenceTypeId;

  external UA_ExpandedNodeId requestedNewNodeId;

  external UA_QualifiedName browseName;

  @ffi.UnsignedInt()
  external int nodeClassAsInt;

  UA_NodeClass get nodeClass => UA_NodeClass.fromValue(nodeClassAsInt);

  external UA_ExtensionObject nodeAttributes;

  external UA_ExpandedNodeId typeDefinition;
}

final class UA_AddReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_String targetServerUri;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.UnsignedInt()
  external int targetNodeClassAsInt;

  UA_NodeClass get targetNodeClass => UA_NodeClass.fromValue(targetNodeClassAsInt);
}

final class UA_DeleteNodesItem extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Bool()
  external bool deleteTargetReferences;
}

final class UA_DeleteReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.Bool()
  external bool deleteBidirectional;
}

enum UA_PerformUpdateType {
  UA_PERFORMUPDATETYPE_INSERT(1),
  UA_PERFORMUPDATETYPE_REPLACE(2),
  UA_PERFORMUPDATETYPE_UPDATE(3),
  UA_PERFORMUPDATETYPE_REMOVE(4),
  __UA_PERFORMUPDATETYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_PerformUpdateType(this.value);

  static UA_PerformUpdateType fromValue(int value) => switch (value) {
        1 => UA_PERFORMUPDATETYPE_INSERT,
        2 => UA_PERFORMUPDATETYPE_REPLACE,
        3 => UA_PERFORMUPDATETYPE_UPDATE,
        4 => UA_PERFORMUPDATETYPE_REMOVE,
        2147483647 => __UA_PERFORMUPDATETYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_PerformUpdateType: $value'),
      };
}

/// .. _datavalue:
///
/// DataValue
/// ^^^^^^^^^
/// A data value with an associated status code and timestamps.
final class UA_DataValue extends ffi.Struct {
  external UA_Variant value;

  @UA_DateTime()
  external int sourceTimestamp;

  @UA_DateTime()
  external int serverTimestamp;

  @UA_UInt16()
  external int sourcePicoseconds;

  @UA_UInt16()
  external int serverPicoseconds;

  @UA_StatusCode()
  external int status;

  @UA_Byte()
  external int substitute;
}

/// .. _access-control:
///
/// AccessControl Plugin API
/// ========================
/// The access control callback is used to authenticate sessions and grant access
/// rights accordingly.
///
/// The ``sessionId`` and ``sessionContext`` can be both NULL. This is the case
/// when, for example, a MonitoredItem (the underlying Subscription) is detached
/// from its Session but continues to run.
final class UA_AccessControl extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessControl> ac)>> clear;

  @ffi.Size()
  external int userTokenPoliciesSize;

  external ffi.Pointer<UA_UserTokenPolicy> userTokenPolicies;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_EndpointDescription> endpointDescription,
              ffi.Pointer<UA_ByteString> secureChannelRemoteCertificate,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<UA_ExtensionObject> userIdentityToken,
              ffi.Pointer<ffi.Pointer<ffi.Void>> sessionContext)>> activateSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server> server, ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId, ffi.Pointer<ffi.Void> sessionContext)>> closeSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_UInt32 Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserRightsMask;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_Byte Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserAccessLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext)>> getUserExecutable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext,
              ffi.Pointer<UA_NodeId> objectId,
              ffi.Pointer<ffi.Void> objectContext)>> getUserExecutableOnObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddNodesItem> item)>> allowAddNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddReferencesItem> item)>> allowAddReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteNodesItem> item)>> allowDeleteNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteReferencesItem> item)>> allowDeleteReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> allowBrowseNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> oldSessionId,
              ffi.Pointer<ffi.Void> oldSessionContext,
              ffi.Pointer<UA_NodeId> newSessionId,
              ffi.Pointer<ffi.Void> newSessionContext)>> allowTransferSubscription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.UnsignedInt performInsertReplace,
              ffi.Pointer<UA_DataValue> value)>> allowHistoryUpdateUpdateData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              UA_DateTime startTimestamp,
              UA_DateTime endTimestamp,
              ffi.Bool isDeleteModified)>> allowHistoryUpdateDeleteRawModified;
}

final class UA_LocalizedTextListEntry extends ffi.Struct {
  external ffi.Pointer<UA_LocalizedTextListEntry> next;

  external UA_LocalizedText localizedText;
}

final class UA_NodePointer extends ffi.Union {
  @ffi.UintPtr()
  external int immediate;

  external ffi.Pointer<UA_NodeId> id;

  external ffi.Pointer<UA_ExpandedNodeId> expandedId;

  external ffi.Pointer<UA_NodeHead> node;
}

/// Base Node Attributes
/// --------------------
///
/// Nodes contain attributes according to their node type. The base node
/// attributes are common to all node types. In the OPC UA :ref:`services`,
/// attributes are referred to via the :ref:`nodeid` of the containing node and
/// an integer :ref:`attribute-id`.
///
/// Internally, open62541 uses ``UA_Node`` in places where the exact node type is
/// not known or not important. The ``nodeClass`` attribute is used to ensure the
/// correctness of casting from ``UA_Node`` to a specific node type.
final class UA_ReferenceTarget extends ffi.Struct {
  external UA_NodePointer targetId;

  @UA_UInt32()
  external int targetNameHash;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<UA_ReferenceTargetTreeElem> left;

  external ffi.Pointer<UA_ReferenceTargetTreeElem> right;
}

final class UnnamedStruct5 extends ffi.Struct {
  external ffi.Pointer<UA_ReferenceTargetTreeElem> left;

  external ffi.Pointer<UA_ReferenceTargetTreeElem> right;
}

final class UA_ReferenceTargetTreeElem extends ffi.Struct {
  external UA_ReferenceTarget target;

  @UA_UInt32()
  external int targetIdHash;

  external UnnamedStruct4 idTreeEntry;

  external UnnamedStruct5 nameTreeEntry;
}

final class UnnamedStruct3 extends ffi.Struct {
  external ffi.Pointer<UA_ReferenceTargetTreeElem> idRoot;

  external ffi.Pointer<UA_ReferenceTargetTreeElem> nameRoot;
}

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<UA_ReferenceTarget> array;

  external UnnamedStruct3 tree;
}

final class UA_NodeReferenceKind extends ffi.Struct {
  external UnnamedUnion3 targets;

  @ffi.Size()
  external int targetsSize;

  @ffi.Bool()
  external bool hasRefTree;

  @UA_Byte()
  external int referenceTypeIndex;

  @ffi.Bool()
  external bool isInverse;
}

final class UA_MonitoredItem extends ffi.Opaque {}

/// Node Pointer
/// ------------
///
/// The "native" format for reference between nodes is the ExpandedNodeId. That
/// is, references can also point to external servers. In practice, most
/// references point to local nodes using numerical NodeIds from the
/// standard-defined namespace zero. In order to save space (and time),
/// pointer-tagging is used for compressed "NodePointer" representations.
/// Numerical NodeIds are immediately contained in the pointer. Full NodeIds and
/// ExpandedNodeIds are behind a pointer indirection. If the Nodestore supports
/// it, a NodePointer can also be an actual pointer to the target node.
///
/// Depending on the processor architecture, some numerical NodeIds don't fit
/// into an immediate encoding and are kept as pointers. ExpandedNodeIds may be
/// internally translated to "normal" NodeIds. Use the provided functions to
/// generate NodePointers that fit the assumptions for the local architecture.
final class UA_NodeHead extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.UnsignedInt()
  external int nodeClassAsInt;

  UA_NodeClass get nodeClass => UA_NodeClass.fromValue(nodeClassAsInt);

  external UA_QualifiedName browseName;

  external ffi.Pointer<UA_LocalizedTextListEntry> displayName;

  external ffi.Pointer<UA_LocalizedTextListEntry> description;

  @UA_UInt32()
  external int writeMask;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_NodeReferenceKind> references;

  external ffi.Pointer<ffi.Void> context;

  @ffi.Bool()
  external bool constructed;

  external ffi.Pointer<UA_MonitoredItem> monitoredItems;
}

/// Int32
/// ^^^^^
/// An integer value between -2 147 483 648 and 2 147 483 647.
typedef UA_Int32 = ffi.Int32;
typedef DartUA_Int32 = int;

enum UA_ValueBackendType {
  UA_VALUEBACKENDTYPE_NONE(0),
  UA_VALUEBACKENDTYPE_INTERNAL(1),
  UA_VALUEBACKENDTYPE_DATA_SOURCE_CALLBACK(2),
  UA_VALUEBACKENDTYPE_EXTERNAL(3);

  final int value;
  const UA_ValueBackendType(this.value);

  static UA_ValueBackendType fromValue(int value) => switch (value) {
        0 => UA_VALUEBACKENDTYPE_NONE,
        1 => UA_VALUEBACKENDTYPE_INTERNAL,
        2 => UA_VALUEBACKENDTYPE_DATA_SOURCE_CALLBACK,
        3 => UA_VALUEBACKENDTYPE_EXTERNAL,
        _ => throw ArgumentError('Unknown value for UA_ValueBackendType: $value'),
      };
}

/// .. _numericrange:
///
/// NumericRange
/// ^^^^^^^^^^^^
/// NumericRanges are used to indicate subsets of a (multidimensional) array.
/// They no official data type in the OPC UA standard and are transmitted only
/// with a string encoding, such as "1:2,0:3,5". The colon separates min/max
/// index and the comma separates dimensions. A single value indicates a range
/// with a single element (min==max).
final class UA_NumericRangeDimension extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

final class UA_NumericRange extends ffi.Struct {
  @ffi.Size()
  external int dimensionsSize;

  external ffi.Pointer<UA_NumericRangeDimension> dimensions;
}

final class UA_ValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> onWrite;
}

final class UnnamedStruct6 extends ffi.Struct {
  external UA_DataValue value;

  external UA_ValueCallback callback;
}

final class UA_DataSource extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Bool includeSourceTimeStamp,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> write;
}

/// .. _value-callback:
///
/// Value Callback
/// ~~~~~~~~~~~~~~
/// Value Callbacks can be attached to variable and variable type nodes. If
/// not ``NULL``, they are called before reading and after writing respectively.
final class UA_ExternalValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range)>> notificationRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> userWrite;
}

final class UnnamedStruct7 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<UA_DataValue>> value;

  external UA_ExternalValueCallback callback;
}

final class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct6 internal;

  external UA_DataSource dataSource;

  external UnnamedStruct7 external$;
}

final class UA_ValueBackend extends ffi.Struct {
  @ffi.UnsignedInt()
  external int backendTypeAsInt;

  UA_ValueBackendType get backendType => UA_ValueBackendType.fromValue(backendTypeAsInt);

  external UnnamedUnion4 backend;
}

/// VariableNode
/// ------------
enum UA_ValueSource {
  UA_VALUESOURCE_DATA(0),
  UA_VALUESOURCE_DATASOURCE(1);

  final int value;
  const UA_ValueSource(this.value);

  static UA_ValueSource fromValue(int value) => switch (value) {
        0 => UA_VALUESOURCE_DATA,
        1 => UA_VALUESOURCE_DATASOURCE,
        _ => throw ArgumentError('Unknown value for UA_ValueSource: $value'),
      };
}

final class UnnamedStruct8 extends ffi.Struct {
  external UA_DataValue value;

  external UA_ValueCallback callback;
}

final class UnnamedUnion5 extends ffi.Union {
  external UnnamedStruct8 data;

  external UA_DataSource dataSource;
}

final class UA_VariableNode extends ffi.Struct {
  external UA_NodeHead head;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  external UA_ValueBackend valueBackend;

  @ffi.UnsignedInt()
  external int valueSourceAsInt;

  UA_ValueSource get valueSource => UA_ValueSource.fromValue(valueSourceAsInt);

  external UnnamedUnion5 value;

  @UA_Byte()
  external int accessLevel;

  @UA_Double()
  external double minimumSamplingInterval;

  @ffi.Bool()
  external bool historizing;

  @ffi.Bool()
  external bool isDynamic;
}

final class UnnamedStruct9 extends ffi.Struct {
  external UA_DataValue value;

  external UA_ValueCallback callback;
}

final class UnnamedUnion6 extends ffi.Union {
  external UnnamedStruct9 data;

  external UA_DataSource dataSource;
}

/// Node Type Lifecycle
/// ~~~~~~~~~~~~~~~~~~~
/// Constructor and destructors for specific object and variable types.
final class UA_NodeTypeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> destructor;
}

/// VariableTypeNode
/// ----------------
final class UA_VariableTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  external UA_ValueBackend valueBackend;

  @ffi.UnsignedInt()
  external int valueSourceAsInt;

  UA_ValueSource get valueSource => UA_ValueSource.fromValue(valueSourceAsInt);

  external UnnamedUnion6 value;

  @ffi.Bool()
  external bool isAbstract;

  external UA_NodeTypeLifecycle lifecycle;
}

typedef UA_MethodCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    ffi.Size inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Size outputSize,
    ffi.Pointer<UA_Variant> output);
typedef DartUA_MethodCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    int outputSize,
    ffi.Pointer<UA_Variant> output);

/// MethodNode
/// ----------
typedef UA_MethodCallback = ffi.Pointer<ffi.NativeFunction<UA_MethodCallbackFunction>>;

final class UA_MethodNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool executable;

  external UA_MethodCallback method;
}

/// ObjectNode
/// ----------
final class UA_ObjectNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;
}

/// ObjectTypeNode
/// --------------
final class UA_ObjectTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  external UA_NodeTypeLifecycle lifecycle;
}

final class UA_ReferenceTypeSet extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<UA_UInt32> bits;
}

/// ReferenceTypeNode
/// -----------------
final class UA_ReferenceTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;

  @UA_Byte()
  external int referenceTypeIndex;

  external UA_ReferenceTypeSet subTypes;
}

/// DataTypeNode
/// ------------
final class UA_DataTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;
}

/// ViewNode
/// --------
final class UA_ViewNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;

  @ffi.Bool()
  external bool containsNoLoops;
}

/// Node Union
/// ----------
///
/// A union that represents any kind of node. The node head can always be used.
/// Check the NodeClass before accessing specific content.
final class UA_Node extends ffi.Union {
  external UA_NodeHead head;

  external UA_VariableNode variableNode;

  external UA_VariableTypeNode variableTypeNode;

  external UA_MethodNode methodNode;

  external UA_ObjectNode objectNode;

  external UA_ObjectTypeNode objectTypeNode;

  external UA_ReferenceTypeNode referenceTypeNode;

  external UA_DataTypeNode dataTypeNode;

  external UA_ViewNode viewNode;
}

enum UA_BrowseDirection {
  UA_BROWSEDIRECTION_FORWARD(0),
  UA_BROWSEDIRECTION_INVERSE(1),
  UA_BROWSEDIRECTION_BOTH(2),
  UA_BROWSEDIRECTION_INVALID(3),
  __UA_BROWSEDIRECTION_FORCE32BIT(2147483647);

  final int value;
  const UA_BrowseDirection(this.value);

  static UA_BrowseDirection fromValue(int value) => switch (value) {
        0 => UA_BROWSEDIRECTION_FORWARD,
        1 => UA_BROWSEDIRECTION_INVERSE,
        2 => UA_BROWSEDIRECTION_BOTH,
        3 => UA_BROWSEDIRECTION_INVALID,
        2147483647 => __UA_BROWSEDIRECTION_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_BrowseDirection: $value'),
      };
}

typedef UA_NodestoreVisitorFunction = ffi.Void Function(ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);
typedef DartUA_NodestoreVisitorFunction = void Function(ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);

/// Nodestore
/// ---------
///
/// The following definitions are used for implementing custom node storage
/// backends. **Most users will want to use the default nodestore and don't need
/// to work with the nodestore API**.
///
/// Outside of custom nodestore implementations, users should not manually edit
/// nodes. Please use the OPC UA services for that. Otherwise, all consistency
/// checks are omitted. This can crash the application eventually.
typedef UA_NodestoreVisitor = ffi.Pointer<ffi.NativeFunction<UA_NodestoreVisitorFunction>>;

final class UA_Nodestore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> nsCtx)>> clear;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void> nsCtx, ffi.UnsignedInt nodeClass)>>
      newNode;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      deleteNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId,
              UA_UInt32 attributeMask, UA_ReferenceTypeSet references, ffi.UnsignedInt referenceDirections)>> getNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void> nsCtx, UA_NodePointer ptr, UA_UInt32 attributeMask,
              UA_ReferenceTypeSet references, ffi.UnsignedInt referenceDirections)>> getNodeFromPtr;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(
              ffi.Pointer<ffi.Void> nsCtx,
              ffi.Pointer<UA_NodeId> nodeId,
              UA_UInt32 attributeMask,
              UA_ReferenceTypeSet references,
              ffi.UnsignedInt referenceDirections)>> getEditNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void> nsCtx, UA_NodePointer ptr, UA_UInt32 attributeMask,
              UA_ReferenceTypeSet references, ffi.UnsignedInt referenceDirections)>> getEditNodeFromPtr;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      releaseNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<UA_Node>> outNode)>> getNodeCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node, ffi.Pointer<UA_NodeId> addedNodeId)>> insertNode;

  external ffi
      .Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      replaceNode;

  external ffi
      .Pointer<ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId)>>
      removeNode;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<UA_NodeId> Function(ffi.Pointer<ffi.Void> nsCtx, UA_Byte refTypeIndex)>>
      getReferenceTypeId;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> nsCtx, UA_NodestoreVisitor visitor, ffi.Pointer<ffi.Void> visitorCtx)>> iterate;
}

/// Nodestore Plugin API
/// ====================
///
/// **Warning!!** The structures defined in this section are only relevant for
/// the developers of custom Nodestores. The interaction with the information
/// model is possible only via the OPC UA :ref:`services`. So the following
/// sections are purely informational so that users may have a clear mental
/// model of the underlying representation.
///
/// .. _node-lifecycle:
///
/// Node Lifecycle: Constructors, Destructors and Node Contexts
/// -----------------------------------------------------------
///
/// To finalize the instantiation of a node, a (user-defined) constructor
/// callback is executed. There can be both a global constructor for all nodes
/// and node-type constructor specific to the TypeDefinition of the new node
/// (attached to an ObjectTypeNode or VariableTypeNode).
///
/// In the hierarchy of ObjectTypes and VariableTypes, only the constructor of
/// the (lowest) type defined for the new node is executed. Note that every
/// Object and Variable can have only one ``isTypeOf`` reference. But type-nodes
/// can technically have several ``hasSubType`` references to implement multiple
/// inheritance. Issues of (multiple) inheritance in the constructor need to be
/// solved by the user.
///
/// When a node is destroyed, the node-type destructor is called before the
/// global destructor. So the overall node lifecycle is as follows:
///
/// 1. Global Constructor (set in the server config)
/// 2. Node-Type Constructor (for VariableType or ObjectTypes)
/// 3. (Usage-period of the Node)
/// 4. Node-Type Destructor
/// 5. Global Destructor
///
/// The constructor and destructor callbacks can be set to ``NULL`` and are not
/// used in that case. If the node-type constructor fails, the global destructor
/// will be called before removing the node. The destructors are assumed to never
/// fail.
///
/// Every node carries a user-context and a constructor-context pointer. The
/// user-context is used to attach custom data to a node. But the (user-defined)
/// constructors and destructors may replace the user-context pointer if they
/// wish to do so. The initial value for the constructor-context is ``NULL``.
/// When the ``AddNodes`` service is used over the network, the user-context
/// pointer of the new node is also initially set to ``NULL``.
///
/// Global Node Lifecycle
/// ~~~~~~~~~~~~~~~~~~~~~~
/// Global constructor and destructor callbacks used for every node type.
/// To be set in the server config.
final class UA_GlobalNodeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> destructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId)>> createOptionalChild;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId,
              ffi.Pointer<UA_NodeId> targetNodeId)>> generateChildNodeId;
}

typedef UA_Duration = UA_Double;

final class UA_DurationRange extends ffi.Struct {
  @UA_Duration()
  external double min;

  @UA_Duration()
  external double max;
}

/// Range Definition
/// ----------------
final class UA_UInt32Range extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

enum UA_PubSubComponentType {
  UA_PUBSUBCOMPONENT_CONNECTION(0),
  UA_PUBSUBCOMPONENT_WRITERGROUP(1),
  UA_PUBSUBCOMPONENT_DATASETWRITER(2),
  UA_PUBSUBCOMPONENT_READERGROUP(3),
  UA_PUBSUBCOMPONENT_DATASETREADER(4),
  UA_PUBSUBCOMPONENT_PUBLISHEDDATASET(5),
  UA_PUBSUBCOMPONENT_SUBSCRIBEDDDATASET(6);

  final int value;
  const UA_PubSubComponentType(this.value);

  static UA_PubSubComponentType fromValue(int value) => switch (value) {
        0 => UA_PUBSUBCOMPONENT_CONNECTION,
        1 => UA_PUBSUBCOMPONENT_WRITERGROUP,
        2 => UA_PUBSUBCOMPONENT_DATASETWRITER,
        3 => UA_PUBSUBCOMPONENT_READERGROUP,
        4 => UA_PUBSUBCOMPONENT_DATASETREADER,
        5 => UA_PUBSUBCOMPONENT_PUBLISHEDDATASET,
        6 => UA_PUBSUBCOMPONENT_SUBSCRIBEDDDATASET,
        _ => throw ArgumentError('Unknown value for UA_PubSubComponentType: $value'),
      };
}

enum UA_PubSubState {
  UA_PUBSUBSTATE_DISABLED(0),
  UA_PUBSUBSTATE_PAUSED(1),
  UA_PUBSUBSTATE_OPERATIONAL(2),
  UA_PUBSUBSTATE_ERROR(3),
  UA_PUBSUBSTATE_PREOPERATIONAL(4),
  __UA_PUBSUBSTATE_FORCE32BIT(2147483647);

  final int value;
  const UA_PubSubState(this.value);

  static UA_PubSubState fromValue(int value) => switch (value) {
        0 => UA_PUBSUBSTATE_DISABLED,
        1 => UA_PUBSUBSTATE_PAUSED,
        2 => UA_PUBSUBSTATE_OPERATIONAL,
        3 => UA_PUBSUBSTATE_ERROR,
        4 => UA_PUBSUBSTATE_PREOPERATIONAL,
        2147483647 => __UA_PUBSUBSTATE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_PubSubState: $value'),
      };
}

/// PubSub SecurityPolicy
/// ---------------------
///
/// For PubSub encryption, the message nonce is part of the (unencrypted)
/// SecurityHeader. The nonce is required for the de- and encryption and has to
/// be set in the channel context before de/encrypting.
final class UA_PubSubSecurityPolicy extends ffi.Struct {
  external UA_String policyUri;

  external UA_SecurityPolicySymmetricModule symmetricModule;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> policyContext,
              ffi.Pointer<UA_ByteString> signingKey,
              ffi.Pointer<UA_ByteString> encryptingKey,
              ffi.Pointer<UA_ByteString> keyNonce,
              ffi.Pointer<ffi.Pointer<ffi.Void>> wgContext)>> newContext;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> wgContext)>> deleteContext;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> wgContext, ffi.Pointer<UA_ByteString> signingKey,
              ffi.Pointer<UA_ByteString> encryptingKey, ffi.Pointer<UA_ByteString> keyNonce)>> setSecurityKeys;

  external ffi.Pointer<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<ffi.Void> wgContext, ffi.Pointer<UA_ByteString> nonce)>>
      setMessageNonce;

  external ffi.Pointer<UA_Logger> logger;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_PubSubSecurityPolicy> policy)>> clear;

  external ffi.Pointer<ffi.Void> policyContext;
}

/// Server-wide PubSub Configuration
/// --------------------------------
/// The PubSub configuration is part of the server-config.
final class UA_PubSubConfiguration extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server> server, UA_NodeId id, ffi.UnsignedInt componentType, ffi.Bool remove)>>
      componentLifecycleCallback;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_Server> server, UA_NodeId id, ffi.Pointer<ffi.UnsignedInt> targetState)>>
      beforeStateChangeCallback;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server> server, UA_NodeId id, ffi.UnsignedInt state, UA_StatusCode status)>>
      stateChangeCallback;

  @ffi.Bool()
  external bool enableDeltaFrames;

  @ffi.Bool()
  external bool enableInformationModelMethods;

  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_PubSubSecurityPolicy> securityPolicies;
}

final class UA_SimpleAttributeOperand extends ffi.Struct {
  external UA_NodeId typeDefinitionId;

  @ffi.Size()
  external int browsePathSize;

  external ffi.Pointer<UA_QualifiedName> browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

enum UA_FilterOperator {
  UA_FILTEROPERATOR_EQUALS(0),
  UA_FILTEROPERATOR_ISNULL(1),
  UA_FILTEROPERATOR_GREATERTHAN(2),
  UA_FILTEROPERATOR_LESSTHAN(3),
  UA_FILTEROPERATOR_GREATERTHANOREQUAL(4),
  UA_FILTEROPERATOR_LESSTHANOREQUAL(5),
  UA_FILTEROPERATOR_LIKE(6),
  UA_FILTEROPERATOR_NOT(7),
  UA_FILTEROPERATOR_BETWEEN(8),
  UA_FILTEROPERATOR_INLIST(9),
  UA_FILTEROPERATOR_AND(10),
  UA_FILTEROPERATOR_OR(11),
  UA_FILTEROPERATOR_CAST(12),
  UA_FILTEROPERATOR_INVIEW(13),
  UA_FILTEROPERATOR_OFTYPE(14),
  UA_FILTEROPERATOR_RELATEDTO(15),
  UA_FILTEROPERATOR_BITWISEAND(16),
  UA_FILTEROPERATOR_BITWISEOR(17),
  __UA_FILTEROPERATOR_FORCE32BIT(2147483647);

  final int value;
  const UA_FilterOperator(this.value);

  static UA_FilterOperator fromValue(int value) => switch (value) {
        0 => UA_FILTEROPERATOR_EQUALS,
        1 => UA_FILTEROPERATOR_ISNULL,
        2 => UA_FILTEROPERATOR_GREATERTHAN,
        3 => UA_FILTEROPERATOR_LESSTHAN,
        4 => UA_FILTEROPERATOR_GREATERTHANOREQUAL,
        5 => UA_FILTEROPERATOR_LESSTHANOREQUAL,
        6 => UA_FILTEROPERATOR_LIKE,
        7 => UA_FILTEROPERATOR_NOT,
        8 => UA_FILTEROPERATOR_BETWEEN,
        9 => UA_FILTEROPERATOR_INLIST,
        10 => UA_FILTEROPERATOR_AND,
        11 => UA_FILTEROPERATOR_OR,
        12 => UA_FILTEROPERATOR_CAST,
        13 => UA_FILTEROPERATOR_INVIEW,
        14 => UA_FILTEROPERATOR_OFTYPE,
        15 => UA_FILTEROPERATOR_RELATEDTO,
        16 => UA_FILTEROPERATOR_BITWISEAND,
        17 => UA_FILTEROPERATOR_BITWISEOR,
        2147483647 => __UA_FILTEROPERATOR_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_FilterOperator: $value'),
      };
}

final class UA_ContentFilterElement extends ffi.Struct {
  @ffi.UnsignedInt()
  external int filterOperatorAsInt;

  UA_FilterOperator get filterOperator => UA_FilterOperator.fromValue(filterOperatorAsInt);

  @ffi.Size()
  external int filterOperandsSize;

  external ffi.Pointer<UA_ExtensionObject> filterOperands;
}

final class UA_ContentFilter extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_ContentFilterElement> elements;
}

final class UA_EventFilter extends ffi.Struct {
  @ffi.Size()
  external int selectClausesSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectClauses;

  external UA_ContentFilter whereClause;
}

final class UA_EventFieldList extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @ffi.Size()
  external int eventFieldsSize;

  external ffi.Pointer<UA_Variant> eventFields;
}

final class UA_RequestHeader extends ffi.Struct {
  external UA_NodeId authenticationToken;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int requestHandle;

  @UA_UInt32()
  external int returnDiagnostics;

  external UA_String auditEntryId;

  @UA_UInt32()
  external int timeoutHint;

  external UA_ExtensionObject additionalHeader;
}

final class UA_ReadRawModifiedDetails extends ffi.Struct {
  @ffi.Bool()
  external bool isReadModified;

  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int endTime;

  @UA_UInt32()
  external int numValuesPerNode;

  @ffi.Bool()
  external bool returnBounds;
}

enum UA_TimestampsToReturn {
  UA_TIMESTAMPSTORETURN_SOURCE(0),
  UA_TIMESTAMPSTORETURN_SERVER(1),
  UA_TIMESTAMPSTORETURN_BOTH(2),
  UA_TIMESTAMPSTORETURN_NEITHER(3),
  UA_TIMESTAMPSTORETURN_INVALID(4),
  __UA_TIMESTAMPSTORETURN_FORCE32BIT(2147483647);

  final int value;
  const UA_TimestampsToReturn(this.value);

  static UA_TimestampsToReturn fromValue(int value) => switch (value) {
        0 => UA_TIMESTAMPSTORETURN_SOURCE,
        1 => UA_TIMESTAMPSTORETURN_SERVER,
        2 => UA_TIMESTAMPSTORETURN_BOTH,
        3 => UA_TIMESTAMPSTORETURN_NEITHER,
        4 => UA_TIMESTAMPSTORETURN_INVALID,
        2147483647 => __UA_TIMESTAMPSTORETURN_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TimestampsToReturn: $value'),
      };
}

final class UA_HistoryReadValueId extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String indexRange;

  external UA_QualifiedName dataEncoding;

  external UA_ByteString continuationPoint;
}

/// DiagnosticInfo
/// ^^^^^^^^^^^^^^
/// A structure that contains detailed error and diagnostic information
/// associated with a StatusCode.
final class UA_DiagnosticInfo extends ffi.Struct {
  @UA_Byte()
  external int substitute;

  @UA_Int32()
  external int symbolicId;

  @UA_Int32()
  external int namespaceUri;

  @UA_Int32()
  external int localizedText;

  @UA_Int32()
  external int locale;

  external UA_String additionalInfo;

  @UA_StatusCode()
  external int innerStatusCode;

  external ffi.Pointer<UA_DiagnosticInfo> innerDiagnosticInfo;
}

final class UA_ResponseHeader extends ffi.Struct {
  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int requestHandle;

  @UA_StatusCode()
  external int serviceResult;

  external UA_DiagnosticInfo serviceDiagnostics;

  @ffi.Size()
  external int stringTableSize;

  external ffi.Pointer<UA_String> stringTable;

  external UA_ExtensionObject additionalHeader;
}

final class UA_HistoryReadResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_ByteString continuationPoint;

  external UA_ExtensionObject historyData;
}

final class UA_HistoryReadResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_HistoryReadResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_HistoryData extends ffi.Struct {
  @ffi.Size()
  external int dataValuesSize;

  external ffi.Pointer<UA_DataValue> dataValues;
}

enum UA_HistoryUpdateType {
  UA_HISTORYUPDATETYPE_INSERT(1),
  UA_HISTORYUPDATETYPE_REPLACE(2),
  UA_HISTORYUPDATETYPE_UPDATE(3),
  UA_HISTORYUPDATETYPE_DELETE(4),
  __UA_HISTORYUPDATETYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_HistoryUpdateType(this.value);

  static UA_HistoryUpdateType fromValue(int value) => switch (value) {
        1 => UA_HISTORYUPDATETYPE_INSERT,
        2 => UA_HISTORYUPDATETYPE_REPLACE,
        3 => UA_HISTORYUPDATETYPE_UPDATE,
        4 => UA_HISTORYUPDATETYPE_DELETE,
        2147483647 => __UA_HISTORYUPDATETYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_HistoryUpdateType: $value'),
      };
}

final class UA_ModificationInfo extends ffi.Struct {
  @UA_DateTime()
  external int modificationTime;

  @ffi.UnsignedInt()
  external int updateTypeAsInt;

  UA_HistoryUpdateType get updateType => UA_HistoryUpdateType.fromValue(updateTypeAsInt);

  external UA_String userName;
}

final class UA_HistoryModifiedData extends ffi.Struct {
  @ffi.Size()
  external int dataValuesSize;

  external ffi.Pointer<UA_DataValue> dataValues;

  @ffi.Size()
  external int modificationInfosSize;

  external ffi.Pointer<UA_ModificationInfo> modificationInfos;
}

final class UA_ReadEventDetails extends ffi.Struct {
  @UA_UInt32()
  external int numValuesPerNode;

  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int endTime;

  external UA_EventFilter filter;
}

final class UA_HistoryEventFieldList extends ffi.Struct {
  @ffi.Size()
  external int eventFieldsSize;

  external ffi.Pointer<UA_Variant> eventFields;
}

final class UA_HistoryEvent extends ffi.Struct {
  @ffi.Size()
  external int eventsSize;

  external ffi.Pointer<UA_HistoryEventFieldList> events;
}

final class UA_AggregateConfiguration extends ffi.Struct {
  @ffi.Bool()
  external bool useServerCapabilitiesDefaults;

  @ffi.Bool()
  external bool treatUncertainAsBad;

  @UA_Byte()
  external int percentDataBad;

  @UA_Byte()
  external int percentDataGood;

  @ffi.Bool()
  external bool useSlopedExtrapolation;
}

final class UA_ReadProcessedDetails extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int endTime;

  @UA_Double()
  external double processingInterval;

  @ffi.Size()
  external int aggregateTypeSize;

  external ffi.Pointer<UA_NodeId> aggregateType;

  external UA_AggregateConfiguration aggregateConfiguration;
}

final class UA_ReadAtTimeDetails extends ffi.Struct {
  @ffi.Size()
  external int reqTimesSize;

  external ffi.Pointer<UA_DateTime> reqTimes;

  @ffi.Bool()
  external bool useSimpleBounds;
}

final class UA_UpdateDataDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.UnsignedInt()
  external int performInsertReplaceAsInt;

  UA_PerformUpdateType get performInsertReplace => UA_PerformUpdateType.fromValue(performInsertReplaceAsInt);

  @ffi.Size()
  external int updateValuesSize;

  external ffi.Pointer<UA_DataValue> updateValues;
}

final class UA_HistoryUpdateResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int operationResultsSize;

  external ffi.Pointer<UA_StatusCode> operationResults;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_DeleteRawModifiedDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Bool()
  external bool isDeleteModified;

  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int endTime;
}

final class UA_HistoryDatabase extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryDatabase> hdb)>> clear;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Bool historizing,
              ffi.Pointer<UA_DataValue> value)>> setValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> originId,
              ffi.Pointer<UA_NodeId> emitterId,
              ffi.Pointer<UA_EventFilter> historicalEventFilter,
              ffi.Pointer<UA_EventFieldList> fieldList)>> setEvent;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_ReadRawModifiedDetails> historyReadDetails,
              ffi.UnsignedInt timestampsToReturn,
              ffi.Bool releaseContinuationPoints,
              ffi.Size nodesToReadSize,
              ffi.Pointer<UA_HistoryReadValueId> nodesToRead,
              ffi.Pointer<UA_HistoryReadResponse> response,
              ffi.Pointer<ffi.Pointer<UA_HistoryData>> historyData)>> readRaw;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_ReadRawModifiedDetails> historyReadDetails,
              ffi.UnsignedInt timestampsToReturn,
              ffi.Bool releaseContinuationPoints,
              ffi.Size nodesToReadSize,
              ffi.Pointer<UA_HistoryReadValueId> nodesToRead,
              ffi.Pointer<UA_HistoryReadResponse> response,
              ffi.Pointer<ffi.Pointer<UA_HistoryModifiedData>> historyData)>> readModified;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_ReadEventDetails> historyReadDetails,
              ffi.UnsignedInt timestampsToReturn,
              ffi.Bool releaseContinuationPoints,
              ffi.Size nodesToReadSize,
              ffi.Pointer<UA_HistoryReadValueId> nodesToRead,
              ffi.Pointer<UA_HistoryReadResponse> response,
              ffi.Pointer<ffi.Pointer<UA_HistoryEvent>> historyData)>> readEvent;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_ReadProcessedDetails> historyReadDetails,
              ffi.UnsignedInt timestampsToReturn,
              ffi.Bool releaseContinuationPoints,
              ffi.Size nodesToReadSize,
              ffi.Pointer<UA_HistoryReadValueId> nodesToRead,
              ffi.Pointer<UA_HistoryReadResponse> response,
              ffi.Pointer<ffi.Pointer<UA_HistoryData>> historyData)>> readProcessed;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_ReadAtTimeDetails> historyReadDetails,
              ffi.UnsignedInt timestampsToReturn,
              ffi.Bool releaseContinuationPoints,
              ffi.Size nodesToReadSize,
              ffi.Pointer<UA_HistoryReadValueId> nodesToRead,
              ffi.Pointer<UA_HistoryReadResponse> response,
              ffi.Pointer<ffi.Pointer<UA_HistoryData>> historyData)>> readAtTime;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_UpdateDataDetails> details,
              ffi.Pointer<UA_HistoryUpdateResult> result)>> updateData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_RequestHeader> requestHeader,
              ffi.Pointer<UA_DeleteRawModifiedDetails> details,
              ffi.Pointer<UA_HistoryUpdateResult> result)>> deleteRawModified;
}

/// .. _server:
///
/// Server
/// ======
///
/// .. _server-configuration:
///
/// Server Configuration
/// --------------------
/// The configuration structure is passed to the server during initialization.
/// The server expects that the configuration is not modified during runtime.
/// Currently, only one server can use a configuration at a time. During
/// shutdown, the server will clean up the parts of the configuration that are
/// modified at runtime through the provided API.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a server configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. by adding a server certificate
/// 3. Instantiate a server with it
/// 4. After shutdown of the server, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ServerConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<UA_Logger> logging;

  external UA_BuildInfo buildInfo;

  external UA_ApplicationDescription applicationDescription;

  @UA_Double()
  external double shutdownDelay;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server> server, ffi.UnsignedInt state)>>
      notifyLifecycleState;

  @ffi.UnsignedInt()
  external int verifyRequestTimestampAsInt;

  UA_RuleHandling get verifyRequestTimestamp => UA_RuleHandling.fromValue(verifyRequestTimestampAsInt);

  @ffi.UnsignedInt()
  external int allowEmptyVariablesAsInt;

  UA_RuleHandling get allowEmptyVariables => UA_RuleHandling.fromValue(allowEmptyVariablesAsInt);

  @ffi.UnsignedInt()
  external int allowAllCertificateUrisAsInt;

  UA_RuleHandling get allowAllCertificateUris => UA_RuleHandling.fromValue(allowAllCertificateUrisAsInt);

  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  external ffi.Pointer<UA_EventLoop> eventLoop;

  @ffi.Bool()
  external bool externalEventLoop;

  external ffi.Pointer<UA_String> serverUrls;

  @ffi.Size()
  external int serverUrlsSize;

  @ffi.Bool()
  external bool tcpEnabled;

  @UA_UInt32()
  external int tcpBufSize;

  @UA_UInt32()
  external int tcpMaxMsgSize;

  @UA_UInt32()
  external int tcpMaxChunks;

  @ffi.Bool()
  external bool tcpReuseAddr;

  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  @ffi.Size()
  external int endpointsSize;

  external ffi.Pointer<UA_EndpointDescription> endpoints;

  @ffi.Bool()
  external bool securityPolicyNoneDiscoveryOnly;

  @ffi.Bool()
  external bool allowNonePolicyPassword;

  external UA_CertificateGroup secureChannelPKI;

  external UA_CertificateGroup sessionPKI;

  external UA_AccessControl accessControl;

  external UA_Nodestore nodestore;

  external UA_GlobalNodeLifecycle nodeLifecycle;

  @ffi.Bool()
  external bool modellingRulesOnInstances;

  @UA_UInt16()
  external int maxSecureChannels;

  @UA_UInt32()
  external int maxSecurityTokenLifetime;

  @UA_UInt16()
  external int maxSessions;

  @UA_Double()
  external double maxSessionTimeout;

  @UA_UInt32()
  external int maxNodesPerRead;

  @UA_UInt32()
  external int maxNodesPerWrite;

  @UA_UInt32()
  external int maxNodesPerMethodCall;

  @UA_UInt32()
  external int maxNodesPerBrowse;

  @UA_UInt32()
  external int maxNodesPerRegisterNodes;

  @UA_UInt32()
  external int maxNodesPerTranslateBrowsePathsToNodeIds;

  @UA_UInt32()
  external int maxNodesPerNodeManagement;

  @UA_UInt32()
  external int maxMonitoredItemsPerCall;

  @UA_UInt32()
  external int maxReferencesPerNode;

  @UA_UInt32()
  external int maxTrustListSize;

  @UA_UInt32()
  external int maxRejectedListSize;

  @UA_UInt32()
  external int discoveryCleanupTimeout;

  @ffi.Bool()
  external bool subscriptionsEnabled;

  @UA_UInt32()
  external int maxSubscriptions;

  @UA_UInt32()
  external int maxSubscriptionsPerSession;

  external UA_DurationRange publishingIntervalLimits;

  external UA_UInt32Range lifeTimeCountLimits;

  external UA_UInt32Range keepAliveCountLimits;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool enableRetransmissionQueue;

  @UA_UInt32()
  external int maxRetransmissionQueueSize;

  @UA_UInt32()
  external int maxEventsPerNode;

  @UA_UInt32()
  external int maxMonitoredItems;

  @UA_UInt32()
  external int maxMonitoredItemsPerSubscription;

  external UA_DurationRange samplingIntervalLimits;

  external UA_UInt32Range queueSizeLimits;

  @UA_UInt32()
  external int maxPublishReqPerSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              UA_UInt32 attibuteId,
              ffi.Bool removed)>> monitoredItemRegisterCallback;

  @ffi.Bool()
  external bool pubsubEnabled;

  external UA_PubSubConfiguration pubSubConfig;

  @ffi.Bool()
  external bool historizingEnabled;

  external UA_HistoryDatabase historyDatabase;

  @ffi.Bool()
  external bool accessHistoryDataCapability;

  @UA_UInt32()
  external int maxReturnDataValues;

  @ffi.Bool()
  external bool accessHistoryEventsCapability;

  @UA_UInt32()
  external int maxReturnEventValues;

  @ffi.Bool()
  external bool insertDataCapability;

  @ffi.Bool()
  external bool insertEventCapability;

  @ffi.Bool()
  external bool insertAnnotationsCapability;

  @ffi.Bool()
  external bool replaceDataCapability;

  @ffi.Bool()
  external bool replaceEventCapability;

  @ffi.Bool()
  external bool updateDataCapability;

  @ffi.Bool()
  external bool updateEventCapability;

  @ffi.Bool()
  external bool deleteRawCapability;

  @ffi.Bool()
  external bool deleteEventCapability;

  @ffi.Bool()
  external bool deleteAtTimeDataCapability;

  @UA_UInt32()
  external int reverseReconnectInterval;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ServerConfig> sc, ffi.Pointer<UA_ByteString> password)>>
      privateKeyPasswordCallback;
}

final class UA_Client extends ffi.Opaque {}

/// .. _common:
///
/// Common Definitions
/// ==================
///
/// Common definitions for Client, Server and PubSub.
///
/// .. _attribute-id:
///
/// Attribute Id
/// ------------
/// Every node in an OPC UA information model contains attributes depending on
/// the node type. Possible attributes are as follows:
enum UA_AttributeId {
  UA_ATTRIBUTEID_INVALID(0),
  UA_ATTRIBUTEID_NODEID(1),
  UA_ATTRIBUTEID_NODECLASS(2),
  UA_ATTRIBUTEID_BROWSENAME(3),
  UA_ATTRIBUTEID_DISPLAYNAME(4),
  UA_ATTRIBUTEID_DESCRIPTION(5),
  UA_ATTRIBUTEID_WRITEMASK(6),
  UA_ATTRIBUTEID_USERWRITEMASK(7),
  UA_ATTRIBUTEID_ISABSTRACT(8),
  UA_ATTRIBUTEID_SYMMETRIC(9),
  UA_ATTRIBUTEID_INVERSENAME(10),
  UA_ATTRIBUTEID_CONTAINSNOLOOPS(11),
  UA_ATTRIBUTEID_EVENTNOTIFIER(12),
  UA_ATTRIBUTEID_VALUE(13),
  UA_ATTRIBUTEID_DATATYPE(14),
  UA_ATTRIBUTEID_VALUERANK(15),
  UA_ATTRIBUTEID_ARRAYDIMENSIONS(16),
  UA_ATTRIBUTEID_ACCESSLEVEL(17),
  UA_ATTRIBUTEID_USERACCESSLEVEL(18),
  UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL(19),
  UA_ATTRIBUTEID_HISTORIZING(20),
  UA_ATTRIBUTEID_EXECUTABLE(21),
  UA_ATTRIBUTEID_USEREXECUTABLE(22),
  UA_ATTRIBUTEID_DATATYPEDEFINITION(23),
  UA_ATTRIBUTEID_ROLEPERMISSIONS(24),
  UA_ATTRIBUTEID_USERROLEPERMISSIONS(25),
  UA_ATTRIBUTEID_ACCESSRESTRICTIONS(26),
  UA_ATTRIBUTEID_ACCESSLEVELEX(27);

  final int value;
  const UA_AttributeId(this.value);

  static UA_AttributeId fromValue(int value) => switch (value) {
        0 => UA_ATTRIBUTEID_INVALID,
        1 => UA_ATTRIBUTEID_NODEID,
        2 => UA_ATTRIBUTEID_NODECLASS,
        3 => UA_ATTRIBUTEID_BROWSENAME,
        4 => UA_ATTRIBUTEID_DISPLAYNAME,
        5 => UA_ATTRIBUTEID_DESCRIPTION,
        6 => UA_ATTRIBUTEID_WRITEMASK,
        7 => UA_ATTRIBUTEID_USERWRITEMASK,
        8 => UA_ATTRIBUTEID_ISABSTRACT,
        9 => UA_ATTRIBUTEID_SYMMETRIC,
        10 => UA_ATTRIBUTEID_INVERSENAME,
        11 => UA_ATTRIBUTEID_CONTAINSNOLOOPS,
        12 => UA_ATTRIBUTEID_EVENTNOTIFIER,
        13 => UA_ATTRIBUTEID_VALUE,
        14 => UA_ATTRIBUTEID_DATATYPE,
        15 => UA_ATTRIBUTEID_VALUERANK,
        16 => UA_ATTRIBUTEID_ARRAYDIMENSIONS,
        17 => UA_ATTRIBUTEID_ACCESSLEVEL,
        18 => UA_ATTRIBUTEID_USERACCESSLEVEL,
        19 => UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL,
        20 => UA_ATTRIBUTEID_HISTORIZING,
        21 => UA_ATTRIBUTEID_EXECUTABLE,
        22 => UA_ATTRIBUTEID_USEREXECUTABLE,
        23 => UA_ATTRIBUTEID_DATATYPEDEFINITION,
        24 => UA_ATTRIBUTEID_ROLEPERMISSIONS,
        25 => UA_ATTRIBUTEID_USERROLEPERMISSIONS,
        26 => UA_ATTRIBUTEID_ACCESSRESTRICTIONS,
        27 => UA_ATTRIBUTEID_ACCESSLEVELEX,
        _ => throw ArgumentError('Unknown value for UA_AttributeId: $value'),
      };
}

/// Order
/// -----
/// The Order enum is used to establish an absolute ordering between elements.
enum UA_Order {
  UA_ORDER_LESS(-1),
  UA_ORDER_EQ(0),
  UA_ORDER_MORE(1);

  final int value;
  const UA_Order(this.value);

  static UA_Order fromValue(int value) => switch (value) {
        -1 => UA_ORDER_LESS,
        0 => UA_ORDER_EQ,
        1 => UA_ORDER_MORE,
        _ => throw ArgumentError('Unknown value for UA_Order: $value'),
      };
}

/// Connection State
/// ----------------
enum UA_ConnectionState {
  UA_CONNECTIONSTATE_CLOSED(0),
  UA_CONNECTIONSTATE_OPENING(1),
  UA_CONNECTIONSTATE_ESTABLISHED(2),
  UA_CONNECTIONSTATE_CLOSING(3);

  final int value;
  const UA_ConnectionState(this.value);

  static UA_ConnectionState fromValue(int value) => switch (value) {
        0 => UA_CONNECTIONSTATE_CLOSED,
        1 => UA_CONNECTIONSTATE_OPENING,
        2 => UA_CONNECTIONSTATE_ESTABLISHED,
        3 => UA_CONNECTIONSTATE_CLOSING,
        _ => throw ArgumentError('Unknown value for UA_ConnectionState: $value'),
      };
}

enum UA_SecureChannelState {
  UA_SECURECHANNELSTATE_CLOSED(0),
  UA_SECURECHANNELSTATE_REVERSE_LISTENING(1),
  UA_SECURECHANNELSTATE_CONNECTING(2),
  UA_SECURECHANNELSTATE_CONNECTED(3),
  UA_SECURECHANNELSTATE_REVERSE_CONNECTED(4),
  UA_SECURECHANNELSTATE_RHE_SENT(5),
  UA_SECURECHANNELSTATE_HEL_SENT(6),
  UA_SECURECHANNELSTATE_HEL_RECEIVED(7),
  UA_SECURECHANNELSTATE_ACK_SENT(8),
  UA_SECURECHANNELSTATE_ACK_RECEIVED(9),
  UA_SECURECHANNELSTATE_OPN_SENT(10),
  UA_SECURECHANNELSTATE_OPEN(11),
  UA_SECURECHANNELSTATE_CLOSING(12);

  final int value;
  const UA_SecureChannelState(this.value);

  static UA_SecureChannelState fromValue(int value) => switch (value) {
        0 => UA_SECURECHANNELSTATE_CLOSED,
        1 => UA_SECURECHANNELSTATE_REVERSE_LISTENING,
        2 => UA_SECURECHANNELSTATE_CONNECTING,
        3 => UA_SECURECHANNELSTATE_CONNECTED,
        4 => UA_SECURECHANNELSTATE_REVERSE_CONNECTED,
        5 => UA_SECURECHANNELSTATE_RHE_SENT,
        6 => UA_SECURECHANNELSTATE_HEL_SENT,
        7 => UA_SECURECHANNELSTATE_HEL_RECEIVED,
        8 => UA_SECURECHANNELSTATE_ACK_SENT,
        9 => UA_SECURECHANNELSTATE_ACK_RECEIVED,
        10 => UA_SECURECHANNELSTATE_OPN_SENT,
        11 => UA_SECURECHANNELSTATE_OPEN,
        12 => UA_SECURECHANNELSTATE_CLOSING,
        _ => throw ArgumentError('Unknown value for UA_SecureChannelState: $value'),
      };
}

enum UA_SessionState {
  UA_SESSIONSTATE_CLOSED(0),
  UA_SESSIONSTATE_CREATE_REQUESTED(1),
  UA_SESSIONSTATE_CREATED(2),
  UA_SESSIONSTATE_ACTIVATE_REQUESTED(3),
  UA_SESSIONSTATE_ACTIVATED(4),
  UA_SESSIONSTATE_CLOSING(5);

  final int value;
  const UA_SessionState(this.value);

  static UA_SessionState fromValue(int value) => switch (value) {
        0 => UA_SESSIONSTATE_CLOSED,
        1 => UA_SESSIONSTATE_CREATE_REQUESTED,
        2 => UA_SESSIONSTATE_CREATED,
        3 => UA_SESSIONSTATE_ACTIVATE_REQUESTED,
        4 => UA_SESSIONSTATE_ACTIVATED,
        5 => UA_SESSIONSTATE_CLOSING,
        _ => throw ArgumentError('Unknown value for UA_SessionState: $value'),
      };
}

/// Statistic Counters
/// ------------------
/// The stack manages statistic counters for SecureChannels and Sessions.
///
/// The Session layer counters are matching the counters of the
/// ServerDiagnosticsSummaryDataType that are defined in the OPC UA Part 5
/// specification. The SecureChannel counters are not defined in the OPC UA spec,
/// but are harmonized with the Session layer counters if possible.
enum UA_ShutdownReason {
  UA_SHUTDOWNREASON_CLOSE(0),
  UA_SHUTDOWNREASON_REJECT(1),
  UA_SHUTDOWNREASON_SECURITYREJECT(2),
  UA_SHUTDOWNREASON_TIMEOUT(3),
  UA_SHUTDOWNREASON_ABORT(4),
  UA_SHUTDOWNREASON_PURGE(5);

  final int value;
  const UA_ShutdownReason(this.value);

  static UA_ShutdownReason fromValue(int value) => switch (value) {
        0 => UA_SHUTDOWNREASON_CLOSE,
        1 => UA_SHUTDOWNREASON_REJECT,
        2 => UA_SHUTDOWNREASON_SECURITYREJECT,
        3 => UA_SHUTDOWNREASON_TIMEOUT,
        4 => UA_SHUTDOWNREASON_ABORT,
        5 => UA_SHUTDOWNREASON_PURGE,
        _ => throw ArgumentError('Unknown value for UA_ShutdownReason: $value'),
      };
}

final class UA_SecureChannelStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentChannelCount;

  @ffi.Size()
  external int cumulatedChannelCount;

  @ffi.Size()
  external int rejectedChannelCount;

  @ffi.Size()
  external int channelTimeoutCount;

  @ffi.Size()
  external int channelAbortCount;

  @ffi.Size()
  external int channelPurgeCount;
}

final class UA_SessionStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentSessionCount;

  @ffi.Size()
  external int cumulatedSessionCount;

  @ffi.Size()
  external int securityRejectedSessionCount;

  @ffi.Size()
  external int rejectedSessionCount;

  @ffi.Size()
  external int sessionTimeoutCount;

  @ffi.Size()
  external int sessionAbortCount;
}

/// Namespace Mapping
/// -----------------
///
/// Every :ref:`nodeid` references a namespace index. Actually the namespace is
/// identified by its URI. The namespace-array of the server maps the URI to the
/// namespace index in the array. Namespace zero always has the URI
/// ```http://opcfoundation.org/UA/```. Namespace one has the application URI of
/// the server. All namespaces beyond get a custom assignment.
///
/// In order to have predictable NodeIds, a client might predefined its own
/// namespace array that is different from the server's. When a NodeId is decoded
/// from a network message (binary or JSON), a mapping-table can be used to
/// automatically translate between the remote and local namespace index. The
/// mapping is typically done by the client who can generate the mapping table
/// after reading the namespace-array of the server. The reverse mapping is done
/// in the encoding if the mapping table is set in the options.
///
/// The mapping table also contains the full URI names. It is also used to
/// translate the ``NamespaceUri`` field of an ExpandedNodeId into the namespace
/// index of the NodeId embedded in the ExpandedNodeId.
final class UA_NamespaceMapping extends ffi.Struct {
  external ffi.Pointer<UA_String> namespaceUris;

  @ffi.Size()
  external int namespaceUrisSize;

  external ffi.Pointer<UA_UInt16> local2remote;

  @ffi.Size()
  external int local2remoteSize;

  external ffi.Pointer<UA_UInt16> remote2local;

  @ffi.Size()
  external int remote2localSize;
}

/// SByte
/// ^^^^^
/// An integer value between -128 and 127.
typedef UA_SByte = ffi.Int8;
typedef DartUA_SByte = int;

/// Int16
/// ^^^^^
/// An integer value between -32 768 and 32 767.
typedef UA_Int16 = ffi.Int16;
typedef DartUA_Int16 = int;

/// Float
/// ^^^^^
/// An IEEE single precision (32 bit) floating point value.
typedef UA_Float = ffi.Float;
typedef DartUA_Float = double;

final class UA_DateTimeStruct extends ffi.Struct {
  @UA_UInt16()
  external int nanoSec;

  @UA_UInt16()
  external int microSec;

  @UA_UInt16()
  external int milliSec;

  @UA_UInt16()
  external int sec;

  @UA_UInt16()
  external int min;

  @UA_UInt16()
  external int hour;

  @UA_UInt16()
  external int day;

  @UA_UInt16()
  external int month;

  @UA_Int16()
  external int year;
}

/// XmlElement
/// ^^^^^^^^^^
/// An XML element.
typedef UA_XmlElement = UA_String;

enum UA_DataTypeKind {
  UA_DATATYPEKIND_BOOLEAN(0),
  UA_DATATYPEKIND_SBYTE(1),
  UA_DATATYPEKIND_BYTE(2),
  UA_DATATYPEKIND_INT16(3),
  UA_DATATYPEKIND_UINT16(4),
  UA_DATATYPEKIND_INT32(5),
  UA_DATATYPEKIND_UINT32(6),
  UA_DATATYPEKIND_INT64(7),
  UA_DATATYPEKIND_UINT64(8),
  UA_DATATYPEKIND_FLOAT(9),
  UA_DATATYPEKIND_DOUBLE(10),
  UA_DATATYPEKIND_STRING(11),
  UA_DATATYPEKIND_DATETIME(12),
  UA_DATATYPEKIND_GUID(13),
  UA_DATATYPEKIND_BYTESTRING(14),
  UA_DATATYPEKIND_XMLELEMENT(15),
  UA_DATATYPEKIND_NODEID(16),
  UA_DATATYPEKIND_EXPANDEDNODEID(17),
  UA_DATATYPEKIND_STATUSCODE(18),
  UA_DATATYPEKIND_QUALIFIEDNAME(19),
  UA_DATATYPEKIND_LOCALIZEDTEXT(20),
  UA_DATATYPEKIND_EXTENSIONOBJECT(21),
  UA_DATATYPEKIND_DATAVALUE(22),
  UA_DATATYPEKIND_VARIANT(23),
  UA_DATATYPEKIND_DIAGNOSTICINFO(24),
  UA_DATATYPEKIND_DECIMAL(25),
  UA_DATATYPEKIND_ENUM(26),
  UA_DATATYPEKIND_STRUCTURE(27),
  UA_DATATYPEKIND_OPTSTRUCT(28),
  UA_DATATYPEKIND_UNION(29),
  UA_DATATYPEKIND_BITFIELDCLUSTER(30);

  final int value;
  const UA_DataTypeKind(this.value);

  static UA_DataTypeKind fromValue(int value) => switch (value) {
        0 => UA_DATATYPEKIND_BOOLEAN,
        1 => UA_DATATYPEKIND_SBYTE,
        2 => UA_DATATYPEKIND_BYTE,
        3 => UA_DATATYPEKIND_INT16,
        4 => UA_DATATYPEKIND_UINT16,
        5 => UA_DATATYPEKIND_INT32,
        6 => UA_DATATYPEKIND_UINT32,
        7 => UA_DATATYPEKIND_INT64,
        8 => UA_DATATYPEKIND_UINT64,
        9 => UA_DATATYPEKIND_FLOAT,
        10 => UA_DATATYPEKIND_DOUBLE,
        11 => UA_DATATYPEKIND_STRING,
        12 => UA_DATATYPEKIND_DATETIME,
        13 => UA_DATATYPEKIND_GUID,
        14 => UA_DATATYPEKIND_BYTESTRING,
        15 => UA_DATATYPEKIND_XMLELEMENT,
        16 => UA_DATATYPEKIND_NODEID,
        17 => UA_DATATYPEKIND_EXPANDEDNODEID,
        18 => UA_DATATYPEKIND_STATUSCODE,
        19 => UA_DATATYPEKIND_QUALIFIEDNAME,
        20 => UA_DATATYPEKIND_LOCALIZEDTEXT,
        21 => UA_DATATYPEKIND_EXTENSIONOBJECT,
        22 => UA_DATATYPEKIND_DATAVALUE,
        23 => UA_DATATYPEKIND_VARIANT,
        24 => UA_DATATYPEKIND_DIAGNOSTICINFO,
        25 => UA_DATATYPEKIND_DECIMAL,
        26 => UA_DATATYPEKIND_ENUM,
        27 => UA_DATATYPEKIND_STRUCTURE,
        28 => UA_DATATYPEKIND_OPTSTRUCT,
        29 => UA_DATATYPEKIND_UNION,
        30 => UA_DATATYPEKIND_BITFIELDCLUSTER,
        _ => throw ArgumentError('Unknown value for UA_DataTypeKind: $value'),
      };
}

/// Binary Encoding/Decoding
/// ------------------------
///
/// Encoding and decoding routines for the binary format. For the binary decoding
/// additional data types can be forwarded.
final class UA_EncodeBinaryOptions extends ffi.Struct {
  external ffi.Pointer<UA_NamespaceMapping> namespaceMapping;
}

final class UA_DecodeBinaryOptions extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> customTypes;

  external ffi.Pointer<UA_NamespaceMapping> namespaceMapping;

  external ffi.Pointer<ffi.Void> callocContext;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> callocContext, ffi.Size nelem, ffi.Size elsize)>> calloc;
}

final class UA_EncodeJsonOptions extends ffi.Struct {
  external ffi.Pointer<UA_NamespaceMapping> namespaceMapping;

  external ffi.Pointer<UA_String> serverUris;

  @ffi.Size()
  external int serverUrisSize;

  @ffi.Bool()
  external bool useReversible;

  @ffi.Bool()
  external bool prettyPrint;

  @ffi.Bool()
  external bool unquotedKeys;

  @ffi.Bool()
  external bool stringNodeIds;
}

final class UA_DecodeJsonOptions extends ffi.Struct {
  external ffi.Pointer<UA_NamespaceMapping> namespaceMapping;

  external ffi.Pointer<UA_String> serverUris;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_DataTypeArray> customTypes;

  external ffi.Pointer<ffi.Size> decodedLength;
}

enum UA_NamingRuleType {
  UA_NAMINGRULETYPE_MANDATORY(1),
  UA_NAMINGRULETYPE_OPTIONAL(2),
  UA_NAMINGRULETYPE_CONSTRAINT(3),
  __UA_NAMINGRULETYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_NamingRuleType(this.value);

  static UA_NamingRuleType fromValue(int value) => switch (value) {
        1 => UA_NAMINGRULETYPE_MANDATORY,
        2 => UA_NAMINGRULETYPE_OPTIONAL,
        3 => UA_NAMINGRULETYPE_CONSTRAINT,
        2147483647 => __UA_NAMINGRULETYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_NamingRuleType: $value'),
      };
}

enum UA_Enumeration {
  __UA_ENUMERATION_FORCE32BIT(2147483647);

  final int value;
  const UA_Enumeration(this.value);

  static UA_Enumeration fromValue(int value) => switch (value) {
        2147483647 => __UA_ENUMERATION_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_Enumeration: $value'),
      };
}

typedef UA_ImageBMP = UA_ByteString;
typedef UA_ImageGIF = UA_ByteString;
typedef UA_ImageJPG = UA_ByteString;
typedef UA_ImagePNG = UA_ByteString;
typedef UA_AudioDataType = UA_ByteString;
typedef UA_UriString = UA_String;
typedef UA_BitFieldMaskDataType = UA_UInt64;
typedef UA_SemanticVersionString = UA_String;

final class UA_AdditionalParametersType extends ffi.Struct {
  @ffi.Size()
  external int parametersSize;

  external ffi.Pointer<UA_KeyValuePair> parameters;
}

final class UA_EphemeralKeyType extends ffi.Struct {
  external UA_ByteString publicKey;

  external UA_ByteString signature;
}

final class UA_RationalNumber extends ffi.Struct {
  @UA_Int32()
  external int numerator;

  @UA_UInt32()
  external int denominator;
}

final class UA_ThreeDVector extends ffi.Struct {
  @UA_Double()
  external double x;

  @UA_Double()
  external double y;

  @UA_Double()
  external double z;
}

final class UA_ThreeDCartesianCoordinates extends ffi.Struct {
  @UA_Double()
  external double x;

  @UA_Double()
  external double y;

  @UA_Double()
  external double z;
}

final class UA_ThreeDOrientation extends ffi.Struct {
  @UA_Double()
  external double a;

  @UA_Double()
  external double b;

  @UA_Double()
  external double c;
}

final class UA_ThreeDFrame extends ffi.Struct {
  external UA_ThreeDCartesianCoordinates cartesianCoordinates;

  external UA_ThreeDOrientation orientation;
}

enum UA_OpenFileMode {
  UA_OPENFILEMODE_READ(1),
  UA_OPENFILEMODE_WRITE(2),
  UA_OPENFILEMODE_ERASEEXISTING(4),
  UA_OPENFILEMODE_APPEND(8),
  __UA_OPENFILEMODE_FORCE32BIT(2147483647);

  final int value;
  const UA_OpenFileMode(this.value);

  static UA_OpenFileMode fromValue(int value) => switch (value) {
        1 => UA_OPENFILEMODE_READ,
        2 => UA_OPENFILEMODE_WRITE,
        4 => UA_OPENFILEMODE_ERASEEXISTING,
        8 => UA_OPENFILEMODE_APPEND,
        2147483647 => __UA_OPENFILEMODE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_OpenFileMode: $value'),
      };
}

enum UA_IdentityCriteriaType {
  UA_IDENTITYCRITERIATYPE_USERNAME(1),
  UA_IDENTITYCRITERIATYPE_THUMBPRINT(2),
  UA_IDENTITYCRITERIATYPE_ROLE(3),
  UA_IDENTITYCRITERIATYPE_GROUPID(4),
  UA_IDENTITYCRITERIATYPE_ANONYMOUS(5),
  UA_IDENTITYCRITERIATYPE_AUTHENTICATEDUSER(6),
  UA_IDENTITYCRITERIATYPE_APPLICATION(7),
  UA_IDENTITYCRITERIATYPE_X509SUBJECT(8),
  __UA_IDENTITYCRITERIATYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_IdentityCriteriaType(this.value);

  static UA_IdentityCriteriaType fromValue(int value) => switch (value) {
        1 => UA_IDENTITYCRITERIATYPE_USERNAME,
        2 => UA_IDENTITYCRITERIATYPE_THUMBPRINT,
        3 => UA_IDENTITYCRITERIATYPE_ROLE,
        4 => UA_IDENTITYCRITERIATYPE_GROUPID,
        5 => UA_IDENTITYCRITERIATYPE_ANONYMOUS,
        6 => UA_IDENTITYCRITERIATYPE_AUTHENTICATEDUSER,
        7 => UA_IDENTITYCRITERIATYPE_APPLICATION,
        8 => UA_IDENTITYCRITERIATYPE_X509SUBJECT,
        2147483647 => __UA_IDENTITYCRITERIATYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_IdentityCriteriaType: $value'),
      };
}

final class UA_IdentityMappingRuleType extends ffi.Struct {
  @ffi.UnsignedInt()
  external int criteriaTypeAsInt;

  UA_IdentityCriteriaType get criteriaType => UA_IdentityCriteriaType.fromValue(criteriaTypeAsInt);

  external UA_String criteria;
}

final class UA_CurrencyUnitType extends ffi.Struct {
  @UA_Int16()
  external int numericCode;

  @UA_SByte()
  external int exponent;

  external UA_String alphabeticCode;

  external UA_LocalizedText currency;
}

enum UA_TrustListMasks {
  UA_TRUSTLISTMASKS_NONE(0),
  UA_TRUSTLISTMASKS_TRUSTEDCERTIFICATES(1),
  UA_TRUSTLISTMASKS_TRUSTEDCRLS(2),
  UA_TRUSTLISTMASKS_ISSUERCERTIFICATES(4),
  UA_TRUSTLISTMASKS_ISSUERCRLS(8),
  UA_TRUSTLISTMASKS_ALL(15),
  __UA_TRUSTLISTMASKS_FORCE32BIT(2147483647);

  final int value;
  const UA_TrustListMasks(this.value);

  static UA_TrustListMasks fromValue(int value) => switch (value) {
        0 => UA_TRUSTLISTMASKS_NONE,
        1 => UA_TRUSTLISTMASKS_TRUSTEDCERTIFICATES,
        2 => UA_TRUSTLISTMASKS_TRUSTEDCRLS,
        4 => UA_TRUSTLISTMASKS_ISSUERCERTIFICATES,
        8 => UA_TRUSTLISTMASKS_ISSUERCRLS,
        15 => UA_TRUSTLISTMASKS_ALL,
        2147483647 => __UA_TRUSTLISTMASKS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TrustListMasks: $value'),
      };
}

final class UA_DecimalDataType extends ffi.Struct {
  @UA_Int16()
  external int scale;

  external UA_ByteString value;
}

final class UA_DataTypeDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;
}

final class UA_SimpleTypeDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_NodeId baseDataType;

  @UA_Byte()
  external int builtInType;
}

final class UA_PortableQualifiedName extends ffi.Struct {
  external UA_String namespaceUri;

  external UA_String name;
}

final class UA_PortableNodeId extends ffi.Struct {
  external UA_String namespaceUri;

  external UA_NodeId identifier;
}

final class UA_UnsignedRationalNumber extends ffi.Struct {
  @UA_UInt32()
  external int numerator;

  @UA_UInt32()
  external int denominator;
}

typedef UA_DataSetFieldFlags = UA_UInt16;

final class UA_ConfigurationVersionDataType extends ffi.Struct {
  @UA_UInt32()
  external int majorVersion;

  @UA_UInt32()
  external int minorVersion;
}

final class UA_PublishedVariableDataType extends ffi.Struct {
  external UA_NodeId publishedVariable;

  @UA_UInt32()
  external int attributeId;

  @UA_Double()
  external double samplingIntervalHint;

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;

  external UA_String indexRange;

  external UA_Variant substituteValue;

  @ffi.Size()
  external int metaDataPropertiesSize;

  external ffi.Pointer<UA_QualifiedName> metaDataProperties;
}

final class UA_PublishedDataItemsDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSize;

  external ffi.Pointer<UA_PublishedVariableDataType> publishedData;
}

final class UA_PublishedDataSetCustomSourceDataType extends ffi.Struct {
  @ffi.Bool()
  external bool cyclicDataSet;
}

typedef UA_DataSetFieldContentMask = UA_UInt32;

final class UA_DataSetWriterDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String dataSetName;

  @ffi.Size()
  external int dataSetWriterPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetWriterProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;
}

final class UA_NetworkAddressDataType extends ffi.Struct {
  external UA_String networkInterface;
}

final class UA_NetworkAddressUrlDataType extends ffi.Struct {
  external UA_String networkInterface;

  external UA_String url;
}

enum UA_OverrideValueHandling {
  UA_OVERRIDEVALUEHANDLING_DISABLED(0),
  UA_OVERRIDEVALUEHANDLING_LASTUSABLEVALUE(1),
  UA_OVERRIDEVALUEHANDLING_OVERRIDEVALUE(2),
  __UA_OVERRIDEVALUEHANDLING_FORCE32BIT(2147483647);

  final int value;
  const UA_OverrideValueHandling(this.value);

  static UA_OverrideValueHandling fromValue(int value) => switch (value) {
        0 => UA_OVERRIDEVALUEHANDLING_DISABLED,
        1 => UA_OVERRIDEVALUEHANDLING_LASTUSABLEVALUE,
        2 => UA_OVERRIDEVALUEHANDLING_OVERRIDEVALUE,
        2147483647 => __UA_OVERRIDEVALUEHANDLING_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_OverrideValueHandling: $value'),
      };
}

final class UA_StandaloneSubscribedDataSetRefDataType extends ffi.Struct {
  external UA_String dataSetName;
}

enum UA_DataSetOrderingType {
  UA_DATASETORDERINGTYPE_UNDEFINED(0),
  UA_DATASETORDERINGTYPE_ASCENDINGWRITERID(1),
  UA_DATASETORDERINGTYPE_ASCENDINGWRITERIDSINGLE(2),
  __UA_DATASETORDERINGTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_DataSetOrderingType(this.value);

  static UA_DataSetOrderingType fromValue(int value) => switch (value) {
        0 => UA_DATASETORDERINGTYPE_UNDEFINED,
        1 => UA_DATASETORDERINGTYPE_ASCENDINGWRITERID,
        2 => UA_DATASETORDERINGTYPE_ASCENDINGWRITERIDSINGLE,
        2147483647 => __UA_DATASETORDERINGTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_DataSetOrderingType: $value'),
      };
}

typedef UA_UadpNetworkMessageContentMask = UA_UInt32;

final class UA_UadpWriterGroupMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @ffi.UnsignedInt()
  external int dataSetOrderingAsInt;

  UA_DataSetOrderingType get dataSetOrdering => UA_DataSetOrderingType.fromValue(dataSetOrderingAsInt);

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_Double()
  external double samplingOffset;

  @ffi.Size()
  external int publishingOffsetSize;

  external ffi.Pointer<UA_Double> publishingOffset;
}

typedef UA_UadpDataSetMessageContentMask = UA_UInt32;

final class UA_UadpDataSetWriterMessageDataType extends ffi.Struct {
  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_UInt16()
  external int configuredSize;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;
}

final class UA_UadpDataSetReaderMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;

  external UA_Guid dataSetClassId;

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double receiveOffset;

  @UA_Double()
  external double processingOffset;
}

typedef UA_JsonNetworkMessageContentMask = UA_UInt32;

final class UA_JsonWriterGroupMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;
}

typedef UA_JsonDataSetMessageContentMask = UA_UInt32;

final class UA_JsonDataSetWriterMessageDataType extends ffi.Struct {
  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

final class UA_JsonDataSetReaderMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

final class UA_TransmitQosPriorityDataType extends ffi.Struct {
  external UA_String priorityLabel;
}

final class UA_ReceiveQosPriorityDataType extends ffi.Struct {
  external UA_String priorityLabel;
}

final class UA_DatagramConnectionTransportDataType extends ffi.Struct {
  external UA_ExtensionObject discoveryAddress;
}

final class UA_DatagramConnectionTransport2DataType extends ffi.Struct {
  external UA_ExtensionObject discoveryAddress;

  @UA_UInt32()
  external int discoveryAnnounceRate;

  @UA_UInt32()
  external int discoveryMaxMessageSize;

  external UA_String qosCategory;

  @ffi.Size()
  external int datagramQosSize;

  external ffi.Pointer<UA_ExtensionObject> datagramQos;
}

final class UA_DatagramWriterGroupTransportDataType extends ffi.Struct {
  @UA_Byte()
  external int messageRepeatCount;

  @UA_Double()
  external double messageRepeatDelay;
}

final class UA_DatagramWriterGroupTransport2DataType extends ffi.Struct {
  @UA_Byte()
  external int messageRepeatCount;

  @UA_Double()
  external double messageRepeatDelay;

  external UA_ExtensionObject address;

  external UA_String qosCategory;

  @ffi.Size()
  external int datagramQosSize;

  external ffi.Pointer<UA_ExtensionObject> datagramQos;

  @UA_UInt32()
  external int discoveryAnnounceRate;

  external UA_String topic;
}

final class UA_DatagramDataSetReaderTransportDataType extends ffi.Struct {
  external UA_ExtensionObject address;

  external UA_String qosCategory;

  @ffi.Size()
  external int datagramQosSize;

  external ffi.Pointer<UA_ExtensionObject> datagramQos;

  external UA_String topic;
}

final class UA_BrokerConnectionTransportDataType extends ffi.Struct {
  external UA_String resourceUri;

  external UA_String authenticationProfileUri;
}

enum UA_BrokerTransportQualityOfService {
  UA_BROKERTRANSPORTQUALITYOFSERVICE_NOTSPECIFIED(0),
  UA_BROKERTRANSPORTQUALITYOFSERVICE_BESTEFFORT(1),
  UA_BROKERTRANSPORTQUALITYOFSERVICE_ATLEASTONCE(2),
  UA_BROKERTRANSPORTQUALITYOFSERVICE_ATMOSTONCE(3),
  UA_BROKERTRANSPORTQUALITYOFSERVICE_EXACTLYONCE(4),
  __UA_BROKERTRANSPORTQUALITYOFSERVICE_FORCE32BIT(2147483647);

  final int value;
  const UA_BrokerTransportQualityOfService(this.value);

  static UA_BrokerTransportQualityOfService fromValue(int value) => switch (value) {
        0 => UA_BROKERTRANSPORTQUALITYOFSERVICE_NOTSPECIFIED,
        1 => UA_BROKERTRANSPORTQUALITYOFSERVICE_BESTEFFORT,
        2 => UA_BROKERTRANSPORTQUALITYOFSERVICE_ATLEASTONCE,
        3 => UA_BROKERTRANSPORTQUALITYOFSERVICE_ATMOSTONCE,
        4 => UA_BROKERTRANSPORTQUALITYOFSERVICE_EXACTLYONCE,
        2147483647 => __UA_BROKERTRANSPORTQUALITYOFSERVICE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_BrokerTransportQualityOfService: $value'),
      };
}

final class UA_BrokerWriterGroupTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.UnsignedInt()
  external int requestedDeliveryGuaranteeAsInt;

  UA_BrokerTransportQualityOfService get requestedDeliveryGuarantee =>
      UA_BrokerTransportQualityOfService.fromValue(requestedDeliveryGuaranteeAsInt);
}

final class UA_BrokerDataSetWriterTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.UnsignedInt()
  external int requestedDeliveryGuaranteeAsInt;

  UA_BrokerTransportQualityOfService get requestedDeliveryGuarantee =>
      UA_BrokerTransportQualityOfService.fromValue(requestedDeliveryGuaranteeAsInt);

  external UA_String metaDataQueueName;

  @UA_Double()
  external double metaDataUpdateTime;
}

final class UA_BrokerDataSetReaderTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.UnsignedInt()
  external int requestedDeliveryGuaranteeAsInt;

  UA_BrokerTransportQualityOfService get requestedDeliveryGuarantee =>
      UA_BrokerTransportQualityOfService.fromValue(requestedDeliveryGuaranteeAsInt);

  external UA_String metaDataQueueName;
}

typedef UA_PubSubConfigurationRefMask = UA_UInt32;

final class UA_PubSubConfigurationRefDataType extends ffi.Struct {
  @UA_PubSubConfigurationRefMask()
  external int configurationMask;

  @UA_UInt16()
  external int elementIndex;

  @UA_UInt16()
  external int connectionIndex;

  @UA_UInt16()
  external int groupIndex;
}

final class UA_PubSubConfigurationValueDataType extends ffi.Struct {
  external UA_PubSubConfigurationRefDataType configurationElement;

  external UA_String name;

  external UA_Variant identifier;
}

enum UA_DiagnosticsLevel {
  UA_DIAGNOSTICSLEVEL_BASIC(0),
  UA_DIAGNOSTICSLEVEL_ADVANCED(1),
  UA_DIAGNOSTICSLEVEL_INFO(2),
  UA_DIAGNOSTICSLEVEL_LOG(3),
  UA_DIAGNOSTICSLEVEL_DEBUG(4),
  __UA_DIAGNOSTICSLEVEL_FORCE32BIT(2147483647);

  final int value;
  const UA_DiagnosticsLevel(this.value);

  static UA_DiagnosticsLevel fromValue(int value) => switch (value) {
        0 => UA_DIAGNOSTICSLEVEL_BASIC,
        1 => UA_DIAGNOSTICSLEVEL_ADVANCED,
        2 => UA_DIAGNOSTICSLEVEL_INFO,
        3 => UA_DIAGNOSTICSLEVEL_LOG,
        4 => UA_DIAGNOSTICSLEVEL_DEBUG,
        2147483647 => __UA_DIAGNOSTICSLEVEL_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_DiagnosticsLevel: $value'),
      };
}

enum UA_PubSubDiagnosticsCounterClassification {
  UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_INFORMATION(0),
  UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_ERROR(1),
  __UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_FORCE32BIT(2147483647);

  final int value;
  const UA_PubSubDiagnosticsCounterClassification(this.value);

  static UA_PubSubDiagnosticsCounterClassification fromValue(int value) => switch (value) {
        0 => UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_INFORMATION,
        1 => UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_ERROR,
        2147483647 => __UA_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_PubSubDiagnosticsCounterClassification: $value'),
      };
}

final class UA_AliasNameDataType extends ffi.Struct {
  external UA_QualifiedName aliasName;

  @ffi.Size()
  external int referencedNodesSize;

  external ffi.Pointer<UA_ExpandedNodeId> referencedNodes;
}

typedef UA_PasswordOptionsMask = UA_UInt32;
typedef UA_UserConfigurationMask = UA_UInt32;

final class UA_UserManagementDataType extends ffi.Struct {
  external UA_String userName;

  @UA_UserConfigurationMask()
  external int userConfiguration;

  external UA_String description;
}

enum UA_Duplex {
  UA_DUPLEX_FULL(0),
  UA_DUPLEX_HALF(1),
  UA_DUPLEX_UNKNOWN(2),
  __UA_DUPLEX_FORCE32BIT(2147483647);

  final int value;
  const UA_Duplex(this.value);

  static UA_Duplex fromValue(int value) => switch (value) {
        0 => UA_DUPLEX_FULL,
        1 => UA_DUPLEX_HALF,
        2 => UA_DUPLEX_UNKNOWN,
        2147483647 => __UA_DUPLEX_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_Duplex: $value'),
      };
}

enum UA_InterfaceAdminStatus {
  UA_INTERFACEADMINSTATUS_UP(0),
  UA_INTERFACEADMINSTATUS_DOWN(1),
  UA_INTERFACEADMINSTATUS_TESTING(2),
  __UA_INTERFACEADMINSTATUS_FORCE32BIT(2147483647);

  final int value;
  const UA_InterfaceAdminStatus(this.value);

  static UA_InterfaceAdminStatus fromValue(int value) => switch (value) {
        0 => UA_INTERFACEADMINSTATUS_UP,
        1 => UA_INTERFACEADMINSTATUS_DOWN,
        2 => UA_INTERFACEADMINSTATUS_TESTING,
        2147483647 => __UA_INTERFACEADMINSTATUS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_InterfaceAdminStatus: $value'),
      };
}

enum UA_InterfaceOperStatus {
  UA_INTERFACEOPERSTATUS_UP(0),
  UA_INTERFACEOPERSTATUS_DOWN(1),
  UA_INTERFACEOPERSTATUS_TESTING(2),
  UA_INTERFACEOPERSTATUS_UNKNOWN(3),
  UA_INTERFACEOPERSTATUS_DORMANT(4),
  UA_INTERFACEOPERSTATUS_NOTPRESENT(5),
  UA_INTERFACEOPERSTATUS_LOWERLAYERDOWN(6),
  __UA_INTERFACEOPERSTATUS_FORCE32BIT(2147483647);

  final int value;
  const UA_InterfaceOperStatus(this.value);

  static UA_InterfaceOperStatus fromValue(int value) => switch (value) {
        0 => UA_INTERFACEOPERSTATUS_UP,
        1 => UA_INTERFACEOPERSTATUS_DOWN,
        2 => UA_INTERFACEOPERSTATUS_TESTING,
        3 => UA_INTERFACEOPERSTATUS_UNKNOWN,
        4 => UA_INTERFACEOPERSTATUS_DORMANT,
        5 => UA_INTERFACEOPERSTATUS_NOTPRESENT,
        6 => UA_INTERFACEOPERSTATUS_LOWERLAYERDOWN,
        2147483647 => __UA_INTERFACEOPERSTATUS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_InterfaceOperStatus: $value'),
      };
}

enum UA_NegotiationStatus {
  UA_NEGOTIATIONSTATUS_INPROGRESS(0),
  UA_NEGOTIATIONSTATUS_COMPLETE(1),
  UA_NEGOTIATIONSTATUS_FAILED(2),
  UA_NEGOTIATIONSTATUS_UNKNOWN(3),
  UA_NEGOTIATIONSTATUS_NONEGOTIATION(4),
  __UA_NEGOTIATIONSTATUS_FORCE32BIT(2147483647);

  final int value;
  const UA_NegotiationStatus(this.value);

  static UA_NegotiationStatus fromValue(int value) => switch (value) {
        0 => UA_NEGOTIATIONSTATUS_INPROGRESS,
        1 => UA_NEGOTIATIONSTATUS_COMPLETE,
        2 => UA_NEGOTIATIONSTATUS_FAILED,
        3 => UA_NEGOTIATIONSTATUS_UNKNOWN,
        4 => UA_NEGOTIATIONSTATUS_NONEGOTIATION,
        2147483647 => __UA_NEGOTIATIONSTATUS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_NegotiationStatus: $value'),
      };
}

enum UA_TsnFailureCode {
  UA_TSNFAILURECODE_NOFAILURE(0),
  UA_TSNFAILURECODE_INSUFFICIENTBANDWIDTH(1),
  UA_TSNFAILURECODE_INSUFFICIENTRESOURCES(2),
  UA_TSNFAILURECODE_INSUFFICIENTTRAFFICCLASSBANDWIDTH(3),
  UA_TSNFAILURECODE_STREAMIDINUSE(4),
  UA_TSNFAILURECODE_STREAMDESTINATIONADDRESSINUSE(5),
  UA_TSNFAILURECODE_STREAMPREEMPTEDBYHIGHERRANK(6),
  UA_TSNFAILURECODE_LATENCYHASCHANGED(7),
  UA_TSNFAILURECODE_EGRESSPORTNOTAVBCAPABLE(8),
  UA_TSNFAILURECODE_USEDIFFERENTDESTINATIONADDRESS(9),
  UA_TSNFAILURECODE_OUTOFMSRPRESOURCES(10),
  UA_TSNFAILURECODE_OUTOFMMRPRESOURCES(11),
  UA_TSNFAILURECODE_CANNOTSTOREDESTINATIONADDRESS(12),
  UA_TSNFAILURECODE_PRIORITYISNOTANSRCCLASS(13),
  UA_TSNFAILURECODE_MAXFRAMESIZETOOLARGE(14),
  UA_TSNFAILURECODE_MAXFANINPORTSLIMITREACHED(15),
  UA_TSNFAILURECODE_FIRSTVALUECHANGEDFORSTREAMID(16),
  UA_TSNFAILURECODE_VLANBLOCKEDONEGRESS(17),
  UA_TSNFAILURECODE_VLANTAGGINGDISABLEDONEGRESS(18),
  UA_TSNFAILURECODE_SRCLASSPRIORITYMISMATCH(19),
  UA_TSNFAILURECODE_FEATURENOTPROPAGATED(20),
  UA_TSNFAILURECODE_MAXLATENCYEXCEEDED(21),
  UA_TSNFAILURECODE_BRIDGEDOESNOTPROVIDENETWORKID(22),
  UA_TSNFAILURECODE_STREAMTRANSFORMNOTSUPPORTED(23),
  UA_TSNFAILURECODE_STREAMIDTYPENOTSUPPORTED(24),
  UA_TSNFAILURECODE_FEATURENOTSUPPORTED(25),
  __UA_TSNFAILURECODE_FORCE32BIT(2147483647);

  final int value;
  const UA_TsnFailureCode(this.value);

  static UA_TsnFailureCode fromValue(int value) => switch (value) {
        0 => UA_TSNFAILURECODE_NOFAILURE,
        1 => UA_TSNFAILURECODE_INSUFFICIENTBANDWIDTH,
        2 => UA_TSNFAILURECODE_INSUFFICIENTRESOURCES,
        3 => UA_TSNFAILURECODE_INSUFFICIENTTRAFFICCLASSBANDWIDTH,
        4 => UA_TSNFAILURECODE_STREAMIDINUSE,
        5 => UA_TSNFAILURECODE_STREAMDESTINATIONADDRESSINUSE,
        6 => UA_TSNFAILURECODE_STREAMPREEMPTEDBYHIGHERRANK,
        7 => UA_TSNFAILURECODE_LATENCYHASCHANGED,
        8 => UA_TSNFAILURECODE_EGRESSPORTNOTAVBCAPABLE,
        9 => UA_TSNFAILURECODE_USEDIFFERENTDESTINATIONADDRESS,
        10 => UA_TSNFAILURECODE_OUTOFMSRPRESOURCES,
        11 => UA_TSNFAILURECODE_OUTOFMMRPRESOURCES,
        12 => UA_TSNFAILURECODE_CANNOTSTOREDESTINATIONADDRESS,
        13 => UA_TSNFAILURECODE_PRIORITYISNOTANSRCCLASS,
        14 => UA_TSNFAILURECODE_MAXFRAMESIZETOOLARGE,
        15 => UA_TSNFAILURECODE_MAXFANINPORTSLIMITREACHED,
        16 => UA_TSNFAILURECODE_FIRSTVALUECHANGEDFORSTREAMID,
        17 => UA_TSNFAILURECODE_VLANBLOCKEDONEGRESS,
        18 => UA_TSNFAILURECODE_VLANTAGGINGDISABLEDONEGRESS,
        19 => UA_TSNFAILURECODE_SRCLASSPRIORITYMISMATCH,
        20 => UA_TSNFAILURECODE_FEATURENOTPROPAGATED,
        21 => UA_TSNFAILURECODE_MAXLATENCYEXCEEDED,
        22 => UA_TSNFAILURECODE_BRIDGEDOESNOTPROVIDENETWORKID,
        23 => UA_TSNFAILURECODE_STREAMTRANSFORMNOTSUPPORTED,
        24 => UA_TSNFAILURECODE_STREAMIDTYPENOTSUPPORTED,
        25 => UA_TSNFAILURECODE_FEATURENOTSUPPORTED,
        2147483647 => __UA_TSNFAILURECODE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TsnFailureCode: $value'),
      };
}

enum UA_TsnStreamState {
  UA_TSNSTREAMSTATE_DISABLED(0),
  UA_TSNSTREAMSTATE_CONFIGURING(1),
  UA_TSNSTREAMSTATE_READY(2),
  UA_TSNSTREAMSTATE_OPERATIONAL(3),
  UA_TSNSTREAMSTATE_ERROR(4),
  __UA_TSNSTREAMSTATE_FORCE32BIT(2147483647);

  final int value;
  const UA_TsnStreamState(this.value);

  static UA_TsnStreamState fromValue(int value) => switch (value) {
        0 => UA_TSNSTREAMSTATE_DISABLED,
        1 => UA_TSNSTREAMSTATE_CONFIGURING,
        2 => UA_TSNSTREAMSTATE_READY,
        3 => UA_TSNSTREAMSTATE_OPERATIONAL,
        4 => UA_TSNSTREAMSTATE_ERROR,
        2147483647 => __UA_TSNSTREAMSTATE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TsnStreamState: $value'),
      };
}

enum UA_TsnTalkerStatus {
  UA_TSNTALKERSTATUS_NONE(0),
  UA_TSNTALKERSTATUS_READY(1),
  UA_TSNTALKERSTATUS_FAILED(2),
  __UA_TSNTALKERSTATUS_FORCE32BIT(2147483647);

  final int value;
  const UA_TsnTalkerStatus(this.value);

  static UA_TsnTalkerStatus fromValue(int value) => switch (value) {
        0 => UA_TSNTALKERSTATUS_NONE,
        1 => UA_TSNTALKERSTATUS_READY,
        2 => UA_TSNTALKERSTATUS_FAILED,
        2147483647 => __UA_TSNTALKERSTATUS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TsnTalkerStatus: $value'),
      };
}

enum UA_TsnListenerStatus {
  UA_TSNLISTENERSTATUS_NONE(0),
  UA_TSNLISTENERSTATUS_READY(1),
  UA_TSNLISTENERSTATUS_PARTIALFAILED(2),
  UA_TSNLISTENERSTATUS_FAILED(3),
  __UA_TSNLISTENERSTATUS_FORCE32BIT(2147483647);

  final int value;
  const UA_TsnListenerStatus(this.value);

  static UA_TsnListenerStatus fromValue(int value) => switch (value) {
        0 => UA_TSNLISTENERSTATUS_NONE,
        1 => UA_TSNLISTENERSTATUS_READY,
        2 => UA_TSNLISTENERSTATUS_PARTIALFAILED,
        3 => UA_TSNLISTENERSTATUS_FAILED,
        2147483647 => __UA_TSNLISTENERSTATUS_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_TsnListenerStatus: $value'),
      };
}

final class UA_PriorityMappingEntryType extends ffi.Struct {
  external UA_String mappingUri;

  external UA_String priorityLabel;

  @UA_Byte()
  external int priorityValue_PCP;

  @UA_UInt32()
  external int priorityValue_DSCP;
}

enum UA_IdType {
  UA_IDTYPE_NUMERIC(0),
  UA_IDTYPE_STRING(1),
  UA_IDTYPE_GUID(2),
  UA_IDTYPE_OPAQUE(3),
  __UA_IDTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_IdType(this.value);

  static UA_IdType fromValue(int value) => switch (value) {
        0 => UA_IDTYPE_NUMERIC,
        1 => UA_IDTYPE_STRING,
        2 => UA_IDTYPE_GUID,
        3 => UA_IDTYPE_OPAQUE,
        2147483647 => __UA_IDTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_IdType: $value'),
      };
}

typedef UA_PermissionType = UA_UInt32;
typedef UA_AccessLevelType = UA_Byte;
typedef UA_AccessLevelExType = UA_UInt32;
typedef UA_EventNotifierType = UA_Byte;
typedef UA_AccessRestrictionType = UA_UInt16;

final class UA_RolePermissionType extends ffi.Struct {
  external UA_NodeId roleId;

  @UA_PermissionType()
  external int permissions;
}

enum UA_StructureType {
  UA_STRUCTURETYPE_STRUCTURE(0),
  UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS(1),
  UA_STRUCTURETYPE_UNION(2),
  UA_STRUCTURETYPE_STRUCTUREWITHSUBTYPEDVALUES(3),
  UA_STRUCTURETYPE_UNIONWITHSUBTYPEDVALUES(4),
  __UA_STRUCTURETYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_StructureType(this.value);

  static UA_StructureType fromValue(int value) => switch (value) {
        0 => UA_STRUCTURETYPE_STRUCTURE,
        1 => UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS,
        2 => UA_STRUCTURETYPE_UNION,
        3 => UA_STRUCTURETYPE_STRUCTUREWITHSUBTYPEDVALUES,
        4 => UA_STRUCTURETYPE_UNIONWITHSUBTYPEDVALUES,
        2147483647 => __UA_STRUCTURETYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_StructureType: $value'),
      };
}

final class UA_StructureField extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  @ffi.Bool()
  external bool isOptional;
}

final class UA_StructureDefinition extends ffi.Struct {
  external UA_NodeId defaultEncodingId;

  external UA_NodeId baseDataType;

  @ffi.UnsignedInt()
  external int structureTypeAsInt;

  UA_StructureType get structureType => UA_StructureType.fromValue(structureTypeAsInt);

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_StructureField> fields;
}

final class UA_ReferenceNode extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isInverse;

  external UA_ExpandedNodeId targetId;
}

final class UA_Argument extends ffi.Struct {
  external UA_String name;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  external UA_LocalizedText description;
}

final class UA_EnumValueType extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

final class UA_EnumField extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  external UA_String name;
}

final class UA_OptionSet extends ffi.Struct {
  external UA_ByteString value;

  external UA_ByteString validBits;
}

typedef UA_NormalizedString = UA_String;
typedef UA_DecimalString = UA_String;
typedef UA_DurationString = UA_String;
typedef UA_TimeString = UA_String;
typedef UA_DateString = UA_String;
typedef UA_UtcTime = UA_DateTime;
typedef UA_LocaleId = UA_String;

final class UA_TimeZoneDataType extends ffi.Struct {
  @UA_Int16()
  external int offset;

  @ffi.Bool()
  external bool daylightSavingInOffset;
}

typedef UA_Index = UA_ByteString;
typedef UA_IntegerId = UA_UInt32;
typedef UA_VersionTime = UA_ByteString;

final class UA_ServiceFault extends ffi.Struct {
  external UA_ResponseHeader responseHeader;
}

final class UA_SessionlessInvokeRequestType extends ffi.Struct {
  @UA_UInt32()
  external int urisVersion;

  @ffi.Size()
  external int namespaceUrisSize;

  external ffi.Pointer<UA_String> namespaceUris;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_String> serverUris;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @UA_UInt32()
  external int serviceId;
}

final class UA_SessionlessInvokeResponseType extends ffi.Struct {
  @ffi.Size()
  external int namespaceUrisSize;

  external ffi.Pointer<UA_String> namespaceUris;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_String> serverUris;

  @UA_UInt32()
  external int serviceId;
}

final class UA_FindServersRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_String> serverUris;
}

final class UA_FindServersResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int serversSize;

  external ffi.Pointer<UA_ApplicationDescription> servers;
}

final class UA_ServerOnNetwork extends ffi.Struct {
  @UA_UInt32()
  external int recordId;

  external UA_String serverName;

  external UA_String discoveryUrl;

  @ffi.Size()
  external int serverCapabilitiesSize;

  external ffi.Pointer<UA_String> serverCapabilities;
}

final class UA_FindServersOnNetworkRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int startingRecordId;

  @UA_UInt32()
  external int maxRecordsToReturn;

  @ffi.Size()
  external int serverCapabilityFilterSize;

  external ffi.Pointer<UA_String> serverCapabilityFilter;
}

final class UA_FindServersOnNetworkResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_DateTime()
  external int lastCounterResetTime;

  @ffi.Size()
  external int serversSize;

  external ffi.Pointer<UA_ServerOnNetwork> servers;
}

typedef UA_ApplicationInstanceCertificate = UA_ByteString;

final class UA_GetEndpointsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int profileUrisSize;

  external ffi.Pointer<UA_String> profileUris;
}

final class UA_GetEndpointsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int endpointsSize;

  external ffi.Pointer<UA_EndpointDescription> endpoints;
}

final class UA_RegisteredServer extends ffi.Struct {
  external UA_String serverUri;

  external UA_String productUri;

  @ffi.Size()
  external int serverNamesSize;

  external ffi.Pointer<UA_LocalizedText> serverNames;

  @ffi.UnsignedInt()
  external int serverTypeAsInt;

  UA_ApplicationType get serverType => UA_ApplicationType.fromValue(serverTypeAsInt);

  external UA_String gatewayServerUri;

  @ffi.Size()
  external int discoveryUrlsSize;

  external ffi.Pointer<UA_String> discoveryUrls;

  external UA_String semaphoreFilePath;

  @ffi.Bool()
  external bool isOnline;
}

final class UA_RegisterServerRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_RegisteredServer server;
}

final class UA_RegisterServerResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;
}

final class UA_MdnsDiscoveryConfiguration extends ffi.Struct {
  external UA_String mdnsServerName;

  @ffi.Size()
  external int serverCapabilitiesSize;

  external ffi.Pointer<UA_String> serverCapabilities;
}

final class UA_RegisterServer2Request extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_RegisteredServer server;

  @ffi.Size()
  external int discoveryConfigurationSize;

  external ffi.Pointer<UA_ExtensionObject> discoveryConfiguration;
}

final class UA_RegisterServer2Response extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int configurationResultsSize;

  external ffi.Pointer<UA_StatusCode> configurationResults;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

enum UA_SecurityTokenRequestType {
  UA_SECURITYTOKENREQUESTTYPE_ISSUE(0),
  UA_SECURITYTOKENREQUESTTYPE_RENEW(1),
  __UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_SecurityTokenRequestType(this.value);

  static UA_SecurityTokenRequestType fromValue(int value) => switch (value) {
        0 => UA_SECURITYTOKENREQUESTTYPE_ISSUE,
        1 => UA_SECURITYTOKENREQUESTTYPE_RENEW,
        2147483647 => __UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_SecurityTokenRequestType: $value'),
      };
}

final class UA_ChannelSecurityToken extends ffi.Struct {
  @UA_UInt32()
  external int channelId;

  @UA_UInt32()
  external int tokenId;

  @UA_DateTime()
  external int createdAt;

  @UA_UInt32()
  external int revisedLifetime;
}

final class UA_OpenSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int clientProtocolVersion;

  @ffi.UnsignedInt()
  external int requestTypeAsInt;

  UA_SecurityTokenRequestType get requestType => UA_SecurityTokenRequestType.fromValue(requestTypeAsInt);

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_ByteString clientNonce;

  @UA_UInt32()
  external int requestedLifetime;
}

final class UA_OpenSecureChannelResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_UInt32()
  external int serverProtocolVersion;

  external UA_ChannelSecurityToken securityToken;

  external UA_ByteString serverNonce;
}

final class UA_CloseSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;
}

final class UA_CloseSecureChannelResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;
}

final class UA_SignedSoftwareCertificate extends ffi.Struct {
  external UA_ByteString certificateData;

  external UA_ByteString signature;
}

typedef UA_SessionAuthenticationToken = UA_NodeId;

final class UA_SignatureData extends ffi.Struct {
  external UA_String algorithm;

  external UA_ByteString signature;
}

final class UA_CreateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ApplicationDescription clientDescription;

  external UA_String serverUri;

  external UA_String endpointUrl;

  external UA_String sessionName;

  external UA_ByteString clientNonce;

  external UA_ByteString clientCertificate;

  @UA_Double()
  external double requestedSessionTimeout;

  @UA_UInt32()
  external int maxResponseMessageSize;
}

final class UA_CreateSessionResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  external UA_NodeId sessionId;

  external UA_NodeId authenticationToken;

  @UA_Double()
  external double revisedSessionTimeout;

  external UA_ByteString serverNonce;

  external UA_ByteString serverCertificate;

  @ffi.Size()
  external int serverEndpointsSize;

  external ffi.Pointer<UA_EndpointDescription> serverEndpoints;

  @ffi.Size()
  external int serverSoftwareCertificatesSize;

  external ffi.Pointer<UA_SignedSoftwareCertificate> serverSoftwareCertificates;

  external UA_SignatureData serverSignature;

  @UA_UInt32()
  external int maxRequestMessageSize;
}

final class UA_UserIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

final class UA_AnonymousIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

final class UA_UserNameIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_String userName;

  external UA_ByteString password;

  external UA_String encryptionAlgorithm;
}

final class UA_X509IdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString certificateData;
}

final class UA_IssuedIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString tokenData;

  external UA_String encryptionAlgorithm;
}

typedef UA_RsaEncryptedSecret = UA_ByteString;
typedef UA_EccEncryptedSecret = UA_ByteString;

final class UA_ActivateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_SignatureData clientSignature;

  @ffi.Size()
  external int clientSoftwareCertificatesSize;

  external ffi.Pointer<UA_SignedSoftwareCertificate> clientSoftwareCertificates;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_ExtensionObject userIdentityToken;

  external UA_SignatureData userTokenSignature;
}

final class UA_ActivateSessionResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  external UA_ByteString serverNonce;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_CloseSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool deleteSubscriptions;
}

final class UA_CloseSessionResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;
}

final class UA_CancelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int requestHandle;
}

final class UA_CancelResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_UInt32()
  external int cancelCount;
}

enum UA_NodeAttributesMask {
  UA_NODEATTRIBUTESMASK_NONE(0),
  UA_NODEATTRIBUTESMASK_ACCESSLEVEL(1),
  UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS(2),
  UA_NODEATTRIBUTESMASK_BROWSENAME(4),
  UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS(8),
  UA_NODEATTRIBUTESMASK_DATATYPE(16),
  UA_NODEATTRIBUTESMASK_DESCRIPTION(32),
  UA_NODEATTRIBUTESMASK_DISPLAYNAME(64),
  UA_NODEATTRIBUTESMASK_EVENTNOTIFIER(128),
  UA_NODEATTRIBUTESMASK_EXECUTABLE(256),
  UA_NODEATTRIBUTESMASK_HISTORIZING(512),
  UA_NODEATTRIBUTESMASK_INVERSENAME(1024),
  UA_NODEATTRIBUTESMASK_ISABSTRACT(2048),
  UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL(4096),
  UA_NODEATTRIBUTESMASK_NODECLASS(8192),
  UA_NODEATTRIBUTESMASK_NODEID(16384),
  UA_NODEATTRIBUTESMASK_SYMMETRIC(32768),
  UA_NODEATTRIBUTESMASK_USERACCESSLEVEL(65536),
  UA_NODEATTRIBUTESMASK_USEREXECUTABLE(131072),
  UA_NODEATTRIBUTESMASK_USERWRITEMASK(262144),
  UA_NODEATTRIBUTESMASK_VALUERANK(524288),
  UA_NODEATTRIBUTESMASK_WRITEMASK(1048576),
  UA_NODEATTRIBUTESMASK_VALUE(2097152),
  UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION(4194304),
  UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS(8388608),
  UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS(16777216),
  UA_NODEATTRIBUTESMASK_ALL(33554431),
  UA_NODEATTRIBUTESMASK_BASENODE(26501220),
  UA_NODEATTRIBUTESMASK_OBJECT(26501348),
  UA_NODEATTRIBUTESMASK_OBJECTTYPE(26503268),
  UA_NODEATTRIBUTESMASK_VARIABLE(26571383),
  UA_NODEATTRIBUTESMASK_VARIABLETYPE(28600438),
  UA_NODEATTRIBUTESMASK_METHOD(26632548),
  UA_NODEATTRIBUTESMASK_REFERENCETYPE(26537060),
  UA_NODEATTRIBUTESMASK_VIEW(26501356),
  __UA_NODEATTRIBUTESMASK_FORCE32BIT(2147483647);

  final int value;
  const UA_NodeAttributesMask(this.value);

  static UA_NodeAttributesMask fromValue(int value) => switch (value) {
        0 => UA_NODEATTRIBUTESMASK_NONE,
        1 => UA_NODEATTRIBUTESMASK_ACCESSLEVEL,
        2 => UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS,
        4 => UA_NODEATTRIBUTESMASK_BROWSENAME,
        8 => UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS,
        16 => UA_NODEATTRIBUTESMASK_DATATYPE,
        32 => UA_NODEATTRIBUTESMASK_DESCRIPTION,
        64 => UA_NODEATTRIBUTESMASK_DISPLAYNAME,
        128 => UA_NODEATTRIBUTESMASK_EVENTNOTIFIER,
        256 => UA_NODEATTRIBUTESMASK_EXECUTABLE,
        512 => UA_NODEATTRIBUTESMASK_HISTORIZING,
        1024 => UA_NODEATTRIBUTESMASK_INVERSENAME,
        2048 => UA_NODEATTRIBUTESMASK_ISABSTRACT,
        4096 => UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL,
        8192 => UA_NODEATTRIBUTESMASK_NODECLASS,
        16384 => UA_NODEATTRIBUTESMASK_NODEID,
        32768 => UA_NODEATTRIBUTESMASK_SYMMETRIC,
        65536 => UA_NODEATTRIBUTESMASK_USERACCESSLEVEL,
        131072 => UA_NODEATTRIBUTESMASK_USEREXECUTABLE,
        262144 => UA_NODEATTRIBUTESMASK_USERWRITEMASK,
        524288 => UA_NODEATTRIBUTESMASK_VALUERANK,
        1048576 => UA_NODEATTRIBUTESMASK_WRITEMASK,
        2097152 => UA_NODEATTRIBUTESMASK_VALUE,
        4194304 => UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION,
        8388608 => UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS,
        16777216 => UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS,
        33554431 => UA_NODEATTRIBUTESMASK_ALL,
        26501220 => UA_NODEATTRIBUTESMASK_BASENODE,
        26501348 => UA_NODEATTRIBUTESMASK_OBJECT,
        26503268 => UA_NODEATTRIBUTESMASK_OBJECTTYPE,
        26571383 => UA_NODEATTRIBUTESMASK_VARIABLE,
        28600438 => UA_NODEATTRIBUTESMASK_VARIABLETYPE,
        26632548 => UA_NODEATTRIBUTESMASK_METHOD,
        26537060 => UA_NODEATTRIBUTESMASK_REFERENCETYPE,
        26501356 => UA_NODEATTRIBUTESMASK_VIEW,
        2147483647 => __UA_NODEATTRIBUTESMASK_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_NodeAttributesMask: $value'),
      };
}

final class UA_NodeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;
}

final class UA_ObjectAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @UA_Byte()
  external int eventNotifier;
}

final class UA_VariableAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_Byte()
  external int accessLevel;

  @UA_Byte()
  external int userAccessLevel;

  @UA_Double()
  external double minimumSamplingInterval;

  @ffi.Bool()
  external bool historizing;
}

final class UA_MethodAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool executable;

  @ffi.Bool()
  external bool userExecutable;
}

final class UA_ObjectTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

final class UA_VariableTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @ffi.Bool()
  external bool isAbstract;
}

final class UA_ReferenceTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;
}

final class UA_DataTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

final class UA_ViewAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool containsNoLoops;

  @UA_Byte()
  external int eventNotifier;
}

final class UA_GenericAttributeValue extends ffi.Struct {
  @UA_UInt32()
  external int attributeId;

  external UA_Variant value;
}

final class UA_GenericAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Size()
  external int attributeValuesSize;

  external ffi.Pointer<UA_GenericAttributeValue> attributeValues;
}

final class UA_AddNodesResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_NodeId addedNodeId;
}

final class UA_AddNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToAddSize;

  external ffi.Pointer<UA_AddNodesItem> nodesToAdd;
}

final class UA_AddNodesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_AddNodesResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_AddReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToAddSize;

  external ffi.Pointer<UA_AddReferencesItem> referencesToAdd;
}

final class UA_AddReferencesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_DeleteNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToDeleteSize;

  external ffi.Pointer<UA_DeleteNodesItem> nodesToDelete;
}

final class UA_DeleteNodesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_DeleteReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToDeleteSize;

  external ffi.Pointer<UA_DeleteReferencesItem> referencesToDelete;
}

final class UA_DeleteReferencesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

typedef UA_AttributeWriteMask = UA_UInt32;

final class UA_ViewDescription extends ffi.Struct {
  external UA_NodeId viewId;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int viewVersion;
}

final class UA_BrowseDescription extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.UnsignedInt()
  external int browseDirectionAsInt;

  UA_BrowseDirection get browseDirection => UA_BrowseDirection.fromValue(browseDirectionAsInt);

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool includeSubtypes;

  @UA_UInt32()
  external int nodeClassMask;

  @UA_UInt32()
  external int resultMask;
}

enum UA_BrowseResultMask {
  UA_BROWSERESULTMASK_NONE(0),
  UA_BROWSERESULTMASK_REFERENCETYPEID(1),
  UA_BROWSERESULTMASK_ISFORWARD(2),
  UA_BROWSERESULTMASK_NODECLASS(4),
  UA_BROWSERESULTMASK_BROWSENAME(8),
  UA_BROWSERESULTMASK_DISPLAYNAME(16),
  UA_BROWSERESULTMASK_TYPEDEFINITION(32),
  UA_BROWSERESULTMASK_ALL(63),
  UA_BROWSERESULTMASK_REFERENCETYPEINFO(3),
  UA_BROWSERESULTMASK_TARGETINFO(60),
  __UA_BROWSERESULTMASK_FORCE32BIT(2147483647);

  final int value;
  const UA_BrowseResultMask(this.value);

  static UA_BrowseResultMask fromValue(int value) => switch (value) {
        0 => UA_BROWSERESULTMASK_NONE,
        1 => UA_BROWSERESULTMASK_REFERENCETYPEID,
        2 => UA_BROWSERESULTMASK_ISFORWARD,
        4 => UA_BROWSERESULTMASK_NODECLASS,
        8 => UA_BROWSERESULTMASK_BROWSENAME,
        16 => UA_BROWSERESULTMASK_DISPLAYNAME,
        32 => UA_BROWSERESULTMASK_TYPEDEFINITION,
        63 => UA_BROWSERESULTMASK_ALL,
        3 => UA_BROWSERESULTMASK_REFERENCETYPEINFO,
        60 => UA_BROWSERESULTMASK_TARGETINFO,
        2147483647 => __UA_BROWSERESULTMASK_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_BrowseResultMask: $value'),
      };
}

final class UA_ReferenceDescription extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId nodeId;

  external UA_QualifiedName browseName;

  external UA_LocalizedText displayName;

  @ffi.UnsignedInt()
  external int nodeClassAsInt;

  UA_NodeClass get nodeClass => UA_NodeClass.fromValue(nodeClassAsInt);

  external UA_ExpandedNodeId typeDefinition;
}

typedef UA_ContinuationPoint = UA_ByteString;

final class UA_BrowseResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_ByteString continuationPoint;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_ReferenceDescription> references;
}

final class UA_BrowseRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ViewDescription view;

  @UA_UInt32()
  external int requestedMaxReferencesPerNode;

  @ffi.Size()
  external int nodesToBrowseSize;

  external ffi.Pointer<UA_BrowseDescription> nodesToBrowse;
}

final class UA_BrowseResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_BrowseResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_BrowseNextRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool releaseContinuationPoints;

  @ffi.Size()
  external int continuationPointsSize;

  external ffi.Pointer<UA_ByteString> continuationPoints;
}

final class UA_BrowseNextResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_BrowseResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_RelativePathElement extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isInverse;

  @ffi.Bool()
  external bool includeSubtypes;

  external UA_QualifiedName targetName;
}

final class UA_RelativePath extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_RelativePathElement> elements;
}

final class UA_BrowsePath extends ffi.Struct {
  external UA_NodeId startingNode;

  external UA_RelativePath relativePath;
}

final class UA_BrowsePathTarget extends ffi.Struct {
  external UA_ExpandedNodeId targetId;

  @UA_UInt32()
  external int remainingPathIndex;
}

final class UA_BrowsePathResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int targetsSize;

  external ffi.Pointer<UA_BrowsePathTarget> targets;
}

final class UA_TranslateBrowsePathsToNodeIdsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int browsePathsSize;

  external ffi.Pointer<UA_BrowsePath> browsePaths;
}

final class UA_TranslateBrowsePathsToNodeIdsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_BrowsePathResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_RegisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToRegisterSize;

  external ffi.Pointer<UA_NodeId> nodesToRegister;
}

final class UA_RegisterNodesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int registeredNodeIdsSize;

  external ffi.Pointer<UA_NodeId> registeredNodeIds;
}

final class UA_UnregisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToUnregisterSize;

  external ffi.Pointer<UA_NodeId> nodesToUnregister;
}

final class UA_UnregisterNodesResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;
}

typedef UA_Counter = UA_UInt32;
typedef UA_OpaqueNumericRange = UA_String;

final class UA_EndpointConfiguration extends ffi.Struct {
  @UA_Int32()
  external int operationTimeout;

  @ffi.Bool()
  external bool useBinaryEncoding;

  @UA_Int32()
  external int maxStringLength;

  @UA_Int32()
  external int maxByteStringLength;

  @UA_Int32()
  external int maxArrayLength;

  @UA_Int32()
  external int maxMessageSize;

  @UA_Int32()
  external int maxBufferSize;

  @UA_Int32()
  external int channelLifetime;

  @UA_Int32()
  external int securityTokenLifetime;
}

final class UA_QueryDataDescription extends ffi.Struct {
  external UA_RelativePath relativePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

final class UA_NodeTypeDescription extends ffi.Struct {
  external UA_ExpandedNodeId typeDefinitionNode;

  @ffi.Bool()
  external bool includeSubTypes;

  @ffi.Size()
  external int dataToReturnSize;

  external ffi.Pointer<UA_QueryDataDescription> dataToReturn;
}

final class UA_QueryDataSet extends ffi.Struct {
  external UA_ExpandedNodeId nodeId;

  external UA_ExpandedNodeId typeDefinitionNode;

  @ffi.Size()
  external int valuesSize;

  external ffi.Pointer<UA_Variant> values;
}

final class UA_NodeReference extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  @ffi.Size()
  external int referencedNodeIdsSize;

  external ffi.Pointer<UA_NodeId> referencedNodeIds;
}

final class UA_ElementOperand extends ffi.Struct {
  @UA_UInt32()
  external int index;
}

final class UA_LiteralOperand extends ffi.Struct {
  external UA_Variant value;
}

final class UA_AttributeOperand extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String alias;

  external UA_RelativePath browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

final class UA_ContentFilterElementResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int operandStatusCodesSize;

  external ffi.Pointer<UA_StatusCode> operandStatusCodes;

  @ffi.Size()
  external int operandDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> operandDiagnosticInfos;
}

final class UA_ContentFilterResult extends ffi.Struct {
  @ffi.Size()
  external int elementResultsSize;

  external ffi.Pointer<UA_ContentFilterElementResult> elementResults;

  @ffi.Size()
  external int elementDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> elementDiagnosticInfos;
}

final class UA_ParsingResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int dataStatusCodesSize;

  external ffi.Pointer<UA_StatusCode> dataStatusCodes;

  @ffi.Size()
  external int dataDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> dataDiagnosticInfos;
}

final class UA_QueryFirstRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ViewDescription view;

  @ffi.Size()
  external int nodeTypesSize;

  external ffi.Pointer<UA_NodeTypeDescription> nodeTypes;

  external UA_ContentFilter filter;

  @UA_UInt32()
  external int maxDataSetsToReturn;

  @UA_UInt32()
  external int maxReferencesToReturn;
}

final class UA_QueryFirstResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int queryDataSetsSize;

  external ffi.Pointer<UA_QueryDataSet> queryDataSets;

  external UA_ByteString continuationPoint;

  @ffi.Size()
  external int parsingResultsSize;

  external ffi.Pointer<UA_ParsingResult> parsingResults;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;

  external UA_ContentFilterResult filterResult;
}

final class UA_QueryNextRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool releaseContinuationPoint;

  external UA_ByteString continuationPoint;
}

final class UA_QueryNextResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int queryDataSetsSize;

  external ffi.Pointer<UA_QueryDataSet> queryDataSets;

  external UA_ByteString revisedContinuationPoint;
}

final class UA_ReadValueId extends ffi.Struct {
  external UA_NodeId nodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;

  external UA_QualifiedName dataEncoding;
}

final class UA_ReadRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double maxAge;

  @ffi.UnsignedInt()
  external int timestampsToReturnAsInt;

  UA_TimestampsToReturn get timestampsToReturn => UA_TimestampsToReturn.fromValue(timestampsToReturnAsInt);

  @ffi.Size()
  external int nodesToReadSize;

  external ffi.Pointer<UA_ReadValueId> nodesToRead;
}

final class UA_ReadResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_DataValue> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_ReadAnnotationDataDetails extends ffi.Struct {
  @ffi.Size()
  external int reqTimesSize;

  external ffi.Pointer<UA_DateTime> reqTimes;
}

final class UA_HistoryReadRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ExtensionObject historyReadDetails;

  @ffi.UnsignedInt()
  external int timestampsToReturnAsInt;

  UA_TimestampsToReturn get timestampsToReturn => UA_TimestampsToReturn.fromValue(timestampsToReturnAsInt);

  @ffi.Bool()
  external bool releaseContinuationPoints;

  @ffi.Size()
  external int nodesToReadSize;

  external ffi.Pointer<UA_HistoryReadValueId> nodesToRead;
}

final class UA_WriteValue extends ffi.Struct {
  external UA_NodeId nodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;

  external UA_DataValue value;
}

final class UA_WriteRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToWriteSize;

  external ffi.Pointer<UA_WriteValue> nodesToWrite;
}

final class UA_WriteResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_HistoryUpdateDetails extends ffi.Struct {
  external UA_NodeId nodeId;
}

final class UA_UpdateStructureDataDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.UnsignedInt()
  external int performInsertReplaceAsInt;

  UA_PerformUpdateType get performInsertReplace => UA_PerformUpdateType.fromValue(performInsertReplaceAsInt);

  @ffi.Size()
  external int updateValuesSize;

  external ffi.Pointer<UA_DataValue> updateValues;
}

final class UA_DeleteAtTimeDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Size()
  external int reqTimesSize;

  external ffi.Pointer<UA_DateTime> reqTimes;
}

final class UA_DeleteEventDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Size()
  external int eventIdsSize;

  external ffi.Pointer<UA_ByteString> eventIds;
}

final class UA_HistoryUpdateRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int historyUpdateDetailsSize;

  external ffi.Pointer<UA_ExtensionObject> historyUpdateDetails;
}

final class UA_HistoryUpdateResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_HistoryUpdateResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_CallMethodRequest extends ffi.Struct {
  external UA_NodeId objectId;

  external UA_NodeId methodId;

  @ffi.Size()
  external int inputArgumentsSize;

  external ffi.Pointer<UA_Variant> inputArguments;
}

final class UA_CallMethodResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int inputArgumentResultsSize;

  external ffi.Pointer<UA_StatusCode> inputArgumentResults;

  @ffi.Size()
  external int inputArgumentDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> inputArgumentDiagnosticInfos;

  @ffi.Size()
  external int outputArgumentsSize;

  external ffi.Pointer<UA_Variant> outputArguments;
}

final class UA_CallRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int methodsToCallSize;

  external ffi.Pointer<UA_CallMethodRequest> methodsToCall;
}

final class UA_CallResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_CallMethodResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

enum UA_MonitoringMode {
  UA_MONITORINGMODE_DISABLED(0),
  UA_MONITORINGMODE_SAMPLING(1),
  UA_MONITORINGMODE_REPORTING(2),
  __UA_MONITORINGMODE_FORCE32BIT(2147483647);

  final int value;
  const UA_MonitoringMode(this.value);

  static UA_MonitoringMode fromValue(int value) => switch (value) {
        0 => UA_MONITORINGMODE_DISABLED,
        1 => UA_MONITORINGMODE_SAMPLING,
        2 => UA_MONITORINGMODE_REPORTING,
        2147483647 => __UA_MONITORINGMODE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_MonitoringMode: $value'),
      };
}

enum UA_DataChangeTrigger {
  UA_DATACHANGETRIGGER_STATUS(0),
  UA_DATACHANGETRIGGER_STATUSVALUE(1),
  UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP(2),
  __UA_DATACHANGETRIGGER_FORCE32BIT(2147483647);

  final int value;
  const UA_DataChangeTrigger(this.value);

  static UA_DataChangeTrigger fromValue(int value) => switch (value) {
        0 => UA_DATACHANGETRIGGER_STATUS,
        1 => UA_DATACHANGETRIGGER_STATUSVALUE,
        2 => UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP,
        2147483647 => __UA_DATACHANGETRIGGER_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_DataChangeTrigger: $value'),
      };
}

enum UA_DeadbandType {
  UA_DEADBANDTYPE_NONE(0),
  UA_DEADBANDTYPE_ABSOLUTE(1),
  UA_DEADBANDTYPE_PERCENT(2),
  __UA_DEADBANDTYPE_FORCE32BIT(2147483647);

  final int value;
  const UA_DeadbandType(this.value);

  static UA_DeadbandType fromValue(int value) => switch (value) {
        0 => UA_DEADBANDTYPE_NONE,
        1 => UA_DEADBANDTYPE_ABSOLUTE,
        2 => UA_DEADBANDTYPE_PERCENT,
        2147483647 => __UA_DEADBANDTYPE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_DeadbandType: $value'),
      };
}

final class UA_DataChangeFilter extends ffi.Struct {
  @ffi.UnsignedInt()
  external int triggerAsInt;

  UA_DataChangeTrigger get trigger => UA_DataChangeTrigger.fromValue(triggerAsInt);

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;
}

final class UA_AggregateFilter extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  external UA_NodeId aggregateType;

  @UA_Double()
  external double processingInterval;

  external UA_AggregateConfiguration aggregateConfiguration;
}

final class UA_EventFilterResult extends ffi.Struct {
  @ffi.Size()
  external int selectClauseResultsSize;

  external ffi.Pointer<UA_StatusCode> selectClauseResults;

  @ffi.Size()
  external int selectClauseDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> selectClauseDiagnosticInfos;

  external UA_ContentFilterResult whereClauseResult;
}

final class UA_AggregateFilterResult extends ffi.Struct {
  @UA_DateTime()
  external int revisedStartTime;

  @UA_Double()
  external double revisedProcessingInterval;

  external UA_AggregateConfiguration revisedAggregateConfiguration;
}

final class UA_MonitoringParameters extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @UA_Double()
  external double samplingInterval;

  external UA_ExtensionObject filter;

  @UA_UInt32()
  external int queueSize;

  @ffi.Bool()
  external bool discardOldest;
}

final class UA_MonitoredItemCreateRequest extends ffi.Struct {
  external UA_ReadValueId itemToMonitor;

  @ffi.UnsignedInt()
  external int monitoringModeAsInt;

  UA_MonitoringMode get monitoringMode => UA_MonitoringMode.fromValue(monitoringModeAsInt);

  external UA_MonitoringParameters requestedParameters;
}

final class UA_MonitoredItemCreateResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_UInt32()
  external int monitoredItemId;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

final class UA_CreateMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.UnsignedInt()
  external int timestampsToReturnAsInt;

  UA_TimestampsToReturn get timestampsToReturn => UA_TimestampsToReturn.fromValue(timestampsToReturnAsInt);

  @ffi.Size()
  external int itemsToCreateSize;

  external ffi.Pointer<UA_MonitoredItemCreateRequest> itemsToCreate;
}

final class UA_CreateMonitoredItemsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_MonitoredItemCreateResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_MonitoredItemModifyRequest extends ffi.Struct {
  @UA_UInt32()
  external int monitoredItemId;

  external UA_MonitoringParameters requestedParameters;
}

final class UA_MonitoredItemModifyResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

final class UA_ModifyMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.UnsignedInt()
  external int timestampsToReturnAsInt;

  UA_TimestampsToReturn get timestampsToReturn => UA_TimestampsToReturn.fromValue(timestampsToReturnAsInt);

  @ffi.Size()
  external int itemsToModifySize;

  external ffi.Pointer<UA_MonitoredItemModifyRequest> itemsToModify;
}

final class UA_ModifyMonitoredItemsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_MonitoredItemModifyResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_SetMonitoringModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.UnsignedInt()
  external int monitoringModeAsInt;

  UA_MonitoringMode get monitoringMode => UA_MonitoringMode.fromValue(monitoringModeAsInt);

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

final class UA_SetMonitoringModeResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_SetTriggeringRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int triggeringItemId;

  @ffi.Size()
  external int linksToAddSize;

  external ffi.Pointer<UA_UInt32> linksToAdd;

  @ffi.Size()
  external int linksToRemoveSize;

  external ffi.Pointer<UA_UInt32> linksToRemove;
}

final class UA_SetTriggeringResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int addResultsSize;

  external ffi.Pointer<UA_StatusCode> addResults;

  @ffi.Size()
  external int addDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> addDiagnosticInfos;

  @ffi.Size()
  external int removeResultsSize;

  external ffi.Pointer<UA_StatusCode> removeResults;

  @ffi.Size()
  external int removeDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> removeDiagnosticInfos;
}

final class UA_DeleteMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

final class UA_DeleteMonitoredItemsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_CreateSubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool publishingEnabled;

  @UA_Byte()
  external int priority;
}

final class UA_CreateSubscriptionResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_Double()
  external double revisedPublishingInterval;

  @UA_UInt32()
  external int revisedLifetimeCount;

  @UA_UInt32()
  external int revisedMaxKeepAliveCount;
}

final class UA_ModifySubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @UA_Byte()
  external int priority;
}

final class UA_ModifySubscriptionResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_Double()
  external double revisedPublishingInterval;

  @UA_UInt32()
  external int revisedLifetimeCount;

  @UA_UInt32()
  external int revisedMaxKeepAliveCount;
}

final class UA_SetPublishingModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool publishingEnabled;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

final class UA_SetPublishingModeResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_NotificationMessage extends ffi.Struct {
  @UA_UInt32()
  external int sequenceNumber;

  @UA_DateTime()
  external int publishTime;

  @ffi.Size()
  external int notificationDataSize;

  external ffi.Pointer<UA_ExtensionObject> notificationData;
}

final class UA_MonitoredItemNotification extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  external UA_DataValue value;
}

final class UA_StatusChangeNotification extends ffi.Struct {
  @UA_StatusCode()
  external int status;

  external UA_DiagnosticInfo diagnosticInfo;
}

final class UA_SubscriptionAcknowledgement extends ffi.Struct {
  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int sequenceNumber;
}

final class UA_PublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionAcknowledgementsSize;

  external ffi.Pointer<UA_SubscriptionAcknowledgement> subscriptionAcknowledgements;
}

final class UA_PublishResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Size()
  external int availableSequenceNumbersSize;

  external ffi.Pointer<UA_UInt32> availableSequenceNumbers;

  @ffi.Bool()
  external bool moreNotifications;

  external UA_NotificationMessage notificationMessage;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_RepublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int retransmitSequenceNumber;
}

final class UA_RepublishResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  external UA_NotificationMessage notificationMessage;
}

final class UA_TransferResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int availableSequenceNumbersSize;

  external ffi.Pointer<UA_UInt32> availableSequenceNumbers;
}

final class UA_TransferSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;

  @ffi.Bool()
  external bool sendInitialValues;
}

final class UA_TransferSubscriptionsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_TransferResult> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_DeleteSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

final class UA_DeleteSubscriptionsResponse extends ffi.Struct {
  external UA_ResponseHeader responseHeader;

  @ffi.Size()
  external int resultsSize;

  external ffi.Pointer<UA_StatusCode> results;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

enum UA_RedundancySupport {
  UA_REDUNDANCYSUPPORT_NONE(0),
  UA_REDUNDANCYSUPPORT_COLD(1),
  UA_REDUNDANCYSUPPORT_WARM(2),
  UA_REDUNDANCYSUPPORT_HOT(3),
  UA_REDUNDANCYSUPPORT_TRANSPARENT(4),
  UA_REDUNDANCYSUPPORT_HOTANDMIRRORED(5),
  __UA_REDUNDANCYSUPPORT_FORCE32BIT(2147483647);

  final int value;
  const UA_RedundancySupport(this.value);

  static UA_RedundancySupport fromValue(int value) => switch (value) {
        0 => UA_REDUNDANCYSUPPORT_NONE,
        1 => UA_REDUNDANCYSUPPORT_COLD,
        2 => UA_REDUNDANCYSUPPORT_WARM,
        3 => UA_REDUNDANCYSUPPORT_HOT,
        4 => UA_REDUNDANCYSUPPORT_TRANSPARENT,
        5 => UA_REDUNDANCYSUPPORT_HOTANDMIRRORED,
        2147483647 => __UA_REDUNDANCYSUPPORT_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_RedundancySupport: $value'),
      };
}

enum UA_ServerState {
  UA_SERVERSTATE_RUNNING(0),
  UA_SERVERSTATE_FAILED(1),
  UA_SERVERSTATE_NOCONFIGURATION(2),
  UA_SERVERSTATE_SUSPENDED(3),
  UA_SERVERSTATE_SHUTDOWN(4),
  UA_SERVERSTATE_TEST(5),
  UA_SERVERSTATE_COMMUNICATIONFAULT(6),
  UA_SERVERSTATE_UNKNOWN(7),
  __UA_SERVERSTATE_FORCE32BIT(2147483647);

  final int value;
  const UA_ServerState(this.value);

  static UA_ServerState fromValue(int value) => switch (value) {
        0 => UA_SERVERSTATE_RUNNING,
        1 => UA_SERVERSTATE_FAILED,
        2 => UA_SERVERSTATE_NOCONFIGURATION,
        3 => UA_SERVERSTATE_SUSPENDED,
        4 => UA_SERVERSTATE_SHUTDOWN,
        5 => UA_SERVERSTATE_TEST,
        6 => UA_SERVERSTATE_COMMUNICATIONFAULT,
        7 => UA_SERVERSTATE_UNKNOWN,
        2147483647 => __UA_SERVERSTATE_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_ServerState: $value'),
      };
}

final class UA_RedundantServerDataType extends ffi.Struct {
  external UA_String serverId;

  @UA_Byte()
  external int serviceLevel;

  @ffi.UnsignedInt()
  external int serverStateAsInt;

  UA_ServerState get serverState => UA_ServerState.fromValue(serverStateAsInt);
}

final class UA_EndpointUrlListDataType extends ffi.Struct {
  @ffi.Size()
  external int endpointUrlListSize;

  external ffi.Pointer<UA_String> endpointUrlList;
}

final class UA_NetworkGroupDataType extends ffi.Struct {
  external UA_String serverUri;

  @ffi.Size()
  external int networkPathsSize;

  external ffi.Pointer<UA_EndpointUrlListDataType> networkPaths;
}

final class UA_SamplingIntervalDiagnosticsDataType extends ffi.Struct {
  @UA_Double()
  external double samplingInterval;

  @UA_UInt32()
  external int monitoredItemCount;

  @UA_UInt32()
  external int maxMonitoredItemCount;

  @UA_UInt32()
  external int disabledMonitoredItemCount;
}

final class UA_ServerDiagnosticsSummaryDataType extends ffi.Struct {
  @UA_UInt32()
  external int serverViewCount;

  @UA_UInt32()
  external int currentSessionCount;

  @UA_UInt32()
  external int cumulatedSessionCount;

  @UA_UInt32()
  external int securityRejectedSessionCount;

  @UA_UInt32()
  external int rejectedSessionCount;

  @UA_UInt32()
  external int sessionTimeoutCount;

  @UA_UInt32()
  external int sessionAbortCount;

  @UA_UInt32()
  external int currentSubscriptionCount;

  @UA_UInt32()
  external int cumulatedSubscriptionCount;

  @UA_UInt32()
  external int publishingIntervalCount;

  @UA_UInt32()
  external int securityRejectedRequestsCount;

  @UA_UInt32()
  external int rejectedRequestsCount;
}

final class UA_ServerStatusDataType extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int currentTime;

  @ffi.UnsignedInt()
  external int stateAsInt;

  UA_ServerState get state => UA_ServerState.fromValue(stateAsInt);

  external UA_BuildInfo buildInfo;

  @UA_UInt32()
  external int secondsTillShutdown;

  external UA_LocalizedText shutdownReason;
}

final class UA_SessionSecurityDiagnosticsDataType extends ffi.Struct {
  external UA_NodeId sessionId;

  external UA_String clientUserIdOfSession;

  @ffi.Size()
  external int clientUserIdHistorySize;

  external ffi.Pointer<UA_String> clientUserIdHistory;

  external UA_String authenticationMechanism;

  external UA_String encoding;

  external UA_String transportProtocol;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityPolicyUri;

  external UA_ByteString clientCertificate;
}

final class UA_ServiceCounterDataType extends ffi.Struct {
  @UA_UInt32()
  external int totalCount;

  @UA_UInt32()
  external int errorCount;
}

final class UA_StatusResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_DiagnosticInfo diagnosticInfo;
}

final class UA_SubscriptionDiagnosticsDataType extends ffi.Struct {
  external UA_NodeId sessionId;

  @UA_UInt32()
  external int subscriptionId;

  @UA_Byte()
  external int priority;

  @UA_Double()
  external double publishingInterval;

  @UA_UInt32()
  external int maxKeepAliveCount;

  @UA_UInt32()
  external int maxLifetimeCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool publishingEnabled;

  @UA_UInt32()
  external int modifyCount;

  @UA_UInt32()
  external int enableCount;

  @UA_UInt32()
  external int disableCount;

  @UA_UInt32()
  external int republishRequestCount;

  @UA_UInt32()
  external int republishMessageRequestCount;

  @UA_UInt32()
  external int republishMessageCount;

  @UA_UInt32()
  external int transferRequestCount;

  @UA_UInt32()
  external int transferredToAltClientCount;

  @UA_UInt32()
  external int transferredToSameClientCount;

  @UA_UInt32()
  external int publishRequestCount;

  @UA_UInt32()
  external int dataChangeNotificationsCount;

  @UA_UInt32()
  external int eventNotificationsCount;

  @UA_UInt32()
  external int notificationsCount;

  @UA_UInt32()
  external int latePublishRequestCount;

  @UA_UInt32()
  external int currentKeepAliveCount;

  @UA_UInt32()
  external int currentLifetimeCount;

  @UA_UInt32()
  external int unacknowledgedMessageCount;

  @UA_UInt32()
  external int discardedMessageCount;

  @UA_UInt32()
  external int monitoredItemCount;

  @UA_UInt32()
  external int disabledMonitoredItemCount;

  @UA_UInt32()
  external int monitoringQueueOverflowCount;

  @UA_UInt32()
  external int nextSequenceNumber;

  @UA_UInt32()
  external int eventQueueOverFlowCount;
}

enum UA_ModelChangeStructureVerbMask {
  UA_MODELCHANGESTRUCTUREVERBMASK_NODEADDED(1),
  UA_MODELCHANGESTRUCTUREVERBMASK_NODEDELETED(2),
  UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEADDED(4),
  UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEDELETED(8),
  UA_MODELCHANGESTRUCTUREVERBMASK_DATATYPECHANGED(16),
  __UA_MODELCHANGESTRUCTUREVERBMASK_FORCE32BIT(2147483647);

  final int value;
  const UA_ModelChangeStructureVerbMask(this.value);

  static UA_ModelChangeStructureVerbMask fromValue(int value) => switch (value) {
        1 => UA_MODELCHANGESTRUCTUREVERBMASK_NODEADDED,
        2 => UA_MODELCHANGESTRUCTUREVERBMASK_NODEDELETED,
        4 => UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEADDED,
        8 => UA_MODELCHANGESTRUCTUREVERBMASK_REFERENCEDELETED,
        16 => UA_MODELCHANGESTRUCTUREVERBMASK_DATATYPECHANGED,
        2147483647 => __UA_MODELCHANGESTRUCTUREVERBMASK_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_ModelChangeStructureVerbMask: $value'),
      };
}

final class UA_ModelChangeStructureDataType extends ffi.Struct {
  external UA_NodeId affected;

  external UA_NodeId affectedType;

  @UA_Byte()
  external int verb;
}

final class UA_SemanticChangeStructureDataType extends ffi.Struct {
  external UA_NodeId affected;

  external UA_NodeId affectedType;
}

final class UA_Range extends ffi.Struct {
  @UA_Double()
  external double low;

  @UA_Double()
  external double high;
}

final class UA_EUInformation extends ffi.Struct {
  external UA_String namespaceUri;

  @UA_Int32()
  external int unitId;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

enum UA_AxisScaleEnumeration {
  UA_AXISSCALEENUMERATION_LINEAR(0),
  UA_AXISSCALEENUMERATION_LOG(1),
  UA_AXISSCALEENUMERATION_LN(2),
  __UA_AXISSCALEENUMERATION_FORCE32BIT(2147483647);

  final int value;
  const UA_AxisScaleEnumeration(this.value);

  static UA_AxisScaleEnumeration fromValue(int value) => switch (value) {
        0 => UA_AXISSCALEENUMERATION_LINEAR,
        1 => UA_AXISSCALEENUMERATION_LOG,
        2 => UA_AXISSCALEENUMERATION_LN,
        2147483647 => __UA_AXISSCALEENUMERATION_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_AxisScaleEnumeration: $value'),
      };
}

final class UA_ComplexNumberType extends ffi.Struct {
  @UA_Float()
  external double real;

  @UA_Float()
  external double imaginary;
}

final class UA_DoubleComplexNumberType extends ffi.Struct {
  @UA_Double()
  external double real;

  @UA_Double()
  external double imaginary;
}

final class UA_AxisInformation extends ffi.Struct {
  external UA_EUInformation engineeringUnits;

  external UA_Range eURange;

  external UA_LocalizedText title;

  @ffi.UnsignedInt()
  external int axisScaleTypeAsInt;

  UA_AxisScaleEnumeration get axisScaleType => UA_AxisScaleEnumeration.fromValue(axisScaleTypeAsInt);

  @ffi.Size()
  external int axisStepsSize;

  external ffi.Pointer<UA_Double> axisSteps;
}

final class UA_XVType extends ffi.Struct {
  @UA_Double()
  external double x;

  @UA_Float()
  external double value;
}

final class UA_ProgramDiagnosticDataType extends ffi.Struct {
  external UA_NodeId createSessionId;

  external UA_String createClientName;

  @UA_DateTime()
  external int invocationCreationTime;

  @UA_DateTime()
  external int lastTransitionTime;

  external UA_String lastMethodCall;

  external UA_NodeId lastMethodSessionId;

  @ffi.Size()
  external int lastMethodInputArgumentsSize;

  external ffi.Pointer<UA_Argument> lastMethodInputArguments;

  @ffi.Size()
  external int lastMethodOutputArgumentsSize;

  external ffi.Pointer<UA_Argument> lastMethodOutputArguments;

  @UA_DateTime()
  external int lastMethodCallTime;

  external UA_StatusResult lastMethodReturnStatus;
}

final class UA_ProgramDiagnostic2DataType extends ffi.Struct {
  external UA_NodeId createSessionId;

  external UA_String createClientName;

  @UA_DateTime()
  external int invocationCreationTime;

  @UA_DateTime()
  external int lastTransitionTime;

  external UA_String lastMethodCall;

  external UA_NodeId lastMethodSessionId;

  @ffi.Size()
  external int lastMethodInputArgumentsSize;

  external ffi.Pointer<UA_Argument> lastMethodInputArguments;

  @ffi.Size()
  external int lastMethodOutputArgumentsSize;

  external ffi.Pointer<UA_Argument> lastMethodOutputArguments;

  @ffi.Size()
  external int lastMethodInputValuesSize;

  external ffi.Pointer<UA_Variant> lastMethodInputValues;

  @ffi.Size()
  external int lastMethodOutputValuesSize;

  external ffi.Pointer<UA_Variant> lastMethodOutputValues;

  @UA_DateTime()
  external int lastMethodCallTime;

  @UA_StatusCode()
  external int lastMethodReturnStatus;
}

final class UA_Annotation extends ffi.Struct {
  external UA_String message;

  external UA_String userName;

  @UA_DateTime()
  external int annotationTime;
}

enum UA_ExceptionDeviationFormat {
  UA_EXCEPTIONDEVIATIONFORMAT_ABSOLUTEVALUE(0),
  UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFVALUE(1),
  UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFRANGE(2),
  UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFEURANGE(3),
  UA_EXCEPTIONDEVIATIONFORMAT_UNKNOWN(4),
  __UA_EXCEPTIONDEVIATIONFORMAT_FORCE32BIT(2147483647);

  final int value;
  const UA_ExceptionDeviationFormat(this.value);

  static UA_ExceptionDeviationFormat fromValue(int value) => switch (value) {
        0 => UA_EXCEPTIONDEVIATIONFORMAT_ABSOLUTEVALUE,
        1 => UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFVALUE,
        2 => UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFRANGE,
        3 => UA_EXCEPTIONDEVIATIONFORMAT_PERCENTOFEURANGE,
        4 => UA_EXCEPTIONDEVIATIONFORMAT_UNKNOWN,
        2147483647 => __UA_EXCEPTIONDEVIATIONFORMAT_FORCE32BIT,
        _ => throw ArgumentError('Unknown value for UA_ExceptionDeviationFormat: $value'),
      };
}

final class UA_EndpointType extends ffi.Struct {
  external UA_String endpointUrl;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityPolicyUri;

  external UA_String transportProfileUri;
}

final class UA_StructureDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_StructureDefinition structureDefinition;
}

final class UA_FieldMetaData extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  @UA_DataSetFieldFlags()
  external int fieldFlags;

  @UA_Byte()
  external int builtInType;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  external UA_Guid dataSetFieldId;

  @ffi.Size()
  external int propertiesSize;

  external ffi.Pointer<UA_KeyValuePair> properties;
}

final class UA_PublishedEventsDataType extends ffi.Struct {
  external UA_NodeId eventNotifier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

final class UA_PubSubGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;
}

final class UA_WriterGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_String headerLayoutUri;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetWritersSize;

  external ffi.Pointer<UA_DataSetWriterDataType> dataSetWriters;
}

final class UA_FieldTargetDataType extends ffi.Struct {
  external UA_Guid dataSetFieldId;

  external UA_String receiverIndexRange;

  external UA_NodeId targetNodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String writeIndexRange;

  @ffi.UnsignedInt()
  external int overrideValueHandlingAsInt;

  UA_OverrideValueHandling get overrideValueHandling => UA_OverrideValueHandling.fromValue(overrideValueHandlingAsInt);

  external UA_Variant overrideValue;
}

final class UA_SubscribedDataSetMirrorDataType extends ffi.Struct {
  external UA_String parentNodeName;

  @ffi.Size()
  external int rolePermissionsSize;

  external ffi.Pointer<UA_RolePermissionType> rolePermissions;
}

final class UA_SecurityGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Size()
  external int securityGroupFolderSize;

  external ffi.Pointer<UA_String> securityGroupFolder;

  @UA_Double()
  external double keyLifetime;

  external UA_String securityPolicyUri;

  @UA_UInt32()
  external int maxFutureKeyCount;

  @UA_UInt32()
  external int maxPastKeyCount;

  external UA_String securityGroupId;

  @ffi.Size()
  external int rolePermissionsSize;

  external ffi.Pointer<UA_RolePermissionType> rolePermissions;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;
}

final class UA_PubSubKeyPushTargetDataType extends ffi.Struct {
  external UA_String applicationUri;

  @ffi.Size()
  external int pushTargetFolderSize;

  external ffi.Pointer<UA_String> pushTargetFolder;

  external UA_String endpointUrl;

  external UA_String securityPolicyUri;

  external UA_UserTokenPolicy userTokenType;

  @UA_UInt16()
  external int requestedKeyCount;

  @UA_Double()
  external double retryInterval;

  @ffi.Size()
  external int pushTargetPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> pushTargetProperties;

  @ffi.Size()
  external int securityGroupsSize;

  external ffi.Pointer<UA_String> securityGroups;
}

final class UA_EnumDefinition extends ffi.Struct {
  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_EnumField> fields;
}

final class UA_UpdateEventDetails extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.UnsignedInt()
  external int performInsertReplaceAsInt;

  UA_PerformUpdateType get performInsertReplace => UA_PerformUpdateType.fromValue(performInsertReplaceAsInt);

  external UA_EventFilter filter;

  @ffi.Size()
  external int eventDataSize;

  external ffi.Pointer<UA_HistoryEventFieldList> eventData;
}

final class UA_DataChangeNotification extends ffi.Struct {
  @ffi.Size()
  external int monitoredItemsSize;

  external ffi.Pointer<UA_MonitoredItemNotification> monitoredItems;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

final class UA_EventNotificationList extends ffi.Struct {
  @ffi.Size()
  external int eventsSize;

  external ffi.Pointer<UA_EventFieldList> events;
}

final class UA_SessionDiagnosticsDataType extends ffi.Struct {
  external UA_NodeId sessionId;

  external UA_String sessionName;

  external UA_ApplicationDescription clientDescription;

  external UA_String serverUri;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @UA_Double()
  external double actualSessionTimeout;

  @UA_UInt32()
  external int maxResponseMessageSize;

  @UA_DateTime()
  external int clientConnectionTime;

  @UA_DateTime()
  external int clientLastContactTime;

  @UA_UInt32()
  external int currentSubscriptionsCount;

  @UA_UInt32()
  external int currentMonitoredItemsCount;

  @UA_UInt32()
  external int currentPublishRequestsInQueue;

  external UA_ServiceCounterDataType totalRequestCount;

  @UA_UInt32()
  external int unauthorizedRequestCount;

  external UA_ServiceCounterDataType readCount;

  external UA_ServiceCounterDataType historyReadCount;

  external UA_ServiceCounterDataType writeCount;

  external UA_ServiceCounterDataType historyUpdateCount;

  external UA_ServiceCounterDataType callCount;

  external UA_ServiceCounterDataType createMonitoredItemsCount;

  external UA_ServiceCounterDataType modifyMonitoredItemsCount;

  external UA_ServiceCounterDataType setMonitoringModeCount;

  external UA_ServiceCounterDataType setTriggeringCount;

  external UA_ServiceCounterDataType deleteMonitoredItemsCount;

  external UA_ServiceCounterDataType createSubscriptionCount;

  external UA_ServiceCounterDataType modifySubscriptionCount;

  external UA_ServiceCounterDataType setPublishingModeCount;

  external UA_ServiceCounterDataType publishCount;

  external UA_ServiceCounterDataType republishCount;

  external UA_ServiceCounterDataType transferSubscriptionsCount;

  external UA_ServiceCounterDataType deleteSubscriptionsCount;

  external UA_ServiceCounterDataType addNodesCount;

  external UA_ServiceCounterDataType addReferencesCount;

  external UA_ServiceCounterDataType deleteNodesCount;

  external UA_ServiceCounterDataType deleteReferencesCount;

  external UA_ServiceCounterDataType browseCount;

  external UA_ServiceCounterDataType browseNextCount;

  external UA_ServiceCounterDataType translateBrowsePathsToNodeIdsCount;

  external UA_ServiceCounterDataType queryFirstCount;

  external UA_ServiceCounterDataType queryNextCount;

  external UA_ServiceCounterDataType registerNodesCount;

  external UA_ServiceCounterDataType unregisterNodesCount;
}

final class UA_EnumDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_EnumDefinition enumDefinition;

  @UA_Byte()
  external int builtInType;
}

final class UA_UABinaryFileDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String schemaLocation;

  @ffi.Size()
  external int fileHeaderSize;

  external ffi.Pointer<UA_KeyValuePair> fileHeader;

  external UA_Variant body;
}

final class UA_DataSetMetaDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String name;

  external UA_LocalizedText description;

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_FieldMetaData> fields;

  external UA_Guid dataSetClassId;

  external UA_ConfigurationVersionDataType configurationVersion;
}

final class UA_PublishedDataSetDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Size()
  external int dataSetFolderSize;

  external ffi.Pointer<UA_String> dataSetFolder;

  external UA_DataSetMetaDataType dataSetMetaData;

  @ffi.Size()
  external int extensionFieldsSize;

  external ffi.Pointer<UA_KeyValuePair> extensionFields;

  external UA_ExtensionObject dataSetSource;
}

final class UA_DataSetReaderDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String headerLayoutUri;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @ffi.Size()
  external int dataSetReaderPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetReaderProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject subscribedDataSet;
}

final class UA_TargetVariablesDataType extends ffi.Struct {
  @ffi.Size()
  external int targetVariablesSize;

  external ffi.Pointer<UA_FieldTargetDataType> targetVariables;
}

final class UA_StandaloneSubscribedDataSetDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Size()
  external int dataSetFolderSize;

  external ffi.Pointer<UA_String> dataSetFolder;

  external UA_DataSetMetaDataType dataSetMetaData;

  external UA_ExtensionObject subscribedDataSet;
}

final class UA_DataTypeSchemaHeader extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;
}

final class UA_ReaderGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetReadersSize;

  external ffi.Pointer<UA_DataSetReaderDataType> dataSetReaders;
}

final class UA_PubSubConnectionDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  external UA_String transportProfileUri;

  external UA_ExtensionObject address;

  @ffi.Size()
  external int connectionPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> connectionProperties;

  external UA_ExtensionObject transportSettings;

  @ffi.Size()
  external int writerGroupsSize;

  external ffi.Pointer<UA_WriterGroupDataType> writerGroups;

  @ffi.Size()
  external int readerGroupsSize;

  external ffi.Pointer<UA_ReaderGroupDataType> readerGroups;
}

final class UA_PubSubConfigurationDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSetsSize;

  external ffi.Pointer<UA_PublishedDataSetDataType> publishedDataSets;

  @ffi.Size()
  external int connectionsSize;

  external ffi.Pointer<UA_PubSubConnectionDataType> connections;

  @ffi.Bool()
  external bool enabled;
}

final class UA_PubSubConfiguration2DataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSetsSize;

  external ffi.Pointer<UA_PublishedDataSetDataType> publishedDataSets;

  @ffi.Size()
  external int connectionsSize;

  external ffi.Pointer<UA_PubSubConnectionDataType> connections;

  @ffi.Bool()
  external bool enabled;

  @ffi.Size()
  external int subscribedDataSetsSize;

  external ffi.Pointer<UA_StandaloneSubscribedDataSetDataType> subscribedDataSets;

  @ffi.Size()
  external int dataSetClassesSize;

  external ffi.Pointer<UA_DataSetMetaDataType> dataSetClasses;

  @ffi.Size()
  external int defaultSecurityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> defaultSecurityKeyServices;

  @ffi.Size()
  external int securityGroupsSize;

  external ffi.Pointer<UA_SecurityGroupDataType> securityGroups;

  @ffi.Size()
  external int pubSubKeyPushTargetsSize;

  external ffi.Pointer<UA_PubSubKeyPushTargetDataType> pubSubKeyPushTargets;

  @UA_UInt32()
  external int configurationVersion;

  @ffi.Size()
  external int configurationPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> configurationProperties;
}

final class UA_EventFilterParserOptions extends ffi.Struct {
  external ffi.Pointer<UA_Logger> logger;
}

/// Binary Connection Config Parameters
/// -----------------------------------
final class UA_ConnectionConfig extends ffi.Struct {
  @UA_UInt32()
  external int protocolVersion;

  @UA_UInt32()
  external int recvBufferSize;

  @UA_UInt32()
  external int sendBufferSize;

  @UA_UInt32()
  external int localMaxMessageSize;

  @UA_UInt32()
  external int remoteMaxMessageSize;

  @UA_UInt32()
  external int localMaxChunkCount;

  @UA_UInt32()
  external int remoteMaxChunkCount;
}

typedef UA_ConnectionManager_connectionCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_ConnectionManager> cm,
    ffi.UintPtr connectionId,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<ffi.Pointer<ffi.Void>> connectionContext,
    ffi.UnsignedInt state,
    ffi.Pointer<UA_KeyValueMap> params,
    UA_ByteString msg);
typedef DartUA_ConnectionManager_connectionCallbackFunction = void Function(
    ffi.Pointer<UA_ConnectionManager> cm,
    int connectionId,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<ffi.Pointer<ffi.Void>> connectionContext,
    UA_ConnectionState state,
    ffi.Pointer<UA_KeyValueMap> params,
    UA_ByteString msg);

/// Connection Manager
/// ------------------
/// Every Connection is created by a ConnectionManager. Every ConnectionManager
/// belongs to just one application. A ConnectionManager can act purely as a
/// passive "Factory" for Connections. But it can also be stateful. For example,
/// it can keep a session to an MQTT broker open which is used by individual
/// connections that are each bound to an MQTT topic.
typedef UA_ConnectionManager_connectionCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ConnectionManager_connectionCallbackFunction>>;

final class UA_ConnectionManager extends ffi.Struct {
  external UA_EventSource eventSource;

  external UA_String protocol;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ConnectionManager> cm,
              ffi.Pointer<UA_KeyValueMap> params,
              ffi.Pointer<ffi.Void> application,
              ffi.Pointer<ffi.Void> context,
              UA_ConnectionManager_connectionCallback connectionCallback)>> openConnection;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ConnectionManager> cm, ffi.UintPtr connectionId,
              ffi.Pointer<UA_KeyValueMap> params, ffi.Pointer<UA_ByteString> buf)>> sendWithConnection;

  external ffi.Pointer<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ConnectionManager> cm, ffi.UintPtr connectionId)>>
      closeConnection;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ConnectionManager> cm, ffi.UintPtr connectionId,
              ffi.Pointer<UA_ByteString> buf, ffi.Size bufSize)>> allocNetworkBuffer;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ConnectionManager> cm, ffi.UintPtr connectionId, ffi.Pointer<UA_ByteString> buf)>>
      freeNetworkBuffer;
}

typedef UA_InterruptCallbackFunction = ffi.Void Function(ffi.Pointer<UA_InterruptManager> im,
    ffi.UintPtr interruptHandle, ffi.Pointer<ffi.Void> interruptContext, ffi.Pointer<UA_KeyValueMap> instanceInfos);
typedef DartUA_InterruptCallbackFunction = void Function(ffi.Pointer<UA_InterruptManager> im, int interruptHandle,
    ffi.Pointer<ffi.Void> interruptContext, ffi.Pointer<UA_KeyValueMap> instanceInfos);

/// Interrupt Manager
/// -----------------
/// The Interrupt Manager allows to register to listen for system interrupts.
/// Triggering the interrupt calls the callback associated with it.
///
/// The implementations of the interrupt manager for the different platforms
/// shall be designed such that:
///
/// - Registered interrupts are only intercepted from within the running EventLoop
/// - Processing an interrupt in the EventLoop is handled similarly to handling a
/// network event: all methods and also memory allocation are available from
/// within the interrupt callback.
typedef UA_InterruptCallback = ffi.Pointer<ffi.NativeFunction<UA_InterruptCallbackFunction>>;

final class UA_InterruptManager extends ffi.Struct {
  external UA_EventSource eventSource;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_InterruptManager> im,
              ffi.UintPtr interruptHandle,
              ffi.Pointer<UA_KeyValueMap> params,
              UA_InterruptCallback callback,
              ffi.Pointer<ffi.Void> interruptContext)>> registerInterrupt;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_InterruptManager> im, ffi.UintPtr interruptHandle)>>
      deregisterInterrupt;
}

typedef UA_NodeReferenceKind_iterateCallbackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<UA_ReferenceTarget> target);
typedef UA_NodeReferenceKind_iterateCallback
    = ffi.Pointer<ffi.NativeFunction<UA_NodeReferenceKind_iterateCallbackFunction>>;

/// .. _client:
///
/// Client
/// ======
///
/// The client implementation allows remote access to all OPC UA services. For
/// convenience, some functionality has been wrapped in :ref:`high-level
/// abstractions <client-highlevel>`.
///
/// **Attention**: The client does not start its own thread. The user has to
/// periodically call `UA_Client_run_iterate` to ensure that asynchronous events
/// and housekeeping tasks are handled, including keeping a secure connection
/// established. See more about :ref:`asynchronicity<client-async-services>` and
/// :ref:`subscriptions<client-subscriptions>`.
///
/// .. _client-config:
///
/// Client Configuration
/// --------------------
///
/// The client configuration is used for setting connection parameters and
/// additional settings used by the client.
/// The configuration should not be modified after it is passed to a client.
/// Currently, only one client can use a configuration at a time.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a client configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. modifying the timeout
/// 3. Instantiate a client with it
/// 4. After shutdown of the client, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ClientConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Void> clientContext;

  external ffi.Pointer<UA_Logger> logging;

  @UA_UInt32()
  external int timeout;

  external UA_ApplicationDescription clientDescription;

  external UA_String endpointUrl;

  external UA_ExtensionObject userIdentityToken;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external UA_String securityPolicyUri;

  @ffi.Bool()
  external bool noSession;

  @ffi.Bool()
  external bool noReconnect;

  @ffi.Bool()
  external bool noNewSession;

  external UA_EndpointDescription endpoint;

  external UA_UserTokenPolicy userTokenPolicy;

  external UA_String applicationUri;

  @ffi.Bool()
  external bool tcpReuseAddr;

  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int namespacesSize;

  @UA_UInt32()
  external int secureChannelLifeTime;

  @UA_UInt32()
  external int requestedSessionTimeout;

  external UA_ConnectionConfig localConnectionConfig;

  @UA_UInt32()
  external int connectivityCheckInterval;

  external ffi.Pointer<UA_EventLoop> eventLoop;

  @ffi.Bool()
  external bool externalEventLoop;

  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  external UA_CertificateGroup certificateVerification;

  @UA_UInt32()
  external int maxTrustListSize;

  @UA_UInt32()
  external int maxRejectedListSize;

  @ffi.Size()
  external int authSecurityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> authSecurityPolicies;

  external UA_String authSecurityPolicyUri;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Client> client, ffi.UnsignedInt channelState, ffi.UnsignedInt sessionState,
              UA_StatusCode connectStatus)>> stateCallback;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client> client)>> inactivityCallback;

  @UA_UInt16()
  external int outStandingPublishRequests;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Client> client, UA_UInt32 subscriptionId, ffi.Pointer<ffi.Void> subContext)>>
      subscriptionInactivityCallback;

  external UA_String sessionName;

  external ffi.Pointer<UA_LocaleId> sessionLocaleIds;

  @ffi.Size()
  external int sessionLocaleIdsSize;

  external ffi.Pointer<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ClientConfig> cc, ffi.Pointer<UA_ByteString> password)>>
      privateKeyPasswordCallback;
}

typedef UA_ClientCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);
typedef DartUA_ClientCallbackFunction = void Function(ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);

/// Timed Callbacks
/// ~~~~~~~~~~~~~~~
/// Repeated callbacks can be attached to a client and will be executed in the
/// defined interval.
typedef UA_ClientCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientCallbackFunction>>;
typedef UA_ClientAsyncServiceCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<ffi.Void> response);
typedef DartUA_ClientAsyncServiceCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<ffi.Void> response);

/// .. _client-async-services:
///
/// Asynchronous Services
/// ---------------------
///
/// All OPC UA services are asynchronous in nature. So several service calls can
/// be made without waiting for the individual responses. Depending on the
/// server's priorities responses may come in a different ordering than sent.
///
/// Connection and session management are performed in `UA_Client_run_iterate`,
/// so to keep a connection healthy any client needs to consider how and when it
/// is appropriate to do the call. This is especially true for the periodic
/// renewal of a SecureChannel's SecurityToken which is designed to have a
/// limited lifetime and will invalidate the connection if not renewed.
///
/// If there is an error after an async service has been dispatched, the callback
/// is called with an "empty" response where the StatusCode has been set
/// accordingly. This is also done if the client is shutting down and the list of
/// dispatched async services is emptied. The StatusCode received when the client
/// is shutting down is UA_STATUSCODE_BADSHUTDOWN. The StatusCode received when
/// the client doesn't receive response after the specified in config->timeout
/// (can be overridden via the "timeoutHint" in the request header) is
/// UA_STATUSCODE_BADTIMEOUT.
///
/// The userdata and requestId arguments can be NULL. The (optional) requestId
/// output can be used to cancel the service while it is still pending. The
/// requestId is unique for each service request. Alternatively the requestHandle
/// can be manually set (non necessarily unique) in the request header for full
/// service call. This can be used to cancel all outstanding requests using that
/// handle together. Note that the client will auto-generate a requestHandle
/// >100,000 if none is defined. Avoid these when manually setting a requetHandle
/// in the requestHeader to avoid clashes.
typedef UA_ClientAsyncServiceCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncServiceCallbackFunction>>;
typedef UA_ClientAsyncReadCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_ReadResponse> rr);
typedef DartUA_ClientAsyncReadCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_ReadResponse> rr);

/// Asynchronous Service Calls
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~
///
/// Call OPC UA Services asynchronously with a callback. The (optional) requestId
/// output can be used to cancel the service while it is still pending.
typedef UA_ClientAsyncReadCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadCallbackFunction>>;
typedef UA_ClientAsyncWriteCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_WriteResponse> wr);
typedef DartUA_ClientAsyncWriteCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_WriteResponse> wr);
typedef UA_ClientAsyncWriteCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncWriteCallbackFunction>>;
typedef UA_ClientAsyncBrowseCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_BrowseResponse> wr);
typedef DartUA_ClientAsyncBrowseCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_BrowseResponse> wr);
typedef UA_ClientAsyncBrowseCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncBrowseCallbackFunction>>;
typedef UA_ClientAsyncBrowseNextCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_BrowseNextResponse> wr);
typedef DartUA_ClientAsyncBrowseNextCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_BrowseNextResponse> wr);
typedef UA_ClientAsyncBrowseNextCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncBrowseNextCallbackFunction>>;
typedef UA_ClientAsyncOperationCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Void> result);
typedef DartUA_ClientAsyncOperationCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, DartUA_StatusCode status, ffi.Pointer<ffi.Void> result);

/// Asynchronous Operations
/// ~~~~~~~~~~~~~~~~~~~~~~~
///
/// Many Services can be called with an array of operations. For example, a
/// request to the Read Service contains an array of ReadValueId, each
/// corresponding to a single read operation. For convenience, wrappers are
/// provided to call single operations for the most common Services.
///
/// All async operations have a callback of the following structure: The returned
/// StatusCode is split in two parts. The status indicates the overall success of
/// the request and the operation. The result argument is non-NULL only if the
/// status is no good.
typedef UA_ClientAsyncOperationCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncOperationCallbackFunction>>;
typedef UA_ClientAsyncReadAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_DataValue> attribute);
typedef DartUA_ClientAsyncReadAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_DataValue> attribute);

/// Read Attribute
/// ^^^^^^^^^^^^^^
///
/// Asynchronously read a single attribute. The attribute is unpacked from the
/// response as the datatype of the attribute is known ahead of time. Value
/// attributes are variants.
///
/// Note that the last argument (value pointer) of the callbacks can be NULL if
/// the status of the operation is not good.
typedef UA_ClientAsyncReadAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_DataValue> value);
typedef DartUA_ClientAsyncReadValueAttributeCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, DartUA_StatusCode status, ffi.Pointer<UA_DataValue> value);
typedef UA_ClientAsyncReadValueAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadValueAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDataTypeAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_NodeId> dataType);
typedef DartUA_ClientAsyncReadDataTypeAttributeCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, DartUA_StatusCode status, ffi.Pointer<UA_NodeId> dataType);
typedef UA_ClientAsyncReadDataTypeAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadDataTypeAttributeCallbackFunction>>;
typedef UA_ClientReadArrayDimensionsAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_Variant> arrayDimensions);
typedef DartUA_ClientReadArrayDimensionsAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_Variant> arrayDimensions);
typedef UA_ClientReadArrayDimensionsAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientReadArrayDimensionsAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadNodeClassAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.UnsignedInt> nodeClass);
typedef DartUA_ClientAsyncReadNodeClassAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.UnsignedInt> nodeClass);
typedef UA_ClientAsyncReadNodeClassAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadNodeClassAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadBrowseNameAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_QualifiedName> browseName);
typedef DartUA_ClientAsyncReadBrowseNameAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_QualifiedName> browseName);
typedef UA_ClientAsyncReadBrowseNameAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadBrowseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDisplayNameAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> displayName);
typedef DartUA_ClientAsyncReadDisplayNameAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> displayName);
typedef UA_ClientAsyncReadDisplayNameAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadDisplayNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDescriptionAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> description);
typedef DartUA_ClientAsyncReadDescriptionAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> description);
typedef UA_ClientAsyncReadDescriptionAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadDescriptionAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadWriteMaskAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadWriteMaskAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadWriteMaskAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadIsAbstractAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> isAbstract);
typedef DartUA_ClientAsyncReadIsAbstractAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Bool> isAbstract);
typedef UA_ClientAsyncReadIsAbstractAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadIsAbstractAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadSymmetricAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> symmetric);
typedef DartUA_ClientAsyncReadSymmetricAttributeCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, DartUA_StatusCode status, ffi.Pointer<ffi.Bool> symmetric);
typedef UA_ClientAsyncReadSymmetricAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadSymmetricAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadInverseNameAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> inverseName);
typedef DartUA_ClientAsyncReadInverseNameAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_LocalizedText> inverseName);
typedef UA_ClientAsyncReadInverseNameAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadInverseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> containsNoLoops);
typedef DartUA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Bool> containsNoLoops);
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadEventNotifierAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_Byte> eventNotifier);
typedef DartUA_ClientAsyncReadEventNotifierAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_Byte> eventNotifier);
typedef UA_ClientAsyncReadEventNotifierAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadEventNotifierAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueRankAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_Int32> valueRank);
typedef DartUA_ClientAsyncReadValueRankAttributeCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, DartUA_StatusCode status, ffi.Pointer<UA_Int32> valueRank);
typedef UA_ClientAsyncReadValueRankAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadValueRankAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAccessLevelAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_Byte> accessLevel);
typedef DartUA_ClientAsyncReadAccessLevelAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_Byte> accessLevel);
typedef UA_ClientAsyncReadAccessLevelAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAccessLevelExAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_UInt32> accessLevelEx);
typedef DartUA_ClientAsyncReadAccessLevelExAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_UInt32> accessLevelEx);
typedef UA_ClientAsyncReadAccessLevelExAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadAccessLevelExAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<UA_Byte> userAccessLevel);
typedef DartUA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_Byte> userAccessLevel);
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef DartUA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadHistorizingAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> historizing);
typedef DartUA_ClientAsyncReadHistorizingAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Bool> historizing);
typedef UA_ClientAsyncReadHistorizingAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadHistorizingAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadExecutableAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> executable);
typedef DartUA_ClientAsyncReadExecutableAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Bool> executable);
typedef UA_ClientAsyncReadExecutableAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserExecutableAttributeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, UA_StatusCode status, ffi.Pointer<ffi.Bool> userExecutable);
typedef DartUA_ClientAsyncReadUserExecutableAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Bool> userExecutable);
typedef UA_ClientAsyncReadUserExecutableAttributeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadUserExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncCallCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_CallResponse> cr);
typedef DartUA_ClientAsyncCallCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_CallResponse> cr);

/// Method Calling
/// ^^^^^^^^^^^^^^
typedef UA_ClientAsyncCallCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncCallCallbackFunction>>;
typedef UA_ClientAsyncAddNodesCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_AddNodesResponse> ar);
typedef DartUA_ClientAsyncAddNodesCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_AddNodesResponse> ar);

/// Node Management
/// ^^^^^^^^^^^^^^^
typedef UA_ClientAsyncAddNodesCallback = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncAddNodesCallbackFunction>>;
typedef UA_Client_DeleteSubscriptionCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client, UA_UInt32 subId, ffi.Pointer<ffi.Void> subContext);
typedef DartUA_Client_DeleteSubscriptionCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client, DartUA_UInt32 subId, ffi.Pointer<ffi.Void> subContext);

/// .. _client-subscriptions:
///
/// Subscriptions
/// -------------
///
/// Subscriptions in OPC UA are asynchronous. That is, the client sends several
/// PublishRequests to the server. The server returns PublishResponses with
/// notifications. But only when a notification has been generated. The client
/// does not wait for the responses and continues normal operations.
///
/// Note the difference between Subscriptions and MonitoredItems. Subscriptions
/// are used to report back notifications. MonitoredItems are used to generate
/// notifications. Every MonitoredItem is attached to exactly one Subscription.
/// And a Subscription can contain many MonitoredItems.
///
/// The client automatically processes PublishResponses (with a callback) in the
/// background and keeps enough PublishRequests in transit. The PublishResponses
/// may be recieved during a synchronous service call or in
/// ``UA_Client_run_iterate``. See more about
/// :ref:`asynchronicity<client-async-services>`.
typedef UA_Client_DeleteSubscriptionCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Client_DeleteSubscriptionCallbackFunction>>;
typedef UA_Client_StatusChangeNotificationCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    UA_UInt32 subId, ffi.Pointer<ffi.Void> subContext, ffi.Pointer<UA_StatusChangeNotification> notification);
typedef DartUA_Client_StatusChangeNotificationCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId, ffi.Pointer<ffi.Void> subContext, ffi.Pointer<UA_StatusChangeNotification> notification);
typedef UA_Client_StatusChangeNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Client_StatusChangeNotificationCallbackFunction>>;
typedef UA_ClientAsyncCreateSubscriptionCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_CreateSubscriptionResponse> response);
typedef DartUA_ClientAsyncCreateSubscriptionCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_CreateSubscriptionResponse> response);
typedef UA_ClientAsyncCreateSubscriptionCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncCreateSubscriptionCallbackFunction>>;
typedef UA_ClientAsyncModifySubscriptionCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_ModifySubscriptionResponse> response);
typedef DartUA_ClientAsyncModifySubscriptionCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_ModifySubscriptionResponse> response);
typedef UA_ClientAsyncModifySubscriptionCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncModifySubscriptionCallbackFunction>>;
typedef UA_ClientAsyncDeleteSubscriptionsCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_DeleteSubscriptionsResponse> response);
typedef DartUA_ClientAsyncDeleteSubscriptionsCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_DeleteSubscriptionsResponse> response);
typedef UA_ClientAsyncDeleteSubscriptionsCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncDeleteSubscriptionsCallbackFunction>>;
typedef UA_Client_DeleteMonitoredItemCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    UA_UInt32 subId, ffi.Pointer<ffi.Void> subContext, UA_UInt32 monId, ffi.Pointer<ffi.Void> monContext);
typedef DartUA_Client_DeleteMonitoredItemCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId, ffi.Pointer<ffi.Void> subContext, DartUA_UInt32 monId, ffi.Pointer<ffi.Void> monContext);

/// The clientHandle parameter cannot be set by the user, any value will be
/// replaced by the client before sending the request to the server.
typedef UA_Client_DeleteMonitoredItemCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Client_DeleteMonitoredItemCallbackFunction>>;
typedef UA_Client_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Client_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);
typedef UA_Client_DataChangeNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Client_DataChangeNotificationCallbackFunction>>;
typedef UA_Client_EventNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Size nEventFields,
    ffi.Pointer<UA_Variant> eventFields);
typedef DartUA_Client_EventNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    int nEventFields,
    ffi.Pointer<UA_Variant> eventFields);
typedef UA_Client_EventNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Client_EventNotificationCallbackFunction>>;
typedef UA_ClientAsyncCreateMonitoredItemsCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_CreateMonitoredItemsResponse> response);
typedef DartUA_ClientAsyncCreateMonitoredItemsCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_CreateMonitoredItemsResponse> response);
typedef UA_ClientAsyncCreateMonitoredItemsCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncCreateMonitoredItemsCallbackFunction>>;
typedef UA_ClientAsyncDeleteMonitoredItemsCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_DeleteMonitoredItemsResponse> response);
typedef DartUA_ClientAsyncDeleteMonitoredItemsCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_DeleteMonitoredItemsResponse> response);
typedef UA_ClientAsyncDeleteMonitoredItemsCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncDeleteMonitoredItemsCallbackFunction>>;
typedef UA_ClientAsyncModifyMonitoredItemsCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_DeleteMonitoredItemsResponse> response);
typedef DartUA_ClientAsyncModifyMonitoredItemsCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_DeleteMonitoredItemsResponse> response);
typedef UA_ClientAsyncModifyMonitoredItemsCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncModifyMonitoredItemsCallbackFunction>>;
typedef UA_ClientAsyncSetMonitoringModeCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_SetMonitoringModeResponse> response);
typedef DartUA_ClientAsyncSetMonitoringModeCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_SetMonitoringModeResponse> response);
typedef UA_ClientAsyncSetMonitoringModeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncSetMonitoringModeCallbackFunction>>;
typedef UA_ClientAsyncSetTriggeringCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, UA_UInt32 requestId, ffi.Pointer<UA_SetTriggeringResponse> response);
typedef DartUA_ClientAsyncSetTriggeringCallbackFunction = void Function(ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata, DartUA_UInt32 requestId, ffi.Pointer<UA_SetTriggeringResponse> response);
typedef UA_ClientAsyncSetTriggeringCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncSetTriggeringCallbackFunction>>;
typedef UA_HistoricalIteratorCallbackFunction = ffi.Bool Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Bool moreDataAvailable,
    ffi.Pointer<UA_ExtensionObject> data,
    ffi.Pointer<ffi.Void> callbackContext);
typedef DartUA_HistoricalIteratorCallbackFunction = bool Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> nodeId,
    bool moreDataAvailable,
    ffi.Pointer<UA_ExtensionObject> data,
    ffi.Pointer<ffi.Void> callbackContext);

/// Historical Access
/// ~~~~~~~~~~~~~~~~~
///
/// The following functions can be used to read a single node historically.
/// Use the regular service to read several nodes at once.
typedef UA_HistoricalIteratorCallback = ffi.Pointer<ffi.NativeFunction<UA_HistoricalIteratorCallbackFunction>>;
typedef UA_NodeIteratorCallbackFunction = UA_StatusCode Function(
    UA_NodeId childId, ffi.Bool isInverse, UA_NodeId referenceTypeId, ffi.Pointer<ffi.Void> handle);
typedef DartUA_NodeIteratorCallbackFunction = DartUA_StatusCode Function(
    UA_NodeId childId, bool isInverse, UA_NodeId referenceTypeId, ffi.Pointer<ffi.Void> handle);
typedef UA_NodeIteratorCallback = ffi.Pointer<ffi.NativeFunction<UA_NodeIteratorCallbackFunction>>;

/// .. _pubsub:
///
/// PubSub
/// ======
///
/// In PubSub the participating OPC UA Applications take their roles as
/// Publishers and Subscribers. Publishers are the sources of data, while
/// Subscribers consume that data. Communication in PubSub is message-based.
/// Publishers send messages to a Message Oriented Middleware, without knowledge
/// of what, if any, Subscribers there may be. Similarly, Subscribers express
/// interest in specific types of data, and process messages that contain this
/// data, without knowledge of what Publishers there are.
///
/// Message Oriented Middleware is software or hardware infrastructure that
/// supports sending and receiving messages between distributed systems. OPC UA
/// PubSub supports two different Message Oriented Middleware variants, namely
/// the broker-less form and broker-based form. A broker-less form is where the
/// Message Oriented Middleware is the network infrastructure that is able to
/// route datagram-based messages. Subscribers and Publishers use datagram
/// protocols like UDP. In a broker-based form, the core component of the Message
/// Oriented Middleware is a message Broker. Subscribers and Publishers use
/// standard messaging protocols like AMQP or MQTT to communicate with the
/// Broker.
///
/// This makes PubSub suitable for applications where location independence
/// and/or scalability are required.
///
/// The Publish/Subscribe (PubSub) extension for OPC UA enables fast and
/// efficient 1:m communication. The PubSub extension is protocol agnostic and
/// can be used with broker based protocols like MQTT and AMQP or brokerless
/// implementations like UDP-Multicasting.
///
/// The figure below shows how the PubSub components are related.
/// The PubSub Tutorials have more examples about the API usage::
///
/// +--------+
/// | Server |
/// +--------+
/// |  |
/// |  |  +------------------------+
/// |  +--> PubSubPublishedDataSet <----------+
/// |     +------------------------+          |
/// |       |                                 |
/// |       |    +--------------+             |
/// |       +----> DataSetField |             |
/// |            +--------------+             |
/// |                                         |
/// |     +------------------+                |
/// +-----> PubSubConnection |                |
/// +------------------+                |
/// |  |                              |
/// |  |    +-------------+           |
/// |  +----> WriterGroup |           |
/// |       +-------------+           |
/// |         |                       |
/// |         |    +---------------+  |
/// |         +----> DataSetWriter <--+
/// |              +---------------+
/// |
/// |       +-------------+
/// +-------> ReaderGroup |
/// +-------------+
/// |
/// |    +---------------+
/// +----> DataSetReader |
/// +---------------+
/// |
/// |    +-------------------+
/// +----> SubscribedDataSet |
/// +-------------------+
/// |
/// |    +-------------------------+
/// +----> TargetVariablesDataType |
/// |    +-------------------------+
/// |
/// |    +---------------------------------+
/// +----> SubscribedDataSetMirrorDataType |
/// +---------------------------------+
///
/// PubSub Information Model Representation
/// ---------------------------------------
/// .. _pubsub_informationmodel:
///
/// The complete PubSub configuration is available inside the information model.
/// The entry point is the node 'PublishSubscribe', located under the Server
/// node.
/// The standard defines for PubSub no new Service set. The configuration can
/// optionally be done over methods inside the information model.
/// The information model representation of the current PubSub configuration is
/// generated automatically. This feature can be enabled/disabled by changing the
/// UA_ENABLE_PUBSUB_INFORMATIONMODEL option.
///
/// PublisherId
/// -----------
/// Valid PublisherId types are defined in Part 14, 7.2.2.2.2 NetworkMessage. The
/// PublisherId is sometimes encoded as a variant in the standard (e.g. in some
/// configuration structures). We do however use our own tagged-union structure
/// where we can.
enum UA_PublisherIdType {
  UA_PUBLISHERIDTYPE_BYTE(0),
  UA_PUBLISHERIDTYPE_UINT16(1),
  UA_PUBLISHERIDTYPE_UINT32(2),
  UA_PUBLISHERIDTYPE_UINT64(3),
  UA_PUBLISHERIDTYPE_STRING(4);

  final int value;
  const UA_PublisherIdType(this.value);

  static UA_PublisherIdType fromValue(int value) => switch (value) {
        0 => UA_PUBLISHERIDTYPE_BYTE,
        1 => UA_PUBLISHERIDTYPE_UINT16,
        2 => UA_PUBLISHERIDTYPE_UINT32,
        3 => UA_PUBLISHERIDTYPE_UINT64,
        4 => UA_PUBLISHERIDTYPE_STRING,
        _ => throw ArgumentError('Unknown value for UA_PublisherIdType: $value'),
      };
}

final class UnnamedUnion7 extends ffi.Union {
  @UA_Byte()
  external int byte;

  @UA_UInt16()
  external int uint16;

  @UA_UInt32()
  external int uint32;

  @UA_UInt64()
  external int uint64;

  external UA_String string;
}

final class UA_PublisherId extends ffi.Struct {
  @ffi.UnsignedInt()
  external int idTypeAsInt;

  UA_PublisherIdType get idType => UA_PublisherIdType.fromValue(idTypeAsInt);

  external UnnamedUnion7 id;
}

/// PubSubConnection
/// ----------------
/// PubSubConnections are the abstraction between the concrete transport protocol
/// and the PubSub functionality. It is possible to create multiple
/// PubSubConnections with (possibly) different transport protocols at
/// runtime.
final class UA_PubSubConnectionConfig extends ffi.Struct {
  external UA_String name;

  external UA_PublisherId publisherId;

  external UA_String transportProfileUri;

  external UA_Variant address;

  external UA_KeyValueMap connectionProperties;

  external UA_Variant connectionTransportSettings;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId componentId,
              ffi.Pointer<ffi.Void> componentContext,
              ffi.Pointer<ffi.UnsignedInt> state,
              ffi.UnsignedInt targetState)>> customStateMachine;
}

/// PublishedDataSet
/// ----------------
/// The PublishedDataSets (PDS) are containers for the published information. The
/// PDS contain the published variables and meta information. The metadata is
/// commonly autogenerated or given as constant argument as part of the template
/// functions. The template functions are standard defined and intended for
/// configuration tools. You should normally create an empty PDS and call the
/// functions to add new fields.
enum UA_PublishedDataSetType {
  UA_PUBSUB_DATASET_PUBLISHEDITEMS(0),
  UA_PUBSUB_DATASET_PUBLISHEDEVENTS(1),
  UA_PUBSUB_DATASET_PUBLISHEDITEMS_TEMPLATE(2),
  UA_PUBSUB_DATASET_PUBLISHEDEVENTS_TEMPLATE(3);

  final int value;
  const UA_PublishedDataSetType(this.value);

  static UA_PublishedDataSetType fromValue(int value) => switch (value) {
        0 => UA_PUBSUB_DATASET_PUBLISHEDITEMS,
        1 => UA_PUBSUB_DATASET_PUBLISHEDEVENTS,
        2 => UA_PUBSUB_DATASET_PUBLISHEDITEMS_TEMPLATE,
        3 => UA_PUBSUB_DATASET_PUBLISHEDEVENTS_TEMPLATE,
        _ => throw ArgumentError('Unknown value for UA_PublishedDataSetType: $value'),
      };
}

final class UA_PublishedDataItemsTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  @ffi.Size()
  external int variablesToAddSize;

  external ffi.Pointer<UA_PublishedVariableDataType> variablesToAdd;
}

final class UA_PublishedEventConfig extends ffi.Struct {
  external UA_NodeId eventNotfier;

  external UA_ContentFilter filter;
}

final class UA_PublishedEventTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  external UA_NodeId eventNotfier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

final class UnnamedUnion8 extends ffi.Union {
  external UA_PublishedDataItemsTemplateConfig itemsTemplate;

  external UA_PublishedEventConfig event;

  external UA_PublishedEventTemplateConfig eventTemplate;
}

final class UA_PublishedDataSetConfig extends ffi.Struct {
  external UA_String name;

  @ffi.UnsignedInt()
  external int publishedDataSetTypeAsInt;

  UA_PublishedDataSetType get publishedDataSetType => UA_PublishedDataSetType.fromValue(publishedDataSetTypeAsInt);

  external UnnamedUnion8 config;

  external ffi.Pointer<ffi.Void> context;
}

final class UA_AddPublishedDataSetResult extends ffi.Struct {
  @UA_StatusCode()
  external int addResult;

  @ffi.Size()
  external int fieldAddResultsSize;

  external ffi.Pointer<UA_StatusCode> fieldAddResults;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// DataSetField
/// ------------
/// The description of published variables is named DataSetField. Each
/// DataSetField contains the selection of one information model node. The
/// DataSetField has additional parameters for the publishing, sampling and error
/// handling process.
final class UA_DataSetVariableConfig extends ffi.Struct {
  external UA_ConfigurationVersionDataType configurationVersion;

  external UA_String fieldNameAlias;

  @ffi.Bool()
  external bool promotedField;

  external UA_PublishedVariableDataType publishParameters;

  @UA_UInt32()
  external int maxStringLength;

  external UA_LocalizedText description;

  external UA_Guid dataSetFieldId;
}

enum UA_DataSetFieldType {
  UA_PUBSUB_DATASETFIELD_VARIABLE(0),
  UA_PUBSUB_DATASETFIELD_EVENT(1);

  final int value;
  const UA_DataSetFieldType(this.value);

  static UA_DataSetFieldType fromValue(int value) => switch (value) {
        0 => UA_PUBSUB_DATASETFIELD_VARIABLE,
        1 => UA_PUBSUB_DATASETFIELD_EVENT,
        _ => throw ArgumentError('Unknown value for UA_DataSetFieldType: $value'),
      };
}

final class UnnamedUnion9 extends ffi.Union {
  external UA_DataSetVariableConfig variable;
}

final class UA_DataSetFieldConfig extends ffi.Struct {
  @ffi.UnsignedInt()
  external int dataSetFieldTypeAsInt;

  UA_DataSetFieldType get dataSetFieldType => UA_DataSetFieldType.fromValue(dataSetFieldTypeAsInt);

  external UnnamedUnion9 field;
}

final class UA_DataSetFieldResult extends ffi.Struct {
  @UA_StatusCode()
  external int result;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// WriterGroup
/// -----------
/// All WriterGroups are created within a PubSubConnection and automatically
/// deleted if the connection is removed. The WriterGroup is primary used as
/// container for :ref:`dsw` and network message settings. The WriterGroup can be
/// imagined as producer of the network messages. The creation of network
/// messages is controlled by parameters like the publish interval, which is e.g.
/// contained in the WriterGroup.
enum UA_PubSubEncodingType {
  UA_PUBSUB_ENCODING_UADP(0),
  UA_PUBSUB_ENCODING_JSON(1);

  final int value;
  const UA_PubSubEncodingType(this.value);

  static UA_PubSubEncodingType fromValue(int value) => switch (value) {
        0 => UA_PUBSUB_ENCODING_UADP,
        1 => UA_PUBSUB_ENCODING_JSON,
        _ => throw ArgumentError('Unknown value for UA_PubSubEncodingType: $value'),
      };
}

final class UA_WriterGroupConfig extends ffi.Struct {
  external UA_String name;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Duration()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  external UA_KeyValueMap groupProperties;

  @ffi.UnsignedInt()
  external int encodingMimeTypeAsInt;

  UA_PubSubEncodingType get encodingMimeType => UA_PubSubEncodingType.fromValue(encodingMimeTypeAsInt);

  @UA_UInt16()
  external int maxEncapsulatedDataSetMessageCount;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external ffi.Pointer<UA_PubSubSecurityPolicy> securityPolicy;

  external UA_String securityGroupId;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId componentId,
              ffi.Pointer<ffi.Void> componentContext,
              ffi.Pointer<ffi.UnsignedInt> state,
              ffi.UnsignedInt targetState)>> customStateMachine;
}

/// .. _dsw:
///
/// DataSetWriter
/// -------------
/// The DataSetWriters are the glue between the WriterGroups and the
/// PublishedDataSets. The DataSetWriter contain configuration parameters and
/// flags which influence the creation of DataSet messages. These messages are
/// encapsulated inside the network message. The DataSetWriter must be linked
/// with an existing PublishedDataSet and be contained within a WriterGroup.
final class UA_DataSetWriterConfig extends ffi.Struct {
  external UA_String name;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  external UA_String dataSetName;

  external UA_KeyValueMap dataSetWriterProperties;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId componentId,
              ffi.Pointer<ffi.Void> componentContext,
              ffi.Pointer<ffi.UnsignedInt> state,
              ffi.UnsignedInt targetState)>> customStateMachine;
}

/// SubscribedDataSet
/// -----------------
/// With the OPC UA Part 14 1.0.5, the concept of StandaloneSubscribedDataSet
/// (SSDS) was introduced. The SSDS is the counterpart to the PublishedDataSet
/// and has its own lifecycle. The SSDS can be connected to exactly one
/// DataSetReader. In general, the SSDS is optional and a DataSetReader can still
/// be defined without referencing a SSDS.
///
/// The SubscribedDataSet has two sub-types called the TargetVariablesType and
/// SubscribedDataSetMirrorType. SubscribedDataSetMirrorType is currently not
/// supported. SubscribedDataSet is set to TargetVariablesType and then the list
/// of target Variables are created in the Subscriber AddressSpace.
/// TargetVariables are a list of variables that are to be added in the
/// Subscriber AddressSpace. It defines a list of Variable mappings between
/// received DataSet fields and added Variables in the Subscriber
/// AddressSpace.
enum UA_SubscribedDataSetType {
  UA_PUBSUB_SDS_TARGET(0),
  UA_PUBSUB_SDS_MIRROR(1);

  final int value;
  const UA_SubscribedDataSetType(this.value);

  static UA_SubscribedDataSetType fromValue(int value) => switch (value) {
        0 => UA_PUBSUB_SDS_TARGET,
        1 => UA_PUBSUB_SDS_MIRROR,
        _ => throw ArgumentError('Unknown value for UA_SubscribedDataSetType: $value'),
      };
}

final class UnnamedUnion10 extends ffi.Union {
  external UA_TargetVariablesDataType target;
}

final class UA_SubscribedDataSetConfig extends ffi.Struct {
  external UA_String name;

  @ffi.UnsignedInt()
  external int subscribedDataSetTypeAsInt;

  UA_SubscribedDataSetType get subscribedDataSetType => UA_SubscribedDataSetType.fromValue(subscribedDataSetTypeAsInt);

  external UnnamedUnion10 subscribedDataSet;

  external UA_DataSetMetaDataType dataSetMetaData;

  external ffi.Pointer<ffi.Void> context;
}

/// DataSetReader
/// -------------
/// DataSetReader can receive NetworkMessages with the DataSetMessage
/// of interest sent by the Publisher. DataSetReaders represent
/// the configuration necessary to receive and process DataSetMessages
/// on the Subscriber side. DataSetReader must be linked with a
/// SubscribedDataSet and be contained within a ReaderGroup.
enum UA_PubSubRtEncoding {
  UA_PUBSUB_RT_UNKNOWN(0),
  UA_PUBSUB_RT_VARIANT(1),
  UA_PUBSUB_RT_DATA_VALUE(2),
  UA_PUBSUB_RT_RAW(4);

  final int value;
  const UA_PubSubRtEncoding(this.value);

  static UA_PubSubRtEncoding fromValue(int value) => switch (value) {
        0 => UA_PUBSUB_RT_UNKNOWN,
        1 => UA_PUBSUB_RT_VARIANT,
        2 => UA_PUBSUB_RT_DATA_VALUE,
        4 => UA_PUBSUB_RT_RAW,
        _ => throw ArgumentError('Unknown value for UA_PubSubRtEncoding: $value'),
      };
}

final class UnnamedUnion11 extends ffi.Union {
  external UA_TargetVariablesDataType target;
}

final class UA_DataSetReaderConfig extends ffi.Struct {
  external UA_String name;

  external UA_PublisherId publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  @ffi.UnsignedInt()
  external int subscribedDataSetTypeAsInt;

  UA_SubscribedDataSetType get subscribedDataSetType => UA_SubscribedDataSetType.fromValue(subscribedDataSetTypeAsInt);

  external UnnamedUnion11 subscribedDataSet;

  external UA_String linkedStandaloneSubscribedDataSetName;

  @ffi.UnsignedInt()
  external int expectedEncodingAsInt;

  UA_PubSubRtEncoding get expectedEncoding => UA_PubSubRtEncoding.fromValue(expectedEncodingAsInt);

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId componentId,
              ffi.Pointer<ffi.Void> componentContext,
              ffi.Pointer<ffi.UnsignedInt> state,
              ffi.UnsignedInt targetState)>> customStateMachine;
}

/// ReaderGroup
/// -----------
/// ReaderGroups contain a list of DataSetReaders. All ReaderGroups are
/// created within a PubSubConnection and automatically deleted if the connection
/// is removed. All network message related filters are only available in the
/// DataSetReader.
///
/// The RT-levels go along with different requirements. The below listed levels
/// can be configured for a ReaderGroup.
final class UA_ReaderGroupConfig extends ffi.Struct {
  external UA_String name;

  external UA_KeyValueMap groupProperties;

  @ffi.UnsignedInt()
  external int encodingMimeTypeAsInt;

  UA_PubSubEncodingType get encodingMimeType => UA_PubSubEncodingType.fromValue(encodingMimeTypeAsInt);

  external UA_ExtensionObject transportSettings;

  @ffi.UnsignedInt()
  external int securityModeAsInt;

  UA_MessageSecurityMode get securityMode => UA_MessageSecurityMode.fromValue(securityModeAsInt);

  external ffi.Pointer<UA_PubSubSecurityPolicy> securityPolicy;

  external UA_String securityGroupId;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId componentId,
              ffi.Pointer<ffi.Void> componentContext,
              ffi.Pointer<ffi.UnsignedInt> state,
              ffi.UnsignedInt targetState)>> customStateMachine;
}

/// Offset Table
/// ------------
/// When the content of a PubSub Networkmessage has a fixed length, then only a
/// few "content bytes" at known locations within the NetworkMessage change
/// between publish cycles. The so-called offset table exposes this to enable
/// fast-path implementations for realtime applications.
enum UA_PubSubOffsetType {
  UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_GROUPVERSION(0),
  UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_SEQUENCENUMBER(1),
  UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_TIMESTAMP(2),
  UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_PICOSECONDS(3),
  UA_PUBSUBOFFSETTYPE_DATASETMESSAGE(4),
  UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_SEQUENCENUMBER(5),
  UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_STATUS(6),
  UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_TIMESTAMP(7),
  UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_PICOSECONDS(8),
  UA_PUBSUBOFFSETTYPE_DATASETFIELD_DATAVALUE(9),
  UA_PUBSUBOFFSETTYPE_DATASETFIELD_VARIANT(10),
  UA_PUBSUBOFFSETTYPE_DATASETFIELD_RAW(11);

  final int value;
  const UA_PubSubOffsetType(this.value);

  static UA_PubSubOffsetType fromValue(int value) => switch (value) {
        0 => UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_GROUPVERSION,
        1 => UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_SEQUENCENUMBER,
        2 => UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_TIMESTAMP,
        3 => UA_PUBSUBOFFSETTYPE_NETWORKMESSAGE_PICOSECONDS,
        4 => UA_PUBSUBOFFSETTYPE_DATASETMESSAGE,
        5 => UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_SEQUENCENUMBER,
        6 => UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_STATUS,
        7 => UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_TIMESTAMP,
        8 => UA_PUBSUBOFFSETTYPE_DATASETMESSAGE_PICOSECONDS,
        9 => UA_PUBSUBOFFSETTYPE_DATASETFIELD_DATAVALUE,
        10 => UA_PUBSUBOFFSETTYPE_DATASETFIELD_VARIANT,
        11 => UA_PUBSUBOFFSETTYPE_DATASETFIELD_RAW,
        _ => throw ArgumentError('Unknown value for UA_PubSubOffsetType: $value'),
      };
}

final class UA_PubSubOffset extends ffi.Struct {
  @ffi.UnsignedInt()
  external int offsetTypeAsInt;

  UA_PubSubOffsetType get offsetType => UA_PubSubOffsetType.fromValue(offsetTypeAsInt);

  @ffi.Size()
  external int offset;

  external UA_NodeId component;
}

final class UA_PubSubOffsetTable extends ffi.Struct {
  external ffi.Pointer<UA_PubSubOffset> offsets;

  @ffi.Size()
  external int offsetsSize;

  external UA_ByteString networkMessage;
}

typedef UA_Server_AsyncOperationNotifyCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Server> server);
typedef DartUA_Server_AsyncOperationNotifyCallbackFunction = void Function(ffi.Pointer<UA_Server> server);
typedef UA_Server_AsyncOperationNotifyCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Server_AsyncOperationNotifyCallbackFunction>>;
typedef UA_Server_registerServerCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_RegisteredServer> registeredServer, ffi.Pointer<ffi.Void> data);
typedef DartUA_Server_registerServerCallbackFunction = void Function(
    ffi.Pointer<UA_RegisteredServer> registeredServer, ffi.Pointer<ffi.Void> data);

/// Operating a Discovery Server
/// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
typedef UA_Server_registerServerCallback = ffi.Pointer<ffi.NativeFunction<UA_Server_registerServerCallbackFunction>>;
typedef UA_Server_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server,
    UA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    UA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Server_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server,
    DartUA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    DartUA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);
typedef UA_Server_DataChangeNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Server_DataChangeNotificationCallbackFunction>>;
typedef UA_Server_EventNotificationCallbackFunction = ffi.Void Function(ffi.Pointer<UA_Server> server,
    UA_UInt32 monitoredItemId, ffi.Pointer<ffi.Void> monitoredItemContext, UA_KeyValueMap eventFields);
typedef DartUA_Server_EventNotificationCallbackFunction = void Function(ffi.Pointer<UA_Server> server,
    DartUA_UInt32 monitoredItemId, ffi.Pointer<ffi.Void> monitoredItemContext, UA_KeyValueMap eventFields);
typedef UA_Server_EventNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Server_EventNotificationCallbackFunction>>;

/// Statistics
/// ----------
/// Statistic counters keeping track of the current state of the stack. Counters
/// are structured per OPC UA communication layer.
final class UA_ServerStatistics extends ffi.Struct {
  external UA_SecureChannelStatistics scs;

  external UA_SessionStatistics ss;
}

typedef UA_Server_ReverseConnectStateCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server, UA_UInt64 handle, ffi.UnsignedInt state, ffi.Pointer<ffi.Void> context);
typedef DartUA_Server_ReverseConnectStateCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server, DartUA_UInt64 handle, UA_SecureChannelState state, ffi.Pointer<ffi.Void> context);

/// Reverse Connect
/// ---------------
/// The reverse connect feature of OPC UA permits the server instead of the
/// client to establish the connection. The client must expose the listening port
/// so the server is able to reach it.
typedef UA_Server_ReverseConnectStateCallback
    = ffi.Pointer<ffi.NativeFunction<UA_Server_ReverseConnectStateCallbackFunction>>;

/// .. _raw-pubsub:
///
/// PubSub NetworkMessage
/// ---------------------
///
/// The following definitions enable to work directly with PubSub messages. This
/// is not required when :ref:`PubSub is integrated with a server<pubsub>`.
///
/// DataSet Message
/// ~~~~~~~~~~~~~~~
enum UA_FieldEncoding {
  UA_FIELDENCODING_VARIANT(0),
  UA_FIELDENCODING_RAWDATA(1),
  UA_FIELDENCODING_DATAVALUE(2),
  UA_FIELDENCODING_UNKNOWN(3);

  final int value;
  const UA_FieldEncoding(this.value);

  static UA_FieldEncoding fromValue(int value) => switch (value) {
        0 => UA_FIELDENCODING_VARIANT,
        1 => UA_FIELDENCODING_RAWDATA,
        2 => UA_FIELDENCODING_DATAVALUE,
        3 => UA_FIELDENCODING_UNKNOWN,
        _ => throw ArgumentError('Unknown value for UA_FieldEncoding: $value'),
      };
}

enum UA_DataSetMessageType {
  UA_DATASETMESSAGETYPE_DATAKEYFRAME(0),
  UA_DATASETMESSAGETYPE_DATADELTAFRAME(1),
  UA_DATASETMESSAGETYPE_EVENT(2),
  UA_DATASETMESSAGETYPE_KEEPALIVE(3);

  static const UA_DATASETMESSAGE_DATAKEYFRAME = UA_DATASETMESSAGETYPE_DATAKEYFRAME;
  static const UA_DATASETMESSAGE_DATADELTAFRAME = UA_DATASETMESSAGETYPE_DATADELTAFRAME;
  static const UA_DATASETMESSAGE_EVENT = UA_DATASETMESSAGETYPE_EVENT;
  static const UA_DATASETMESSAGE_KEEPALIVE = UA_DATASETMESSAGETYPE_KEEPALIVE;

  final int value;
  const UA_DataSetMessageType(this.value);

  static UA_DataSetMessageType fromValue(int value) => switch (value) {
        0 => UA_DATASETMESSAGETYPE_DATAKEYFRAME,
        1 => UA_DATASETMESSAGETYPE_DATADELTAFRAME,
        2 => UA_DATASETMESSAGETYPE_EVENT,
        3 => UA_DATASETMESSAGETYPE_KEEPALIVE,
        _ => throw ArgumentError('Unknown value for UA_DataSetMessageType: $value'),
      };

  @override
  String toString() {
    if (this == UA_DATASETMESSAGETYPE_DATAKEYFRAME)
      return "UA_DataSetMessageType.UA_DATASETMESSAGETYPE_DATAKEYFRAME, UA_DataSetMessageType.UA_DATASETMESSAGE_DATAKEYFRAME";
    if (this == UA_DATASETMESSAGETYPE_DATADELTAFRAME)
      return "UA_DataSetMessageType.UA_DATASETMESSAGETYPE_DATADELTAFRAME, UA_DataSetMessageType.UA_DATASETMESSAGE_DATADELTAFRAME";
    if (this == UA_DATASETMESSAGETYPE_EVENT)
      return "UA_DataSetMessageType.UA_DATASETMESSAGETYPE_EVENT, UA_DataSetMessageType.UA_DATASETMESSAGE_EVENT";
    if (this == UA_DATASETMESSAGETYPE_KEEPALIVE)
      return "UA_DataSetMessageType.UA_DATASETMESSAGETYPE_KEEPALIVE, UA_DataSetMessageType.UA_DATASETMESSAGE_KEEPALIVE";
    return super.toString();
  }
}

final class UA_DataSetMessageHeader extends ffi.Struct {
  @ffi.Bool()
  external bool dataSetMessageValid;

  @ffi.UnsignedInt()
  external int fieldEncodingAsInt;

  UA_FieldEncoding get fieldEncoding => UA_FieldEncoding.fromValue(fieldEncodingAsInt);

  @ffi.Bool()
  external bool dataSetMessageSequenceNrEnabled;

  @UA_UInt16()
  external int dataSetMessageSequenceNr;

  @ffi.Bool()
  external bool statusEnabled;

  @UA_UInt16()
  external int status;

  @ffi.Bool()
  external bool configVersionMajorVersionEnabled;

  @UA_UInt32()
  external int configVersionMajorVersion;

  @ffi.Bool()
  external bool configVersionMinorVersionEnabled;

  @UA_UInt32()
  external int configVersionMinorVersion;

  @ffi.UnsignedInt()
  external int dataSetMessageTypeAsInt;

  UA_DataSetMessageType get dataSetMessageType => UA_DataSetMessageType.fromValue(dataSetMessageTypeAsInt);

  @ffi.Bool()
  external bool timestampEnabled;

  @UA_UtcTime()
  external int timestamp;

  @ffi.Bool()
  external bool picoSecondsIncluded;

  @UA_UInt16()
  external int picoSeconds;
}

final class UA_DataSetMessage_DataKeyFrameData extends ffi.Struct {
  @UA_UInt16()
  external int fieldCount;

  external ffi.Pointer<UA_DataValue> dataSetFields;

  external UA_ByteString rawFields;

  external ffi.Pointer<UA_String> fieldNames;

  external ffi.Pointer<UA_DataSetMetaDataType> dataSetMetaDataType;
}

final class UA_DataSetMessage_DeltaFrameField extends ffi.Struct {
  @UA_UInt16()
  external int fieldIndex;

  external UA_DataValue fieldValue;
}

final class UA_DataSetMessage_DataDeltaFrameData extends ffi.Struct {
  @UA_UInt16()
  external int fieldCount;

  external ffi.Pointer<UA_DataSetMessage_DeltaFrameField> deltaFrameFields;
}

final class UnnamedUnion12 extends ffi.Union {
  external UA_DataSetMessage_DataKeyFrameData keyFrameData;

  external UA_DataSetMessage_DataDeltaFrameData deltaFrameData;
}

final class UA_DataSetMessage extends ffi.Struct {
  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMessageHeader header;

  external UnnamedUnion12 data;

  @ffi.Size()
  external int configuredSize;
}

/// Network Message
/// ~~~~~~~~~~~~~~~
enum UA_NetworkMessageType {
  UA_NETWORKMESSAGE_DATASET(0),
  UA_NETWORKMESSAGE_DISCOVERY_REQUEST(1),
  UA_NETWORKMESSAGE_DISCOVERY_RESPONSE(2);

  final int value;
  const UA_NetworkMessageType(this.value);

  static UA_NetworkMessageType fromValue(int value) => switch (value) {
        0 => UA_NETWORKMESSAGE_DATASET,
        1 => UA_NETWORKMESSAGE_DISCOVERY_REQUEST,
        2 => UA_NETWORKMESSAGE_DISCOVERY_RESPONSE,
        _ => throw ArgumentError('Unknown value for UA_NetworkMessageType: $value'),
      };
}

final class UA_NetworkMessageGroupHeader extends ffi.Struct {
  @ffi.Bool()
  external bool writerGroupIdEnabled;

  @UA_UInt16()
  external int writerGroupId;

  @ffi.Bool()
  external bool groupVersionEnabled;

  @UA_UInt32()
  external int groupVersion;

  @ffi.Bool()
  external bool networkMessageNumberEnabled;

  @UA_UInt16()
  external int networkMessageNumber;

  @ffi.Bool()
  external bool sequenceNumberEnabled;

  @UA_UInt16()
  external int sequenceNumber;
}

final class UA_NetworkMessageSecurityHeader extends ffi.Struct {
  @ffi.Bool()
  external bool networkMessageSigned;

  @ffi.Bool()
  external bool networkMessageEncrypted;

  @ffi.Bool()
  external bool securityFooterEnabled;

  @UA_UInt16()
  external int securityFooterSize;

  @ffi.Bool()
  external bool forceKeyReset;

  @UA_UInt32()
  external int securityTokenId;

  @UA_UInt16()
  external int messageNonceSize;

  @ffi.Array.multi([16])
  external ffi.Array<UA_Byte> messageNonce;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<UA_DataSetMessage> dataSetMessages;

  @ffi.Size()
  external int dataSetMessagesSize;
}

final class UnnamedUnion13 extends ffi.Union {
  external UnnamedStruct10 dataSetPayload;
}

final class UA_NetworkMessage extends ffi.Struct {
  @UA_Byte()
  external int version;

  @ffi.Bool()
  external bool publisherIdEnabled;

  external UA_PublisherId publisherId;

  @ffi.Bool()
  external bool groupHeaderEnabled;

  external UA_NetworkMessageGroupHeader groupHeader;

  @ffi.Bool()
  external bool payloadHeaderEnabled;

  @ffi.Bool()
  external bool dataSetClassIdEnabled;

  external UA_Guid dataSetClassId;

  @ffi.Bool()
  external bool securityEnabled;

  external UA_NetworkMessageSecurityHeader securityHeader;

  @ffi.Bool()
  external bool timestampEnabled;

  @UA_DateTime()
  external int timestamp;

  @ffi.Bool()
  external bool picosecondsEnabled;

  @UA_UInt16()
  external int picoseconds;

  @ffi.Bool()
  external bool chunkMessage;

  @ffi.Bool()
  external bool promotedFieldsEnabled;

  @UA_UInt16()
  external int promotedFieldsSize;

  external ffi.Pointer<UA_Variant> promotedFields;

  @ffi.UnsignedInt()
  external int networkMessageTypeAsInt;

  UA_NetworkMessageType get networkMessageType => UA_NetworkMessageType.fromValue(networkMessageTypeAsInt);

  @ffi.Bool()
  external bool messageIdEnabled;

  external UA_String messageId;

  external UnnamedUnion13 payload;

  external UA_ByteString securityFooter;
}

/// amalgamated original file "/plugins/include/open62541/plugin/accesscontrol_default.h"
final class UA_UsernamePasswordLogin extends ffi.Struct {
  external UA_String username;

  external UA_ByteString password;
}

typedef UA_UsernamePasswordLoginCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_String> userName,
    ffi.Pointer<UA_ByteString> password,
    ffi.Size usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
    ffi.Pointer<ffi.Pointer<ffi.Void>> sessionContext,
    ffi.Pointer<ffi.Void> loginContext);
typedef DartUA_UsernamePasswordLoginCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_String> userName,
    ffi.Pointer<UA_ByteString> password,
    int usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
    ffi.Pointer<ffi.Pointer<ffi.Void>> sessionContext,
    ffi.Pointer<ffi.Void> loginContext);
typedef UA_UsernamePasswordLoginCallback = ffi.Pointer<ffi.NativeFunction<UA_UsernamePasswordLoginCallbackFunction>>;

enum UA_CertificateFormat {
  UA_CERTIFICATEFORMAT_DER(0),
  UA_CERTIFICATEFORMAT_PEM(1);

  final int value;
  const UA_CertificateFormat(this.value);

  static UA_CertificateFormat fromValue(int value) => switch (value) {
        0 => UA_CERTIFICATEFORMAT_DER,
        1 => UA_CERTIFICATEFORMAT_PEM,
        _ => throw ArgumentError('Unknown value for UA_CertificateFormat: $value'),
      };
}

typedef va_list$1 = __darwin_va_list;
typedef fpos_t = __darwin_off_t;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>> _close;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      _read;

  external ffi.Pointer<ffi.NativeFunction<fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;
typedef off_t = __darwin_off_t;

enum MatchStrategy {
  MATCH_EQUAL(0),
  MATCH_AFTER(1),
  MATCH_EQUAL_OR_AFTER(2),
  MATCH_BEFORE(3),
  MATCH_EQUAL_OR_BEFORE(4);

  final int value;
  const MatchStrategy(this.value);

  static MatchStrategy fromValue(int value) => switch (value) {
        0 => MATCH_EQUAL,
        1 => MATCH_AFTER,
        2 => MATCH_EQUAL_OR_AFTER,
        3 => MATCH_BEFORE,
        4 => MATCH_EQUAL_OR_BEFORE,
        _ => throw ArgumentError('Unknown value for MatchStrategy: $value'),
      };
}

final class UA_HistoryDataBackend extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryDataBackend> backend)>> deleteMembers;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Bool historizing,
              ffi.Pointer<UA_DataValue> value)>> serverSetHistoryData;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_HistoryDataBackend> backend,
              UA_DateTime start,
              UA_DateTime end,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Size maxSizePerResponse,
              UA_UInt32 numValuesPerNode,
              ffi.Bool returnBounds,
              ffi.UnsignedInt timestampsToReturn,
              UA_NumericRange range,
              ffi.Bool releaseContinuationPoints,
              ffi.Pointer<UA_ByteString> continuationPoint,
              ffi.Pointer<UA_ByteString> outContinuationPoint,
              ffi.Pointer<UA_HistoryData> result)>> getHistoryData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              UA_DateTime timestamp,
              ffi.UnsignedInt strategy)>> getDateTimeMatch;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId)>> getEnd;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId)>> lastIndex;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId)>> firstIndex;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Size startIndex,
              ffi.Size endIndex)>> resultSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Size startIndex,
              ffi.Size endIndex,
              ffi.Bool reverse,
              ffi.Size valueSize,
              UA_NumericRange range,
              ffi.Bool releaseContinuationPoints,
              ffi.Pointer<UA_ByteString> continuationPoint,
              ffi.Pointer<UA_ByteString> outContinuationPoint,
              ffi.Pointer<ffi.Size> providedValues,
              ffi.Pointer<UA_DataValue> values)>> copyDataValues;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataValue> Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Size index)>> getDataValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId)>> boundSupported;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.UnsignedInt timestampsToReturn)>> timestampsToReturnSupported;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<UA_DataValue> value)>> insertDataValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<UA_DataValue> value)>> replaceDataValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<UA_DataValue> value)>> updateDataValue;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdbContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              UA_DateTime startTimestamp,
              UA_DateTime endTimestamp)>> removeDataValue;
}

enum UA_HistorizingUpdateStrategy {
  UA_HISTORIZINGUPDATESTRATEGY_USER(0),
  UA_HISTORIZINGUPDATESTRATEGY_VALUESET(1),
  UA_HISTORIZINGUPDATESTRATEGY_POLL(2);

  final int value;
  const UA_HistorizingUpdateStrategy(this.value);

  static UA_HistorizingUpdateStrategy fromValue(int value) => switch (value) {
        0 => UA_HISTORIZINGUPDATESTRATEGY_USER,
        1 => UA_HISTORIZINGUPDATESTRATEGY_VALUESET,
        2 => UA_HISTORIZINGUPDATESTRATEGY_POLL,
        _ => throw ArgumentError('Unknown value for UA_HistorizingUpdateStrategy: $value'),
      };
}

final class UA_HistorizingNodeIdSettings extends ffi.Struct {
  external UA_HistoryDataBackend historizingBackend;

  @ffi.Size()
  external int maxHistoryDataResponseSize;

  @ffi.UnsignedInt()
  external int historizingUpdateStrategyAsInt;

  UA_HistorizingUpdateStrategy get historizingUpdateStrategy =>
      UA_HistorizingUpdateStrategy.fromValue(historizingUpdateStrategyAsInt);

  @ffi.Size()
  external int pollingInterval;

  external ffi.Pointer<ffi.Void> userContext;
}

final class UA_HistoryDataGathering extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_HistoryDataGathering> gathering)>>
      deleteMembers;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> hdgContext,
              ffi.Pointer<UA_NodeId> nodeId, UA_HistorizingNodeIdSettings setting)>> registerNodeId;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> hdgContext, ffi.Pointer<UA_NodeId> nodeId)>>
      stopPoll;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> hdgContext, ffi.Pointer<UA_NodeId> nodeId)>>
      startPoll;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> hdgContext,
              ffi.Pointer<UA_NodeId> nodeId, UA_HistorizingNodeIdSettings setting)>> updateNodeIdSetting;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_HistorizingNodeIdSettings> Function(
                  ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> hdgContext, ffi.Pointer<UA_NodeId> nodeId)>>
      getHistorizingSetting;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<ffi.Void> hdgContext,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Bool historizing,
              ffi.Pointer<UA_DataValue> value)>> setValue;
}

const int UA_OPEN62541_VER_MAJOR = 1;

const int UA_OPEN62541_VER_MINOR = 4;

const int UA_OPEN62541_VER_PATCH = 10;

const String UA_OPEN62541_VER_LABEL = '-undefined';

const String UA_OPEN62541_VER_COMMIT = 'unknown-commit';

const String UA_OPEN62541_VERSION = 'v1.4.10-undefined';

const int UA_LOGLEVEL = 100;

const int UA_MULTITHREADING = 0;

const int _XOPEN_SOURCE = 600;

const int UA_HAS_GETIFADDR = 1;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int _POSIX_C_SOURCE = 200112;

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 200112;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true$ = 1;

const int false$ = 0;

const String __PRI_8_LENGTH_MODIFIER__ = 'hh';

const String __PRI_64_LENGTH_MODIFIER__ = 'll';

const String __SCN_64_LENGTH_MODIFIER__ = 'll';

const String __PRI_MAX_LENGTH_MODIFIER__ = 'j';

const String __SCN_MAX_LENGTH_MODIFIER__ = 'j';

const String PRId8 = 'hhd';

const String PRIi8 = 'hhi';

const String PRIo8 = 'hho';

const String PRIu8 = 'hhu';

const String PRIx8 = 'hhx';

const String PRIX8 = 'hhX';

const String PRId16 = 'hd';

const String PRIi16 = 'hi';

const String PRIo16 = 'ho';

const String PRIu16 = 'hu';

const String PRIx16 = 'hx';

const String PRIX16 = 'hX';

const String PRId32 = 'd';

const String PRIi32 = 'i';

const String PRIo32 = 'o';

const String PRIu32 = 'u';

const String PRIx32 = 'x';

const String PRIX32 = 'X';

const String PRId64 = 'lld';

const String PRIi64 = 'lli';

const String PRIo64 = 'llo';

const String PRIu64 = 'llu';

const String PRIx64 = 'llx';

const String PRIX64 = 'llX';

const String PRIdLEAST8 = 'hhd';

const String PRIiLEAST8 = 'hhi';

const String PRIoLEAST8 = 'hho';

const String PRIuLEAST8 = 'hhu';

const String PRIxLEAST8 = 'hhx';

const String PRIXLEAST8 = 'hhX';

const String PRIdLEAST16 = 'hd';

const String PRIiLEAST16 = 'hi';

const String PRIoLEAST16 = 'ho';

const String PRIuLEAST16 = 'hu';

const String PRIxLEAST16 = 'hx';

const String PRIXLEAST16 = 'hX';

const String PRIdLEAST32 = 'd';

const String PRIiLEAST32 = 'i';

const String PRIoLEAST32 = 'o';

const String PRIuLEAST32 = 'u';

const String PRIxLEAST32 = 'x';

const String PRIXLEAST32 = 'X';

const String PRIdLEAST64 = 'lld';

const String PRIiLEAST64 = 'lli';

const String PRIoLEAST64 = 'llo';

const String PRIuLEAST64 = 'llu';

const String PRIxLEAST64 = 'llx';

const String PRIXLEAST64 = 'llX';

const String PRIdFAST8 = 'hhd';

const String PRIiFAST8 = 'hhi';

const String PRIoFAST8 = 'hho';

const String PRIuFAST8 = 'hhu';

const String PRIxFAST8 = 'hhx';

const String PRIXFAST8 = 'hhX';

const String PRIdFAST16 = 'hd';

const String PRIiFAST16 = 'hi';

const String PRIoFAST16 = 'ho';

const String PRIuFAST16 = 'hu';

const String PRIxFAST16 = 'hx';

const String PRIXFAST16 = 'hX';

const String PRIdFAST32 = 'd';

const String PRIiFAST32 = 'i';

const String PRIoFAST32 = 'o';

const String PRIuFAST32 = 'u';

const String PRIxFAST32 = 'x';

const String PRIXFAST32 = 'X';

const String PRIdFAST64 = 'lld';

const String PRIiFAST64 = 'lli';

const String PRIoFAST64 = 'llo';

const String PRIuFAST64 = 'llu';

const String PRIxFAST64 = 'llx';

const String PRIXFAST64 = 'llX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String PRIdMAX = 'jd';

const String PRIiMAX = 'ji';

const String PRIoMAX = 'jo';

const String PRIuMAX = 'ju';

const String PRIxMAX = 'jx';

const String PRIXMAX = 'jX';

const String SCNd8 = 'hhd';

const String SCNi8 = 'hhi';

const String SCNo8 = 'hho';

const String SCNu8 = 'hhu';

const String SCNx8 = 'hhx';

const String SCNd16 = 'hd';

const String SCNi16 = 'hi';

const String SCNo16 = 'ho';

const String SCNu16 = 'hu';

const String SCNx16 = 'hx';

const String SCNd32 = 'd';

const String SCNi32 = 'i';

const String SCNo32 = 'o';

const String SCNu32 = 'u';

const String SCNx32 = 'x';

const String SCNd64 = 'lld';

const String SCNi64 = 'lli';

const String SCNo64 = 'llo';

const String SCNu64 = 'llu';

const String SCNx64 = 'llx';

const String SCNdLEAST8 = 'hhd';

const String SCNiLEAST8 = 'hhi';

const String SCNoLEAST8 = 'hho';

const String SCNuLEAST8 = 'hhu';

const String SCNxLEAST8 = 'hhx';

const String SCNdLEAST16 = 'hd';

const String SCNiLEAST16 = 'hi';

const String SCNoLEAST16 = 'ho';

const String SCNuLEAST16 = 'hu';

const String SCNxLEAST16 = 'hx';

const String SCNdLEAST32 = 'd';

const String SCNiLEAST32 = 'i';

const String SCNoLEAST32 = 'o';

const String SCNuLEAST32 = 'u';

const String SCNxLEAST32 = 'x';

const String SCNdLEAST64 = 'lld';

const String SCNiLEAST64 = 'lli';

const String SCNoLEAST64 = 'llo';

const String SCNuLEAST64 = 'llu';

const String SCNxLEAST64 = 'llx';

const String SCNdFAST8 = 'hhd';

const String SCNiFAST8 = 'hhi';

const String SCNoFAST8 = 'hho';

const String SCNuFAST8 = 'hhu';

const String SCNxFAST8 = 'hhx';

const String SCNdFAST16 = 'hd';

const String SCNiFAST16 = 'hi';

const String SCNoFAST16 = 'ho';

const String SCNuFAST16 = 'hu';

const String SCNxFAST16 = 'hx';

const String SCNdFAST32 = 'd';

const String SCNiFAST32 = 'i';

const String SCNoFAST32 = 'o';

const String SCNuFAST32 = 'u';

const String SCNxFAST32 = 'x';

const String SCNdFAST64 = 'lld';

const String SCNiFAST64 = 'lli';

const String SCNoFAST64 = 'llo';

const String SCNuFAST64 = 'llu';

const String SCNxFAST64 = 'llx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String SCNdMAX = 'jd';

const String SCNiMAX = 'ji';

const String SCNoMAX = 'jo';

const String SCNuMAX = 'ju';

const String SCNxMAX = 'jx';

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __MAC_15_2 = 150200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __IPHONE_18_2 = 180200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __WATCHOS_11_2 = 110200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __TVOS_18_2 = 180200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __BRIDGEOS_9_2 = 90200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __DRIVERKIT_24_2 = 240200;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int __VISIONOS_2_2 = 20200;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 53;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 15;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -1021;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -307;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 1024;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 308;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = 1.7976931348623157e+308;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 2.220446049250313e-16;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 2.2250738585072014e-308;

const int DECIMAL_DIG = 17;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 17;

const int __DARWIN_NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGPOLL = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_NOFILE = 8;

const int _RLIMIT_POSIX_FLAG = 4096;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const String __ASSERT_FILE_NAME = 'temp_for_macros.hpp';

const int UA_LITTLE_ENDIAN = 1;

const int UA_BINARY_OVERLAYABLE_INTEGER = 1;

const int UA_FLOAT_IEEE754 = 0;

const int UA_FLOAT_LITTLE_ENDIAN = 0;

const int UA_BINARY_OVERLAYABLE_FLOAT = 0;

const int UA_STATUSCODE_INFOTYPE_DATAVALUE = 1024;

const int UA_STATUSCODE_INFOBITS_OVERFLOW = 128;

const int UA_STATUSCODE_GOOD = 0;

const int UA_STATUSCODE_UNCERTAIN = 1073741824;

const int UA_STATUSCODE_BAD = 2147483648;

const int UA_STATUSCODE_BADUNEXPECTEDERROR = 2147549184;

const int UA_STATUSCODE_BADINTERNALERROR = 2147614720;

const int UA_STATUSCODE_BADOUTOFMEMORY = 2147680256;

const int UA_STATUSCODE_BADRESOURCEUNAVAILABLE = 2147745792;

const int UA_STATUSCODE_BADCOMMUNICATIONERROR = 2147811328;

const int UA_STATUSCODE_BADENCODINGERROR = 2147876864;

const int UA_STATUSCODE_BADDECODINGERROR = 2147942400;

const int UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED = 2148007936;

const int UA_STATUSCODE_BADREQUESTTOOLARGE = 2159542272;

const int UA_STATUSCODE_BADRESPONSETOOLARGE = 2159607808;

const int UA_STATUSCODE_BADUNKNOWNRESPONSE = 2148073472;

const int UA_STATUSCODE_BADTIMEOUT = 2148139008;

const int UA_STATUSCODE_BADSERVICEUNSUPPORTED = 2148204544;

const int UA_STATUSCODE_BADSHUTDOWN = 2148270080;

const int UA_STATUSCODE_BADSERVERNOTCONNECTED = 2148335616;

const int UA_STATUSCODE_BADSERVERHALTED = 2148401152;

const int UA_STATUSCODE_BADNOTHINGTODO = 2148466688;

const int UA_STATUSCODE_BADTOOMANYOPERATIONS = 2148532224;

const int UA_STATUSCODE_BADTOOMANYMONITOREDITEMS = 2161836032;

const int UA_STATUSCODE_BADDATATYPEIDUNKNOWN = 2148597760;

const int UA_STATUSCODE_BADCERTIFICATEINVALID = 2148663296;

const int UA_STATUSCODE_BADSECURITYCHECKSFAILED = 2148728832;

const int UA_STATUSCODE_BADCERTIFICATEPOLICYCHECKFAILED = 2165571584;

const int UA_STATUSCODE_BADCERTIFICATETIMEINVALID = 2148794368;

const int UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID = 2148859904;

const int UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID = 2148925440;

const int UA_STATUSCODE_BADCERTIFICATEURIINVALID = 2148990976;

const int UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED = 2149056512;

const int UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED = 2149122048;

const int UA_STATUSCODE_BADCERTIFICATEUNTRUSTED = 2149187584;

const int UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN = 2149253120;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN = 2149318656;

const int UA_STATUSCODE_BADCERTIFICATEREVOKED = 2149384192;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED = 2149449728;

const int UA_STATUSCODE_BADCERTIFICATECHAININCOMPLETE = 2165112832;

const int UA_STATUSCODE_BADUSERACCESSDENIED = 2149515264;

const int UA_STATUSCODE_BADIDENTITYTOKENINVALID = 2149580800;

const int UA_STATUSCODE_BADIDENTITYTOKENREJECTED = 2149646336;

const int UA_STATUSCODE_BADSECURECHANNELIDINVALID = 2149711872;

const int UA_STATUSCODE_BADINVALIDTIMESTAMP = 2149777408;

const int UA_STATUSCODE_BADNONCEINVALID = 2149842944;

const int UA_STATUSCODE_BADSESSIONIDINVALID = 2149908480;

const int UA_STATUSCODE_BADSESSIONCLOSED = 2149974016;

const int UA_STATUSCODE_BADSESSIONNOTACTIVATED = 2150039552;

const int UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID = 2150105088;

const int UA_STATUSCODE_BADREQUESTHEADERINVALID = 2150236160;

const int UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID = 2150301696;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT = 2150367232;

const int UA_STATUSCODE_BADTOOMANYARGUMENTS = 2162491392;

const int UA_STATUSCODE_BADLICENSEEXPIRED = 2165178368;

const int UA_STATUSCODE_BADLICENSELIMITSEXCEEDED = 2165243904;

const int UA_STATUSCODE_BADLICENSENOTAVAILABLE = 2165309440;

const int UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED = 2949120;

const int UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY = 3014656;

const int UA_STATUSCODE_GOODOVERLOAD = 3080192;

const int UA_STATUSCODE_GOODCLAMPED = 3145728;

const int UA_STATUSCODE_BADNOCOMMUNICATION = 2150694912;

const int UA_STATUSCODE_BADWAITINGFORINITIALDATA = 2150760448;

const int UA_STATUSCODE_BADNODEIDINVALID = 2150825984;

const int UA_STATUSCODE_BADNODEIDUNKNOWN = 2150891520;

const int UA_STATUSCODE_BADATTRIBUTEIDINVALID = 2150957056;

const int UA_STATUSCODE_BADINDEXRANGEINVALID = 2151022592;

const int UA_STATUSCODE_BADINDEXRANGENODATA = 2151088128;

const int UA_STATUSCODE_BADDATAENCODINGINVALID = 2151153664;

const int UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED = 2151219200;

const int UA_STATUSCODE_BADNOTREADABLE = 2151284736;

const int UA_STATUSCODE_BADNOTWRITABLE = 2151350272;

const int UA_STATUSCODE_BADOUTOFRANGE = 2151415808;

const int UA_STATUSCODE_BADNOTSUPPORTED = 2151481344;

const int UA_STATUSCODE_BADNOTFOUND = 2151546880;

const int UA_STATUSCODE_BADOBJECTDELETED = 2151612416;

const int UA_STATUSCODE_BADNOTIMPLEMENTED = 2151677952;

const int UA_STATUSCODE_BADMONITORINGMODEINVALID = 2151743488;

const int UA_STATUSCODE_BADMONITOREDITEMIDINVALID = 2151809024;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID = 2151874560;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED = 2151940096;

const int UA_STATUSCODE_BADFILTERNOTALLOWED = 2152005632;

const int UA_STATUSCODE_BADSTRUCTUREMISSING = 2152071168;

const int UA_STATUSCODE_BADEVENTFILTERINVALID = 2152136704;

const int UA_STATUSCODE_BADCONTENTFILTERINVALID = 2152202240;

const int UA_STATUSCODE_BADFILTEROPERATORINVALID = 2160132096;

const int UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED = 2160197632;

const int UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH = 2160263168;

const int UA_STATUSCODE_BADFILTEROPERANDINVALID = 2152267776;

const int UA_STATUSCODE_BADFILTERELEMENTINVALID = 2160328704;

const int UA_STATUSCODE_BADFILTERLITERALINVALID = 2160394240;

const int UA_STATUSCODE_BADCONTINUATIONPOINTINVALID = 2152333312;

const int UA_STATUSCODE_BADNOCONTINUATIONPOINTS = 2152398848;

const int UA_STATUSCODE_BADREFERENCETYPEIDINVALID = 2152464384;

const int UA_STATUSCODE_BADBROWSEDIRECTIONINVALID = 2152529920;

const int UA_STATUSCODE_BADNODENOTINVIEW = 2152595456;

const int UA_STATUSCODE_BADNUMERICOVERFLOW = 2165440512;

const int UA_STATUSCODE_BADSERVERURIINVALID = 2152660992;

const int UA_STATUSCODE_BADSERVERNAMEMISSING = 2152726528;

const int UA_STATUSCODE_BADDISCOVERYURLMISSING = 2152792064;

const int UA_STATUSCODE_BADSEMPAHOREFILEMISSING = 2152857600;

const int UA_STATUSCODE_BADREQUESTTYPEINVALID = 2152923136;

const int UA_STATUSCODE_BADSECURITYMODEREJECTED = 2152988672;

const int UA_STATUSCODE_BADSECURITYPOLICYREJECTED = 2153054208;

const int UA_STATUSCODE_BADTOOMANYSESSIONS = 2153119744;

const int UA_STATUSCODE_BADUSERSIGNATUREINVALID = 2153185280;

const int UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID = 2153250816;

const int UA_STATUSCODE_BADNOVALIDCERTIFICATES = 2153316352;

const int UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED = 2160459776;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST = 2153381888;

const int UA_STATUSCODE_BADPARENTNODEIDINVALID = 2153447424;

const int UA_STATUSCODE_BADREFERENCENOTALLOWED = 2153512960;

const int UA_STATUSCODE_BADNODEIDREJECTED = 2153578496;

const int UA_STATUSCODE_BADNODEIDEXISTS = 2153644032;

const int UA_STATUSCODE_BADNODECLASSINVALID = 2153709568;

const int UA_STATUSCODE_BADBROWSENAMEINVALID = 2153775104;

const int UA_STATUSCODE_BADBROWSENAMEDUPLICATED = 2153840640;

const int UA_STATUSCODE_BADNODEATTRIBUTESINVALID = 2153906176;

const int UA_STATUSCODE_BADTYPEDEFINITIONINVALID = 2153971712;

const int UA_STATUSCODE_BADSOURCENODEIDINVALID = 2154037248;

const int UA_STATUSCODE_BADTARGETNODEIDINVALID = 2154102784;

const int UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED = 2154168320;

const int UA_STATUSCODE_BADINVALIDSELFREFERENCE = 2154233856;

const int UA_STATUSCODE_BADREFERENCELOCALONLY = 2154299392;

const int UA_STATUSCODE_BADNODELETERIGHTS = 2154364928;

const int UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED = 1086062592;

const int UA_STATUSCODE_BADSERVERINDEXINVALID = 2154430464;

const int UA_STATUSCODE_BADVIEWIDUNKNOWN = 2154496000;

const int UA_STATUSCODE_BADVIEWTIMESTAMPINVALID = 2160656384;

const int UA_STATUSCODE_BADVIEWPARAMETERMISMATCH = 2160721920;

const int UA_STATUSCODE_BADVIEWVERSIONINVALID = 2160787456;

const int UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE = 1086324736;

const int UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE = 12189696;

const int UA_STATUSCODE_BADNOTTYPEDEFINITION = 2160590848;

const int UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER = 1080819712;

const int UA_STATUSCODE_BADTOOMANYMATCHES = 2154627072;

const int UA_STATUSCODE_BADQUERYTOOCOMPLEX = 2154692608;

const int UA_STATUSCODE_BADNOMATCH = 2154758144;

const int UA_STATUSCODE_BADMAXAGEINVALID = 2154823680;

const int UA_STATUSCODE_BADSECURITYMODEINSUFFICIENT = 2162556928;

const int UA_STATUSCODE_BADHISTORYOPERATIONINVALID = 2154889216;

const int UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED = 2154954752;

const int UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT = 2159869952;

const int UA_STATUSCODE_BADWRITENOTSUPPORTED = 2155020288;

const int UA_STATUSCODE_BADTYPEMISMATCH = 2155085824;

const int UA_STATUSCODE_BADMETHODINVALID = 2155151360;

const int UA_STATUSCODE_BADARGUMENTSMISSING = 2155216896;

const int UA_STATUSCODE_BADNOTEXECUTABLE = 2165374976;

const int UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS = 2155282432;

const int UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS = 2155347968;

const int UA_STATUSCODE_BADNOSUBSCRIPTION = 2155413504;

const int UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN = 2155479040;

const int UA_STATUSCODE_GOODRETRANSMISSIONQUEUENOTSUPPORTED = 14614528;

const int UA_STATUSCODE_BADMESSAGENOTAVAILABLE = 2155544576;

const int UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE = 2155610112;

const int UA_STATUSCODE_BADSTATENOTACTIVE = 2160001024;

const int UA_STATUSCODE_BADALREADYEXISTS = 2165637120;

const int UA_STATUSCODE_BADTCPSERVERTOOBUSY = 2155675648;

const int UA_STATUSCODE_BADTCPMESSAGETYPEINVALID = 2155741184;

const int UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN = 2155806720;

const int UA_STATUSCODE_BADTCPMESSAGETOOLARGE = 2155872256;

const int UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES = 2155937792;

const int UA_STATUSCODE_BADTCPINTERNALERROR = 2156003328;

const int UA_STATUSCODE_BADTCPENDPOINTURLINVALID = 2156068864;

const int UA_STATUSCODE_BADREQUESTINTERRUPTED = 2156134400;

const int UA_STATUSCODE_BADREQUESTTIMEOUT = 2156199936;

const int UA_STATUSCODE_BADSECURECHANNELCLOSED = 2156265472;

const int UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN = 2156331008;

const int UA_STATUSCODE_BADSEQUENCENUMBERINVALID = 2156396544;

const int UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED = 2159935488;

const int UA_STATUSCODE_BADCONFIGURATIONERROR = 2156462080;

const int UA_STATUSCODE_BADNOTCONNECTED = 2156527616;

const int UA_STATUSCODE_BADDEVICEFAILURE = 2156593152;

const int UA_STATUSCODE_BADSENSORFAILURE = 2156658688;

const int UA_STATUSCODE_BADOUTOFSERVICE = 2156724224;

const int UA_STATUSCODE_BADDEADBANDFILTERINVALID = 2156789760;

const int UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE = 1083113472;

const int UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE = 1083179008;

const int UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE = 1083244544;

const int UA_STATUSCODE_UNCERTAININITIALVALUE = 1083310080;

const int UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE = 1083375616;

const int UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED = 1083441152;

const int UA_STATUSCODE_UNCERTAINSUBNORMAL = 1083506688;

const int UA_STATUSCODE_GOODLOCALOVERRIDE = 9830400;

const int UA_STATUSCODE_BADREFRESHINPROGRESS = 2157379584;

const int UA_STATUSCODE_BADCONDITIONALREADYDISABLED = 2157445120;

const int UA_STATUSCODE_BADCONDITIONALREADYENABLED = 2160852992;

const int UA_STATUSCODE_BADCONDITIONDISABLED = 2157510656;

const int UA_STATUSCODE_BADEVENTIDUNKNOWN = 2157576192;

const int UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE = 2159738880;

const int UA_STATUSCODE_BADDIALOGNOTACTIVE = 2160918528;

const int UA_STATUSCODE_BADDIALOGRESPONSEINVALID = 2160984064;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED = 2161049600;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED = 2161115136;

const int UA_STATUSCODE_BADCONDITIONALREADYSHELVED = 2161180672;

const int UA_STATUSCODE_BADCONDITIONNOTSHELVED = 2161246208;

const int UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE = 2161311744;

const int UA_STATUSCODE_BADNODATA = 2157641728;

const int UA_STATUSCODE_BADBOUNDNOTFOUND = 2161573888;

const int UA_STATUSCODE_BADBOUNDNOTSUPPORTED = 2161639424;

const int UA_STATUSCODE_BADDATALOST = 2157772800;

const int UA_STATUSCODE_BADDATAUNAVAILABLE = 2157838336;

const int UA_STATUSCODE_BADENTRYEXISTS = 2157903872;

const int UA_STATUSCODE_BADNOENTRYEXISTS = 2157969408;

const int UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED = 2158034944;

const int UA_STATUSCODE_GOODENTRYINSERTED = 10616832;

const int UA_STATUSCODE_GOODENTRYREPLACED = 10682368;

const int UA_STATUSCODE_UNCERTAINDATASUBNORMAL = 1084489728;

const int UA_STATUSCODE_GOODNODATA = 10813440;

const int UA_STATUSCODE_GOODMOREDATA = 10878976;

const int UA_STATUSCODE_BADAGGREGATELISTMISMATCH = 2161377280;

const int UA_STATUSCODE_BADAGGREGATENOTSUPPORTED = 2161442816;

const int UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS = 2161508352;

const int UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED = 2161770496;

const int UA_STATUSCODE_GOODDATAIGNORED = 14221312;

const int UA_STATUSCODE_BADREQUESTNOTALLOWED = 2162425856;

const int UA_STATUSCODE_BADREQUESTNOTCOMPLETE = 2165506048;

const int UA_STATUSCODE_BADTRANSACTIONPENDING = 2162688000;

const int UA_STATUSCODE_BADTICKETREQUIRED = 2166292480;

const int UA_STATUSCODE_BADTICKETINVALID = 2166358016;

const int UA_STATUSCODE_GOODEDITED = 14417920;

const int UA_STATUSCODE_GOODPOSTACTIONFAILED = 14483456;

const int UA_STATUSCODE_UNCERTAINDOMINANTVALUECHANGED = 1088290816;

const int UA_STATUSCODE_GOODDEPENDENTVALUECHANGED = 14680064;

const int UA_STATUSCODE_BADDOMINANTVALUECHANGED = 2162229248;

const int UA_STATUSCODE_UNCERTAINDEPENDENTVALUECHANGED = 1088552960;

const int UA_STATUSCODE_BADDEPENDENTVALUECHANGED = 2162360320;

const int UA_STATUSCODE_GOODEDITED_DEPENDENTVALUECHANGED = 18219008;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED = 18284544;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 18350080;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE = 2165899264;

const int UA_STATUSCODE_BADINITIALVALUE_OUTOFRANGE = 2165964800;

const int UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED = 2166030336;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED = 2166095872;

const int UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 2166161408;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED = 2166226944;

const int UA_STATUSCODE_GOODCOMMUNICATIONEVENT = 10944512;

const int UA_STATUSCODE_GOODSHUTDOWNEVENT = 11010048;

const int UA_STATUSCODE_GOODCALLAGAIN = 11075584;

const int UA_STATUSCODE_GOODNONCRITICALTIMEOUT = 11141120;

const int UA_STATUSCODE_BADINVALIDARGUMENT = 2158690304;

const int UA_STATUSCODE_BADCONNECTIONREJECTED = 2158755840;

const int UA_STATUSCODE_BADDISCONNECT = 2158821376;

const int UA_STATUSCODE_BADCONNECTIONCLOSED = 2158886912;

const int UA_STATUSCODE_BADINVALIDSTATE = 2158952448;

const int UA_STATUSCODE_BADENDOFSTREAM = 2159017984;

const int UA_STATUSCODE_BADNODATAAVAILABLE = 2159083520;

const int UA_STATUSCODE_BADWAITINGFORRESPONSE = 2159149056;

const int UA_STATUSCODE_BADOPERATIONABANDONED = 2159214592;

const int UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK = 2159280128;

const int UA_STATUSCODE_BADWOULDBLOCK = 2159345664;

const int UA_STATUSCODE_BADSYNTAXERROR = 2159411200;

const int UA_STATUSCODE_BADMAXCONNECTIONSREACHED = 2159476736;

const int UA_NS0ID_BOOLEAN = 1;

const int UA_NS0ID_SBYTE = 2;

const int UA_NS0ID_BYTE = 3;

const int UA_NS0ID_INT16 = 4;

const int UA_NS0ID_UINT16 = 5;

const int UA_NS0ID_INT32 = 6;

const int UA_NS0ID_UINT32 = 7;

const int UA_NS0ID_INT64 = 8;

const int UA_NS0ID_UINT64 = 9;

const int UA_NS0ID_FLOAT = 10;

const int UA_NS0ID_DOUBLE = 11;

const int UA_NS0ID_STRING = 12;

const int UA_NS0ID_DATETIME = 13;

const int UA_NS0ID_GUID = 14;

const int UA_NS0ID_BYTESTRING = 15;

const int UA_NS0ID_XMLELEMENT = 16;

const int UA_NS0ID_NODEID = 17;

const int UA_NS0ID_EXPANDEDNODEID = 18;

const int UA_NS0ID_STATUSCODE = 19;

const int UA_NS0ID_QUALIFIEDNAME = 20;

const int UA_NS0ID_LOCALIZEDTEXT = 21;

const int UA_NS0ID_STRUCTURE = 22;

const int UA_NS0ID_DATAVALUE = 23;

const int UA_NS0ID_BASEDATATYPE = 24;

const int UA_NS0ID_DIAGNOSTICINFO = 25;

const int UA_NS0ID_NUMBER = 26;

const int UA_NS0ID_INTEGER = 27;

const int UA_NS0ID_UINTEGER = 28;

const int UA_NS0ID_ENUMERATION = 29;

const int UA_NS0ID_IMAGE = 30;

const int UA_NS0ID_REFERENCES = 31;

const int UA_NS0ID_NONHIERARCHICALREFERENCES = 32;

const int UA_NS0ID_HIERARCHICALREFERENCES = 33;

const int UA_NS0ID_HASCHILD = 34;

const int UA_NS0ID_ORGANIZES = 35;

const int UA_NS0ID_HASEVENTSOURCE = 36;

const int UA_NS0ID_HASMODELLINGRULE = 37;

const int UA_NS0ID_HASENCODING = 38;

const int UA_NS0ID_HASDESCRIPTION = 39;

const int UA_NS0ID_HASTYPEDEFINITION = 40;

const int UA_NS0ID_GENERATESEVENT = 41;

const int UA_NS0ID_AGGREGATES = 44;

const int UA_NS0ID_HASSUBTYPE = 45;

const int UA_NS0ID_HASPROPERTY = 46;

const int UA_NS0ID_HASCOMPONENT = 47;

const int UA_NS0ID_HASNOTIFIER = 48;

const int UA_NS0ID_HASORDEREDCOMPONENT = 49;

const int UA_NS0ID_DECIMAL = 50;

const int UA_NS0ID_FROMSTATE = 51;

const int UA_NS0ID_TOSTATE = 52;

const int UA_NS0ID_HASCAUSE = 53;

const int UA_NS0ID_HASEFFECT = 54;

const int UA_NS0ID_HASHISTORICALCONFIGURATION = 56;

const int UA_NS0ID_BASEOBJECTTYPE = 58;

const int UA_NS0ID_FOLDERTYPE = 61;

const int UA_NS0ID_BASEVARIABLETYPE = 62;

const int UA_NS0ID_BASEDATAVARIABLETYPE = 63;

const int UA_NS0ID_PROPERTYTYPE = 68;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE = 69;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE = 72;

const int UA_NS0ID_DATATYPESYSTEMTYPE = 75;

const int UA_NS0ID_DATATYPEENCODINGTYPE = 76;

const int UA_NS0ID_MODELLINGRULETYPE = 77;

const int UA_NS0ID_MODELLINGRULE_MANDATORY = 78;

const int UA_NS0ID_MODELLINGRULE_OPTIONAL = 80;

const int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY = 83;

const int UA_NS0ID_ROOTFOLDER = 84;

const int UA_NS0ID_OBJECTSFOLDER = 85;

const int UA_NS0ID_TYPESFOLDER = 86;

const int UA_NS0ID_VIEWSFOLDER = 87;

const int UA_NS0ID_OBJECTTYPESFOLDER = 88;

const int UA_NS0ID_VARIABLETYPESFOLDER = 89;

const int UA_NS0ID_DATATYPESFOLDER = 90;

const int UA_NS0ID_REFERENCETYPESFOLDER = 91;

const int UA_NS0ID_XMLSCHEMA_TYPESYSTEM = 92;

const int UA_NS0ID_OPCBINARYSCHEMA_TYPESYSTEM = 93;

const int UA_NS0ID_PERMISSIONTYPE = 94;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE = 95;

const int UA_NS0ID_ROLEPERMISSIONTYPE = 96;

const int UA_NS0ID_DATATYPEDEFINITION = 97;

const int UA_NS0ID_STRUCTURETYPE = 98;

const int UA_NS0ID_STRUCTUREDEFINITION = 99;

const int UA_NS0ID_ENUMDEFINITION = 100;

const int UA_NS0ID_STRUCTUREFIELD = 101;

const int UA_NS0ID_ENUMFIELD = 102;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DATATYPEVERSION = 104;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DICTIONARYFRAGMENT = 105;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DATATYPEVERSION = 106;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_NAMESPACEURI = 107;

const int UA_NS0ID_HASSUBSTATEMACHINE = 117;

const int UA_NS0ID_NAMINGRULETYPE = 120;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTBINARY = 121;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTBINARY = 122;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTBINARY = 123;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTBINARY = 124;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 125;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTBINARY = 126;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTBINARY = 127;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTBINARY = 128;

const int UA_NS0ID_HASARGUMENTDESCRIPTION = 129;

const int UA_NS0ID_HASOPTIONALINPUTARGUMENTDESCRIPTION = 131;

const int UA_NS0ID_IDTYPE = 256;

const int UA_NS0ID_NODECLASS = 257;

const int UA_NS0ID_NODE = 258;

const int UA_NS0ID_NODE_ENCODING_DEFAULTXML = 259;

const int UA_NS0ID_NODE_ENCODING_DEFAULTBINARY = 260;

const int UA_NS0ID_OBJECTNODE = 261;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTXML = 262;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTBINARY = 263;

const int UA_NS0ID_OBJECTTYPENODE = 264;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTXML = 265;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTBINARY = 266;

const int UA_NS0ID_VARIABLENODE = 267;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTXML = 268;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTBINARY = 269;

const int UA_NS0ID_VARIABLETYPENODE = 270;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTXML = 271;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTBINARY = 272;

const int UA_NS0ID_REFERENCETYPENODE = 273;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTXML = 274;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTBINARY = 275;

const int UA_NS0ID_METHODNODE = 276;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTXML = 277;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTBINARY = 278;

const int UA_NS0ID_VIEWNODE = 279;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTXML = 280;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTBINARY = 281;

const int UA_NS0ID_DATATYPENODE = 282;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTXML = 283;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTBINARY = 284;

const int UA_NS0ID_REFERENCENODE = 285;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTXML = 286;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTBINARY = 287;

const int UA_NS0ID_INTEGERID = 288;

const int UA_NS0ID_COUNTER = 289;

const int UA_NS0ID_DURATION = 290;

const int UA_NS0ID_NUMERICRANGE = 291;

const int UA_NS0ID_UTCTIME = 294;

const int UA_NS0ID_LOCALEID = 295;

const int UA_NS0ID_ARGUMENT = 296;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTXML = 297;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTBINARY = 298;

const int UA_NS0ID_STATUSRESULT = 299;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTXML = 300;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTBINARY = 301;

const int UA_NS0ID_MESSAGESECURITYMODE = 302;

const int UA_NS0ID_USERTOKENTYPE = 303;

const int UA_NS0ID_USERTOKENPOLICY = 304;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTXML = 305;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTBINARY = 306;

const int UA_NS0ID_APPLICATIONTYPE = 307;

const int UA_NS0ID_APPLICATIONDESCRIPTION = 308;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTXML = 309;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTBINARY = 310;

const int UA_NS0ID_APPLICATIONINSTANCECERTIFICATE = 311;

const int UA_NS0ID_ENDPOINTDESCRIPTION = 312;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTXML = 313;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTBINARY = 314;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE = 315;

const int UA_NS0ID_USERIDENTITYTOKEN = 316;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTXML = 317;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 318;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN = 319;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTXML = 320;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 321;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN = 322;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTXML = 323;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 324;

const int UA_NS0ID_X509IDENTITYTOKEN = 325;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTXML = 326;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTBINARY = 327;

const int UA_NS0ID_ENDPOINTCONFIGURATION = 331;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTXML = 332;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTBINARY = 333;

const int UA_NS0ID_BUILDINFO = 338;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTXML = 339;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTBINARY = 340;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE = 344;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTXML = 345;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTBINARY = 346;

const int UA_NS0ID_ATTRIBUTEWRITEMASK = 347;

const int UA_NS0ID_NODEATTRIBUTESMASK = 348;

const int UA_NS0ID_NODEATTRIBUTES = 349;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTXML = 350;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTBINARY = 351;

const int UA_NS0ID_OBJECTATTRIBUTES = 352;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTXML = 353;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTBINARY = 354;

const int UA_NS0ID_VARIABLEATTRIBUTES = 355;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTXML = 356;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTBINARY = 357;

const int UA_NS0ID_METHODATTRIBUTES = 358;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTXML = 359;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTBINARY = 360;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES = 361;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTXML = 362;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 363;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES = 364;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTXML = 365;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 366;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES = 367;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTXML = 368;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 369;

const int UA_NS0ID_DATATYPEATTRIBUTES = 370;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTXML = 371;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 372;

const int UA_NS0ID_VIEWATTRIBUTES = 373;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTXML = 374;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTBINARY = 375;

const int UA_NS0ID_ADDNODESITEM = 376;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTXML = 377;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTBINARY = 378;

const int UA_NS0ID_ADDREFERENCESITEM = 379;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTXML = 380;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTBINARY = 381;

const int UA_NS0ID_DELETENODESITEM = 382;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTXML = 383;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTBINARY = 384;

const int UA_NS0ID_DELETEREFERENCESITEM = 385;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTXML = 386;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTBINARY = 387;

const int UA_NS0ID_SESSIONAUTHENTICATIONTOKEN = 388;

const int UA_NS0ID_REQUESTHEADER = 389;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTXML = 390;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTBINARY = 391;

const int UA_NS0ID_RESPONSEHEADER = 392;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTXML = 393;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTBINARY = 394;

const int UA_NS0ID_SERVICEFAULT = 395;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTXML = 396;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTBINARY = 397;

const int UA_NS0ID_FINDSERVERSREQUEST = 420;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTXML = 421;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTBINARY = 422;

const int UA_NS0ID_FINDSERVERSRESPONSE = 423;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTXML = 424;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTBINARY = 425;

const int UA_NS0ID_GETENDPOINTSREQUEST = 426;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTXML = 427;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTBINARY = 428;

const int UA_NS0ID_GETENDPOINTSRESPONSE = 429;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTXML = 430;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTBINARY = 431;

const int UA_NS0ID_REGISTEREDSERVER = 432;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTXML = 433;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTBINARY = 434;

const int UA_NS0ID_REGISTERSERVERREQUEST = 435;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTXML = 436;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTBINARY = 437;

const int UA_NS0ID_REGISTERSERVERRESPONSE = 438;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTXML = 439;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTBINARY = 440;

const int UA_NS0ID_CHANNELSECURITYTOKEN = 441;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTXML = 442;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTBINARY = 443;

const int UA_NS0ID_OPENSECURECHANNELREQUEST = 444;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTXML = 445;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 446;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE = 447;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 448;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 449;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST = 450;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTXML = 451;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 452;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE = 453;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 454;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 455;

const int UA_NS0ID_SIGNATUREDATA = 456;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTXML = 457;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTBINARY = 458;

const int UA_NS0ID_CREATESESSIONREQUEST = 459;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTXML = 460;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 461;

const int UA_NS0ID_CREATESESSIONRESPONSE = 462;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTXML = 463;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 464;

const int UA_NS0ID_ACTIVATESESSIONREQUEST = 465;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTXML = 466;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 467;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE = 468;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTXML = 469;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 470;

const int UA_NS0ID_CLOSESESSIONREQUEST = 471;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTXML = 472;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTBINARY = 473;

const int UA_NS0ID_CLOSESESSIONRESPONSE = 474;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTXML = 475;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 476;

const int UA_NS0ID_CANCELREQUEST = 477;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTXML = 478;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTBINARY = 479;

const int UA_NS0ID_CANCELRESPONSE = 480;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTXML = 481;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTBINARY = 482;

const int UA_NS0ID_ADDNODESRESULT = 483;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTXML = 484;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTBINARY = 485;

const int UA_NS0ID_ADDNODESREQUEST = 486;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTXML = 487;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTBINARY = 488;

const int UA_NS0ID_ADDNODESRESPONSE = 489;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTXML = 490;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTBINARY = 491;

const int UA_NS0ID_ADDREFERENCESREQUEST = 492;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTXML = 493;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 494;

const int UA_NS0ID_ADDREFERENCESRESPONSE = 495;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTXML = 496;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 497;

const int UA_NS0ID_DELETENODESREQUEST = 498;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTXML = 499;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTBINARY = 500;

const int UA_NS0ID_DELETENODESRESPONSE = 501;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTXML = 502;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTBINARY = 503;

const int UA_NS0ID_DELETEREFERENCESREQUEST = 504;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTXML = 505;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 506;

const int UA_NS0ID_DELETEREFERENCESRESPONSE = 507;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTXML = 508;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 509;

const int UA_NS0ID_BROWSEDIRECTION = 510;

const int UA_NS0ID_VIEWDESCRIPTION = 511;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTXML = 512;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTBINARY = 513;

const int UA_NS0ID_BROWSEDESCRIPTION = 514;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTXML = 515;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTBINARY = 516;

const int UA_NS0ID_BROWSERESULTMASK = 517;

const int UA_NS0ID_REFERENCEDESCRIPTION = 518;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTXML = 519;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTBINARY = 520;

const int UA_NS0ID_CONTINUATIONPOINT = 521;

const int UA_NS0ID_BROWSERESULT = 522;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTXML = 523;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTBINARY = 524;

const int UA_NS0ID_BROWSEREQUEST = 525;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTXML = 526;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTBINARY = 527;

const int UA_NS0ID_BROWSERESPONSE = 528;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTXML = 529;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTBINARY = 530;

const int UA_NS0ID_BROWSENEXTREQUEST = 531;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTXML = 532;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTBINARY = 533;

const int UA_NS0ID_BROWSENEXTRESPONSE = 534;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTXML = 535;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTBINARY = 536;

const int UA_NS0ID_RELATIVEPATHELEMENT = 537;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTXML = 538;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTBINARY = 539;

const int UA_NS0ID_RELATIVEPATH = 540;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTXML = 541;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTBINARY = 542;

const int UA_NS0ID_BROWSEPATH = 543;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTXML = 544;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTBINARY = 545;

const int UA_NS0ID_BROWSEPATHTARGET = 546;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTXML = 547;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTBINARY = 548;

const int UA_NS0ID_BROWSEPATHRESULT = 549;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTXML = 550;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTBINARY = 551;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 552;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTXML = 553;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTBINARY = 554;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 555;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTXML = 556;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTBINARY = 557;

const int UA_NS0ID_REGISTERNODESREQUEST = 558;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTXML = 559;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 560;

const int UA_NS0ID_REGISTERNODESRESPONSE = 561;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 562;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 563;

const int UA_NS0ID_UNREGISTERNODESREQUEST = 564;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTXML = 565;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 566;

const int UA_NS0ID_UNREGISTERNODESRESPONSE = 567;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 568;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 569;

const int UA_NS0ID_QUERYDATADESCRIPTION = 570;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTXML = 571;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTBINARY = 572;

const int UA_NS0ID_NODETYPEDESCRIPTION = 573;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTXML = 574;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 575;

const int UA_NS0ID_FILTEROPERATOR = 576;

const int UA_NS0ID_QUERYDATASET = 577;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTXML = 578;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTBINARY = 579;

const int UA_NS0ID_NODEREFERENCE = 580;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTXML = 581;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTBINARY = 582;

const int UA_NS0ID_CONTENTFILTERELEMENT = 583;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTXML = 584;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTBINARY = 585;

const int UA_NS0ID_CONTENTFILTER = 586;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTXML = 587;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTBINARY = 588;

const int UA_NS0ID_FILTEROPERAND = 589;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTXML = 590;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTBINARY = 591;

const int UA_NS0ID_ELEMENTOPERAND = 592;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTXML = 593;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTBINARY = 594;

const int UA_NS0ID_LITERALOPERAND = 595;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTXML = 596;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTBINARY = 597;

const int UA_NS0ID_ATTRIBUTEOPERAND = 598;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 599;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 600;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND = 601;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 602;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 603;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT = 604;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTXML = 605;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTBINARY = 606;

const int UA_NS0ID_CONTENTFILTERRESULT = 607;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTXML = 608;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTBINARY = 609;

const int UA_NS0ID_PARSINGRESULT = 610;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTXML = 611;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTBINARY = 612;

const int UA_NS0ID_QUERYFIRSTREQUEST = 613;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTXML = 614;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTBINARY = 615;

const int UA_NS0ID_QUERYFIRSTRESPONSE = 616;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTXML = 617;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTBINARY = 618;

const int UA_NS0ID_QUERYNEXTREQUEST = 619;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTXML = 620;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTBINARY = 621;

const int UA_NS0ID_QUERYNEXTRESPONSE = 622;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTXML = 623;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTBINARY = 624;

const int UA_NS0ID_TIMESTAMPSTORETURN = 625;

const int UA_NS0ID_READVALUEID = 626;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTXML = 627;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTBINARY = 628;

const int UA_NS0ID_READREQUEST = 629;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTXML = 630;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTBINARY = 631;

const int UA_NS0ID_READRESPONSE = 632;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTXML = 633;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTBINARY = 634;

const int UA_NS0ID_HISTORYREADVALUEID = 635;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTXML = 636;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTBINARY = 637;

const int UA_NS0ID_HISTORYREADRESULT = 638;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTXML = 639;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTBINARY = 640;

const int UA_NS0ID_HISTORYREADDETAILS = 641;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTXML = 642;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTBINARY = 643;

const int UA_NS0ID_READEVENTDETAILS = 644;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTXML = 645;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTBINARY = 646;

const int UA_NS0ID_READRAWMODIFIEDDETAILS = 647;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 648;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 649;

const int UA_NS0ID_READPROCESSEDDETAILS = 650;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTXML = 651;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTBINARY = 652;

const int UA_NS0ID_READATTIMEDETAILS = 653;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTXML = 654;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTBINARY = 655;

const int UA_NS0ID_HISTORYDATA = 656;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTXML = 657;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTBINARY = 658;

const int UA_NS0ID_HISTORYEVENT = 659;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTXML = 660;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTBINARY = 661;

const int UA_NS0ID_HISTORYREADREQUEST = 662;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTXML = 663;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTBINARY = 664;

const int UA_NS0ID_HISTORYREADRESPONSE = 665;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTXML = 666;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTBINARY = 667;

const int UA_NS0ID_WRITEVALUE = 668;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTXML = 669;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTBINARY = 670;

const int UA_NS0ID_WRITEREQUEST = 671;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTXML = 672;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTBINARY = 673;

const int UA_NS0ID_WRITERESPONSE = 674;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTXML = 675;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTBINARY = 676;

const int UA_NS0ID_HISTORYUPDATEDETAILS = 677;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTXML = 678;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTBINARY = 679;

const int UA_NS0ID_UPDATEDATADETAILS = 680;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTXML = 681;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTBINARY = 682;

const int UA_NS0ID_UPDATEEVENTDETAILS = 683;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTXML = 684;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTBINARY = 685;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS = 686;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 687;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 688;

const int UA_NS0ID_DELETEATTIMEDETAILS = 689;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTXML = 690;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTBINARY = 691;

const int UA_NS0ID_DELETEEVENTDETAILS = 692;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTXML = 693;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTBINARY = 694;

const int UA_NS0ID_HISTORYUPDATERESULT = 695;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTXML = 696;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTBINARY = 697;

const int UA_NS0ID_HISTORYUPDATEREQUEST = 698;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTXML = 699;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTBINARY = 700;

const int UA_NS0ID_HISTORYUPDATERESPONSE = 701;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTXML = 702;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTBINARY = 703;

const int UA_NS0ID_CALLMETHODREQUEST = 704;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTXML = 705;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTBINARY = 706;

const int UA_NS0ID_CALLMETHODRESULT = 707;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTXML = 708;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTBINARY = 709;

const int UA_NS0ID_CALLREQUEST = 710;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTXML = 711;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTBINARY = 712;

const int UA_NS0ID_CALLRESPONSE = 713;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTXML = 714;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTBINARY = 715;

const int UA_NS0ID_MONITORINGMODE = 716;

const int UA_NS0ID_DATACHANGETRIGGER = 717;

const int UA_NS0ID_DEADBANDTYPE = 718;

const int UA_NS0ID_MONITORINGFILTER = 719;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTXML = 720;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTBINARY = 721;

const int UA_NS0ID_DATACHANGEFILTER = 722;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTXML = 723;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTBINARY = 724;

const int UA_NS0ID_EVENTFILTER = 725;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTXML = 726;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTBINARY = 727;

const int UA_NS0ID_AGGREGATEFILTER = 728;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTXML = 729;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTBINARY = 730;

const int UA_NS0ID_MONITORINGFILTERRESULT = 731;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTXML = 732;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTBINARY = 733;

const int UA_NS0ID_EVENTFILTERRESULT = 734;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTXML = 735;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTBINARY = 736;

const int UA_NS0ID_AGGREGATEFILTERRESULT = 737;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTXML = 738;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTBINARY = 739;

const int UA_NS0ID_MONITORINGPARAMETERS = 740;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTXML = 741;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTBINARY = 742;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST = 743;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTXML = 744;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTBINARY = 745;

const int UA_NS0ID_MONITOREDITEMCREATERESULT = 746;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTXML = 747;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTBINARY = 748;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST = 749;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 750;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 751;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE = 752;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 753;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 754;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST = 755;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTXML = 756;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTBINARY = 757;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT = 758;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTXML = 759;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTBINARY = 760;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST = 761;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 762;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 763;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE = 764;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 765;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 766;

const int UA_NS0ID_SETMONITORINGMODEREQUEST = 767;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTXML = 768;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTBINARY = 769;

const int UA_NS0ID_SETMONITORINGMODERESPONSE = 770;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTXML = 771;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTBINARY = 772;

const int UA_NS0ID_SETTRIGGERINGREQUEST = 773;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTXML = 774;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTBINARY = 775;

const int UA_NS0ID_SETTRIGGERINGRESPONSE = 776;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTXML = 777;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTBINARY = 778;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST = 779;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 780;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 781;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE = 782;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 783;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 784;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST = 785;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 786;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 787;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE = 788;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 789;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 790;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST = 791;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 792;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 793;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE = 794;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 795;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 796;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST = 797;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTXML = 798;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTBINARY = 799;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE = 800;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTXML = 801;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTBINARY = 802;

const int UA_NS0ID_NOTIFICATIONMESSAGE = 803;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTXML = 804;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTBINARY = 805;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION = 806;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTXML = 807;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTBINARY = 808;

const int UA_NS0ID_DATACHANGENOTIFICATION = 809;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTXML = 810;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 811;

const int UA_NS0ID_STATUSCHANGENOTIFICATION = 818;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTXML = 819;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 820;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT = 821;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTXML = 822;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTBINARY = 823;

const int UA_NS0ID_PUBLISHREQUEST = 824;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTXML = 825;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTBINARY = 826;

const int UA_NS0ID_PUBLISHRESPONSE = 827;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTXML = 828;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 829;

const int UA_NS0ID_REPUBLISHREQUEST = 830;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTXML = 831;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTBINARY = 832;

const int UA_NS0ID_REPUBLISHRESPONSE = 833;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTXML = 834;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 835;

const int UA_NS0ID_TRANSFERRESULT = 836;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTXML = 837;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTBINARY = 838;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST = 839;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 840;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 841;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE = 842;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 843;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 844;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST = 845;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 846;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 847;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE = 848;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 849;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 850;

const int UA_NS0ID_REDUNDANCYSUPPORT = 851;

const int UA_NS0ID_SERVERSTATE = 852;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE = 853;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTXML = 854;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTBINARY = 855;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 856;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 857;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 858;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE = 859;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTXML = 860;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTBINARY = 861;

const int UA_NS0ID_SERVERSTATUSDATATYPE = 862;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTXML = 863;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTBINARY = 864;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE = 865;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 866;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 867;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE = 868;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 869;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 870;

const int UA_NS0ID_SERVICECOUNTERDATATYPE = 871;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTXML = 872;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTBINARY = 873;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 874;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 875;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 876;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE = 877;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 878;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 879;

const int UA_NS0ID_RANGE = 884;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTXML = 885;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTBINARY = 886;

const int UA_NS0ID_EUINFORMATION = 887;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTXML = 888;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTBINARY = 889;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT = 890;

const int UA_NS0ID_ANNOTATION = 891;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTXML = 892;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTBINARY = 893;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE = 894;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTXML = 895;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTBINARY = 896;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE = 897;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 898;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 899;

const int UA_NS0ID_EVENTNOTIFICATIONLIST = 914;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTXML = 915;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTBINARY = 916;

const int UA_NS0ID_EVENTFIELDLIST = 917;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTXML = 918;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTBINARY = 919;

const int UA_NS0ID_HISTORYEVENTFIELDLIST = 920;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTXML = 921;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTBINARY = 922;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN = 938;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTXML = 939;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 940;

const int UA_NS0ID_NOTIFICATIONDATA = 945;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTXML = 946;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTBINARY = 947;

const int UA_NS0ID_AGGREGATECONFIGURATION = 948;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTXML = 949;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTBINARY = 950;

const int UA_NS0ID_IMAGEBMP = 2000;

const int UA_NS0ID_IMAGEGIF = 2001;

const int UA_NS0ID_IMAGEJPG = 2002;

const int UA_NS0ID_IMAGEPNG = 2003;

const int UA_NS0ID_SERVERTYPE = 2004;

const int UA_NS0ID_SERVERTYPE_SERVERARRAY = 2005;

const int UA_NS0ID_SERVERTYPE_NAMESPACEARRAY = 2006;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS = 2007;

const int UA_NS0ID_SERVERTYPE_SERVICELEVEL = 2008;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES = 2009;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS = 2010;

const int UA_NS0ID_SERVERTYPE_VENDORSERVERINFO = 2011;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY = 2012;

const int UA_NS0ID_SERVERCAPABILITIESTYPE = 2013;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SERVERPROFILEARRAY = 2014;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_LOCALEIDARRAY = 2016;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MINSUPPORTEDSAMPLERATE = 2017;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MODELLINGRULES = 2019;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE = 2020;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY = 2021;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SAMPLINGINTERVALDIAGNOSTICSARRAY = 2022;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY = 2023;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_ENABLEDFLAG = 2025;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE = 2026;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONDIAGNOSTICSARRAY = 2027;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONSECURITYDIAGNOSTICSARRAY = 2028;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE = 2029;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS = 2030;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS = 2031;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY = 2032;

const int UA_NS0ID_VENDORSERVERINFOTYPE = 2033;

const int UA_NS0ID_SERVERREDUNDANCYTYPE = 2034;

const int UA_NS0ID_SERVERREDUNDANCYTYPE_REDUNDANCYSUPPORT = 2035;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE = 2036;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_CURRENTSERVERID = 2037;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANTSERVERARRAY = 2038;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE = 2039;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_SERVERURIARRAY = 2040;

const int UA_NS0ID_BASEEVENTTYPE = 2041;

const int UA_NS0ID_BASEEVENTTYPE_EVENTID = 2042;

const int UA_NS0ID_BASEEVENTTYPE_EVENTTYPE = 2043;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENODE = 2044;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENAME = 2045;

const int UA_NS0ID_BASEEVENTTYPE_TIME = 2046;

const int UA_NS0ID_BASEEVENTTYPE_RECEIVETIME = 2047;

const int UA_NS0ID_BASEEVENTTYPE_MESSAGE = 2050;

const int UA_NS0ID_BASEEVENTTYPE_SEVERITY = 2051;

const int UA_NS0ID_AUDITEVENTTYPE = 2052;

const int UA_NS0ID_AUDITEVENTTYPE_ACTIONTIMESTAMP = 2053;

const int UA_NS0ID_AUDITEVENTTYPE_STATUS = 2054;

const int UA_NS0ID_AUDITEVENTTYPE_SERVERID = 2055;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTAUDITENTRYID = 2056;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTUSERID = 2057;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE = 2058;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE = 2059;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE = 2060;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATE = 2061;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTTYPE = 2062;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYPOLICYURI = 2063;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYMODE = 2065;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTEDLIFETIME = 2066;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE = 2069;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SESSIONID = 2070;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE = 2071;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SECURECHANNELID = 2072;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATE = 2073;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_REVISEDSESSIONTIMEOUT = 2074;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE = 2075;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTSOFTWARECERTIFICATES = 2076;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_USERIDENTITYTOKEN = 2077;

const int UA_NS0ID_AUDITCANCELEVENTTYPE = 2078;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_REQUESTHANDLE = 2079;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE = 2080;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CERTIFICATE = 2081;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE = 2082;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDHOSTNAME = 2083;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDURI = 2084;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE = 2085;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE = 2086;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE = 2087;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE = 2088;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE = 2089;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE = 2090;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE = 2091;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_NODESTOADD = 2092;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE = 2093;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_NODESTODELETE = 2094;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE = 2095;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_REFERENCESTOADD = 2096;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE = 2097;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_REFERENCESTODELETE = 2098;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE = 2099;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE = 2100;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_INDEXRANGE = 2101;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_OLDVALUE = 2102;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_NEWVALUE = 2103;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE = 2104;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE = 2127;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_METHODID = 2128;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_INPUTARGUMENTS = 2129;

const int UA_NS0ID_SYSTEMEVENTTYPE = 2130;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE = 2131;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE = 2132;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE = 2133;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CHANGES = 2134;

const int UA_NS0ID_SERVERVENDORCAPABILITYTYPE = 2137;

const int UA_NS0ID_SERVERSTATUSTYPE = 2138;

const int UA_NS0ID_SERVERSTATUSTYPE_STARTTIME = 2139;

const int UA_NS0ID_SERVERSTATUSTYPE_CURRENTTIME = 2140;

const int UA_NS0ID_SERVERSTATUSTYPE_STATE = 2141;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO = 2142;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE = 2150;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SERVERVIEWCOUNT = 2151;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSESSIONCOUNT = 2152;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSESSIONCOUNT = 2153;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDSESSIONCOUNT = 2154;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDSESSIONCOUNT = 2155;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONTIMEOUTCOUNT = 2156;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONABORTCOUNT = 2157;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_PUBLISHINGINTERVALCOUNT = 2159;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSUBSCRIPTIONCOUNT = 2160;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSUBSCRIPTIONCOUNT = 2161;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDREQUESTSCOUNT = 2162;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDREQUESTSCOUNT = 2163;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE = 2164;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE = 2165;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLINGINTERVAL = 2166;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE = 2171;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE = 2172;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SESSIONID = 2173;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SUBSCRIPTIONID = 2174;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PRIORITY = 2175;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGINTERVAL = 2176;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXKEEPALIVECOUNT = 2177;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXNOTIFICATIONSPERPUBLISH = 2179;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGENABLED = 2180;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MODIFYCOUNT = 2181;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_ENABLECOUNT = 2182;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLECOUNT = 2183;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHREQUESTCOUNT = 2184;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGEREQUESTCOUNT = 2185;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGECOUNT = 2186;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREQUESTCOUNT = 2187;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOALTCLIENTCOUNT = 2188;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOSAMECLIENTCOUNT = 2189;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHREQUESTCOUNT = 2190;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DATACHANGENOTIFICATIONSCOUNT = 2191;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NOTIFICATIONSCOUNT = 2193;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE = 2196;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE = 2197;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONID = 2198;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONNAME = 2199;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTDESCRIPTION = 2200;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SERVERURI = 2201;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ENDPOINTURL = 2202;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_LOCALEIDS = 2203;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ACTUALSESSIONTIMEOUT = 2204;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTCONNECTIONTIME = 2205;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTLASTCONTACTTIME = 2206;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTSUBSCRIPTIONSCOUNT = 2207;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTMONITOREDITEMSCOUNT = 2208;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTPUBLISHREQUESTSINQUEUE = 2209;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_READCOUNT = 2217;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYREADCOUNT = 2218;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_WRITECOUNT = 2219;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYUPDATECOUNT = 2220;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CALLCOUNT = 2221;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATEMONITOREDITEMSCOUNT = 2222;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYMONITOREDITEMSCOUNT = 2223;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETMONITORINGMODECOUNT = 2224;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETTRIGGERINGCOUNT = 2225;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEMONITOREDITEMSCOUNT = 2226;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATESUBSCRIPTIONCOUNT = 2227;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYSUBSCRIPTIONCOUNT = 2228;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETPUBLISHINGMODECOUNT = 2229;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_PUBLISHCOUNT = 2230;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REPUBLISHCOUNT = 2231;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSFERSUBSCRIPTIONSCOUNT = 2232;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETESUBSCRIPTIONSCOUNT = 2233;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDNODESCOUNT = 2234;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDREFERENCESCOUNT = 2235;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETENODESCOUNT = 2236;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEREFERENCESCOUNT = 2237;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSECOUNT = 2238;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSENEXTCOUNT = 2239;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSLATEBROWSEPATHSTONODEIDSCOUNT = 2240;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYFIRSTCOUNT = 2241;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYNEXTCOUNT = 2242;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE = 2243;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE = 2244;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SESSIONID = 2245;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDOFSESSION = 2246;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDHISTORY = 2247;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_AUTHENTICATIONMECHANISM = 2248;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_ENCODING = 2249;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_TRANSPORTPROTOCOL = 2250;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYMODE = 2251;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYPOLICYURI = 2252;

const int UA_NS0ID_SERVER = 2253;

const int UA_NS0ID_SERVER_SERVERARRAY = 2254;

const int UA_NS0ID_SERVER_NAMESPACEARRAY = 2255;

const int UA_NS0ID_SERVER_SERVERSTATUS = 2256;

const int UA_NS0ID_SERVER_SERVERSTATUS_STARTTIME = 2257;

const int UA_NS0ID_SERVER_SERVERSTATUS_CURRENTTIME = 2258;

const int UA_NS0ID_SERVER_SERVERSTATUS_STATE = 2259;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO = 2260;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 2261;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTURI = 2262;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 2263;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 2264;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 2265;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDDATE = 2266;

const int UA_NS0ID_SERVER_SERVICELEVEL = 2267;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES = 2268;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SERVERPROFILEARRAY = 2269;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_LOCALEIDARRAY = 2271;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 2272;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS = 2274;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 2275;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT = 2276;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT = 2277;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT = 2278;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT = 2279;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT = 2281;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT = 2282;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT = 2284;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT = 2285;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT = 2286;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT = 2287;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT = 2288;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY = 2289;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY = 2290;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_ENABLEDFLAG = 2294;

const int UA_NS0ID_SERVER_VENDORSERVERINFO = 2295;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY = 2296;

const int UA_NS0ID_STATEMACHINETYPE = 2299;

const int UA_NS0ID_STATETYPE = 2307;

const int UA_NS0ID_STATETYPE_STATENUMBER = 2308;

const int UA_NS0ID_INITIALSTATETYPE = 2309;

const int UA_NS0ID_TRANSITIONTYPE = 2310;

const int UA_NS0ID_TRANSITIONEVENTTYPE = 2311;

const int UA_NS0ID_TRANSITIONTYPE_TRANSITIONNUMBER = 2312;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE = 2315;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE = 2318;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STEPPED = 2323;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_DEFINITION = 2324;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MAXTIMEINTERVAL = 2325;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MINTIMEINTERVAL = 2326;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATION = 2327;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATIONFORMAT = 2328;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE = 2330;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYDATACAPABILITY = 2331;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYEVENTSCAPABILITY = 2332;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTDATACAPABILITY = 2334;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEDATACAPABILITY = 2335;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEDATACAPABILITY = 2336;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETERAWCAPABILITY = 2337;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEATTIMECAPABILITY = 2338;

const int UA_NS0ID_AGGREGATEFUNCTIONTYPE = 2340;

const int UA_NS0ID_AGGREGATEFUNCTION_INTERPOLATIVE = 2341;

const int UA_NS0ID_AGGREGATEFUNCTION_AVERAGE = 2342;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE = 2343;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL = 2344;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM = 2346;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM = 2347;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME = 2348;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME = 2349;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE = 2350;

const int UA_NS0ID_AGGREGATEFUNCTION_ANNOTATIONCOUNT = 2351;

const int UA_NS0ID_AGGREGATEFUNCTION_COUNT = 2352;

const int UA_NS0ID_AGGREGATEFUNCTION_NUMBEROFTRANSITIONS = 2355;

const int UA_NS0ID_AGGREGATEFUNCTION_START = 2357;

const int UA_NS0ID_AGGREGATEFUNCTION_END = 2358;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTA = 2359;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONGOOD = 2360;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONBAD = 2361;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTGOOD = 2362;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTBAD = 2363;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY = 2364;

const int UA_NS0ID_DATAITEMTYPE = 2365;

const int UA_NS0ID_DATAITEMTYPE_DEFINITION = 2366;

const int UA_NS0ID_DATAITEMTYPE_VALUEPRECISION = 2367;

const int UA_NS0ID_ANALOGITEMTYPE = 2368;

const int UA_NS0ID_ANALOGITEMTYPE_EURANGE = 2369;

const int UA_NS0ID_ANALOGITEMTYPE_INSTRUMENTRANGE = 2370;

const int UA_NS0ID_ANALOGITEMTYPE_ENGINEERINGUNITS = 2371;

const int UA_NS0ID_DISCRETEITEMTYPE = 2372;

const int UA_NS0ID_TWOSTATEDISCRETETYPE = 2373;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_FALSESTATE = 2374;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_TRUESTATE = 2375;

const int UA_NS0ID_MULTISTATEDISCRETETYPE = 2376;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_ENUMSTRINGS = 2377;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE = 2378;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_INTERMEDIATERESULT = 2379;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE = 2380;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATESESSIONID = 2381;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATECLIENTNAME = 2382;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_INVOCATIONCREATIONTIME = 2383;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTTRANSITIONTIME = 2384;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALL = 2385;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODSESSIONID = 2386;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODINPUTARGUMENTS = 2387;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODOUTPUTARGUMENTS = 2388;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALLTIME = 2389;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODRETURNSTATUS = 2390;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE = 2391;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CREATABLE = 2392;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_DELETABLE = 2393;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AUTODELETE = 2394;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RECYCLECOUNT = 2395;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_INSTANCECOUNT = 2396;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXINSTANCECOUNT = 2397;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXRECYCLECOUNT = 2398;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC = 2399;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY = 2400;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY_STATENUMBER = 2401;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING = 2402;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING_STATENUMBER = 2403;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED = 2404;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED_STATENUMBER = 2405;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED = 2406;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED_STATENUMBER = 2407;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY = 2408;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY_TRANSITIONNUMBER = 2409;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING = 2410;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING_TRANSITIONNUMBER = 2411;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED = 2412;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED_TRANSITIONNUMBER = 2413;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY = 2414;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY_TRANSITIONNUMBER = 2415;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED = 2416;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED_TRANSITIONNUMBER = 2417;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING = 2418;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING_TRANSITIONNUMBER = 2419;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED = 2420;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED_TRANSITIONNUMBER = 2421;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY = 2422;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY_TRANSITIONNUMBER = 2423;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED = 2424;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED_TRANSITIONNUMBER = 2425;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_START = 2426;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPEND = 2427;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESUME = 2428;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALT = 2429;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESET = 2430;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REGISTERNODESCOUNT = 2730;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNREGISTERNODESCOUNT = 2731;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBROWSECONTINUATIONPOINTS = 2732;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXQUERYCONTINUATIONPOINTS = 2733;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXHISTORYCONTINUATIONPOINTS = 2734;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS = 2735;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS = 2736;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS = 2737;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE = 2738;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CHANGES = 2739;

const int UA_NS0ID_SERVERTYPE_AUDITING = 2742;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY = 2744;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SECURECHANNELID = 2745;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT = 2746;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT = 2747;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE = 2748;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ENDPOINTURL = 2749;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ATTRIBUTEID = 2750;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_PARAMETERDATATYPEID = 2751;

const int UA_NS0ID_SERVERSTATUSTYPE_SECONDSTILLSHUTDOWN = 2752;

const int UA_NS0ID_SERVERSTATUSTYPE_SHUTDOWNREASON = 2753;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 2754;

const int UA_NS0ID_STATEVARIABLETYPE = 2755;

const int UA_NS0ID_STATEVARIABLETYPE_ID = 2756;

const int UA_NS0ID_STATEVARIABLETYPE_NAME = 2757;

const int UA_NS0ID_STATEVARIABLETYPE_NUMBER = 2758;

const int UA_NS0ID_STATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 2759;

const int UA_NS0ID_FINITESTATEVARIABLETYPE = 2760;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_ID = 2761;

const int UA_NS0ID_TRANSITIONVARIABLETYPE = 2762;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_ID = 2763;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NAME = 2764;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NUMBER = 2765;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_TRANSITIONTIME = 2766;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE = 2767;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_ID = 2768;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE = 2769;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION = 2770;

const int UA_NS0ID_FINITESTATEMACHINETYPE = 2771;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE = 2772;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION = 2773;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION = 2774;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE = 2775;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE = 2776;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_OLDSTATEID = 2777;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_NEWSTATEID = 2778;

const int UA_NS0ID_CONDITIONTYPE = 2782;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE = 2787;

const int UA_NS0ID_REFRESHENDEVENTTYPE = 2788;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE = 2789;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE = 2790;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE = 2803;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE = 2829;

const int UA_NS0ID_DIALOGCONDITIONTYPE = 2830;

const int UA_NS0ID_DIALOGCONDITIONTYPE_PROMPT = 2831;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE = 2881;

const int UA_NS0ID_ALARMCONDITIONTYPE = 2915;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE = 2929;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED = 2930;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED = 2932;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED = 2933;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED = 2935;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED = 2936;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED = 2940;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED = 2942;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED = 2943;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED = 2945;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVE = 2947;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVE = 2948;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE = 2949;

const int UA_NS0ID_LIMITALARMTYPE = 2955;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE_INPUTARGUMENTS = 2991;

const int UA_NS0ID_SERVER_SERVERSTATUS_SECONDSTILLSHUTDOWN = 2992;

const int UA_NS0ID_SERVER_SERVERSTATUS_SHUTDOWNREASON = 2993;

const int UA_NS0ID_SERVER_AUDITING = 2994;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MODELLINGRULES = 2996;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 2997;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTNOTIFICATIONSCOUNT = 2998;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE = 2999;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_FILTER = 3003;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE = 3006;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE = 3012;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE = 3014;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ISDELETEMODIFIED = 3015;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STARTTIME = 3016;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ENDTIME = 3017;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE = 3019;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_REQTIMES = 3020;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_OLDVALUES = 3021;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE = 3022;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTIDS = 3023;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_OLDVALUES = 3024;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_UPDATEDNODE = 3025;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_UPDATEDNODE = 3026;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_UPDATEDNODE = 3027;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3028;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_NEWVALUES = 3029;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_OLDVALUES = 3030;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3031;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_NEWVALUES = 3032;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_OLDVALUES = 3033;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_OLDVALUES = 3034;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE = 3035;

const int UA_NS0ID_EVENTTYPESFOLDER = 3048;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SOFTWARECERTIFICATES = 3049;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MAXRESPONSEMESSAGESIZE = 3050;

const int UA_NS0ID_BUILDINFOTYPE = 3051;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTURI = 3052;

const int UA_NS0ID_BUILDINFOTYPE_MANUFACTURERNAME = 3053;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTNAME = 3054;

const int UA_NS0ID_BUILDINFOTYPE_SOFTWAREVERSION = 3055;

const int UA_NS0ID_BUILDINFOTYPE_BUILDNUMBER = 3056;

const int UA_NS0ID_BUILDINFOTYPE_BUILDDATE = 3057;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTCERTIFICATE = 3058;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION = 3059;

const int UA_NS0ID_DEFAULTBINARY = 3062;

const int UA_NS0ID_DEFAULTXML = 3063;

const int UA_NS0ID_ALWAYSGENERATESEVENT = 3065;

const int UA_NS0ID_ICON = 3067;

const int UA_NS0ID_NODEVERSION = 3068;

const int UA_NS0ID_LOCALTIME = 3069;

const int UA_NS0ID_ALLOWNULLS = 3070;

const int UA_NS0ID_ENUMVALUES = 3071;

const int UA_NS0ID_INPUTARGUMENTS = 3072;

const int UA_NS0ID_OUTPUTARGUMENTS = 3073;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STARTTIME = 3074;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_CURRENTTIME = 3075;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STATE = 3076;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO = 3077;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTURI = 3078;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 3079;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 3080;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 3081;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 3082;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDDATE = 3083;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SECONDSTILLSHUTDOWN = 3084;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SHUTDOWNREASON = 3085;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SERVERPROFILEARRAY = 3086;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_LOCALEIDARRAY = 3087;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 3088;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS = 3089;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS = 3090;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS = 3091;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3092;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MODELLINGRULES = 3093;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 3094;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 3095;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT = 3096;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT = 3097;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT = 3098;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT = 3099;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT = 3100;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT = 3101;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT = 3102;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT = 3104;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT = 3105;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT = 3106;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT = 3107;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT = 3108;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY = 3109;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY = 3110;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY = 3111;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY = 3112;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY = 3113;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_ENABLEDFLAG = 3114;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3115;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT = 3116;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT = 3117;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT = 3118;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT = 3119;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT = 3120;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT = 3121;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT = 3122;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT = 3124;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT = 3125;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT = 3126;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT = 3127;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT = 3128;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY = 3129;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY = 3130;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONID = 3131;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONNAME = 3132;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION = 3133;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SERVERURI = 3134;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL = 3135;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_LOCALEIDS = 3136;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT = 3137;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE = 3138;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME = 3139;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME = 3140;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT = 3141;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT = 3142;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE = 3143;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_READCOUNT = 3151;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT = 3152;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_WRITECOUNT = 3153;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT = 3154;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CALLCOUNT = 3155;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT = 3156;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT = 3157;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT = 3158;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT = 3159;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT = 3160;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT = 3161;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT = 3162;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT = 3163;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT = 3164;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT = 3165;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT = 3166;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT = 3167;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT = 3168;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT = 3169;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT = 3170;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT = 3171;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT = 3172;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT = 3173;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT = 3174;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT = 3175;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT = 3176;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT = 3177;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT = 3178;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID = 3179;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION = 3180;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY = 3181;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM = 3182;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING = 3183;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL = 3184;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE = 3185;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI = 3186;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE = 3187;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3188;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3189;

const int UA_NS0ID_BASEEVENTTYPE_LOCALTIME = 3190;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTID = 3191;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTTYPE = 3192;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENODE = 3193;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENAME = 3194;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_TIME = 3195;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_RECEIVETIME = 3196;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_LOCALTIME = 3197;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_MESSAGE = 3198;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SEVERITY = 3199;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTID = 3200;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTTYPE = 3201;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENODE = 3202;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENAME = 3203;

const int UA_NS0ID_AUDITEVENTTYPE_TIME = 3204;

const int UA_NS0ID_AUDITEVENTTYPE_RECEIVETIME = 3205;

const int UA_NS0ID_AUDITEVENTTYPE_LOCALTIME = 3206;

const int UA_NS0ID_AUDITEVENTTYPE_MESSAGE = 3207;

const int UA_NS0ID_AUDITEVENTTYPE_SEVERITY = 3208;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTID = 3209;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTTYPE = 3210;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENODE = 3211;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENAME = 3212;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_TIME = 3213;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_RECEIVETIME = 3214;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_LOCALTIME = 3215;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_MESSAGE = 3216;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SEVERITY = 3217;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_ACTIONTIMESTAMP = 3218;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUS = 3219;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SERVERID = 3220;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTAUDITENTRYID = 3221;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTUSERID = 3222;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTID = 3223;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTTYPE = 3224;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENODE = 3225;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENAME = 3226;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_TIME = 3227;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_RECEIVETIME = 3228;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_LOCALTIME = 3229;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_MESSAGE = 3230;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SEVERITY = 3231;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_ACTIONTIMESTAMP = 3232;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUS = 3233;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SERVERID = 3234;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3235;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTUSERID = 3236;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTID = 3237;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTTYPE = 3238;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENODE = 3239;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENAME = 3240;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_TIME = 3241;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_RECEIVETIME = 3242;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_LOCALTIME = 3243;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_MESSAGE = 3244;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SEVERITY = 3245;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_ACTIONTIMESTAMP = 3246;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUS = 3247;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SERVERID = 3248;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3249;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTUSERID = 3250;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURECHANNELID = 3251;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTID = 3252;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTTYPE = 3253;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENODE = 3254;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENAME = 3255;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_TIME = 3256;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_RECEIVETIME = 3257;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_LOCALTIME = 3258;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_MESSAGE = 3259;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SEVERITY = 3260;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_ACTIONTIMESTAMP = 3261;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUS = 3262;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SERVERID = 3263;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3264;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTUSERID = 3265;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTID = 3266;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTTYPE = 3267;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENODE = 3268;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENAME = 3269;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_TIME = 3270;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_RECEIVETIME = 3271;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_LOCALTIME = 3272;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_MESSAGE = 3273;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SEVERITY = 3274;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3275;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUS = 3276;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SERVERID = 3277;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3278;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTUSERID = 3279;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTID = 3281;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTTYPE = 3282;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENODE = 3283;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENAME = 3284;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_TIME = 3285;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_RECEIVETIME = 3286;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_LOCALTIME = 3287;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_MESSAGE = 3288;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SEVERITY = 3289;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3290;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUS = 3291;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SERVERID = 3292;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3293;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTUSERID = 3294;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SECURECHANNELID = 3296;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATE = 3297;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT = 3298;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_REVISEDSESSIONTIMEOUT = 3299;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTID = 3300;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTTYPE = 3301;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENODE = 3302;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENAME = 3303;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_TIME = 3304;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_RECEIVETIME = 3305;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_LOCALTIME = 3306;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_MESSAGE = 3307;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SEVERITY = 3308;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3309;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUS = 3310;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SERVERID = 3311;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3312;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTUSERID = 3313;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SESSIONID = 3314;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTID = 3315;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTTYPE = 3316;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENODE = 3317;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENAME = 3318;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_TIME = 3319;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_RECEIVETIME = 3320;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_LOCALTIME = 3321;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_MESSAGE = 3322;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SEVERITY = 3323;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_ACTIONTIMESTAMP = 3324;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUS = 3325;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SERVERID = 3326;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTAUDITENTRYID = 3327;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTUSERID = 3328;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SESSIONID = 3329;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTID = 3330;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTTYPE = 3331;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENODE = 3332;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENAME = 3333;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_TIME = 3334;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_RECEIVETIME = 3335;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_LOCALTIME = 3336;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_MESSAGE = 3337;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SEVERITY = 3338;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_ACTIONTIMESTAMP = 3339;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUS = 3340;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SERVERID = 3341;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTAUDITENTRYID = 3342;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTUSERID = 3343;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTID = 3344;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTTYPE = 3345;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENODE = 3346;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENAME = 3347;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_TIME = 3348;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_RECEIVETIME = 3349;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_LOCALTIME = 3350;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_MESSAGE = 3351;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SEVERITY = 3352;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3353;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUS = 3354;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SERVERID = 3355;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3356;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTUSERID = 3357;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CERTIFICATE = 3358;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTID = 3359;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTTYPE = 3360;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENODE = 3361;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENAME = 3362;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_TIME = 3363;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_RECEIVETIME = 3364;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_LOCALTIME = 3365;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_MESSAGE = 3366;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SEVERITY = 3367;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_ACTIONTIMESTAMP = 3368;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUS = 3369;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SERVERID = 3370;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTAUDITENTRYID = 3371;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTUSERID = 3372;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CERTIFICATE = 3373;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTID = 3374;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTTYPE = 3375;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENODE = 3376;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENAME = 3377;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_TIME = 3378;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_RECEIVETIME = 3379;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_LOCALTIME = 3380;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_MESSAGE = 3381;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SEVERITY = 3382;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_ACTIONTIMESTAMP = 3383;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUS = 3384;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SERVERID = 3385;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTAUDITENTRYID = 3386;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTUSERID = 3387;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CERTIFICATE = 3388;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTID = 3389;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTTYPE = 3390;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENODE = 3391;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENAME = 3392;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_TIME = 3393;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_RECEIVETIME = 3394;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_LOCALTIME = 3395;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_MESSAGE = 3396;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SEVERITY = 3397;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_ACTIONTIMESTAMP = 3398;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUS = 3399;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SERVERID = 3400;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTAUDITENTRYID = 3401;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTUSERID = 3402;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CERTIFICATE = 3403;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTID = 3404;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTTYPE = 3405;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENODE = 3406;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENAME = 3407;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_TIME = 3408;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_RECEIVETIME = 3409;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_LOCALTIME = 3410;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_MESSAGE = 3411;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SEVERITY = 3412;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_ACTIONTIMESTAMP = 3413;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUS = 3414;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SERVERID = 3415;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTAUDITENTRYID = 3416;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTUSERID = 3417;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CERTIFICATE = 3418;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTID = 3419;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTTYPE = 3420;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENODE = 3421;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENAME = 3422;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_TIME = 3423;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_RECEIVETIME = 3424;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_LOCALTIME = 3425;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_MESSAGE = 3426;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SEVERITY = 3427;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3428;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUS = 3429;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SERVERID = 3430;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3431;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTUSERID = 3432;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CERTIFICATE = 3433;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTID = 3434;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTTYPE = 3435;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENODE = 3436;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENAME = 3437;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_TIME = 3438;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_RECEIVETIME = 3439;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_LOCALTIME = 3440;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_MESSAGE = 3441;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SEVERITY = 3442;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_ACTIONTIMESTAMP = 3443;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_STATUS = 3444;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SERVERID = 3445;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTAUDITENTRYID = 3446;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTUSERID = 3447;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTID = 3448;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTTYPE = 3449;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENODE = 3450;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENAME = 3451;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_TIME = 3452;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_RECEIVETIME = 3453;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_LOCALTIME = 3454;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_MESSAGE = 3455;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SEVERITY = 3456;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_ACTIONTIMESTAMP = 3457;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_STATUS = 3458;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SERVERID = 3459;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTAUDITENTRYID = 3460;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTUSERID = 3461;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTID = 3462;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTTYPE = 3463;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENODE = 3464;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENAME = 3465;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_TIME = 3466;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_RECEIVETIME = 3467;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_LOCALTIME = 3468;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_MESSAGE = 3469;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SEVERITY = 3470;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_ACTIONTIMESTAMP = 3471;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_STATUS = 3472;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SERVERID = 3473;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTAUDITENTRYID = 3474;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTUSERID = 3475;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTID = 3476;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTTYPE = 3477;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENODE = 3478;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENAME = 3479;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_TIME = 3480;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_RECEIVETIME = 3481;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_LOCALTIME = 3482;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_MESSAGE = 3483;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SEVERITY = 3484;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3485;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_STATUS = 3486;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SERVERID = 3487;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3488;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTUSERID = 3489;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTID = 3490;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTTYPE = 3491;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENODE = 3492;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENAME = 3493;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_TIME = 3494;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_RECEIVETIME = 3495;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_LOCALTIME = 3496;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_MESSAGE = 3497;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SEVERITY = 3498;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3499;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_STATUS = 3500;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SERVERID = 3501;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3502;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTUSERID = 3503;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTID = 3504;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTTYPE = 3505;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENODE = 3506;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENAME = 3507;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_TIME = 3508;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_RECEIVETIME = 3509;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_LOCALTIME = 3510;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_MESSAGE = 3511;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SEVERITY = 3512;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3513;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_STATUS = 3514;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SERVERID = 3515;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3516;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTUSERID = 3517;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTID = 3518;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTTYPE = 3519;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENODE = 3520;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENAME = 3521;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_TIME = 3522;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_RECEIVETIME = 3523;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_LOCALTIME = 3524;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_MESSAGE = 3525;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SEVERITY = 3526;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3527;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_STATUS = 3528;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SERVERID = 3529;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3530;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTUSERID = 3531;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTID = 3532;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTTYPE = 3533;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENODE = 3534;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENAME = 3535;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_TIME = 3536;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_RECEIVETIME = 3537;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_LOCALTIME = 3538;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_MESSAGE = 3539;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SEVERITY = 3540;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3541;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_STATUS = 3542;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SERVERID = 3543;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3544;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTUSERID = 3545;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTID = 3546;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTTYPE = 3547;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENODE = 3548;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENAME = 3549;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_TIME = 3550;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_RECEIVETIME = 3551;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_LOCALTIME = 3552;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_MESSAGE = 3553;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SEVERITY = 3554;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3555;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_STATUS = 3556;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SERVERID = 3557;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3558;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTUSERID = 3559;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3560;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTID = 3561;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTTYPE = 3562;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENODE = 3563;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENAME = 3564;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_TIME = 3565;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_RECEIVETIME = 3566;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_LOCALTIME = 3567;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_MESSAGE = 3568;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SEVERITY = 3569;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3570;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_STATUS = 3571;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SERVERID = 3572;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3573;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTUSERID = 3574;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3575;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTID = 3576;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTTYPE = 3577;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENODE = 3578;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENAME = 3579;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_TIME = 3580;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_RECEIVETIME = 3581;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_LOCALTIME = 3582;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_MESSAGE = 3583;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SEVERITY = 3584;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3585;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_STATUS = 3586;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SERVERID = 3587;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3588;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTUSERID = 3589;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_PARAMETERDATATYPEID = 3590;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTID = 3591;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTTYPE = 3592;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENODE = 3593;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENAME = 3594;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_TIME = 3595;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_RECEIVETIME = 3596;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_LOCALTIME = 3597;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_MESSAGE = 3598;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SEVERITY = 3599;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3600;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STATUS = 3601;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SERVERID = 3602;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3603;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTUSERID = 3604;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_PARAMETERDATATYPEID = 3605;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_UPDATEDNODE = 3606;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTID = 3607;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTTYPE = 3608;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENODE = 3609;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENAME = 3610;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_TIME = 3611;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_RECEIVETIME = 3612;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_LOCALTIME = 3613;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_MESSAGE = 3614;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SEVERITY = 3615;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_ACTIONTIMESTAMP = 3616;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_STATUS = 3617;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SERVERID = 3618;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3619;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTUSERID = 3620;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_PARAMETERDATATYPEID = 3621;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_UPDATEDNODE = 3622;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTID = 3623;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTTYPE = 3624;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENODE = 3625;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENAME = 3626;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_TIME = 3627;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_RECEIVETIME = 3628;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_LOCALTIME = 3629;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_MESSAGE = 3630;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SEVERITY = 3631;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_ACTIONTIMESTAMP = 3632;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_STATUS = 3633;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SERVERID = 3634;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3635;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTUSERID = 3636;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_PARAMETERDATATYPEID = 3637;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_UPDATEDNODE = 3638;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTID = 3639;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTTYPE = 3640;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENODE = 3641;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENAME = 3642;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_TIME = 3643;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_RECEIVETIME = 3644;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_LOCALTIME = 3645;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_MESSAGE = 3646;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SEVERITY = 3647;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_ACTIONTIMESTAMP = 3648;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_STATUS = 3649;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SERVERID = 3650;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTAUDITENTRYID = 3651;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTUSERID = 3652;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTID = 3653;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTTYPE = 3654;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENODE = 3655;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENAME = 3656;

const int UA_NS0ID_SYSTEMEVENTTYPE_TIME = 3657;

const int UA_NS0ID_SYSTEMEVENTTYPE_RECEIVETIME = 3658;

const int UA_NS0ID_SYSTEMEVENTTYPE_LOCALTIME = 3659;

const int UA_NS0ID_SYSTEMEVENTTYPE_MESSAGE = 3660;

const int UA_NS0ID_SYSTEMEVENTTYPE_SEVERITY = 3661;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTID = 3662;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTTYPE = 3663;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENODE = 3664;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENAME = 3665;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_TIME = 3666;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_RECEIVETIME = 3667;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_LOCALTIME = 3668;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_MESSAGE = 3669;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SEVERITY = 3670;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTID = 3671;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTTYPE = 3672;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENODE = 3673;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENAME = 3674;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_TIME = 3675;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_RECEIVETIME = 3676;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_LOCALTIME = 3677;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_MESSAGE = 3678;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SEVERITY = 3679;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTID = 3680;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTTYPE = 3681;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENODE = 3682;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENAME = 3683;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_TIME = 3684;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_RECEIVETIME = 3685;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_LOCALTIME = 3686;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_MESSAGE = 3687;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SEVERITY = 3688;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTID = 3689;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTTYPE = 3690;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENODE = 3691;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENAME = 3692;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_TIME = 3693;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_RECEIVETIME = 3694;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_LOCALTIME = 3695;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_MESSAGE = 3696;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SEVERITY = 3697;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTURI = 3698;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_MANUFACTURERNAME = 3699;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTNAME = 3700;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_SOFTWAREVERSION = 3701;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDNUMBER = 3702;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDDATE = 3703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3704;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT = 3705;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY = 3706;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY = 3707;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY = 3708;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3709;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NAME = 3714;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NUMBER = 3715;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 3716;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NAME = 3717;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NUMBER = 3718;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_TRANSITIONTIME = 3719;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_ID = 3720;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NAME = 3721;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NUMBER = 3722;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 3723;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_ID = 3724;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NAME = 3725;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NUMBER = 3726;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3727;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_ID = 3728;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NAME = 3729;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3730;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 3731;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_ID = 3732;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NAME = 3733;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3734;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3735;

const int UA_NS0ID_INITIALSTATETYPE_STATENUMBER = 3736;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTID = 3737;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTTYPE = 3738;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENODE = 3739;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENAME = 3740;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TIME = 3741;

const int UA_NS0ID_TRANSITIONEVENTTYPE_RECEIVETIME = 3742;

const int UA_NS0ID_TRANSITIONEVENTTYPE_LOCALTIME = 3743;

const int UA_NS0ID_TRANSITIONEVENTTYPE_MESSAGE = 3744;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SEVERITY = 3745;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_ID = 3746;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NAME = 3747;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3748;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME = 3749;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_ID = 3750;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NAME = 3751;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3752;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME = 3753;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_ID = 3754;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NAME = 3755;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3756;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3757;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTID = 3758;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTTYPE = 3759;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENODE = 3760;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENAME = 3761;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_TIME = 3762;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_RECEIVETIME = 3763;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_LOCALTIME = 3764;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_MESSAGE = 3765;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SEVERITY = 3766;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_ACTIONTIMESTAMP = 3767;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_STATUS = 3768;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SERVERID = 3769;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTAUDITENTRYID = 3770;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTUSERID = 3771;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_METHODID = 3772;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_INPUTARGUMENTS = 3773;

const int UA_NS0ID_ANALOGITEMTYPE_DEFINITION = 3774;

const int UA_NS0ID_ANALOGITEMTYPE_VALUEPRECISION = 3775;

const int UA_NS0ID_DISCRETEITEMTYPE_DEFINITION = 3776;

const int UA_NS0ID_DISCRETEITEMTYPE_VALUEPRECISION = 3777;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_DEFINITION = 3778;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_VALUEPRECISION = 3779;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_DEFINITION = 3780;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_VALUEPRECISION = 3781;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTID = 3782;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 3783;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 3784;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 3785;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TIME = 3786;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 3787;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 3788;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_MESSAGE = 3789;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SEVERITY = 3790;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE = 3791;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_ID = 3792;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NAME = 3793;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3794;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME = 3795;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE = 3796;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_ID = 3797;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NAME = 3798;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3799;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME = 3800;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION = 3801;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_ID = 3802;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NAME = 3803;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3804;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3805;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE = 3806;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTID = 3807;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTTYPE = 3808;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENODE = 3809;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENAME = 3810;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TIME = 3811;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_RECEIVETIME = 3812;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_LOCALTIME = 3813;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_MESSAGE = 3814;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SEVERITY = 3815;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_ACTIONTIMESTAMP = 3816;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_STATUS = 3817;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SERVERID = 3818;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTAUDITENTRYID = 3819;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTUSERID = 3820;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_METHODID = 3821;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_INPUTARGUMENTS = 3822;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_OLDSTATEID = 3823;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_NEWSTATEID = 3824;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION = 3825;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_ID = 3826;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NAME = 3827;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NUMBER = 3828;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_TRANSITIONTIME = 3829;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE = 3830;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_ID = 3831;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NAME = 3832;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3833;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 3834;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION = 3835;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_ID = 3836;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NAME = 3837;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3838;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3839;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATESESSIONID = 3840;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATECLIENTNAME = 3841;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_INVOCATIONCREATIONTIME = 3842;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTTRANSITIONTIME = 3843;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALL = 3844;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODSESSIONID = 3845;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTARGUMENTS = 3846;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTARGUMENTS = 3847;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALLTIME = 3848;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODRETURNSTATUS = 3849;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_FINALRESULTDATA = 3850;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE = 3863;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE_INPUTARGUMENTS = 3864;

const int UA_NS0ID_CONDITIONTYPE_EVENTID = 3865;

const int UA_NS0ID_CONDITIONTYPE_EVENTTYPE = 3866;

const int UA_NS0ID_CONDITIONTYPE_SOURCENODE = 3867;

const int UA_NS0ID_CONDITIONTYPE_SOURCENAME = 3868;

const int UA_NS0ID_CONDITIONTYPE_TIME = 3869;

const int UA_NS0ID_CONDITIONTYPE_RECEIVETIME = 3870;

const int UA_NS0ID_CONDITIONTYPE_LOCALTIME = 3871;

const int UA_NS0ID_CONDITIONTYPE_MESSAGE = 3872;

const int UA_NS0ID_CONDITIONTYPE_SEVERITY = 3873;

const int UA_NS0ID_CONDITIONTYPE_RETAIN = 3874;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH = 3875;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 3876;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTID = 3969;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTTYPE = 3970;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENODE = 3971;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENAME = 3972;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_TIME = 3973;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_RECEIVETIME = 3974;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_LOCALTIME = 3975;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_MESSAGE = 3976;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SEVERITY = 3977;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTID = 3978;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTTYPE = 3979;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENODE = 3980;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENAME = 3981;

const int UA_NS0ID_REFRESHENDEVENTTYPE_TIME = 3982;

const int UA_NS0ID_REFRESHENDEVENTTYPE_RECEIVETIME = 3983;

const int UA_NS0ID_REFRESHENDEVENTTYPE_LOCALTIME = 3984;

const int UA_NS0ID_REFRESHENDEVENTTYPE_MESSAGE = 3985;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SEVERITY = 3986;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTID = 3987;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTTYPE = 3988;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENODE = 3989;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENAME = 3990;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_TIME = 3991;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_RECEIVETIME = 3992;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_LOCALTIME = 3993;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_MESSAGE = 3994;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SEVERITY = 3995;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTID = 3996;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTTYPE = 3997;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENODE = 3998;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENAME = 3999;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_TIME = 4000;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_RECEIVETIME = 4001;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_LOCALTIME = 4002;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_MESSAGE = 4003;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SEVERITY = 4004;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_ACTIONTIMESTAMP = 4005;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_STATUS = 4006;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SERVERID = 4007;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTAUDITENTRYID = 4008;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTUSERID = 4009;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_METHODID = 4010;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_INPUTARGUMENTS = 4011;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTID = 4106;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTTYPE = 4107;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENODE = 4108;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENAME = 4109;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_TIME = 4110;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_RECEIVETIME = 4111;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_LOCALTIME = 4112;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_MESSAGE = 4113;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SEVERITY = 4114;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_ACTIONTIMESTAMP = 4115;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_STATUS = 4116;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SERVERID = 4117;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTAUDITENTRYID = 4118;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTUSERID = 4119;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_METHODID = 4120;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_INPUTARGUMENTS = 4121;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTID = 4170;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTTYPE = 4171;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENODE = 4172;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENAME = 4173;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_TIME = 4174;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_RECEIVETIME = 4175;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_LOCALTIME = 4176;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_MESSAGE = 4177;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SEVERITY = 4178;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_ACTIONTIMESTAMP = 4179;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_STATUS = 4180;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SERVERID = 4181;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTAUDITENTRYID = 4182;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTUSERID = 4183;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_METHODID = 4184;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_INPUTARGUMENTS = 4185;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTID = 4188;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTTYPE = 4189;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENODE = 4190;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENAME = 4191;

const int UA_NS0ID_DIALOGCONDITIONTYPE_TIME = 4192;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RECEIVETIME = 4193;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LOCALTIME = 4194;

const int UA_NS0ID_DIALOGCONDITIONTYPE_MESSAGE = 4195;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SEVERITY = 4196;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RETAIN = 4197;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH = 4198;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 4199;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTID = 5113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTTYPE = 5114;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENODE = 5115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENAME = 5116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_TIME = 5117;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RECEIVETIME = 5118;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LOCALTIME = 5119;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_MESSAGE = 5120;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SEVERITY = 5121;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RETAIN = 5122;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH = 5123;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 5124;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTID = 5540;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTTYPE = 5541;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENODE = 5542;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENAME = 5543;

const int UA_NS0ID_ALARMCONDITIONTYPE_TIME = 5544;

const int UA_NS0ID_ALARMCONDITIONTYPE_RECEIVETIME = 5545;

const int UA_NS0ID_ALARMCONDITIONTYPE_LOCALTIME = 5546;

const int UA_NS0ID_ALARMCONDITIONTYPE_MESSAGE = 5547;

const int UA_NS0ID_ALARMCONDITIONTYPE_SEVERITY = 5548;

const int UA_NS0ID_ALARMCONDITIONTYPE_RETAIN = 5549;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH = 5550;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 5551;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE = 6088;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_ID = 6089;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NAME = 6090;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 6091;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 6092;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION = 6093;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_ID = 6094;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NAME = 6095;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 6096;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 6097;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED_STATENUMBER = 6098;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED_STATENUMBER = 6100;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED_STATENUMBER = 6101;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE = 6102;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE_INPUTARGUMENTS = 6103;

const int UA_NS0ID_LIMITALARMTYPE_EVENTID = 6116;

const int UA_NS0ID_LIMITALARMTYPE_EVENTTYPE = 6117;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENODE = 6118;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENAME = 6119;

const int UA_NS0ID_LIMITALARMTYPE_TIME = 6120;

const int UA_NS0ID_LIMITALARMTYPE_RECEIVETIME = 6121;

const int UA_NS0ID_LIMITALARMTYPE_LOCALTIME = 6122;

const int UA_NS0ID_LIMITALARMTYPE_MESSAGE = 6123;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITY = 6124;

const int UA_NS0ID_LIMITALARMTYPE_RETAIN = 6125;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH = 6126;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 6127;

const int UA_NS0ID_IDTYPE_ENUMSTRINGS = 7591;

const int UA_NS0ID_ENUMVALUETYPE = 7594;

const int UA_NS0ID_MESSAGESECURITYMODE_ENUMSTRINGS = 7595;

const int UA_NS0ID_USERTOKENTYPE_ENUMSTRINGS = 7596;

const int UA_NS0ID_APPLICATIONTYPE_ENUMSTRINGS = 7597;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE_ENUMSTRINGS = 7598;

const int UA_NS0ID_BROWSEDIRECTION_ENUMSTRINGS = 7603;

const int UA_NS0ID_FILTEROPERATOR_ENUMSTRINGS = 7605;

const int UA_NS0ID_TIMESTAMPSTORETURN_ENUMSTRINGS = 7606;

const int UA_NS0ID_MONITORINGMODE_ENUMSTRINGS = 7608;

const int UA_NS0ID_DATACHANGETRIGGER_ENUMSTRINGS = 7609;

const int UA_NS0ID_DEADBANDTYPE_ENUMSTRINGS = 7610;

const int UA_NS0ID_REDUNDANCYSUPPORT_ENUMSTRINGS = 7611;

const int UA_NS0ID_SERVERSTATE_ENUMSTRINGS = 7612;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT_ENUMSTRINGS = 7614;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTXML = 7616;

const int UA_NS0ID_OPCUA_BINARYSCHEMA = 7617;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEVERSION = 7618;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NAMESPACEURI = 7619;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT = 7650;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DATATYPEVERSION = 7651;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 7652;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE = 7656;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 7657;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 7658;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT = 7659;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DATATYPEVERSION = 7660;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 7661;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY = 7662;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 7663;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 7664;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION = 7665;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION = 7666;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT = 7667;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION = 7668;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION = 7669;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT = 7670;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN = 7671;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 7672;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT = 7673;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN = 7674;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION = 7675;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT = 7676;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN = 7677;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION = 7678;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT = 7679;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN = 7680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 7681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT = 7682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN = 7683;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION = 7684;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT = 7685;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION = 7686;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION = 7687;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT = 7688;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO = 7692;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DATATYPEVERSION = 7693;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 7694;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE = 7698;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION = 7699;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT = 7700;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM = 7728;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DATATYPEVERSION = 7729;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 7730;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM = 7731;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 7732;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT = 7733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM = 7734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DATATYPEVERSION = 7735;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 7736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM = 7737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION = 7738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT = 7739;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER = 7782;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 7783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT = 7784;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT = 7929;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION = 7930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT = 7931;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER = 7932;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DATATYPEVERSION = 7933;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 7934;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND = 7935;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DATATYPEVERSION = 7936;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 7937;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND = 7938;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 7939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 7940;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND = 7941;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DATATYPEVERSION = 7942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 7943;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND = 7944;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 7945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 7946;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND = 7947;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION = 7948;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 7949;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT = 8004;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8005;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8006;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER = 8067;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8068;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT = 8069;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER = 8073;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DATATYPEVERSION = 8074;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8075;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION = 8076;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION = 8077;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT = 8078;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST = 8172;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION = 8173;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT = 8174;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE = 8208;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION = 8209;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT = 8210;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 8211;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8212;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8214;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION = 8215;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT = 8216;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE = 8217;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION = 8218;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT = 8219;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8220;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8221;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8222;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8223;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8224;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8225;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE = 8226;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION = 8227;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT = 8228;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8229;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8230;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8231;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8232;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION = 8233;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT = 8234;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8235;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION = 8236;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT = 8237;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE = 8238;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DATATYPEVERSION = 8239;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DICTIONARYFRAGMENT = 8240;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION = 8241;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DATATYPEVERSION = 8242;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8243;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION = 8244;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DATATYPEVERSION = 8245;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8246;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8247;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION = 8248;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT = 8249;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTBINARY = 8251;

const int UA_NS0ID_OPCUA_XMLSCHEMA = 8252;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEVERSION = 8253;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NAMESPACEURI = 8254;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT = 8285;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DATATYPEVERSION = 8286;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 8287;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE = 8291;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 8292;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 8293;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT = 8294;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DATATYPEVERSION = 8295;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 8296;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY = 8297;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 8298;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 8299;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION = 8300;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION = 8301;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT = 8302;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION = 8303;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION = 8304;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT = 8305;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN = 8306;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 8307;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT = 8308;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN = 8309;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION = 8310;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT = 8311;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN = 8312;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION = 8313;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT = 8314;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN = 8315;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 8316;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT = 8317;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN = 8318;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION = 8319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT = 8320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION = 8321;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION = 8322;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT = 8323;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO = 8327;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DATATYPEVERSION = 8328;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 8329;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE = 8333;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION = 8334;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT = 8335;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM = 8363;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DATATYPEVERSION = 8364;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 8365;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM = 8366;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 8367;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT = 8368;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM = 8369;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DATATYPEVERSION = 8370;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 8371;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM = 8372;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION = 8373;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT = 8374;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER = 8417;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 8418;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT = 8419;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT = 8564;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION = 8565;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT = 8566;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER = 8567;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DATATYPEVERSION = 8568;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 8569;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND = 8570;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DATATYPEVERSION = 8571;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 8572;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND = 8573;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 8574;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 8575;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND = 8576;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DATATYPEVERSION = 8577;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 8578;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND = 8579;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 8580;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 8581;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND = 8582;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION = 8583;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 8584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT = 8639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8640;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8641;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER = 8702;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8703;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT = 8704;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER = 8708;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DATATYPEVERSION = 8709;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION = 8711;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION = 8712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT = 8713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST = 8807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION = 8808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT = 8809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE = 8843;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION = 8844;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT = 8845;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 8846;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8847;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8848;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8849;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION = 8850;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT = 8851;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE = 8852;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION = 8853;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT = 8854;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8855;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8856;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8857;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8858;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8859;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE = 8861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION = 8862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT = 8863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8864;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION = 8865;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT = 8866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8867;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION = 8868;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT = 8869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8870;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION = 8871;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT = 8872;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE = 8873;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DATATYPEVERSION = 8874;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DICTIONARYFRAGMENT = 8875;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION = 8876;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DATATYPEVERSION = 8877;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8878;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION = 8879;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DATATYPEVERSION = 8880;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8881;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8882;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION = 8883;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT = 8884;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXLIFETIMECOUNT = 8888;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_LATEPUBLISHREQUESTCOUNT = 8889;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTKEEPALIVECOUNT = 8890;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTLIFETIMECOUNT = 8891;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_UNACKNOWLEDGEDMESSAGECOUNT = 8892;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISCARDEDMESSAGECOUNT = 8893;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITOREDITEMCOUNT = 8894;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMCOUNT = 8895;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITORINGQUEUEOVERFLOWCOUNT = 8896;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NEXTSEQUENCENUMBER = 8897;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT = 8898;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TOTALREQUESTCOUNT = 8900;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTQUEUEOVERFLOWCOUNT = 8902;

const int UA_NS0ID_TIMEZONEDATATYPE = 8912;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTXML = 8913;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE = 8914;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8915;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT = 8916;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTBINARY = 8917;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE = 8918;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8919;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT = 8920;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE = 8927;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTID = 8928;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTTYPE = 8929;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENODE = 8930;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENAME = 8931;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_TIME = 8932;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_RECEIVETIME = 8933;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_LOCALTIME = 8934;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_MESSAGE = 8935;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SEVERITY = 8936;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_ACTIONTIMESTAMP = 8937;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_STATUS = 8938;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SERVERID = 8939;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTAUDITENTRYID = 8940;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTUSERID = 8941;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_METHODID = 8942;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_INPUTARGUMENTS = 8943;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE = 8944;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTID = 8945;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTTYPE = 8946;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENODE = 8947;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENAME = 8948;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_TIME = 8949;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_RECEIVETIME = 8950;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_LOCALTIME = 8951;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_MESSAGE = 8952;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SEVERITY = 8953;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_ACTIONTIMESTAMP = 8954;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_STATUS = 8955;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SERVERID = 8956;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTAUDITENTRYID = 8957;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTUSERID = 8958;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_METHODID = 8959;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_INPUTARGUMENTS = 8960;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE = 8961;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTID = 8962;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTTYPE = 8963;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENODE = 8964;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENAME = 8965;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_TIME = 8966;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_RECEIVETIME = 8967;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_LOCALTIME = 8968;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_MESSAGE = 8969;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SEVERITY = 8970;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_ACTIONTIMESTAMP = 8971;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_STATUS = 8972;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SERVERID = 8973;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTAUDITENTRYID = 8974;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTUSERID = 8975;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_METHODID = 8976;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_INPUTARGUMENTS = 8977;

const int UA_NS0ID_TWOSTATEVARIABLETYPE = 8995;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_ID = 8996;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NAME = 8997;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NUMBER = 8998;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 8999;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRANSITIONTIME = 9000;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVETRANSITIONTIME = 9001;

const int UA_NS0ID_CONDITIONVARIABLETYPE = 9002;

const int UA_NS0ID_CONDITIONVARIABLETYPE_SOURCETIMESTAMP = 9003;

const int UA_NS0ID_HASTRUESUBSTATE = 9004;

const int UA_NS0ID_HASFALSESUBSTATE = 9005;

const int UA_NS0ID_HASCONDITION = 9006;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE = 9007;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE_INPUTARGUMENTS = 9008;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONNAME = 9009;

const int UA_NS0ID_CONDITIONTYPE_BRANCHID = 9010;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE = 9011;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_ID = 9012;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NAME = 9013;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NUMBER = 9014;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9015;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9016;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9017;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9018;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9019;

const int UA_NS0ID_CONDITIONTYPE_QUALITY = 9020;

const int UA_NS0ID_CONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9021;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY = 9022;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9023;

const int UA_NS0ID_CONDITIONTYPE_COMMENT = 9024;

const int UA_NS0ID_CONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9025;

const int UA_NS0ID_CONDITIONTYPE_CLIENTUSERID = 9026;

const int UA_NS0ID_CONDITIONTYPE_ENABLE = 9027;

const int UA_NS0ID_CONDITIONTYPE_DISABLE = 9028;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT = 9029;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9030;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE = 9031;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE_INPUTARGUMENTS = 9032;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONNAME = 9033;

const int UA_NS0ID_DIALOGCONDITIONTYPE_BRANCHID = 9034;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE = 9035;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_ID = 9036;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NAME = 9037;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9038;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9039;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9040;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9041;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9042;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9043;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY = 9044;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9045;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY = 9046;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9047;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT = 9048;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9049;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CLIENTUSERID = 9050;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLE = 9051;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DISABLE = 9052;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT = 9053;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9054;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE = 9055;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_ID = 9056;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NAME = 9057;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NUMBER = 9058;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVEDISPLAYNAME = 9059;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRANSITIONTIME = 9060;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVETRANSITIONTIME = 9061;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRUESTATE = 9062;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_FALSESTATE = 9063;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPONSEOPTIONSET = 9064;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DEFAULTRESPONSE = 9065;

const int UA_NS0ID_DIALOGCONDITIONTYPE_OKRESPONSE = 9066;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CANCELRESPONSE = 9067;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTRESPONSE = 9068;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND = 9069;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND_INPUTARGUMENTS = 9070;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONNAME = 9071;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_BRANCHID = 9072;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE = 9073;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_ID = 9074;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NAME = 9075;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NUMBER = 9076;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9077;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9078;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9079;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9080;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9081;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY = 9082;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9083;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY = 9084;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9085;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT = 9086;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9087;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CLIENTUSERID = 9088;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLE = 9089;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_DISABLE = 9090;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT = 9091;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9092;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE = 9093;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_ID = 9094;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NAME = 9095;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NUMBER = 9096;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9097;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME = 9098;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9099;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9100;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9101;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE = 9102;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_ID = 9103;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NAME = 9104;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9105;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9106;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9107;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9108;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9109;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE = 9110;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE = 9111;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9112;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM = 9113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9114;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVETIME = 9115;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONNAME = 9116;

const int UA_NS0ID_ALARMCONDITIONTYPE_BRANCHID = 9117;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE = 9118;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_ID = 9119;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NAME = 9120;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9121;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9122;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9123;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9124;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9125;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9126;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY = 9127;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9128;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY = 9129;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9130;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT = 9131;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9132;

const int UA_NS0ID_ALARMCONDITIONTYPE_CLIENTUSERID = 9133;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLE = 9134;

const int UA_NS0ID_ALARMCONDITIONTYPE_DISABLE = 9135;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT = 9136;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9137;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE = 9138;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_ID = 9139;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NAME = 9140;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NUMBER = 9141;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9142;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME = 9143;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9144;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9145;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9146;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE = 9147;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_ID = 9148;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NAME = 9149;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9150;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9151;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9152;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9153;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9154;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE = 9155;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE = 9156;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9157;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM = 9158;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9159;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE = 9160;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_ID = 9161;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NAME = 9162;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NUMBER = 9163;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9164;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRANSITIONTIME = 9165;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9166;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRUESTATE = 9167;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_FALSESTATE = 9168;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE = 9169;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_ID = 9170;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NAME = 9171;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NUMBER = 9172;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9173;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9174;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9175;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRUESTATE = 9176;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_FALSESTATE = 9177;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE = 9178;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE = 9179;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9180;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9181;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9182;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9183;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION = 9184;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9185;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9186;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9187;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9188;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVETIME = 9189;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVE = 9211;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9212;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE = 9213;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9214;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDORSHELVED = 9215;

const int UA_NS0ID_ALARMCONDITIONTYPE_MAXTIMESHELVED = 9216;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONNAME = 9217;

const int UA_NS0ID_LIMITALARMTYPE_BRANCHID = 9218;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE = 9219;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_ID = 9220;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NAME = 9221;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9222;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9223;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9224;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9225;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9226;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9227;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY = 9228;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9229;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY = 9230;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9231;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT = 9232;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9233;

const int UA_NS0ID_LIMITALARMTYPE_CLIENTUSERID = 9234;

const int UA_NS0ID_LIMITALARMTYPE_ENABLE = 9235;

const int UA_NS0ID_LIMITALARMTYPE_DISABLE = 9236;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT = 9237;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9238;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE = 9239;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_ID = 9240;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NAME = 9241;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NUMBER = 9242;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9243;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9244;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9245;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9246;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9247;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE = 9248;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_ID = 9249;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9250;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9251;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9252;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9253;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9254;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9255;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9256;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE = 9257;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9258;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM = 9259;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9260;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE = 9261;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_ID = 9262;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NAME = 9263;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NUMBER = 9264;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9265;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9266;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9267;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9268;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9269;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE = 9270;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9271;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9272;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9273;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9274;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9275;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9276;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9277;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9278;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE = 9279;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9280;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9281;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9282;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9283;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9284;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9285;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9286;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9287;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9288;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9289;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9290;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9312;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9313;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9314;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9315;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDORSHELVED = 9316;

const int UA_NS0ID_LIMITALARMTYPE_MAXTIMESHELVED = 9317;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE = 9318;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE = 9319;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_ID = 9320;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NAME = 9321;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 9322;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9323;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION = 9324;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_ID = 9325;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NAME = 9326;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 9327;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 9328;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH = 9329;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH_STATENUMBER = 9330;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH = 9331;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH_STATENUMBER = 9332;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW = 9333;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW_STATENUMBER = 9334;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW = 9335;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW_STATENUMBER = 9336;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW = 9337;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW = 9338;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH = 9339;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH = 9340;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE = 9341;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTID = 9342;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9343;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENODE = 9344;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENAME = 9345;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_TIME = 9346;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9347;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOCALTIME = 9348;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MESSAGE = 9349;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITY = 9350;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9351;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BRANCHID = 9352;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RETAIN = 9353;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9354;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9355;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9356;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9357;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9358;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9359;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9360;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9361;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9362;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY = 9363;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9364;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9365;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9366;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT = 9367;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9368;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9369;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLE = 9370;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_DISABLE = 9371;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9372;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9373;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9374;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 9375;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9376;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9377;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9378;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9379;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9380;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9381;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9382;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9383;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9384;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9385;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9386;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9387;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9388;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9389;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9390;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9391;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9392;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9393;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9394;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9395;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM = 9396;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9397;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9398;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9399;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9400;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9401;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9402;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9403;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9404;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9405;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9406;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9407;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9408;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9409;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9410;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9411;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9412;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9413;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9414;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9415;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9416;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9417;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9418;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9419;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9420;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9421;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9422;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9423;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9424;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9425;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9426;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9427;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9449;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9450;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9451;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9452;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 9453;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 9454;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE = 9455;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE = 9456;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9457;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9458;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER = 9459;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9460;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION = 9461;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9462;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME = 9463;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER = 9464;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME = 9465;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 9478;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 9479;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLIMIT = 9480;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 9481;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE = 9482;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTID = 9483;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTTYPE = 9484;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENODE = 9485;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENAME = 9486;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_TIME = 9487;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RECEIVETIME = 9488;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOCALTIME = 9489;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MESSAGE = 9490;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITY = 9491;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 9492;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BRANCHID = 9493;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RETAIN = 9494;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 9495;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 9496;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 9497;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 9498;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9499;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9500;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9501;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 9502;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 9503;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY = 9504;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 9505;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 9506;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9507;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT = 9508;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 9509;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 9510;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLE = 9511;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_DISABLE = 9512;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 9513;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9514;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 9515;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 9516;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 9517;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 9518;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 9519;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 9520;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9521;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9522;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9523;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 9524;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 9525;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 9526;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 9527;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 9528;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 9529;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9530;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9531;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9532;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9533;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9534;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 9535;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9536;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM = 9537;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 9538;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 9539;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 9540;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 9541;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 9542;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9543;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9544;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9545;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 9546;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 9547;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 9548;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 9549;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 9550;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9551;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9552;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9553;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9554;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9555;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9556;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 9557;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9558;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9559;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9560;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9561;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9562;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9563;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9564;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9565;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9566;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9567;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9568;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 9590;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9591;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9592;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9593;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 9594;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 9595;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE = 9596;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE = 9597;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9598;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9599;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER = 9600;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9601;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION = 9602;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9603;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME = 9604;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER = 9605;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME = 9606;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 9619;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 9620;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLIMIT = 9621;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 9622;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE = 9623;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 9624;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 9625;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 9626;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 9627;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 9628;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 9629;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 9630;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 9631;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 9632;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 9633;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 9634;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 9635;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 9636;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 9637;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 9638;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER = 9639;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9640;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9641;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9642;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE = 9643;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE = 9644;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 9645;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP = 9646;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 9647;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9648;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 9649;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP = 9650;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 9651;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 9652;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 9653;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 9654;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9655;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 9656;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 9657;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 9658;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 9659;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 9660;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 9661;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9662;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9663;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9664;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE = 9665;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE = 9666;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 9667;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 9668;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME = 9669;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER = 9670;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9671;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9672;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9673;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9674;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9675;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 9676;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9677;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 9678;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS = 9679;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 9680;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 9681;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 9682;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 9683;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9684;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9685;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9686;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE = 9687;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE = 9688;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 9689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 9690;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME = 9691;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9692;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9693;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9694;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9695;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9696;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9697;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 9698;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9699;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9700;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9701;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9702;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9703;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9704;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9705;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9706;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9707;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9708;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9709;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE = 9731;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9732;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9733;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9734;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED = 9735;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 9736;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE = 9737;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE = 9738;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9739;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9740;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER = 9741;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9742;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION = 9743;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9744;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME = 9745;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER = 9746;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME = 9747;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 9760;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 9761;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 9762;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 9763;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE = 9764;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 9765;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 9766;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 9767;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 9768;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_TIME = 9769;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 9770;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 9771;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 9772;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 9773;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 9774;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 9775;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 9776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 9777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 9778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 9779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 9780;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9782;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9783;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE = 9784;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE = 9785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 9786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP = 9787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 9788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 9790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP = 9791;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 9792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 9793;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 9794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 9795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 9797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 9798;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 9799;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 9800;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 9801;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 9802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9804;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 9806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 9807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 9808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 9809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 9810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 9811;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9813;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 9817;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9818;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 9819;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS = 9820;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 9821;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 9822;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 9823;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 9824;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9825;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9826;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9827;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 9828;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE = 9829;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 9830;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 9831;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 9832;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9833;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9834;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9835;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9836;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9837;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9838;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 9839;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9840;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9841;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9842;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9843;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9844;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9845;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9846;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9847;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9848;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9849;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9850;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE = 9872;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9873;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9874;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 9875;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 9876;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 9877;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE = 9878;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE = 9879;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9880;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9881;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER = 9882;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9883;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION = 9884;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9885;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME = 9886;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER = 9887;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME = 9888;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 9901;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 9902;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 9903;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 9904;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 9905;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE = 9906;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTID = 9907;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9908;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENODE = 9909;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENAME = 9910;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_TIME = 9911;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9912;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOCALTIME = 9913;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MESSAGE = 9914;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITY = 9915;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9916;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BRANCHID = 9917;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RETAIN = 9918;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9919;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9920;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9921;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9922;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9923;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9924;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9925;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9926;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9927;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY = 9928;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9929;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9930;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9931;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT = 9932;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9933;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9934;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLE = 9935;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_DISABLE = 9936;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9937;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9938;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9939;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 9940;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9941;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9942;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9943;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9944;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9945;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9946;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9947;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9948;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9949;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9950;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9951;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9952;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9953;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9954;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9955;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9956;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9957;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9958;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9959;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9960;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM = 9961;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9962;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9963;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9964;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9965;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9966;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9967;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9968;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9969;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9970;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9971;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9972;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9973;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9974;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9975;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9976;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9977;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 9978;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9979;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9980;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9981;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9982;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9983;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9984;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9985;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 9986;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9987;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9988;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9989;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9990;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 9991;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9992;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 10014;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10015;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10016;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10017;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 10018;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 10019;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE = 10020;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_ID = 10021;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NAME = 10022;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NUMBER = 10023;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME = 10024;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME = 10025;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME = 10026;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10027;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10028;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE = 10029;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_ID = 10030;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NAME = 10031;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NUMBER = 10032;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME = 10033;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10034;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME = 10035;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRUESTATE = 10036;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_FALSESTATE = 10037;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE = 10038;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_ID = 10039;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NAME = 10040;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NUMBER = 10041;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME = 10042;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRANSITIONTIME = 10043;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME = 10044;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRUESTATE = 10045;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_FALSESTATE = 10046;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE = 10047;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_ID = 10048;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NAME = 10049;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NUMBER = 10050;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME = 10051;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRANSITIONTIME = 10052;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME = 10053;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRUESTATE = 10054;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_FALSESTATE = 10055;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 10056;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 10057;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLIMIT = 10058;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 10059;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE = 10060;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTID = 10061;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTTYPE = 10062;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENODE = 10063;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENAME = 10064;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_TIME = 10065;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RECEIVETIME = 10066;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOCALTIME = 10067;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MESSAGE = 10068;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITY = 10069;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 10070;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BRANCHID = 10071;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RETAIN = 10072;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 10073;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 10074;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 10075;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 10076;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10077;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10078;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10079;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 10080;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 10081;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY = 10082;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 10083;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 10084;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10085;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT = 10086;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 10087;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 10088;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLE = 10089;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_DISABLE = 10090;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 10091;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10092;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 10093;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10094;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 10095;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 10096;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 10097;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 10098;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10099;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10100;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10101;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 10102;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 10103;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 10104;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 10105;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 10106;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 10107;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10108;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10109;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10110;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10111;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10112;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 10113;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10114;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM = 10115;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 10116;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 10117;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 10118;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 10119;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 10120;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10121;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10122;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10123;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 10124;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 10125;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 10126;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 10127;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 10128;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10129;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10130;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10131;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10132;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10133;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10134;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 10135;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10136;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10137;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10138;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10139;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10140;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10141;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10142;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10143;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10144;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10145;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10146;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 10168;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10169;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10170;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10171;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 10172;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 10173;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE = 10174;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_ID = 10175;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NAME = 10176;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NUMBER = 10177;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME = 10178;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME = 10179;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME = 10180;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10181;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10182;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE = 10183;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_ID = 10184;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NAME = 10185;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NUMBER = 10186;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME = 10187;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10188;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME = 10189;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRUESTATE = 10190;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_FALSESTATE = 10191;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE = 10192;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_ID = 10193;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NAME = 10194;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NUMBER = 10195;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME = 10196;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRANSITIONTIME = 10197;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME = 10198;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRUESTATE = 10199;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_FALSESTATE = 10200;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE = 10201;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_ID = 10202;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NAME = 10203;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NUMBER = 10204;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME = 10205;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRANSITIONTIME = 10206;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME = 10207;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRUESTATE = 10208;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_FALSESTATE = 10209;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 10210;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 10211;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLIMIT = 10212;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 10213;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE = 10214;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 10215;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 10216;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 10217;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 10218;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 10219;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 10220;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 10221;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 10222;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 10223;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 10224;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 10225;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 10226;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 10227;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 10228;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 10229;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER = 10230;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10231;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10232;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10233;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE = 10234;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE = 10235;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 10236;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP = 10237;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 10238;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10239;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 10240;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP = 10241;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 10242;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 10243;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 10244;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 10245;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10246;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 10247;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10248;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 10249;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 10250;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 10251;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 10252;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10253;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10254;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10255;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE = 10256;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE = 10257;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 10258;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 10259;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME = 10260;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER = 10261;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10262;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10263;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10264;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10265;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10266;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 10267;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10268;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 10269;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS = 10270;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 10271;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 10272;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 10273;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 10274;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10275;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10276;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE = 10278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE = 10279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 10280;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 10281;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME = 10282;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10283;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10284;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10285;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10286;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10287;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10288;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 10289;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10290;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10291;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10292;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10293;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10294;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10295;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10296;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10297;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10298;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10299;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10300;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE = 10322;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10323;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10324;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10325;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED = 10326;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 10327;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE = 10328;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_ID = 10329;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NAME = 10330;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NUMBER = 10331;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME = 10332;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME = 10333;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME = 10334;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10335;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10336;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE = 10337;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_ID = 10338;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NAME = 10339;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NUMBER = 10340;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME = 10341;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10342;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME = 10343;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRUESTATE = 10344;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_FALSESTATE = 10345;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE = 10346;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_ID = 10347;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NAME = 10348;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NUMBER = 10349;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME = 10350;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRANSITIONTIME = 10351;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME = 10352;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRUESTATE = 10353;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_FALSESTATE = 10354;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE = 10355;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_ID = 10356;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NAME = 10357;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NUMBER = 10358;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME = 10359;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRANSITIONTIME = 10360;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME = 10361;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRUESTATE = 10362;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_FALSESTATE = 10363;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 10364;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 10365;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 10366;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 10367;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE = 10368;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 10369;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 10370;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 10371;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 10372;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_TIME = 10373;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 10374;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 10375;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 10376;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 10377;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 10378;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 10379;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 10380;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 10381;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 10382;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 10383;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 10384;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10385;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10386;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10387;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE = 10388;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE = 10389;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 10390;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP = 10391;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 10392;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10393;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 10394;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP = 10395;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 10396;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 10397;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 10398;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 10399;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10400;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 10401;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10402;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 10403;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 10404;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 10405;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 10406;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10407;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10408;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10409;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 10410;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 10411;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 10412;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 10413;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 10414;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 10415;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10416;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10417;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10418;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10419;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10420;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 10421;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10422;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 10423;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS = 10424;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 10425;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 10426;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 10427;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 10428;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10429;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10430;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10431;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 10432;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE = 10433;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 10434;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 10435;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 10436;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10437;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10438;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10439;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10440;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10441;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10442;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 10443;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10444;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10445;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10446;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10447;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10448;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10449;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10450;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10451;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10452;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10453;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10454;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE = 10476;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10477;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10478;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10479;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 10480;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 10481;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE = 10482;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_ID = 10483;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NAME = 10484;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NUMBER = 10485;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME = 10486;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME = 10487;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME = 10488;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10489;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10490;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE = 10491;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_ID = 10492;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NAME = 10493;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NUMBER = 10494;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME = 10495;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10496;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME = 10497;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRUESTATE = 10498;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_FALSESTATE = 10499;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE = 10500;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_ID = 10501;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NAME = 10502;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NUMBER = 10503;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME = 10504;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRANSITIONTIME = 10505;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME = 10506;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRUESTATE = 10507;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_FALSESTATE = 10508;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE = 10509;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_ID = 10510;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NAME = 10511;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NUMBER = 10512;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME = 10513;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRANSITIONTIME = 10514;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME = 10515;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRUESTATE = 10516;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_FALSESTATE = 10517;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 10518;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 10519;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 10520;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 10521;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 10522;

const int UA_NS0ID_DISCRETEALARMTYPE = 10523;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTID = 10524;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTTYPE = 10525;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENODE = 10526;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENAME = 10527;

const int UA_NS0ID_DISCRETEALARMTYPE_TIME = 10528;

const int UA_NS0ID_DISCRETEALARMTYPE_RECEIVETIME = 10529;

const int UA_NS0ID_DISCRETEALARMTYPE_LOCALTIME = 10530;

const int UA_NS0ID_DISCRETEALARMTYPE_MESSAGE = 10531;

const int UA_NS0ID_DISCRETEALARMTYPE_SEVERITY = 10532;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONNAME = 10533;

const int UA_NS0ID_DISCRETEALARMTYPE_BRANCHID = 10534;

const int UA_NS0ID_DISCRETEALARMTYPE_RETAIN = 10535;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE = 10536;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_ID = 10537;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NAME = 10538;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NUMBER = 10539;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10540;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10541;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10542;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRUESTATE = 10543;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_FALSESTATE = 10544;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY = 10545;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY_SOURCETIMESTAMP = 10546;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY = 10547;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10548;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT = 10549;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT_SOURCETIMESTAMP = 10550;

const int UA_NS0ID_DISCRETEALARMTYPE_CLIENTUSERID = 10551;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLE = 10552;

const int UA_NS0ID_DISCRETEALARMTYPE_DISABLE = 10553;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT = 10554;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10555;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH = 10556;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10557;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE = 10558;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_ID = 10559;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NAME = 10560;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NUMBER = 10561;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10562;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10563;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10564;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRUESTATE = 10565;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_FALSESTATE = 10566;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE = 10567;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_ID = 10568;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NAME = 10569;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NUMBER = 10570;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10571;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10572;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10573;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10574;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10575;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE = 10576;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10577;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM = 10578;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM_INPUTARGUMENTS = 10579;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE = 10580;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_ID = 10581;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NAME = 10582;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NUMBER = 10583;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10584;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10585;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10586;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRUESTATE = 10587;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_FALSESTATE = 10588;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE = 10589;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_ID = 10590;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NAME = 10591;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10592;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10593;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10594;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10595;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10596;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10597;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE = 10598;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10599;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10600;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10601;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10602;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10603;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10604;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10605;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10606;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10607;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10608;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10609;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVE = 10631;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10632;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10633;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10634;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDORSHELVED = 10635;

const int UA_NS0ID_DISCRETEALARMTYPE_MAXTIMESHELVED = 10636;

const int UA_NS0ID_OFFNORMALALARMTYPE = 10637;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTID = 10638;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTTYPE = 10639;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENODE = 10640;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENAME = 10641;

const int UA_NS0ID_OFFNORMALALARMTYPE_TIME = 10642;

const int UA_NS0ID_OFFNORMALALARMTYPE_RECEIVETIME = 10643;

const int UA_NS0ID_OFFNORMALALARMTYPE_LOCALTIME = 10644;

const int UA_NS0ID_OFFNORMALALARMTYPE_MESSAGE = 10645;

const int UA_NS0ID_OFFNORMALALARMTYPE_SEVERITY = 10646;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONNAME = 10647;

const int UA_NS0ID_OFFNORMALALARMTYPE_BRANCHID = 10648;

const int UA_NS0ID_OFFNORMALALARMTYPE_RETAIN = 10649;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE = 10650;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_ID = 10651;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 10652;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 10653;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10654;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10655;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10656;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 10657;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 10658;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY = 10659;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 10660;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY = 10661;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10662;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT = 10663;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 10664;

const int UA_NS0ID_OFFNORMALALARMTYPE_CLIENTUSERID = 10665;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLE = 10666;

const int UA_NS0ID_OFFNORMALALARMTYPE_DISABLE = 10667;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT = 10668;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10669;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH = 10670;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10671;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE = 10672;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_ID = 10673;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NAME = 10674;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 10675;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10676;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10677;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10678;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 10679;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 10680;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE = 10681;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 10682;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 10683;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 10684;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10685;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10686;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10687;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10688;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10689;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE = 10690;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10691;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM = 10692;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 10693;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE = 10694;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_ID = 10695;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NAME = 10696;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 10697;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10698;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10699;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10700;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 10701;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 10702;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE = 10703;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 10704;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 10705;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10706;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10707;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10708;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10709;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10710;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10711;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE = 10712;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10713;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10714;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10715;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10716;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10717;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10718;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10719;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10720;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10721;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10722;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10723;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 10745;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10746;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10747;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10748;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 10749;

const int UA_NS0ID_OFFNORMALALARMTYPE_MAXTIMESHELVED = 10750;

const int UA_NS0ID_TRIPALARMTYPE = 10751;

const int UA_NS0ID_TRIPALARMTYPE_EVENTID = 10752;

const int UA_NS0ID_TRIPALARMTYPE_EVENTTYPE = 10753;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENODE = 10754;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENAME = 10755;

const int UA_NS0ID_TRIPALARMTYPE_TIME = 10756;

const int UA_NS0ID_TRIPALARMTYPE_RECEIVETIME = 10757;

const int UA_NS0ID_TRIPALARMTYPE_LOCALTIME = 10758;

const int UA_NS0ID_TRIPALARMTYPE_MESSAGE = 10759;

const int UA_NS0ID_TRIPALARMTYPE_SEVERITY = 10760;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONNAME = 10761;

const int UA_NS0ID_TRIPALARMTYPE_BRANCHID = 10762;

const int UA_NS0ID_TRIPALARMTYPE_RETAIN = 10763;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE = 10764;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_ID = 10765;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NAME = 10766;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NUMBER = 10767;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10768;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10769;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10770;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRUESTATE = 10771;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_FALSESTATE = 10772;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY = 10773;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY_SOURCETIMESTAMP = 10774;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY = 10775;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10776;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT = 10777;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT_SOURCETIMESTAMP = 10778;

const int UA_NS0ID_TRIPALARMTYPE_CLIENTUSERID = 10779;

const int UA_NS0ID_TRIPALARMTYPE_ENABLE = 10780;

const int UA_NS0ID_TRIPALARMTYPE_DISABLE = 10781;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT = 10782;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10783;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH = 10784;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10785;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE = 10786;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_ID = 10787;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NAME = 10788;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NUMBER = 10789;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10790;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10791;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10792;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRUESTATE = 10793;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_FALSESTATE = 10794;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE = 10795;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_ID = 10796;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NAME = 10797;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NUMBER = 10798;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10799;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10800;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10801;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10802;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10803;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE = 10804;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10805;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM = 10806;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM_INPUTARGUMENTS = 10807;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE = 10808;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_ID = 10809;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NAME = 10810;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NUMBER = 10811;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10812;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10813;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10814;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRUESTATE = 10815;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_FALSESTATE = 10816;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE = 10817;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_ID = 10818;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NAME = 10819;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10820;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10821;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10822;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 10823;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10824;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10825;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE = 10826;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10827;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10828;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10829;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10830;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 10831;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10832;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10833;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10834;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10835;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 10836;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10837;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVE = 10859;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10860;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10861;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 10862;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDORSHELVED = 10863;

const int UA_NS0ID_TRIPALARMTYPE_MAXTIMESHELVED = 10864;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE = 11093;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTID = 11094;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTTYPE = 11095;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENODE = 11096;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENAME = 11097;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_TIME = 11098;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_RECEIVETIME = 11099;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_LOCALTIME = 11100;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_MESSAGE = 11101;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SEVERITY = 11102;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_ACTIONTIMESTAMP = 11103;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_STATUS = 11104;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SERVERID = 11105;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTAUDITENTRYID = 11106;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTUSERID = 11107;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_METHODID = 11108;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_INPUTARGUMENTS = 11109;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRUESTATE = 11110;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_FALSESTATE = 11111;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSID = 11112;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSNAME = 11113;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSID = 11114;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSNAME = 11115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSID = 11116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSNAME = 11117;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSID = 11118;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSNAME = 11119;

const int UA_NS0ID_ALARMCONDITIONTYPE_INPUTNODE = 11120;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSID = 11121;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSNAME = 11122;

const int UA_NS0ID_LIMITALARMTYPE_INPUTNODE = 11123;

const int UA_NS0ID_LIMITALARMTYPE_HIGHHIGHLIMIT = 11124;

const int UA_NS0ID_LIMITALARMTYPE_HIGHLIMIT = 11125;

const int UA_NS0ID_LIMITALARMTYPE_LOWLIMIT = 11126;

const int UA_NS0ID_LIMITALARMTYPE_LOWLOWLIMIT = 11127;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11128;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11129;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_INPUTNODE = 11130;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11131;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11132;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_INPUTNODE = 11133;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11134;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11135;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11136;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11137;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11138;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11139;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11140;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11141;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_INPUTNODE = 11142;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11143;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11144;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_INPUTNODE = 11145;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11146;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11147;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11148;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11149;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11150;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11151;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSID = 11152;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSNAME = 11153;

const int UA_NS0ID_DISCRETEALARMTYPE_INPUTNODE = 11154;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSID = 11155;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11156;

const int UA_NS0ID_OFFNORMALALARMTYPE_INPUTNODE = 11157;

const int UA_NS0ID_OFFNORMALALARMTYPE_NORMALSTATE = 11158;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSID = 11159;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSNAME = 11160;

const int UA_NS0ID_TRIPALARMTYPE_INPUTNODE = 11161;

const int UA_NS0ID_TRIPALARMTYPE_NORMALSTATE = 11162;

const int UA_NS0ID_BASECONDITIONCLASSTYPE = 11163;

const int UA_NS0ID_PROCESSCONDITIONCLASSTYPE = 11164;

const int UA_NS0ID_MAINTENANCECONDITIONCLASSTYPE = 11165;

const int UA_NS0ID_SYSTEMCONDITIONCLASSTYPE = 11166;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD = 11168;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATABAD = 11169;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATAGOOD = 11170;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION = 11171;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 11172;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE = 11187;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_TREATUNCERTAINASBAD = 11188;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATABAD = 11189;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATAGOOD = 11190;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_USESLOPEDEXTRAPOLATION = 11191;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES = 11192;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYDATACAPABILITY = 11193;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTDATACAPABILITY = 11196;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEDATACAPABILITY = 11197;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEDATACAPABILITY = 11198;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETERAWCAPABILITY = 11199;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEATTIMECAPABILITY = 11200;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_AGGREGATEFUNCTIONS = 11201;

const int UA_NS0ID_HACONFIGURATION = 11202;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION = 11203;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD = 11204;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATABAD = 11205;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATAGOOD = 11206;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION = 11207;

const int UA_NS0ID_HACONFIGURATION_STEPPED = 11208;

const int UA_NS0ID_HACONFIGURATION_DEFINITION = 11209;

const int UA_NS0ID_HACONFIGURATION_MAXTIMEINTERVAL = 11210;

const int UA_NS0ID_HACONFIGURATION_MINTIMEINTERVAL = 11211;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATION = 11212;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATIONFORMAT = 11213;

const int UA_NS0ID_ANNOTATIONS = 11214;

const int UA_NS0ID_HISTORICALEVENTFILTER = 11215;

const int UA_NS0ID_MODIFICATIONINFO = 11216;

const int UA_NS0ID_HISTORYMODIFIEDDATA = 11217;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTXML = 11218;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTXML = 11219;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTBINARY = 11226;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTBINARY = 11227;

const int UA_NS0ID_HISTORYUPDATETYPE = 11234;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE = 11238;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_DEFINITION = 11239;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEPRECISION = 11240;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_ENUMVALUES = 11241;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYEVENTSCAPABILITY = 11242;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNDATAVALUES = 11268;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNEVENTVALUES = 11269;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTANNOTATIONCAPABILITY = 11270;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNDATAVALUES = 11273;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNEVENTVALUES = 11274;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTANNOTATIONCAPABILITY = 11275;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTEVENTCAPABILITY = 11278;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEEVENTCAPABILITY = 11279;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEEVENTCAPABILITY = 11280;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTEVENTCAPABILITY = 11281;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEEVENTCAPABILITY = 11282;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEEVENTCAPABILITY = 11283;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE2 = 11285;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM2 = 11286;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM2 = 11287;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE2 = 11288;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY2 = 11292;

const int UA_NS0ID_PERFORMUPDATETYPE = 11293;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS = 11295;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTXML = 11296;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTBINARY = 11300;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL2 = 11304;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME2 = 11305;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME2 = 11306;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATEZERO = 11307;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATENONZERO = 11308;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_CURRENTSERVERID = 11312;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANTSERVERARRAY = 11313;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERURIARRAY = 11314;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER = 11322;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER = 11323;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED_TRANSITIONNUMBER = 11324;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER = 11325;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED_TRANSITIONNUMBER = 11326;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER = 11327;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW_TRANSITIONNUMBER = 11340;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW_TRANSITIONNUMBER = 11341;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH_TRANSITIONNUMBER = 11342;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH_TRANSITIONNUMBER = 11343;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONSAMPLE = 11426;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONPOPULATION = 11427;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCESAMPLE = 11428;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCEPOPULATION = 11429;

const int UA_NS0ID_ENUMSTRINGS = 11432;

const int UA_NS0ID_VALUEASTEXT = 11433;

const int UA_NS0ID_PROGRESSEVENTTYPE = 11436;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTID = 11437;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTTYPE = 11438;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENODE = 11439;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENAME = 11440;

const int UA_NS0ID_PROGRESSEVENTTYPE_TIME = 11441;

const int UA_NS0ID_PROGRESSEVENTTYPE_RECEIVETIME = 11442;

const int UA_NS0ID_PROGRESSEVENTTYPE_LOCALTIME = 11443;

const int UA_NS0ID_PROGRESSEVENTTYPE_MESSAGE = 11444;

const int UA_NS0ID_PROGRESSEVENTTYPE_SEVERITY = 11445;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE = 11446;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTID = 11447;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTTYPE = 11448;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENODE = 11449;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENAME = 11450;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_TIME = 11451;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_RECEIVETIME = 11452;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_LOCALTIME = 11453;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_MESSAGE = 11454;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SEVERITY = 11455;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11456;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11457;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11458;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11459;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME = 11460;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEASTEXT = 11461;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME = 11462;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME = 11463;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11464;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11465;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11466;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11467;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11468;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11469;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11470;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11471;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11472;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11473;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11474;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11475;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11476;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11477;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11478;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11479;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11480;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11481;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11482;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11483;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SECURECHANNELID = 11485;

const int UA_NS0ID_OPTIONSETTYPE = 11487;

const int UA_NS0ID_OPTIONSETTYPE_OPTIONSETVALUES = 11488;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS = 11489;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_INPUTARGUMENTS = 11490;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11491;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS = 11492;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_INPUTARGUMENTS = 11493;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11494;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE = 11495;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_INPUTARGUMENTS = 11496;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_OUTPUTARGUMENTS = 11497;

const int UA_NS0ID_MAXSTRINGLENGTH = 11498;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFARCHIVE = 11499;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFONLINEARCHIVE = 11500;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEEVENTCAPABILITY = 11501;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEEVENTCAPABILITY = 11502;

const int UA_NS0ID_HACONFIGURATION_STARTOFARCHIVE = 11503;

const int UA_NS0ID_HACONFIGURATION_STARTOFONLINEARCHIVE = 11504;

const int UA_NS0ID_AGGREGATEFUNCTION_STARTBOUND = 11505;

const int UA_NS0ID_AGGREGATEFUNCTION_ENDBOUND = 11506;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTABOUNDS = 11507;

const int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER = 11508;

const int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER = 11510;

const int UA_NS0ID_MAXARRAYLENGTH = 11512;

const int UA_NS0ID_ENGINEERINGUNITS = 11513;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXARRAYLENGTH = 11514;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11515;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS = 11516;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD = 11517;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE = 11519;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL = 11521;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE = 11522;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES = 11523;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS = 11524;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT = 11525;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL = 11526;

const int UA_NS0ID_SERVERTYPE_NAMESPACES = 11527;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXARRAYLENGTH = 11549;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSTRINGLENGTH = 11550;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS = 11551;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREAD = 11552;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERWRITE = 11554;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERMETHODCALL = 11556;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERBROWSE = 11557;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREGISTERNODES = 11558;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS = 11559;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT = 11560;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL = 11561;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_VENDORCAPABILITY_PLACEHOLDER = 11562;

const int UA_NS0ID_OPERATIONLIMITSTYPE = 11564;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREAD = 11565;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERWRITE = 11567;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERMETHODCALL = 11569;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERBROWSE = 11570;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREGISTERNODES = 11571;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS = 11572;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERNODEMANAGEMENT = 11573;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXMONITOREDITEMSPERCALL = 11574;

const int UA_NS0ID_FILETYPE = 11575;

const int UA_NS0ID_FILETYPE_SIZE = 11576;

const int UA_NS0ID_FILETYPE_OPENCOUNT = 11579;

const int UA_NS0ID_FILETYPE_OPEN = 11580;

const int UA_NS0ID_FILETYPE_OPEN_INPUTARGUMENTS = 11581;

const int UA_NS0ID_FILETYPE_OPEN_OUTPUTARGUMENTS = 11582;

const int UA_NS0ID_FILETYPE_CLOSE = 11583;

const int UA_NS0ID_FILETYPE_CLOSE_INPUTARGUMENTS = 11584;

const int UA_NS0ID_FILETYPE_READ = 11585;

const int UA_NS0ID_FILETYPE_READ_INPUTARGUMENTS = 11586;

const int UA_NS0ID_FILETYPE_READ_OUTPUTARGUMENTS = 11587;

const int UA_NS0ID_FILETYPE_WRITE = 11588;

const int UA_NS0ID_FILETYPE_WRITE_INPUTARGUMENTS = 11589;

const int UA_NS0ID_FILETYPE_GETPOSITION = 11590;

const int UA_NS0ID_FILETYPE_GETPOSITION_INPUTARGUMENTS = 11591;

const int UA_NS0ID_FILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11592;

const int UA_NS0ID_FILETYPE_SETPOSITION = 11593;

const int UA_NS0ID_FILETYPE_SETPOSITION_INPUTARGUMENTS = 11594;

const int UA_NS0ID_ADDRESSSPACEFILETYPE = 11595;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SIZE = 11596;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPENCOUNT = 11599;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN = 11600;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_INPUTARGUMENTS = 11601;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_OUTPUTARGUMENTS = 11602;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE = 11603;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE_INPUTARGUMENTS = 11604;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ = 11605;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_INPUTARGUMENTS = 11606;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_OUTPUTARGUMENTS = 11607;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE = 11608;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE_INPUTARGUMENTS = 11609;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION = 11610;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_INPUTARGUMENTS = 11611;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11612;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION = 11613;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION_INPUTARGUMENTS = 11614;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_EXPORTNAMESPACE = 11615;

const int UA_NS0ID_NAMESPACEMETADATATYPE = 11616;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEURI = 11617;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEVERSION = 11618;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEPUBLICATIONDATE = 11619;

const int UA_NS0ID_NAMESPACEMETADATATYPE_ISNAMESPACESUBSET = 11620;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNODEIDTYPES = 11621;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNUMERICNODEIDRANGE = 11622;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICSTRINGNODEIDPATTERN = 11623;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE = 11624;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SIZE = 11625;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPENCOUNT = 11628;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN = 11629;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_INPUTARGUMENTS = 11630;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS = 11631;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE = 11632;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE_INPUTARGUMENTS = 11633;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ = 11634;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_INPUTARGUMENTS = 11635;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_OUTPUTARGUMENTS = 11636;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE = 11637;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE_INPUTARGUMENTS = 11638;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION = 11639;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS = 11640;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS = 11641;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION = 11642;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS = 11643;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_EXPORTNAMESPACE = 11644;

const int UA_NS0ID_NAMESPACESTYPE = 11645;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER = 11646;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEURI = 11647;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEVERSION = 11648;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEPUBLICATIONDATE = 11649;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_ISNAMESPACESUBSET = 11650;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNODEIDTYPES = 11651;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNUMERICNODEIDRANGE = 11652;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICSTRINGNODEIDPATTERN = 11653;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE = 11654;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SIZE = 11655;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPENCOUNT = 11658;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN = 11659;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_INPUTARGUMENTS = 11660;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS = 11661;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE = 11662;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE_INPUTARGUMENTS = 11663;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ = 11664;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_INPUTARGUMENTS = 11665;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_OUTPUTARGUMENTS = 11666;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE = 11667;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE_INPUTARGUMENTS = 11668;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION = 11669;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS = 11670;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS = 11671;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION = 11672;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS = 11673;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_EXPORTNAMESPACE = 11674;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SYSTEMSTATE = 11696;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLEDMONITOREDITEMSCOUNT = 11697;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_MAXSAMPLEDMONITOREDITEMSCOUNT = 11698;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMSSAMPLINGCOUNT = 11699;

const int UA_NS0ID_OPTIONSETTYPE_BITMASK = 11701;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXARRAYLENGTH = 11702;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS = 11704;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD = 11705;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE = 11707;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL = 11709;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE = 11710;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES = 11711;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS = 11712;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT = 11713;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL = 11714;

const int UA_NS0ID_SERVER_NAMESPACES = 11715;

const int UA_NS0ID_BITFIELDMASKDATATYPE = 11737;

const int UA_NS0ID_OPENMETHODTYPE = 11738;

const int UA_NS0ID_OPENMETHODTYPE_INPUTARGUMENTS = 11739;

const int UA_NS0ID_OPENMETHODTYPE_OUTPUTARGUMENTS = 11740;

const int UA_NS0ID_CLOSEMETHODTYPE = 11741;

const int UA_NS0ID_CLOSEMETHODTYPE_INPUTARGUMENTS = 11742;

const int UA_NS0ID_READMETHODTYPE = 11743;

const int UA_NS0ID_READMETHODTYPE_INPUTARGUMENTS = 11744;

const int UA_NS0ID_READMETHODTYPE_OUTPUTARGUMENTS = 11745;

const int UA_NS0ID_WRITEMETHODTYPE = 11746;

const int UA_NS0ID_WRITEMETHODTYPE_INPUTARGUMENTS = 11747;

const int UA_NS0ID_GETPOSITIONMETHODTYPE = 11748;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11749;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_OUTPUTARGUMENTS = 11750;

const int UA_NS0ID_SETPOSITIONMETHODTYPE = 11751;

const int UA_NS0ID_SETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11752;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE = 11753;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTID = 11754;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTTYPE = 11755;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENODE = 11756;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENAME = 11757;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_TIME = 11758;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RECEIVETIME = 11759;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LOCALTIME = 11760;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MESSAGE = 11761;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SEVERITY = 11762;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSID = 11763;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11764;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONNAME = 11765;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_BRANCHID = 11766;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RETAIN = 11767;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE = 11768;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_ID = 11769;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 11770;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 11771;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 11772;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 11773;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 11774;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 11775;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 11776;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY = 11777;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 11778;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY = 11779;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 11780;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT = 11781;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 11782;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CLIENTUSERID = 11783;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_DISABLE = 11784;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLE = 11785;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT = 11786;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 11787;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH = 11788;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 11789;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE = 11790;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_ID = 11791;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NAME = 11792;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 11793;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 11794;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 11795;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 11796;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 11797;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 11798;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE = 11799;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 11800;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 11801;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 11802;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 11803;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 11804;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 11805;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 11806;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 11807;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE = 11808;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 11809;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM = 11810;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 11811;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE = 11812;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_ID = 11813;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NAME = 11814;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 11815;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 11816;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 11817;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 11818;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 11819;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 11820;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_INPUTNODE = 11821;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE = 11822;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 11823;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 11824;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 11825;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 11826;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 11827;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 11828;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 11829;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 11830;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE = 11831;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 11832;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 11833;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 11834;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 11835;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 11836;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 11837;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 11838;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 11839;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 11840;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 11841;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 11842;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 11843;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 11844;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 11845;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 11846;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 11847;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 11848;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MAXTIMESHELVED = 11849;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_NORMALSTATE = 11850;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_COMMENT = 11851;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SELECTEDRESPONSE = 11852;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_COMMENT = 11853;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_COMMENT = 11854;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SHELVINGTIME = 11855;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE = 11856;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTID = 11857;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 11858;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 11859;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 11860;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TIME = 11861;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 11862;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 11863;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_MESSAGE = 11864;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SEVERITY = 11865;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_ACTIONTIMESTAMP = 11866;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_STATUS = 11867;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SERVERID = 11868;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTAUDITENTRYID = 11869;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTUSERID = 11870;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_METHODID = 11871;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_INPUTARGUMENTS = 11872;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_OLDSTATEID = 11873;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_NEWSTATEID = 11874;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TRANSITIONNUMBER = 11875;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATEFUNCTIONS = 11876;

const int UA_NS0ID_HACONFIGURATION_AGGREGATEFUNCTIONS = 11877;

const int UA_NS0ID_NODECLASS_ENUMVALUES = 11878;

const int UA_NS0ID_INSTANCENODE = 11879;

const int UA_NS0ID_TYPENODE = 11880;

const int UA_NS0ID_NODEATTRIBUTESMASK_ENUMVALUES = 11881;

const int UA_NS0ID_BROWSERESULTMASK_ENUMVALUES = 11883;

const int UA_NS0ID_HISTORYUPDATETYPE_ENUMVALUES = 11884;

const int UA_NS0ID_PERFORMUPDATETYPE_ENUMVALUES = 11885;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTXML = 11887;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTXML = 11888;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTBINARY = 11889;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTBINARY = 11890;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT = 11891;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNAUTHORIZEDREQUESTCOUNT = 11892;

const int UA_NS0ID_OPENFILEMODE = 11939;

const int UA_NS0ID_OPENFILEMODE_ENUMVALUES = 11940;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK = 11941;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK_ENUMVALUES = 11942;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE = 11943;

const int UA_NS0ID_NETWORKGROUPDATATYPE = 11944;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE = 11945;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_REDUNDANCYSUPPORT = 11946;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERURIARRAY = 11947;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERNETWORKGROUPS = 11948;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTXML = 11949;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTXML = 11950;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE = 11951;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION = 11952;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT = 11953;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE = 11954;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION = 11955;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT = 11956;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTBINARY = 11957;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTBINARY = 11958;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE = 11959;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION = 11960;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT = 11961;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE = 11962;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION = 11963;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT = 11964;

const int UA_NS0ID_ARRAYITEMTYPE = 12021;

const int UA_NS0ID_ARRAYITEMTYPE_DEFINITION = 12022;

const int UA_NS0ID_ARRAYITEMTYPE_VALUEPRECISION = 12023;

const int UA_NS0ID_ARRAYITEMTYPE_INSTRUMENTRANGE = 12024;

const int UA_NS0ID_ARRAYITEMTYPE_EURANGE = 12025;

const int UA_NS0ID_ARRAYITEMTYPE_ENGINEERINGUNITS = 12026;

const int UA_NS0ID_ARRAYITEMTYPE_TITLE = 12027;

const int UA_NS0ID_ARRAYITEMTYPE_AXISSCALETYPE = 12028;

const int UA_NS0ID_YARRAYITEMTYPE = 12029;

const int UA_NS0ID_YARRAYITEMTYPE_DEFINITION = 12030;

const int UA_NS0ID_YARRAYITEMTYPE_VALUEPRECISION = 12031;

const int UA_NS0ID_YARRAYITEMTYPE_INSTRUMENTRANGE = 12032;

const int UA_NS0ID_YARRAYITEMTYPE_EURANGE = 12033;

const int UA_NS0ID_YARRAYITEMTYPE_ENGINEERINGUNITS = 12034;

const int UA_NS0ID_YARRAYITEMTYPE_TITLE = 12035;

const int UA_NS0ID_YARRAYITEMTYPE_AXISSCALETYPE = 12036;

const int UA_NS0ID_YARRAYITEMTYPE_XAXISDEFINITION = 12037;

const int UA_NS0ID_XYARRAYITEMTYPE = 12038;

const int UA_NS0ID_XYARRAYITEMTYPE_DEFINITION = 12039;

const int UA_NS0ID_XYARRAYITEMTYPE_VALUEPRECISION = 12040;

const int UA_NS0ID_XYARRAYITEMTYPE_INSTRUMENTRANGE = 12041;

const int UA_NS0ID_XYARRAYITEMTYPE_EURANGE = 12042;

const int UA_NS0ID_XYARRAYITEMTYPE_ENGINEERINGUNITS = 12043;

const int UA_NS0ID_XYARRAYITEMTYPE_TITLE = 12044;

const int UA_NS0ID_XYARRAYITEMTYPE_AXISSCALETYPE = 12045;

const int UA_NS0ID_XYARRAYITEMTYPE_XAXISDEFINITION = 12046;

const int UA_NS0ID_IMAGEITEMTYPE = 12047;

const int UA_NS0ID_IMAGEITEMTYPE_DEFINITION = 12048;

const int UA_NS0ID_IMAGEITEMTYPE_VALUEPRECISION = 12049;

const int UA_NS0ID_IMAGEITEMTYPE_INSTRUMENTRANGE = 12050;

const int UA_NS0ID_IMAGEITEMTYPE_EURANGE = 12051;

const int UA_NS0ID_IMAGEITEMTYPE_ENGINEERINGUNITS = 12052;

const int UA_NS0ID_IMAGEITEMTYPE_TITLE = 12053;

const int UA_NS0ID_IMAGEITEMTYPE_AXISSCALETYPE = 12054;

const int UA_NS0ID_IMAGEITEMTYPE_XAXISDEFINITION = 12055;

const int UA_NS0ID_IMAGEITEMTYPE_YAXISDEFINITION = 12056;

const int UA_NS0ID_CUBEITEMTYPE = 12057;

const int UA_NS0ID_CUBEITEMTYPE_DEFINITION = 12058;

const int UA_NS0ID_CUBEITEMTYPE_VALUEPRECISION = 12059;

const int UA_NS0ID_CUBEITEMTYPE_INSTRUMENTRANGE = 12060;

const int UA_NS0ID_CUBEITEMTYPE_EURANGE = 12061;

const int UA_NS0ID_CUBEITEMTYPE_ENGINEERINGUNITS = 12062;

const int UA_NS0ID_CUBEITEMTYPE_TITLE = 12063;

const int UA_NS0ID_CUBEITEMTYPE_AXISSCALETYPE = 12064;

const int UA_NS0ID_CUBEITEMTYPE_XAXISDEFINITION = 12065;

const int UA_NS0ID_CUBEITEMTYPE_YAXISDEFINITION = 12066;

const int UA_NS0ID_CUBEITEMTYPE_ZAXISDEFINITION = 12067;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE = 12068;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_DEFINITION = 12069;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_VALUEPRECISION = 12070;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_INSTRUMENTRANGE = 12071;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_EURANGE = 12072;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_ENGINEERINGUNITS = 12073;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_TITLE = 12074;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISSCALETYPE = 12075;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISDEFINITION = 12076;

const int UA_NS0ID_AXISSCALEENUMERATION = 12077;

const int UA_NS0ID_AXISSCALEENUMERATION_ENUMSTRINGS = 12078;

const int UA_NS0ID_AXISINFORMATION = 12079;

const int UA_NS0ID_XVTYPE = 12080;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTXML = 12081;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTXML = 12082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION = 12083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT = 12085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE = 12086;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DATATYPEVERSION = 12087;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12088;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTBINARY = 12089;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTBINARY = 12090;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION = 12091;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12092;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT = 12093;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE = 12094;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DATATYPEVERSION = 12095;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12096;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER = 12097;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS = 12098;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONID = 12099;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONNAME = 12100;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION = 12101;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SERVERURI = 12102;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ENDPOINTURL = 12103;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_LOCALEIDS = 12104;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    12105;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    12106;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    12107;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    12108;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    12109;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    12110;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    12111;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT = 12112;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    12113;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_READCOUNT = 12114;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYREADCOUNT = 12115;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_WRITECOUNT = 12116;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT = 12117;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CALLCOUNT = 12118;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    12119;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    12120;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    12121;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT = 12122;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    12123;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    12124;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    12125;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    12126;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_PUBLISHCOUNT = 12127;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REPUBLISHCOUNT = 12128;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    12129;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    12130;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDNODESCOUNT = 12131;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT = 12132;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETENODESCOUNT = 12133;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    12134;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSECOUNT = 12135;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT = 12136;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    12137;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT = 12138;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT = 12139;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT = 12140;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    12141;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS = 12142;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SESSIONID = 12143;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    12144;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    12145;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    12146;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_ENCODING = 12147;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    12148;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    12149;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    12150;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    12151;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SUBSCRIPTIONDIAGNOSTICSARRAY = 12152;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA = 12153;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS = 12154;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA = 12155;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS = 12156;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA = 12157;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS = 12158;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA = 12159;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS = 12160;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADDATA = 12161;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADEVENTS = 12162;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEDATA = 12163;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEEVENTS = 12164;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA = 12165;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS = 12166;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA = 12167;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS = 12168;

const int UA_NS0ID_NAMINGRULETYPE_ENUMVALUES = 12169;

const int UA_NS0ID_VIEWVERSION = 12170;

const int UA_NS0ID_COMPLEXNUMBERTYPE = 12171;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE = 12172;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12173;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE = 12175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12177;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12178;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION = 12179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12180;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12181;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE = 12183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION = 12187;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12188;

const int UA_NS0ID_SERVERONNETWORK = 12189;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST = 12190;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE = 12191;

const int UA_NS0ID_REGISTERSERVER2REQUEST = 12193;

const int UA_NS0ID_REGISTERSERVER2RESPONSE = 12194;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTXML = 12195;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTXML = 12196;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTXML = 12197;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTXML = 12199;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTXML = 12200;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK = 12201;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12202;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT = 12203;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTBINARY = 12207;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTBINARY = 12208;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTBINARY = 12209;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTBINARY = 12211;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTBINARY = 12212;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK = 12213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12214;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT = 12215;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONTEXT = 12502;

const int UA_NS0ID_PROGRESSEVENTTYPE_PROGRESS = 12503;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE = 12513;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_INPUTARGUMENTS = 12514;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_OUTPUTARGUMENTS = 12515;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE = 12516;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_OUTPUTARGUMENTS = 12517;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE = 12518;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12519;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE = 12520;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12521;

const int UA_NS0ID_TRUSTLISTTYPE = 12522;

const int UA_NS0ID_TRUSTLISTTYPE_SIZE = 12523;

const int UA_NS0ID_TRUSTLISTTYPE_OPENCOUNT = 12526;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN = 12527;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_INPUTARGUMENTS = 12528;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_OUTPUTARGUMENTS = 12529;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE = 12530;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE_INPUTARGUMENTS = 12531;

const int UA_NS0ID_TRUSTLISTTYPE_READ = 12532;

const int UA_NS0ID_TRUSTLISTTYPE_READ_INPUTARGUMENTS = 12533;

const int UA_NS0ID_TRUSTLISTTYPE_READ_OUTPUTARGUMENTS = 12534;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE = 12535;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE_INPUTARGUMENTS = 12536;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION = 12537;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_INPUTARGUMENTS = 12538;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_OUTPUTARGUMENTS = 12539;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION = 12540;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION_INPUTARGUMENTS = 12541;

const int UA_NS0ID_TRUSTLISTTYPE_LASTUPDATETIME = 12542;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS = 12543;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_INPUTARGUMENTS = 12544;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_OUTPUTARGUMENTS = 12545;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE = 12546;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_OUTPUTARGUMENTS = 12547;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE = 12548;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE_INPUTARGUMENTS = 12549;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE = 12550;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE_INPUTARGUMENTS = 12551;

const int UA_NS0ID_TRUSTLISTMASKS = 12552;

const int UA_NS0ID_TRUSTLISTMASKS_ENUMVALUES = 12553;

const int UA_NS0ID_TRUSTLISTDATATYPE = 12554;

const int UA_NS0ID_CERTIFICATEGROUPTYPE = 12555;

const int UA_NS0ID_CERTIFICATETYPE = 12556;

const int UA_NS0ID_APPLICATIONCERTIFICATETYPE = 12557;

const int UA_NS0ID_HTTPSCERTIFICATETYPE = 12558;

const int UA_NS0ID_RSAMINAPPLICATIONCERTIFICATETYPE = 12559;

const int UA_NS0ID_RSASHA256APPLICATIONCERTIFICATETYPE = 12560;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE = 12561;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTID = 12562;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12563;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENODE = 12564;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENAME = 12565;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_TIME = 12566;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12567;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_LOCALTIME = 12568;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_MESSAGE = 12569;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SEVERITY = 12570;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12571;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_STATUS = 12572;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SERVERID = 12573;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12574;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12575;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE = 12578;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12579;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_OUTPUTARGUMENTS = 12580;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE = 12581;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SUPPORTEDPRIVATEKEYFORMATS = 12583;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MAXTRUSTLISTSIZE = 12584;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MULTICASTDNSENABLED = 12585;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE = 12616;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_INPUTARGUMENTS = 12617;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_OUTPUTARGUMENTS = 12618;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE = 12620;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTID = 12621;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12622;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENODE = 12623;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENAME = 12624;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_TIME = 12625;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12626;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_LOCALTIME = 12627;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_MESSAGE = 12628;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SEVERITY = 12629;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12630;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_STATUS = 12631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SERVERID = 12632;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12633;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12634;

const int UA_NS0ID_SERVERCONFIGURATION = 12637;

const int UA_NS0ID_SERVERCONFIGURATION_SUPPORTEDPRIVATEKEYFORMATS = 12639;

const int UA_NS0ID_SERVERCONFIGURATION_MAXTRUSTLISTSIZE = 12640;

const int UA_NS0ID_SERVERCONFIGURATION_MULTICASTDNSENABLED = 12641;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST = 12642;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE = 12643;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT = 12646;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN = 12647;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 12648;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 12649;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE = 12650;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 12651;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ = 12652;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 12653;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 12654;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE = 12655;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 12656;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION = 12657;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    12658;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    12659;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION = 12660;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    12661;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME = 12662;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS = 12663;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    12664;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    12665;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE = 12666;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    12667;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE = 12668;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    12669;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE = 12670;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    12671;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTXML = 12676;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE = 12677;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12678;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT = 12679;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTBINARY = 12680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE = 12681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT = 12683;

const int UA_NS0ID_FILETYPE_WRITABLE = 12686;

const int UA_NS0ID_FILETYPE_USERWRITABLE = 12687;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITABLE = 12688;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_USERWRITABLE = 12689;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITABLE = 12690;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_USERWRITABLE = 12691;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITABLE = 12692;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_USERWRITABLE = 12693;

const int UA_NS0ID_TRUSTLISTTYPE_WRITABLE = 12698;

const int UA_NS0ID_TRUSTLISTTYPE_USERWRITABLE = 12699;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_INPUTARGUMENTS = 12704;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_INPUTARGUMENTS = 12705;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SERVERCAPABILITIES = 12708;

const int UA_NS0ID_SERVERCONFIGURATION_SERVERCAPABILITIES = 12710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT = 12712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION = 12713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT = 12714;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH = 12715;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12716;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12717;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT = 12718;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION = 12719;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT = 12720;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH = 12721;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12722;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12723;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST = 12731;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_INPUTARGUMENTS = 12732;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_OUTPUTARGUMENTS = 12733;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_APPLYCHANGES = 12734;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST = 12737;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_INPUTARGUMENTS = 12738;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_OUTPUTARGUMENTS = 12739;

const int UA_NS0ID_SERVERCONFIGURATION_APPLYCHANGES = 12740;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE = 12741;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_INPUTARGUMENTS = 12742;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_OUTPUTARGUMENTS = 12743;

const int UA_NS0ID_OPTIONSETVALUES = 12745;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE = 12746;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12747;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12748;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE = 12749;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12750;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12751;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE = 12752;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_INPUTARGUMENTS = 12753;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_OUTPUTARGUMENTS = 12754;

const int UA_NS0ID_OPTIONSET = 12755;

const int UA_NS0ID_UNION = 12756;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTXML = 12757;

const int UA_NS0ID_UNION_ENCODING_DEFAULTXML = 12758;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET = 12759;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DATATYPEVERSION = 12760;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12761;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION = 12762;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DATATYPEVERSION = 12763;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DICTIONARYFRAGMENT = 12764;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTBINARY = 12765;

const int UA_NS0ID_UNION_ENCODING_DEFAULTBINARY = 12766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET = 12767;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DATATYPEVERSION = 12768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12769;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION = 12770;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DATATYPEVERSION = 12771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DICTIONARYFRAGMENT = 12772;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE = 12773;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE_OUTPUTARGUMENTS = 12774;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST = 12775;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS = 12776;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST = 12777;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST_OUTPUTARGUMENTS = 12778;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS = 12779;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLINGINTERVAL = 12780;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLEDMONITOREDITEMSCOUNT = 12781;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_MAXSAMPLEDMONITOREDITEMSCOUNT =
    12782;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_DISABLEDMONITOREDITEMSSAMPLINGCOUNT =
    12783;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS = 12784;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SESSIONID = 12785;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SUBSCRIPTIONID = 12786;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PRIORITY = 12787;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGINTERVAL = 12788;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXKEEPALIVECOUNT = 12789;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXLIFETIMECOUNT = 12790;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXNOTIFICATIONSPERPUBLISH = 12791;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGENABLED = 12792;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MODIFYCOUNT = 12793;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_ENABLECOUNT = 12794;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLECOUNT = 12795;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHREQUESTCOUNT = 12796;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGEREQUESTCOUNT = 12797;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGECOUNT = 12798;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREQUESTCOUNT = 12799;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOALTCLIENTCOUNT = 12800;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOSAMECLIENTCOUNT = 12801;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHREQUESTCOUNT = 12802;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DATACHANGENOTIFICATIONSCOUNT = 12803;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTNOTIFICATIONSCOUNT = 12804;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NOTIFICATIONSCOUNT = 12805;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_LATEPUBLISHREQUESTCOUNT = 12806;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTKEEPALIVECOUNT = 12807;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTLIFETIMECOUNT = 12808;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_UNACKNOWLEDGEDMESSAGECOUNT = 12809;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISCARDEDMESSAGECOUNT = 12810;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITOREDITEMCOUNT = 12811;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLEDMONITOREDITEMCOUNT = 12812;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITORINGQUEUEOVERFLOWCOUNT = 12813;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NEXTSEQUENCENUMBER = 12814;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTQUEUEOVERFLOWCOUNT = 12815;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS = 12816;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONID = 12817;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONNAME = 12818;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION = 12819;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SERVERURI = 12820;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL = 12821;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_LOCALEIDS = 12822;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT = 12823;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE = 12824;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME = 12825;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME = 12826;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT = 12827;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT = 12828;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE = 12829;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT = 12830;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT = 12831;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_READCOUNT = 12832;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT = 12833;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_WRITECOUNT = 12834;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT = 12835;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CALLCOUNT = 12836;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT = 12837;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT = 12838;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT = 12839;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT = 12840;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT = 12841;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT = 12842;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT = 12843;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT = 12844;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT = 12845;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT = 12846;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT = 12847;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT = 12848;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT = 12849;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT = 12850;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT = 12851;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT = 12852;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT = 12853;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT = 12854;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT = 12855;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT = 12856;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT = 12857;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT = 12858;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT = 12859;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS = 12860;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID = 12861;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION = 12862;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY = 12863;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM = 12864;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING = 12865;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL = 12866;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE = 12867;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI = 12868;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE = 12869;

const int UA_NS0ID_SERVERTYPE_RESENDDATA = 12871;

const int UA_NS0ID_SERVERTYPE_RESENDDATA_INPUTARGUMENTS = 12872;

const int UA_NS0ID_SERVER_RESENDDATA = 12873;

const int UA_NS0ID_SERVER_RESENDDATA_INPUTARGUMENTS = 12874;

const int UA_NS0ID_RESENDDATAMETHODTYPE = 12875;

const int UA_NS0ID_RESENDDATAMETHODTYPE_INPUTARGUMENTS = 12876;

const int UA_NS0ID_NORMALIZEDSTRING = 12877;

const int UA_NS0ID_DECIMALSTRING = 12878;

const int UA_NS0ID_DURATIONSTRING = 12879;

const int UA_NS0ID_TIMESTRING = 12880;

const int UA_NS0ID_DATESTRING = 12881;

const int UA_NS0ID_SERVERTYPE_ESTIMATEDRETURNTIME = 12882;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE = 12883;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12884;

const int UA_NS0ID_SERVER_ESTIMATEDRETURNTIME = 12885;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE = 12886;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12887;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE = 12888;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE_INPUTARGUMENTS = 12889;

const int UA_NS0ID_DISCOVERYCONFIGURATION = 12890;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION = 12891;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12892;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12893;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION = 12894;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION = 12895;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT = 12896;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION = 12897;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION = 12898;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT = 12899;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12900;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12901;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION = 12902;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION = 12903;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT = 12904;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION = 12905;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION = 12906;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT = 12907;

const int UA_NS0ID_MAXBYTESTRINGLENGTH = 12908;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12909;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBYTESTRINGLENGTH = 12910;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12911;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2 = 12912;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12913;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE = 12914;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE_INPUTARGUMENTS = 12915;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2 = 12916;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12917;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2 = 12918;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12919;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2 = 12984;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12985;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2 = 12986;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12987;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12988;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12989;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12990;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12991;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12992;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12993;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12994;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12995;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12996;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12997;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12998;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12999;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13000;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13001;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13002;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13003;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2 = 13004;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13005;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13006;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13007;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13008;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13009;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2 = 13010;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13011;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE = 13225;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTID = 13226;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTTYPE = 13227;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENODE = 13228;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENAME = 13229;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_TIME = 13230;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RECEIVETIME = 13231;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LOCALTIME = 13232;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MESSAGE = 13233;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SEVERITY = 13234;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSID = 13235;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSNAME = 13236;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONNAME = 13237;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_BRANCHID = 13238;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RETAIN = 13239;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE = 13240;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_ID = 13241;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NAME = 13242;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NUMBER = 13243;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 13244;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 13245;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 13246;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRUESTATE = 13247;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_FALSESTATE = 13248;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY = 13249;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY_SOURCETIMESTAMP = 13250;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY = 13251;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 13252;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT = 13253;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT_SOURCETIMESTAMP = 13254;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CLIENTUSERID = 13255;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_DISABLE = 13256;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLE = 13257;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT = 13258;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 13259;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH = 13260;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 13261;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2 = 13262;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13263;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE = 13264;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_ID = 13265;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NAME = 13266;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NUMBER = 13267;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 13268;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 13269;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 13270;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 13271;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 13272;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE = 13273;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_ID = 13274;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NAME = 13275;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 13276;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 13277;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 13278;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 13279;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 13280;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 13281;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE = 13282;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 13283;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM = 13284;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM_INPUTARGUMENTS = 13285;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE = 13286;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_ID = 13287;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NAME = 13288;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NUMBER = 13289;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 13290;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 13291;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 13292;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 13293;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_FALSESTATE = 13294;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_INPUTNODE = 13295;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE = 13296;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_ID = 13297;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 13298;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER = 13299;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 13300;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 13301;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 13302;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 13303;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 13304;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE = 13305;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 13306;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 13307;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 13308;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 13309;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 13310;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 13311;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 13312;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 13313;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 13314;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 13315;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 13316;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 13317;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVE = 13318;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 13319;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 13320;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 13321;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDORSHELVED = 13322;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MAXTIMESHELVED = 13323;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_NORMALSTATE = 13324;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONDATE = 13325;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATETYPE = 13326;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATE = 13327;

const int UA_NS0ID_FILETYPE_MIMETYPE = 13341;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE = 13342;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_INPUTARGUMENTS = 13343;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_OUTPUTARGUMENTS = 13344;

const int UA_NS0ID_CREATEFILEMETHODTYPE = 13345;

const int UA_NS0ID_CREATEFILEMETHODTYPE_INPUTARGUMENTS = 13346;

const int UA_NS0ID_CREATEFILEMETHODTYPE_OUTPUTARGUMENTS = 13347;

const int UA_NS0ID_DELETEFILEMETHODTYPE = 13348;

const int UA_NS0ID_DELETEFILEMETHODTYPE_INPUTARGUMENTS = 13349;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE = 13350;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_INPUTARGUMENTS = 13351;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_OUTPUTARGUMENTS = 13352;

const int UA_NS0ID_FILEDIRECTORYTYPE = 13353;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER = 13354;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY = 13355;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS = 13356;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS = 13357;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE = 13358;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS = 13359;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS = 13360;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY = 13363;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS = 13364;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS = 13365;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER = 13366;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SIZE = 13367;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITABLE = 13368;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_USERWRITABLE = 13369;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPENCOUNT = 13370;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_MIMETYPE = 13371;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN = 13372;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS = 13373;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS = 13374;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE = 13375;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS = 13376;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ = 13377;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS = 13378;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS = 13379;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE = 13380;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS = 13381;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION = 13382;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS = 13383;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS = 13384;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION = 13385;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS = 13386;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY = 13387;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_INPUTARGUMENTS = 13388;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_OUTPUTARGUMENTS = 13389;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE = 13390;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_INPUTARGUMENTS = 13391;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_OUTPUTARGUMENTS = 13392;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT = 13393;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 13394;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY = 13395;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_INPUTARGUMENTS = 13396;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_OUTPUTARGUMENTS = 13397;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_MIMETYPE = 13398;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_MIMETYPE = 13399;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_MIMETYPE = 13400;

const int UA_NS0ID_TRUSTLISTTYPE_MIMETYPE = 13403;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST = 13599;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SIZE = 13600;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITABLE = 13601;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_USERWRITABLE = 13602;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENCOUNT = 13603;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_MIMETYPE = 13604;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN = 13605;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_INPUTARGUMENTS = 13606;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13607;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE = 13608;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13609;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ = 13610;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_INPUTARGUMENTS = 13611;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_OUTPUTARGUMENTS = 13612;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE = 13613;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE_INPUTARGUMENTS = 13614;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION = 13615;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 13616;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS = 13617;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION = 13618;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 13619;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_LASTUPDATETIME = 13620;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS = 13621;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS = 13622;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS = 13623;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE = 13624;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS = 13625;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS = 13626;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE = 13627;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS = 13628;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE = 13629;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS = 13630;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATETYPES = 13631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATEGROUP = 13735;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATETYPE = 13736;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE = 13737;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_INPUTARGUMENTS = 13738;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_OUTPUTARGUMENTS = 13739;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE = 13813;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP = 13814;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST = 13815;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE = 13816;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE = 13817;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE = 13818;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT = 13819;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE = 13820;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN = 13821;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 13822;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13823;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE = 13824;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13825;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ = 13826;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 13827;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 13828;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE = 13829;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 13830;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION = 13831;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 13832;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS = 13833;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION = 13834;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 13835;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME = 13836;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS = 13837;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS = 13838;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS = 13839;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE = 13840;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS = 13841;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS = 13842;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE = 13843;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS = 13844;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE = 13845;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13846;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES = 13847;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP = 13848;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST = 13849;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE = 13850;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE = 13851;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE = 13852;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT = 13853;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE = 13854;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN = 13855;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 13856;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13857;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE = 13858;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13859;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ = 13860;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 13861;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 13862;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE = 13863;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 13864;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION = 13865;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 13866;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS = 13867;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION = 13868;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 13869;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME = 13870;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS = 13871;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS = 13872;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS = 13873;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE = 13874;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS = 13875;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS = 13876;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE = 13877;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS = 13878;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE = 13879;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS = 13880;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATETYPES = 13881;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP = 13882;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST = 13883;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE = 13884;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE = 13885;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE = 13886;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT = 13887;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE = 13888;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN = 13889;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 13890;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13891;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE = 13892;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13893;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ = 13894;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 13895;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 13896;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE = 13897;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 13898;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION = 13899;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 13900;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS = 13901;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION = 13902;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 13903;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME = 13904;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS = 13905;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS = 13906;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS = 13907;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE = 13908;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS = 13909;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS = 13910;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE = 13911;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS = 13912;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE = 13913;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS = 13914;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES = 13915;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER = 13916;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST = 13917;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SIZE = 13918;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITABLE = 13919;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_USERWRITABLE = 13920;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENCOUNT = 13921;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_MIMETYPE = 13922;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN = 13923;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_INPUTARGUMENTS = 13924;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13925;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE = 13926;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13927;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ = 13928;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_INPUTARGUMENTS = 13929;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_OUTPUTARGUMENTS = 13930;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE = 13931;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE_INPUTARGUMENTS = 13932;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION = 13933;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 13934;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS = 13935;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION = 13936;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 13937;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_LASTUPDATETIME = 13938;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS = 13939;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13940;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13941;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE = 13942;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13943;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13944;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE = 13945;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13946;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE = 13947;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13948;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATETYPES = 13949;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS = 13950;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP = 13951;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST = 13952;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE = 13953;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE = 13954;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE = 13955;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT = 13956;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE = 13957;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN = 13958;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13959;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13960;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE = 13961;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13962;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ = 13963;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13964;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13965;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE = 13966;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13967;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION = 13968;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13969;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13970;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION = 13971;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13972;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME = 13973;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS = 13974;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13975;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13976;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE = 13977;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13978;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13979;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE = 13980;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13981;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13982;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13983;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES = 13984;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP = 13985;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST = 13986;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE = 13987;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE = 13988;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE = 13989;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT = 13990;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE = 13991;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN = 13992;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 13993;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13994;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE = 13995;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13996;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ = 13997;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 13998;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 13999;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE = 14000;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 14001;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION = 14002;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14003;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14004;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION = 14005;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14006;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME = 14007;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS = 14008;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14009;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14010;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE = 14011;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14012;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14013;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE = 14014;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14015;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE = 14016;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14017;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES = 14018;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP = 14019;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST = 14020;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE = 14021;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE = 14022;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE = 14023;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT = 14024;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE = 14025;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN = 14026;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14027;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14028;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE = 14029;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14030;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ = 14031;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14032;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14033;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE = 14034;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14035;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION = 14036;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14037;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14038;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION = 14039;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14040;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME = 14041;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS = 14042;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14043;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14044;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE = 14045;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14046;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14047;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE = 14048;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14049;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE = 14050;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14051;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES = 14052;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS = 14053;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP = 14088;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST = 14089;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE = 14090;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE = 14091;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE = 14092;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT = 14093;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE = 14094;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN = 14095;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 14096;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 14097;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE = 14098;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 14099;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ = 14100;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 14101;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 14102;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE = 14103;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 14104;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION = 14105;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS = 14106;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14107;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION = 14108;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS = 14109;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME = 14110;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS = 14111;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14112;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14113;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE = 14114;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14115;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14116;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE = 14117;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14118;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE = 14119;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14120;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES = 14121;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP = 14122;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST = 14123;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE = 14124;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE = 14125;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE = 14126;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT = 14127;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE = 14128;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN = 14129;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS = 14130;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 14131;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE = 14132;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS = 14133;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ = 14134;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS = 14135;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS = 14136;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE = 14137;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS = 14138;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION = 14139;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14140;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14141;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION = 14142;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14143;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME = 14144;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS = 14145;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14146;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14147;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE = 14148;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14149;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14150;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE = 14151;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14152;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE = 14153;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14154;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES = 14155;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP = 14156;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE = 14157;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE = 14158;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE = 14159;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14160;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES = 14161;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE = 14183;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE_INPUTARGUMENTS = 14184;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE = 14209;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS = 14221;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP = 14225;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP_INPUTARGUMENTS = 14226;

const int UA_NS0ID_PUBSUBGROUPTYPE = 14232;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE = 14273;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTXML = 14319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION = 14321;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT = 14322;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTBINARY = 14323;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14324;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION = 14325;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT = 14326;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SESSIONID = 14413;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SESSIONID = 14414;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERNETWORKGROUPS = 14415;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE = 14416;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER = 14417;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID = 14418;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS = 14419;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE = 14420;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE = 14421;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE = 14422;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS = 14423;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP = 14424;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS = 14425;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION = 14432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION_INPUTARGUMENTS = 14433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS = 14434;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS = 14435;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS = 14436;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS = 14437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS = 14438;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 14439;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 14440;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET = 14441;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS = 14442;

const int UA_NS0ID_PUBLISHSUBSCRIBE = 14443;

const int UA_NS0ID_HASPUBSUBCONNECTION = 14476;

const int UA_NS0ID_DATASETFOLDERTYPE = 14477;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER = 14478;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS = 14479;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS = 14480;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS = 14481;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS = 14482;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 14483;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 14484;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET = 14485;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS = 14486;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER = 14487;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_CONFIGURATIONVERSION = 14489;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS = 14493;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS = 14494;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS = 14495;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS = 14496;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 14497;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 14498;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET = 14499;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS = 14500;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE = 14501;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_INPUTARGUMENTS = 14502;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_OUTPUTARGUMENTS = 14503;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE = 14504;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_INPUTARGUMENTS = 14505;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_OUTPUTARGUMENTS = 14506;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE = 14507;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE_INPUTARGUMENTS = 14508;

const int UA_NS0ID_PUBLISHEDDATASETTYPE = 14509;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_CONFIGURATIONVERSION = 14519;

const int UA_NS0ID_DATASETMETADATATYPE = 14523;

const int UA_NS0ID_FIELDMETADATA = 14524;

const int UA_NS0ID_DATATYPEDESCRIPTION = 14525;

const int UA_NS0ID_STRUCTURETYPE_ENUMSTRINGS = 14528;

const int UA_NS0ID_KEYVALUEPAIR = 14533;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE = 14534;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_CONFIGURATIONVERSION = 14544;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_PUBLISHEDDATA = 14548;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES = 14555;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_INPUTARGUMENTS = 14556;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_OUTPUTARGUMENTS = 14557;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES = 14558;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_INPUTARGUMENTS = 14559;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_OUTPUTARGUMENTS = 14560;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE = 14564;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_INPUTARGUMENTS = 14565;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_OUTPUTARGUMENTS = 14566;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE = 14567;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_INPUTARGUMENTS = 14568;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_OUTPUTARGUMENTS = 14569;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE = 14572;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_CONFIGURATIONVERSION = 14582;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_PUBSUBEVENTNOTIFIER = 14586;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_SELECTEDFIELDS = 14587;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_FILTER = 14588;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE = 14593;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_PUBLISHERID = 14595;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS = 14600;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_STATE = 14601;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_ENABLE = 14602;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_DISABLE = 14603;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE = 14604;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE_INPUTARGUMENTS = 14605;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE = 14623;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE_INPUTARGUMENTS = 14624;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE = 14625;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE_INPUTARGUMENTS = 14626;

const int UA_NS0ID_PUBSUBSTATUSTYPE = 14643;

const int UA_NS0ID_PUBSUBSTATUSTYPE_STATE = 14644;

const int UA_NS0ID_PUBSUBSTATUSTYPE_ENABLE = 14645;

const int UA_NS0ID_PUBSUBSTATUSTYPE_DISABLE = 14646;

const int UA_NS0ID_PUBSUBSTATE = 14647;

const int UA_NS0ID_PUBSUBSTATE_ENUMSTRINGS = 14648;

const int UA_NS0ID_FIELDTARGETDATATYPE = 14744;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTXML = 14794;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTXML = 14795;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTXML = 14796;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTXML = 14797;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTXML = 14798;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTXML = 14799;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTXML = 14800;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTXML = 14801;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTXML = 14802;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTXML = 14803;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTXML = 14804;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE = 14805;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION = 14806;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT = 14807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA = 14808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14810;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION = 14811;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION = 14812;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT = 14813;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD = 14826;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DATATYPEVERSION = 14827;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14828;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR = 14829;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14830;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14831;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14832;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION = 14833;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT = 14834;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE = 14835;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION = 14836;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT = 14837;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTBINARY = 14839;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTBINARY = 14844;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTBINARY = 14845;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTBINARY = 14846;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTBINARY = 14847;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTBINARY = 14848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE = 14849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION = 14850;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT = 14851;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA = 14852;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14854;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION = 14855;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION = 14856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT = 14857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD = 14870;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DATATYPEVERSION = 14871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR = 14873;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14874;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14876;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION = 14877;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT = 14878;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION = 14880;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT = 14881;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONLIMIT = 14900;

const int UA_NS0ID_DATASETTOWRITER = 14936;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DEPRECATED = 15001;

const int UA_NS0ID_MAXCHARACTERS = 15002;

const int UA_NS0ID_SERVERTYPE_URISVERSION = 15003;

const int UA_NS0ID_SERVER_URISVERSION = 15004;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION = 15005;

const int UA_NS0ID_UABINARYFILEDATATYPE = 15006;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE = 15007;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE = 15008;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE_ENUMSTRINGS = 15009;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_KEYLIFETIME = 15010;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYPOLICYURI = 15011;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXFUTUREKEYCOUNT = 15012;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE = 15013;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTID = 15014;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTTYPE = 15015;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENODE = 15016;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENAME = 15017;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_TIME = 15018;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_RECEIVETIME = 15019;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_LOCALTIME = 15020;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_MESSAGE = 15021;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SEVERITY = 15022;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_ACTIONTIMESTAMP = 15023;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_STATUS = 15024;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SERVERID = 15025;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTAUDITENTRYID = 15026;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTUSERID = 15027;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_METHODID = 15028;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_INPUTARGUMENTS = 15029;

const int UA_NS0ID_PERMISSIONTYPE_OPTIONSETVALUES = 15030;

const int UA_NS0ID_ACCESSLEVELTYPE = 15031;

const int UA_NS0ID_ACCESSLEVELTYPE_OPTIONSETVALUES = 15032;

const int UA_NS0ID_EVENTNOTIFIERTYPE = 15033;

const int UA_NS0ID_EVENTNOTIFIERTYPE_OPTIONSETVALUES = 15034;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE_OPTIONSETVALUES = 15035;

const int UA_NS0ID_ATTRIBUTEWRITEMASK_OPTIONSETVALUES = 15036;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DEPRECATED = 15037;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTVALUES = 15038;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DEPRECATED = 15039;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTVALUES = 15040;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTJSON = 15041;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTJSON = 15042;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXPASTKEYCOUNT = 15043;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTJSON = 15044;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTJSON = 15045;

const int UA_NS0ID_SECURITYGROUPTYPE_KEYLIFETIME = 15046;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYPOLICYURI = 15047;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXFUTUREKEYCOUNT = 15048;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTJSON = 15049;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTJSON = 15050;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTJSON = 15051;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION = 15052;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_INPUTARGUMENTS = 15053;

const int UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE = 15054;

const int UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_INPUTARGUMENTS = 15055;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXPASTKEYCOUNT = 15056;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15057;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTJSON = 15058;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTJSON = 15059;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTJSON = 15060;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTJSON = 15061;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTJSON = 15062;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTJSON = 15063;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE = 15064;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTJSON = 15065;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTJSON = 15066;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTJSON = 15067;

const int UA_NS0ID_NODE_ENCODING_DEFAULTJSON = 15068;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTJSON = 15069;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTJSON = 15070;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTJSON = 15071;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS = 15072;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTJSON = 15073;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTJSON = 15074;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTJSON = 15075;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTJSON = 15076;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTJSON = 15077;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTJSON = 15078;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTJSON = 15079;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTJSON = 15080;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTJSON = 15081;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTJSON = 15082;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTJSON = 15083;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTJSON = 15084;

const int UA_NS0ID_UNION_ENCODING_DEFAULTJSON = 15085;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTJSON = 15086;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTJSON = 15087;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTJSON = 15088;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTJSON = 15089;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTJSON = 15090;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTJSON = 15091;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTJSON = 15092;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTJSON = 15093;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTJSON = 15094;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTJSON = 15095;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTJSON = 15096;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTJSON = 15097;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTJSON = 15098;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTJSON = 15099;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTJSON = 15100;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTJSON = 15101;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTJSON = 15102;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTJSON = 15103;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTJSON = 15104;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15105;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15106;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTJSON = 15107;

const int UA_NS0ID_SUBSCRIBEDDATASETTYPE = 15108;

const int UA_NS0ID_CHOICESTATETYPE = 15109;

const int UA_NS0ID_CHOICESTATETYPE_STATENUMBER = 15110;

const int UA_NS0ID_TARGETVARIABLESTYPE = 15111;

const int UA_NS0ID_HASGUARD = 15112;

const int UA_NS0ID_GUARDVARIABLETYPE = 15113;

const int UA_NS0ID_TARGETVARIABLESTYPE_TARGETVARIABLES = 15114;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES = 15115;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_INPUTARGUMENTS = 15116;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_OUTPUTARGUMENTS = 15117;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES = 15118;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_INPUTARGUMENTS = 15119;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_OUTPUTARGUMENTS = 15120;

const int UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE = 15121;

const int UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_INPUTARGUMENTS = 15122;

const int UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS = 15123;

const int UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE = 15124;

const int UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS = 15125;

const int UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS = 15126;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORTYPE = 15127;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE = 15128;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE_EXPRESSION = 15129;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTJSON = 15130;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTJSON = 15131;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15132;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15133;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15134;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15135;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTJSON = 15136;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTJSON = 15137;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15138;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15139;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15140;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15141;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15142;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTJSON = 15143;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15144;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15145;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15146;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTJSON = 15147;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15148;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTJSON = 15149;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTJSON = 15150;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTJSON = 15151;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTJSON = 15152;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTJSON = 15153;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE = 15154;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE = 15155;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_RESOURCEURI = 15156;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTJSON = 15157;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15158;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15159;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15160;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15161;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTJSON = 15162;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTJSON = 15163;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTJSON = 15164;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTJSON = 15165;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTJSON = 15166;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTJSON = 15167;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTJSON = 15168;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTJSON = 15169;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15170;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15171;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTJSON = 15172;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTJSON = 15173;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTJSON = 15174;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTJSON = 15175;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15176;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15177;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_AUTHENTICATIONPROFILEURI = 15178;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTJSON = 15179;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTJSON = 15180;

const int UA_NS0ID_USERCREDENTIALCERTIFICATETYPE = 15181;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTJSON = 15182;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTJSON = 15183;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTJSON = 15184;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTJSON = 15185;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTJSON = 15186;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTJSON = 15187;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTJSON = 15188;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTJSON = 15189;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTJSON = 15190;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTJSON = 15191;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTJSON = 15192;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTJSON = 15193;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTJSON = 15194;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15195;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15196;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15197;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15198;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTJSON = 15199;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTJSON = 15200;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15201;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTJSON = 15202;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTJSON = 15203;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTJSON = 15204;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTJSON = 15205;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTJSON = 15206;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTJSON = 15207;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTJSON = 15208;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15209;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15210;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTJSON = 15211;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS = 15212;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15213;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15214;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS = 15215;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_INPUTARGUMENTS = 15216;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15217;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE = 15218;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 15219;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_OUTPUTARGUMENTS = 15220;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETMETADATA = 15221;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER = 15222;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 15223;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE = 15224;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE = 15225;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE = 15226;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS = 15227;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTJSON = 15228;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETMETADATA = 15229;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15230;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 15231;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE = 15232;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE = 15233;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE = 15234;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS = 15235;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTJSON = 15236;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETMETADATA = 15237;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15238;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 15239;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE = 15240;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE = 15241;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE = 15242;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS = 15243;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTJSON = 15244;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETMETADATA = 15245;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_RESOURCEURI = 15246;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_AUTHENTICATIONPROFILEURI = 15247;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE = 15248;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE = 15249;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_RESOURCEURI = 15250;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI = 15251;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTJSON = 15252;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_INPUTARGUMENTS = 15253;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTJSON = 15254;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTJSON = 15255;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTJSON = 15256;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTJSON = 15257;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTJSON = 15258;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTJSON = 15259;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTJSON = 15260;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTJSON = 15261;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTJSON = 15262;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15263;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTJSON = 15264;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS = 15265;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_STATE = 15266;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_ENABLE = 15267;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_DISABLE = 15268;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTJSON = 15269;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTJSON = 15270;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTJSON = 15271;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTJSON = 15272;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTJSON = 15273;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTJSON = 15274;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTJSON = 15275;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTJSON = 15276;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTJSON = 15277;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTJSON = 15278;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTJSON = 15279;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTJSON = 15280;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTJSON = 15281;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTJSON = 15282;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15283;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTJSON = 15284;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTJSON = 15285;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTJSON = 15286;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTJSON = 15287;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTJSON = 15288;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTJSON = 15289;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTJSON = 15290;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTJSON = 15291;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTJSON = 15292;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTJSON = 15293;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTJSON = 15294;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTJSON = 15295;

const int UA_NS0ID_HASDATASETWRITER = 15296;

const int UA_NS0ID_HASDATASETREADER = 15297;

const int UA_NS0ID_DATASETWRITERTYPE = 15298;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS = 15299;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_STATE = 15300;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_ENABLE = 15301;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_DISABLE = 15302;

const int UA_NS0ID_DATASETWRITERTYPE_TRANSPORTSETTINGS = 15303;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTJSON = 15304;

const int UA_NS0ID_DATASETWRITERTRANSPORTTYPE = 15305;

const int UA_NS0ID_DATASETREADERTYPE = 15306;

const int UA_NS0ID_DATASETREADERTYPE_STATUS = 15307;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_STATE = 15308;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_ENABLE = 15309;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_DISABLE = 15310;

const int UA_NS0ID_DATASETREADERTYPE_TRANSPORTSETTINGS = 15311;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTJSON = 15312;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTJSON = 15313;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTJSON = 15314;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTJSON = 15315;

const int UA_NS0ID_DATASETREADERTYPE_SUBSCRIBEDDATASET = 15316;

const int UA_NS0ID_ELSEGUARDVARIABLETYPE = 15317;

const int UA_NS0ID_BASEANALOGTYPE = 15318;

const int UA_NS0ID_DATASETREADERTRANSPORTTYPE = 15319;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTJSON = 15320;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTJSON = 15321;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTJSON = 15322;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15323;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15324;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTJSON = 15325;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTJSON = 15326;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15327;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15328;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTJSON = 15329;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE = 15330;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTJSON = 15331;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTJSON = 15332;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTJSON = 15333;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_RESOURCEURI = 15334;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15335;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15336;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15337;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15338;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15339;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15340;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTJSON = 15341;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTJSON = 15342;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTJSON = 15343;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTJSON = 15344;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15345;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTJSON = 15346;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTJSON = 15347;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTJSON = 15348;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTJSON = 15349;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15350;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTJSON = 15351;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTJSON = 15352;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15353;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTJSON = 15354;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15355;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTJSON = 15356;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15357;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15358;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15359;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15360;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTJSON = 15361;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTJSON = 15362;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTJSON = 15363;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTJSON = 15364;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15365;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTJSON = 15366;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTJSON = 15367;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15368;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15369;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTJSON = 15370;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTJSON = 15371;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15372;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15373;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15374;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTJSON = 15375;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTJSON = 15376;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15377;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15378;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTJSON = 15379;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTJSON = 15380;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTJSON = 15381;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTJSON = 15382;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE = 15383;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATESESSIONID = 15384;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATECLIENTNAME = 15385;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_INVOCATIONCREATIONTIME = 15386;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTTRANSITIONTIME = 15387;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALL = 15388;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODSESSIONID = 15389;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTARGUMENTS = 15390;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTARGUMENTS = 15391;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTVALUES = 15392;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTVALUES = 15393;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALLTIME = 15394;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODRETURNSTATUS = 15395;

const int UA_NS0ID_ACCESSLEVELEXTYPE = 15406;

const int UA_NS0ID_ACCESSLEVELEXTYPE_OPTIONSETVALUES = 15407;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONSEXCLUDE = 15408;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTSEXCLUDE = 15409;

const int UA_NS0ID_ROLETYPE_APPLICATIONSEXCLUDE = 15410;

const int UA_NS0ID_ROLETYPE_ENDPOINTSEXCLUDE = 15411;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONSEXCLUDE = 15412;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTSEXCLUDE = 15413;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONSEXCLUDE = 15414;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTSEXCLUDE = 15415;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONSEXCLUDE = 15416;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTSEXCLUDE = 15417;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONSEXCLUDE = 15418;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI = 15419;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE = 15420;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 15421;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTBINARY = 15422;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTSEXCLUDE = 15423;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONSEXCLUDE = 15424;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTSEXCLUDE = 15425;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONSEXCLUDE = 15426;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTSEXCLUDE = 15427;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONSEXCLUDE = 15428;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTSEXCLUDE = 15429;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONSEXCLUDE = 15430;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP = 15431;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS = 15433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS = 15434;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15435;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS = 15436;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS = 15437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP = 15438;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS = 15439;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP = 15440;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_INPUTARGUMENTS = 15441;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_OUTPUTARGUMENTS = 15442;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS = 15443;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP = 15444;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS = 15445;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS = 15446;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP = 15447;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS = 15448;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE = 15449;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15450;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15451;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE = 15452;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER = 15453;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP = 15454;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_INPUTARGUMENTS = 15455;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_OUTPUTARGUMENTS = 15456;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP = 15457;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15458;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER = 15459;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYGROUPID = 15460;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP = 15461;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_INPUTARGUMENTS = 15462;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_OUTPUTARGUMENTS = 15463;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP = 15464;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP_INPUTARGUMENTS = 15465;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE = 15466;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15467;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15468;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE = 15469;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15470;

const int UA_NS0ID_SECURITYGROUPTYPE = 15471;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYGROUPID = 15472;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS = 15473;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD = 15474;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15475;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15476;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD = 15477;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15478;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15479;

const int UA_NS0ID_WRITERGROUPDATATYPE = 15480;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS = 15481;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD = 15482;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15483;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS = 15484;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD = 15485;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS = 15486;

const int UA_NS0ID_STRUCTUREDESCRIPTION = 15487;

const int UA_NS0ID_ENUMDESCRIPTION = 15488;

const int UA_NS0ID_EXTENSIONFIELDSTYPE = 15489;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_EXTENSIONFIELDNAME_PLACEHOLDER = 15490;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD = 15491;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15492;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_OUTPUTARGUMENTS = 15493;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD = 15494;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD_INPUTARGUMENTS = 15495;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE = 15496;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15497;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_OUTPUTARGUMENTS = 15498;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE = 15499;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15500;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION = 15501;

const int UA_NS0ID_NETWORKADDRESSDATATYPE = 15502;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS = 15503;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD = 15504;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15505;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS = 15506;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD = 15507;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS = 15508;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION = 15509;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE = 15510;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS = 15511;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD = 15512;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15513;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS = 15514;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD = 15515;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS = 15516;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_OUTPUTARGUMENTS = 15517;

const int UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_OUTPUTARGUMENTS = 15518;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT = 15519;

const int UA_NS0ID_READERGROUPDATATYPE = 15520;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE = 15521;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION = 15522;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT = 15523;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15524;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 15525;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15526;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTSEXCLUDE = 15527;

const int UA_NS0ID_ENDPOINTTYPE = 15528;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTXML = 15529;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE = 15530;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTXML = 15531;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 15532;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE = 15533;

const int UA_NS0ID_DATATYPESCHEMAHEADER = 15534;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE = 15535;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTID = 15536;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTTYPE = 15537;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENODE = 15538;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENAME = 15539;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_TIME = 15540;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_RECEIVETIME = 15541;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_LOCALTIME = 15542;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_MESSAGE = 15543;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SEVERITY = 15544;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONNECTIONID = 15545;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_GROUPID = 15546;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_STATE = 15547;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE = 15548;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTID = 15549;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTTYPE = 15550;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENODE = 15551;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENAME = 15552;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_TIME = 15553;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_RECEIVETIME = 15554;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_LOCALTIME = 15555;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MESSAGE = 15556;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SEVERITY = 15557;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONNECTIONID = 15558;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_GROUPID = 15559;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_STATE = 15560;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_ACTUAL = 15561;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MAXIMUM = 15562;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE = 15563;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTID = 15564;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTTYPE = 15565;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENODE = 15566;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENAME = 15567;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_TIME = 15568;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_RECEIVETIME = 15569;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_LOCALTIME = 15570;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_MESSAGE = 15571;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SEVERITY = 15572;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONNECTIONID = 15573;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_GROUPID = 15574;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_STATE = 15575;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_ERROR = 15576;

const int UA_NS0ID_DATASETFIELDFLAGS_OPTIONSETVALUES = 15577;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE = 15578;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15579;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE = 15580;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE = 15581;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE = 15582;

const int UA_NS0ID_DATASETFIELDCONTENTMASK = 15583;

const int UA_NS0ID_DATASETFIELDCONTENTMASK_OPTIONSETVALUES = 15584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION = 15585;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION = 15586;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT = 15587;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE = 15588;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTXML = 15589;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTXML = 15590;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION = 15591;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION = 15592;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT = 15593;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION = 15594;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15595;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT = 15596;

const int UA_NS0ID_DATASETWRITERDATATYPE = 15597;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE = 15598;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION = 15599;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION = 15600;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT = 15601;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION = 15602;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15603;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT = 15604;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE = 15605;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET = 15606;

const int UA_NS0ID_ROLESETTYPE = 15607;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER = 15608;

const int UA_NS0ID_PUBSUBGROUPDATATYPE = 15609;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION = 15610;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE = 15611;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY = 15612;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY_INPUTARGUMENTS = 15613;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY = 15614;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY_INPUTARGUMENTS = 15615;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE = 15616;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE = 15617;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE = 15618;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT = 15619;

const int UA_NS0ID_ROLETYPE = 15620;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE = 15621;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE = 15622;

const int UA_NS0ID_DATASETREADERDATATYPE = 15623;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY = 15624;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY_INPUTARGUMENTS = 15625;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY = 15626;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY_INPUTARGUMENTS = 15627;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE = 15628;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE = 15629;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE = 15630;

const int UA_NS0ID_TARGETVARIABLESDATATYPE = 15631;

const int UA_NS0ID_IDENTITYCRITERIATYPE = 15632;

const int UA_NS0ID_IDENTITYCRITERIATYPE_ENUMVALUES = 15633;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE = 15634;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE = 15635;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE = 15636;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE_INPUTARGUMENTS = 15637;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE = 15638;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE_INPUTARGUMENTS = 15639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15640;

const int UA_NS0ID_DATASETORDERINGTYPE_ENUMSTRINGS = 15641;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK = 15642;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15643;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS = 15644;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE = 15645;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK = 15646;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15647;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY = 15648;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY_INPUTARGUMENTS = 15649;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY = 15650;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY_INPUTARGUMENTS = 15651;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE = 15652;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE = 15653;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK = 15654;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15655;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER = 15656;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE = 15657;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK = 15658;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15659;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY = 15660;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY_INPUTARGUMENTS = 15661;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY = 15662;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY_INPUTARGUMENTS = 15663;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE = 15664;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE = 15665;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 15666;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE = 15667;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER = 15668;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE = 15669;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE = 15670;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTBINARY = 15671;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY = 15672;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY_INPUTARGUMENTS = 15673;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY = 15674;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY_INPUTARGUMENTS = 15675;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTBINARY = 15676;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15677;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTBINARY = 15678;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTBINARY = 15679;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR = 15680;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTBINARY = 15681;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTBINARY = 15682;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15683;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY = 15684;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY_INPUTARGUMENTS = 15685;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY = 15686;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY_INPUTARGUMENTS = 15687;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15688;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTBINARY = 15689;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15690;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15691;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR = 15692;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15693;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTBINARY = 15694;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15695;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY = 15696;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY_INPUTARGUMENTS = 15697;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY = 15698;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY_INPUTARGUMENTS = 15699;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15700;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15701;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15702;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTBINARY = 15703;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN = 15704;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15705;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15706;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15707;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY = 15708;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY_INPUTARGUMENTS = 15709;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY = 15710;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY_INPUTARGUMENTS = 15711;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTBINARY = 15712;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTBINARY = 15713;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTJSON = 15714;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15715;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN = 15716;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15717;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15718;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15719;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY = 15720;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY_INPUTARGUMENTS = 15721;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY = 15722;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY_INPUTARGUMENTS = 15723;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15724;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15725;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 15726;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15727;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTXML = 15728;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15729;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE = 15730;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION = 15731;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT = 15732;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE = 15734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 15735;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTBINARY = 15736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 15737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE = 15738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION = 15739;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT = 15740;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER = 15741;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION = 15742;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT = 15743;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE = 15744;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLIENTPROCESSINGTIMEOUT = 15745;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD = 15746;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_INPUTARGUMENTS = 15747;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_OUTPUTARGUMENTS = 15748;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE = 15749;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_OUTPUTARGUMENTS = 15750;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT = 15751;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_INPUTARGUMENTS = 15752;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_OUTPUTARGUMENTS = 15753;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER = 15754;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE = 15755;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_ID = 15756;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NAME = 15757;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NUMBER = 15758;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 15759;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION = 15760;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_ID = 15761;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NAME = 15762;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NUMBER = 15763;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_TRANSITIONTIME = 15764;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 15765;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE = 15766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION = 15767;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT = 15768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 15769;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION = 15770;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT = 15771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 15772;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION = 15773;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT = 15774;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE = 15775;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION = 15776;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT = 15777;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE = 15778;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION = 15779;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT = 15780;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 15781;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION = 15782;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE = 15784;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 15785;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15786;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE = 15787;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION = 15788;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT = 15789;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER = 15790;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID = 15791;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI = 15792;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 15793;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_RESET = 15794;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE = 15795;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_INPUTARGUMENTS = 15796;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_OUTPUTARGUMENTS = 15797;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE = 15798;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_OUTPUTARGUMENTS = 15799;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE = 15800;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_INPUTARGUMENTS = 15801;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_OUTPUTARGUMENTS = 15802;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE = 15803;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE = 15804;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_ID = 15805;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NAME = 15806;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 15807;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 15808;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION = 15809;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_ID = 15810;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NAME = 15811;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 15812;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 15813;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 15814;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE = 15815;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE_STATENUMBER = 15816;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE = 15817;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE_STATENUMBER = 15818;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER = 15819;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER_STATENUMBER = 15820;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE = 15821;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE_STATENUMBER = 15822;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR = 15823;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR_STATENUMBER = 15824;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE = 15825;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE_TRANSITIONNUMBER = 15826;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER = 15827;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER_TRANSITIONNUMBER = 15828;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE = 15829;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE_TRANSITIONNUMBER = 15830;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE = 15831;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE_TRANSITIONNUMBER = 15832;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE = 15833;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE_TRANSITIONNUMBER = 15834;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR = 15835;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR_TRANSITIONNUMBER = 15836;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR = 15837;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR_TRANSITIONNUMBER = 15838;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR = 15839;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR_TRANSITIONNUMBER = 15840;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE = 15841;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE_TRANSITIONNUMBER = 15842;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_RESET = 15843;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS = 15844;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_STATE = 15845;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_ENABLE = 15846;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_DISABLE = 15847;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS = 15848;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS = 15849;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST = 15850;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS = 15851;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 15852;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE = 15854;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 15855;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE = 15857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION = 15858;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT = 15859;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE = 15860;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 15861;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15862;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE = 15863;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS = 15864;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS = 15865;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE = 15866;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 15867;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15868;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE = 15869;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 15870;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE = 15872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION = 15873;

const int UA_NS0ID_OVERRIDEVALUEHANDLING = 15874;

const int UA_NS0ID_OVERRIDEVALUEHANDLING_ENUMSTRINGS = 15875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT = 15876;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE = 15877;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 15878;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15879;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE = 15880;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 15881;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15882;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE = 15883;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION = 15884;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT = 15885;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE = 15886;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION = 15887;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT = 15888;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 15889;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION = 15890;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT = 15891;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE = 15892;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE = 15893;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE = 15894;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 15895;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 15896;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15897;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 15898;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 15899;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15900;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE = 15901;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTXML = 15902;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTBINARY = 15903;

const int UA_NS0ID_DATASETFIELDFLAGS = 15904;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS = 15905;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE = 15906;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS = 15907;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15908;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15909;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP = 15910;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15911;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS = 15912;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS = 15913;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15914;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS = 15915;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS = 15916;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP = 15917;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS = 15918;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 15919;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 15920;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15921;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 15922;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 15923;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15924;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 15925;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYMODE = 15926;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYGROUPID = 15927;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYKEYSERVICES = 15928;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 15929;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 15931;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYMODE = 15932;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYGROUPID = 15933;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYKEYSERVICES = 15934;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 15935;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 15936;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS = 15937;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 15938;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 15939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE = 15940;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 15941;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE = 15943;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION = 15944;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE = 15946;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 15947;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 15948;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTXML = 15949;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTXML = 15950;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTXML = 15951;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTXML = 15952;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTXML = 15953;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTXML = 15954;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTXML = 15955;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15956;

const int UA_NS0ID_OPCUANAMESPACEMETADATA = 15957;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEURI = 15958;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEVERSION = 15959;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEPUBLICATIONDATE = 15960;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_ISNAMESPACESUBSET = 15961;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNODEIDTYPES = 15962;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNUMERICNODEIDRANGE = 15963;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICSTRINGNODEIDPATTERN = 15964;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE = 15965;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SIZE = 15966;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITABLE = 15967;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_USERWRITABLE = 15968;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPENCOUNT = 15969;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_MIMETYPE = 15970;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN = 15971;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_INPUTARGUMENTS = 15972;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS = 15973;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE = 15974;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE_INPUTARGUMENTS = 15975;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ = 15976;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_INPUTARGUMENTS = 15977;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_OUTPUTARGUMENTS = 15978;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE = 15979;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE_INPUTARGUMENTS = 15980;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION = 15981;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS = 15982;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS = 15983;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION = 15984;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS = 15985;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_EXPORTNAMESPACE = 15986;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15987;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTXML = 15988;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 15989;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15990;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15991;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTXML = 15992;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15993;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 15994;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15995;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15996;

const int UA_NS0ID_ROLESETTYPE_ADDROLE = 15997;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_INPUTARGUMENTS = 15998;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_OUTPUTARGUMENTS = 15999;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE = 16000;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE_INPUTARGUMENTS = 16001;

const int UA_NS0ID_ADDROLEMETHODTYPE = 16002;

const int UA_NS0ID_ADDROLEMETHODTYPE_INPUTARGUMENTS = 16003;

const int UA_NS0ID_ADDROLEMETHODTYPE_OUTPUTARGUMENTS = 16004;

const int UA_NS0ID_REMOVEROLEMETHODTYPE = 16005;

const int UA_NS0ID_REMOVEROLEMETHODTYPE_INPUTARGUMENTS = 16006;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTXML = 16007;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16008;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16009;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTXML = 16010;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTXML = 16011;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTXML = 16012;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 16013;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16014;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16015;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16016;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16017;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16018;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16019;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 16020;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16021;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16022;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16023;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE = 16024;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 16025;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 16026;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER = 16027;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION = 16028;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT = 16029;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE = 16030;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION = 16031;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT = 16032;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 16033;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION = 16034;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT = 16035;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER = 16036;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 16037;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION = 16038;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT = 16039;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE = 16040;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY = 16041;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY_INPUTARGUMENTS = 16042;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY = 16043;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY_INPUTARGUMENTS = 16044;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION = 16045;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT = 16046;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE = 16047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION = 16048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT = 16049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 16050;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION = 16051;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE = 16053;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 16054;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE = 16056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION = 16057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT = 16058;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 16059;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 16060;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 16061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 16062;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 16063;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16064;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE = 16065;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 16066;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16067;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE = 16068;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION = 16069;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT = 16070;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE = 16071;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 16072;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16073;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 16074;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 16075;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 16076;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE = 16077;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 16078;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16079;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE = 16080;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 16081;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE = 16083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION = 16084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT = 16085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE = 16086;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 16087;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16088;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE = 16089;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 16090;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16091;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE = 16092;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION = 16093;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT = 16094;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE = 16095;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION = 16096;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT = 16097;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 16098;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION = 16099;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT = 16100;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 16101;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 16102;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 16103;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 16104;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 16105;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16106;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 16107;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 16108;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16109;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 16110;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 16111;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16112;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 16113;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION = 16114;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16115;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 16116;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION = 16117;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16118;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 16119;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION = 16120;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT = 16121;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 16122;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 16123;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 16124;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE = 16125;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTXML = 16126;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE = 16127;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION = 16128;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT = 16129;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 16130;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE = 16131;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION = 16132;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT = 16133;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTROLEPERMISSIONS = 16134;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTUSERROLEPERMISSIONS = 16135;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTACCESSRESTRICTIONS = 16136;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTROLEPERMISSIONS = 16137;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTUSERROLEPERMISSIONS = 16138;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTACCESSRESTRICTIONS = 16139;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTROLEPERMISSIONS = 16140;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTUSERROLEPERMISSIONS = 16141;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTACCESSRESTRICTIONS = 16142;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16143;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE = 16144;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION = 16145;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16146;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE = 16147;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 16148;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 16149;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTJSON = 16150;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTJSON = 16151;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16152;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTJSON = 16153;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTJSON = 16154;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTJSON = 16155;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTJSON = 16156;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16157;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16158;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTJSON = 16159;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 16160;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16161;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_IDENTITIES = 16162;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONS = 16163;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTS = 16164;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION = 16165;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION_INPUTARGUMENTS = 16166;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION = 16167;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION_INPUTARGUMENTS = 16168;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT = 16169;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT_INPUTARGUMENTS = 16170;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT = 16171;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT_INPUTARGUMENTS = 16172;

const int UA_NS0ID_ROLETYPE_IDENTITIES = 16173;

const int UA_NS0ID_ROLETYPE_APPLICATIONS = 16174;

const int UA_NS0ID_ROLETYPE_ENDPOINTS = 16175;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION = 16176;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION_INPUTARGUMENTS = 16177;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION = 16178;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION_INPUTARGUMENTS = 16179;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT = 16180;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT_INPUTARGUMENTS = 16181;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT = 16182;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT_INPUTARGUMENTS = 16183;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE = 16184;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16185;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE = 16186;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16187;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE = 16188;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE_INPUTARGUMENTS = 16189;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE = 16190;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE_INPUTARGUMENTS = 16191;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_IDENTITIES = 16192;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONS = 16193;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTS = 16194;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION = 16195;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION_INPUTARGUMENTS = 16196;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION = 16197;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION_INPUTARGUMENTS = 16198;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT = 16199;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT_INPUTARGUMENTS = 16200;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT = 16201;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT_INPUTARGUMENTS = 16202;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_IDENTITIES = 16203;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONS = 16204;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTS = 16205;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION = 16206;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION_INPUTARGUMENTS = 16207;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION = 16208;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION_INPUTARGUMENTS = 16209;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT = 16210;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT_INPUTARGUMENTS = 16211;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT = 16212;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT_INPUTARGUMENTS = 16213;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_IDENTITIES = 16214;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONS = 16215;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTS = 16216;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION = 16217;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION_INPUTARGUMENTS = 16218;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION = 16219;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION_INPUTARGUMENTS = 16220;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT = 16221;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT_INPUTARGUMENTS = 16222;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT = 16223;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT_INPUTARGUMENTS = 16224;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_IDENTITIES = 16225;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONS = 16226;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTS = 16227;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION = 16228;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION_INPUTARGUMENTS = 16229;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION = 16230;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION_INPUTARGUMENTS = 16231;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT = 16232;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT_INPUTARGUMENTS = 16233;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT = 16234;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT_INPUTARGUMENTS = 16235;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_IDENTITIES = 16236;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONS = 16237;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTS = 16238;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION = 16239;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION_INPUTARGUMENTS = 16240;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION = 16241;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION_INPUTARGUMENTS = 16242;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT = 16243;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT_INPUTARGUMENTS = 16244;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT = 16245;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT_INPUTARGUMENTS = 16246;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_IDENTITIES = 16247;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONS = 16248;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTS = 16249;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION = 16250;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION_INPUTARGUMENTS = 16251;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION = 16252;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION_INPUTARGUMENTS = 16253;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT = 16254;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT_INPUTARGUMENTS = 16255;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT = 16256;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT_INPUTARGUMENTS = 16257;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_IDENTITIES = 16258;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONS = 16259;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTS = 16260;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION = 16261;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION_INPUTARGUMENTS = 16262;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION = 16263;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION_INPUTARGUMENTS = 16264;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT = 16265;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT_INPUTARGUMENTS = 16266;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT = 16267;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT_INPUTARGUMENTS = 16268;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_IDENTITIES = 16269;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONS = 16270;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTS = 16271;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION = 16272;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION_INPUTARGUMENTS = 16273;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION = 16274;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION_INPUTARGUMENTS = 16275;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT = 16276;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT_INPUTARGUMENTS = 16277;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT = 16278;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT_INPUTARGUMENTS = 16279;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16280;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTJSON = 16281;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16282;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 16283;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16284;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16285;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTJSON = 16286;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16287;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16288;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET = 16289;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE = 16290;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS = 16291;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS = 16292;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16293;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS = 16294;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET = 16295;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE = 16296;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_INPUTARGUMENTS = 16297;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_OUTPUTARGUMENTS = 16298;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE = 16299;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE_INPUTARGUMENTS = 16300;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE = 16301;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS = 16302;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS = 16303;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16304;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS = 16305;

const int UA_NS0ID_AUDIODATATYPE = 16307;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16308;

const int UA_NS0ID_SELECTIONLISTTYPE = 16309;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTJSON = 16310;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTJSON = 16311;

const int UA_NS0ID_SELECTIONLISTTYPE_RESTRICTTOLIST = 16312;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE = 16313;

const int UA_NS0ID_FILESYSTEM = 16314;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER = 16315;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY = 16316;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS = 16317;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS = 16318;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE = 16319;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS = 16320;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS = 16321;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    16322;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16323;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY = 16324;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS = 16325;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS = 16326;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER = 16327;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SIZE = 16328;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITABLE = 16329;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_USERWRITABLE = 16330;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPENCOUNT = 16331;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_MIMETYPE = 16332;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN = 16333;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS = 16334;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS = 16335;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE = 16336;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS = 16337;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ = 16338;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS = 16339;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS = 16340;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE = 16341;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS = 16342;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION = 16343;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS = 16344;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS = 16345;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION = 16346;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS = 16347;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY = 16348;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_INPUTARGUMENTS = 16349;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_OUTPUTARGUMENTS = 16350;

const int UA_NS0ID_FILESYSTEM_CREATEFILE = 16351;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_INPUTARGUMENTS = 16352;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_OUTPUTARGUMENTS = 16353;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT = 16354;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 16355;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY = 16356;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_INPUTARGUMENTS = 16357;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_OUTPUTARGUMENTS = 16358;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_INPUTARGUMENTS = 16359;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_INPUTARGUMENTS = 16360;

const int UA_NS0ID_HASALARMSUPPRESSIONGROUP = 16361;

const int UA_NS0ID_ALARMGROUPMEMBER = 16362;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSID = 16363;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSNAME = 16364;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSID = 16365;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16366;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSID = 16367;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSNAME = 16368;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSID = 16369;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16370;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE = 16371;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_ID = 16372;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NAME = 16373;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NUMBER = 16374;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16375;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16376;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16377;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRUESTATE = 16378;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_FALSESTATE = 16379;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE = 16380;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_ID = 16381;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NAME = 16382;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NUMBER = 16383;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16384;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRANSITIONTIME = 16385;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16386;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRUESTATE = 16387;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_FALSESTATE = 16388;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLEENABLED = 16389;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND = 16390;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16391;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16392;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16393;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16394;

const int UA_NS0ID_ALARMCONDITIONTYPE_ONDELAY = 16395;

const int UA_NS0ID_ALARMCONDITIONTYPE_OFFDELAY = 16396;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUPFLAG = 16397;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUP = 16398;

const int UA_NS0ID_ALARMCONDITIONTYPE_ALARMGROUP_PLACEHOLDER = 16399;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMTIME = 16400;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMREPEATCOUNT = 16401;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCE = 16402;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESS = 16403;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16404;

const int UA_NS0ID_ALARMGROUPTYPE = 16405;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER = 16406;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTID = 16407;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTTYPE = 16408;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENODE = 16409;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENAME = 16410;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_TIME = 16411;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RECEIVETIME = 16412;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LOCALTIME = 16413;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MESSAGE = 16414;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SEVERITY = 16415;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSID = 16416;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSNAME = 16417;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSID = 16418;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSNAME = 16419;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONNAME = 16420;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_BRANCHID = 16421;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RETAIN = 16422;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE = 16423;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_ID = 16424;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NAME = 16425;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NUMBER = 16426;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 16427;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRANSITIONTIME = 16428;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 16429;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRUESTATE = 16430;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_FALSESTATE = 16431;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY = 16432;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY_SOURCETIMESTAMP = 16433;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY = 16434;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY_SOURCETIMESTAMP = 16435;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT = 16436;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT_SOURCETIMESTAMP = 16437;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CLIENTUSERID = 16438;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_DISABLE = 16439;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLE = 16440;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT = 16441;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT_INPUTARGUMENTS = 16442;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE = 16443;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_ID = 16444;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NAME = 16445;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NUMBER = 16446;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 16447;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRANSITIONTIME = 16448;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 16449;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRUESTATE = 16450;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_FALSESTATE = 16451;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE = 16452;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_ID = 16453;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NAME = 16454;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NUMBER = 16455;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 16456;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRANSITIONTIME = 16457;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 16458;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRUESTATE = 16459;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_FALSESTATE = 16460;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE = 16461;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE_INPUTARGUMENTS = 16462;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM = 16463;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM_INPUTARGUMENTS = 16464;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE = 16465;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_ID = 16466;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NAME = 16467;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NUMBER = 16468;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 16469;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRANSITIONTIME = 16470;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 16471;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRUESTATE = 16472;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_FALSESTATE = 16473;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_INPUTNODE = 16474;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE = 16475;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_ID = 16476;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NAME = 16477;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NUMBER = 16478;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 16479;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRANSITIONTIME = 16480;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 16481;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRUESTATE = 16482;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_FALSESTATE = 16483;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE = 16484;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_ID = 16485;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NAME = 16486;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NUMBER = 16487;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16488;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRANSITIONTIME = 16489;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16490;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRUESTATE = 16491;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_FALSESTATE = 16492;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE = 16493;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_ID = 16494;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NAME = 16495;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NUMBER = 16496;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16497;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRANSITIONTIME = 16498;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16499;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRUESTATE = 16500;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_FALSESTATE = 16501;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE = 16502;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE = 16503;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_ID = 16504;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NAME = 16505;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NUMBER = 16506;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    16507;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION = 16508;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_ID = 16509;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NAME = 16510;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NUMBER = 16511;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    16512;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    16513;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVETIME = 16514;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE = 16515;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE = 16516;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE = 16517;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 16518;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDORSHELVED = 16519;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MAXTIMESHELVED = 16520;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLEENABLED = 16521;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND = 16522;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    16523;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16524;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16525;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16526;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ONDELAY = 16527;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OFFDELAY = 16528;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUPFLAG = 16529;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUP = 16530;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMTIME = 16531;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMREPEATCOUNT = 16532;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCE = 16533;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS = 16534;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP = 16535;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSID = 16536;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16537;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE = 16538;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16539;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16540;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16541;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16542;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16543;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16544;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16545;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16546;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE = 16547;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_ID = 16548;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NAME = 16549;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NUMBER = 16550;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16551;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16552;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16553;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16554;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16555;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLEENABLED = 16556;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND = 16557;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS = 16558;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS = 16559;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP = 16560;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS = 16561;

const int UA_NS0ID_LIMITALARMTYPE_ONDELAY = 16562;

const int UA_NS0ID_LIMITALARMTYPE_OFFDELAY = 16563;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUPFLAG = 16564;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUP = 16565;

const int UA_NS0ID_LIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16566;

const int UA_NS0ID_LIMITALARMTYPE_REALARMTIME = 16567;

const int UA_NS0ID_LIMITALARMTYPE_REALARMREPEATCOUNT = 16568;

const int UA_NS0ID_LIMITALARMTYPE_SILENCE = 16569;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESS = 16570;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS = 16571;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16572;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHLIMIT = 16573;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLIMIT = 16574;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLOWLIMIT = 16575;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16576;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16577;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16578;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16579;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16580;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16581;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16582;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16583;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16584;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16585;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16586;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16587;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16588;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16589;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16590;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16591;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16592;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16593;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16594;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16595;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16596;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16597;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION = 16598;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_INPUTARGUMENTS = 16599;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_OUTPUTARGUMENTS = 16600;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE = 16601;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ONDELAY = 16602;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OFFDELAY = 16603;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16604;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16605;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16606;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMTIME = 16607;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16608;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCE = 16609;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESS = 16610;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS = 16611;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16612;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16613;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16614;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16615;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16616;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16617;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16618;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16619;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16620;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16621;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16622;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16623;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16624;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16625;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16626;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16627;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16628;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16629;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16630;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16631;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16632;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16633;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16634;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16635;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16636;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16637;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS = 16638;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE = 16639;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS = 16640;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS = 16641;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ONDELAY = 16642;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OFFDELAY = 16643;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16644;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16645;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16646;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMTIME = 16647;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16648;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCE = 16649;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESS = 16650;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER = 16651;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16652;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16653;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16654;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16655;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16656;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16657;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16658;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16659;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16660;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16661;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16662;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16663;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16664;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16665;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16666;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16667;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16668;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16669;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16670;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16671;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16672;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16674;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16675;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16676;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16677;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 16678;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 16679;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER = 16680;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 16681;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ONDELAY = 16682;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OFFDELAY = 16683;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16684;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16685;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16686;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMTIME = 16687;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16688;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCE = 16689;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESS = 16690;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE = 16691;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16692;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16693;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16694;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16695;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16696;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16697;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16698;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16699;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16700;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16701;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16702;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16703;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16704;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16705;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16706;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16707;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16708;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16709;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16710;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16711;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16712;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16713;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16714;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16715;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16716;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16717;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_INPUTARGUMENTS = 16718;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_OUTPUTARGUMENTS = 16719;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID = 16720;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK = 16721;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ONDELAY = 16722;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OFFDELAY = 16723;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16724;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16725;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16726;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMTIME = 16727;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16728;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCE = 16729;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESS = 16730;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT = 16731;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16732;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16733;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16734;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16735;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16736;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16737;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16738;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16739;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME = 16740;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16741;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16742;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16743;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16744;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16745;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16746;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16747;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16748;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16749;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16750;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16751;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16752;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16753;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE = 16754;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE = 16755;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16756;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16757;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS = 16758;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETCLASSID = 16759;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID = 16760;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK = 16761;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16762;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16763;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16764;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16765;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER = 16766;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16767;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16768;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16769;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16770;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT = 16771;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16772;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16773;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16774;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16775;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16780;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME = 16781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16782;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16783;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16784;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16791;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16793;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE = 16795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE = 16796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16798;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS = 16799;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETCLASSID = 16800;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID = 16801;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK = 16802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16804;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER = 16807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16811;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT = 16812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16813;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16817;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID = 16818;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME = 16819;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16820;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID = 16821;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME = 16822;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16823;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16824;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16825;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16826;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16827;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16828;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16829;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16830;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16831;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER = 16832;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16833;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16834;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16835;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE = 16836;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE = 16837;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16838;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16839;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS = 16840;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETCLASSID = 16841;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE = 16842;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS = 16843;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16844;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16845;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16846;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16847;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER = 16848;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16849;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16850;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16851;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16852;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16853;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16854;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16855;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16856;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16857;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16858;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID = 16859;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME = 16860;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16861;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID = 16862;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME = 16863;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16864;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16865;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16866;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16867;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16868;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16869;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16870;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16871;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16872;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER = 16873;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16874;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16875;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16876;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE = 16877;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE = 16878;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16879;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16880;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE = 16881;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS = 16882;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS = 16883;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER = 16884;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16885;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16886;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16887;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16888;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER = 16889;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16890;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16891;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16892;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16893;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_INPUTARGUMENTS = 16894;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16895;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16896;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16897;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16898;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16899;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSID = 16900;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSNAME = 16901;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE = 16902;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_ID = 16903;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NAME = 16904;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16905;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16906;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16907;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16908;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16909;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16910;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE = 16911;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_ID = 16912;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NAME = 16913;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NUMBER = 16914;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16915;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16916;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16917;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRUESTATE = 16918;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_FALSESTATE = 16919;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLEENABLED = 16920;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND = 16921;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_OUTPUTARGUMENTS = 16922;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER = 16923;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER_INPUTARGUMENTS = 16924;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETCLASSID = 16925;

const int UA_NS0ID_DISCRETEALARMTYPE_ONDELAY = 16926;

const int UA_NS0ID_DISCRETEALARMTYPE_OFFDELAY = 16927;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUPFLAG = 16928;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUP = 16929;

const int UA_NS0ID_DISCRETEALARMTYPE_ALARMGROUP_PLACEHOLDER = 16930;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMTIME = 16931;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMREPEATCOUNT = 16932;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCE = 16933;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESS = 16934;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE = 16935;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16936;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16937;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16938;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16939;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16940;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16941;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16942;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16943;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16944;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16945;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16946;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE = 16947;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_ID = 16948;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NAME = 16949;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16950;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16951;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16952;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16953;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16954;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16955;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLEENABLED = 16956;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND = 16957;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS = 16958;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS = 16959;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE = 16960;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS = 16961;

const int UA_NS0ID_OFFNORMALALARMTYPE_ONDELAY = 16962;

const int UA_NS0ID_OFFNORMALALARMTYPE_OFFDELAY = 16963;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 16964;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUP = 16965;

const int UA_NS0ID_OFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 16966;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMTIME = 16967;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMREPEATCOUNT = 16968;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCE = 16969;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESS = 16970;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS = 16971;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16972;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16973;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16974;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16975;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16976;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16977;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 16978;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16979;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 16980;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16981;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16982;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE = 16983;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_ID = 16984;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NAME = 16985;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16986;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16987;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16988;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16989;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16990;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16991;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLEENABLED = 16992;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND = 16993;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER = 16994;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_INPUTARGUMENTS = 16995;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_OUTPUTARGUMENTS = 16996;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER = 16997;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ONDELAY = 16998;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OFFDELAY = 16999;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 17000;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUP = 17001;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 17002;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMTIME = 17003;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMREPEATCOUNT = 17004;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCE = 17005;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESS = 17006;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER_INPUTARGUMENTS = 17007;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSID = 17008;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSNAME = 17009;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE = 17010;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_ID = 17011;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NAME = 17012;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17013;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 17014;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 17015;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 17016;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17017;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17018;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE = 17019;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_ID = 17020;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NAME = 17021;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NUMBER = 17022;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 17023;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17024;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 17025;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRUESTATE = 17026;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_FALSESTATE = 17027;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLEENABLED = 17028;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND = 17029;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE = 17030;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_INPUTARGUMENTS = 17031;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS = 17032;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE = 17033;

const int UA_NS0ID_TRIPALARMTYPE_ONDELAY = 17034;

const int UA_NS0ID_TRIPALARMTYPE_OFFDELAY = 17035;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUPFLAG = 17036;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUP = 17037;

const int UA_NS0ID_TRIPALARMTYPE_ALARMGROUP_PLACEHOLDER = 17038;

const int UA_NS0ID_TRIPALARMTYPE_REALARMTIME = 17039;

const int UA_NS0ID_TRIPALARMTYPE_REALARMREPEATCOUNT = 17040;

const int UA_NS0ID_TRIPALARMTYPE_SILENCE = 17041;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESS = 17042;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_INPUTARGUMENTS = 17043;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSID = 17044;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSNAME = 17045;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE = 17046;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_ID = 17047;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NAME = 17048;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17049;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 17050;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 17051;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 17052;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17053;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17054;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE = 17055;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_ID = 17056;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NAME = 17057;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NUMBER = 17058;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 17059;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17060;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 17061;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRUESTATE = 17062;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_FALSESTATE = 17063;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLEENABLED = 17064;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND = 17065;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS = 17066;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE = 17067;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17068;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_OUTPUTARGUMENTS = 17069;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ONDELAY = 17070;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OFFDELAY = 17071;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUPFLAG = 17072;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUP = 17073;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ALARMGROUP_PLACEHOLDER = 17074;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMTIME = 17075;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMREPEATCOUNT = 17076;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCE = 17077;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESS = 17078;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE = 17079;

const int UA_NS0ID_DISCREPANCYALARMTYPE = 17080;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTID = 17081;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTTYPE = 17082;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENODE = 17083;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENAME = 17084;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TIME = 17085;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RECEIVETIME = 17086;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LOCALTIME = 17087;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MESSAGE = 17088;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SEVERITY = 17089;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSID = 17090;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSNAME = 17091;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSID = 17092;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSNAME = 17093;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONNAME = 17094;

const int UA_NS0ID_DISCREPANCYALARMTYPE_BRANCHID = 17095;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RETAIN = 17096;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE = 17097;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_ID = 17098;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NAME = 17099;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NUMBER = 17100;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 17101;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 17102;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 17103;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRUESTATE = 17104;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_FALSESTATE = 17105;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY = 17106;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY_SOURCETIMESTAMP = 17107;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY = 17108;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 17109;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT = 17110;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT_SOURCETIMESTAMP = 17111;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CLIENTUSERID = 17112;

const int UA_NS0ID_DISCREPANCYALARMTYPE_DISABLE = 17113;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLE = 17114;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT = 17115;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 17116;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH = 17117;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 17118;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2 = 17119;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 17120;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE = 17121;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_ID = 17122;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NAME = 17123;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NUMBER = 17124;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 17125;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 17126;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 17127;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRUESTATE = 17128;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_FALSESTATE = 17129;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE = 17130;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_ID = 17131;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NAME = 17132;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NUMBER = 17133;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 17134;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 17135;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 17136;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 17137;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 17138;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE = 17139;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 17140;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM = 17141;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM_INPUTARGUMENTS = 17142;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE = 17143;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_ID = 17144;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NAME = 17145;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NUMBER = 17146;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 17147;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 17148;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 17149;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRUESTATE = 17150;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_FALSESTATE = 17151;

const int UA_NS0ID_DISCREPANCYALARMTYPE_INPUTNODE = 17152;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE = 17153;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_ID = 17154;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NAME = 17155;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NUMBER = 17156;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 17157;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 17158;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 17159;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 17160;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 17161;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE = 17162;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_ID = 17163;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NAME = 17164;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17165;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 17166;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 17167;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 17168;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17169;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17170;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE = 17171;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_ID = 17172;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NAME = 17173;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NUMBER = 17174;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 17175;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17176;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 17177;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRUESTATE = 17178;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_FALSESTATE = 17179;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE = 17180;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 17181;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 17182;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 17183;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 17184;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 17185;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 17186;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 17187;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 17188;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 17189;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 17190;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 17191;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 17192;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVE = 17193;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 17194;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 17195;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 17196;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDORSHELVED = 17197;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MAXTIMESHELVED = 17198;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLEENABLED = 17199;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND = 17200;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17201;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE = 17202;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTSETTINGS = 17203;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE = 17204;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ONDELAY = 17205;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OFFDELAY = 17206;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUPFLAG = 17207;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUP = 17208;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ALARMGROUP_PLACEHOLDER = 17209;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMTIME = 17210;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMREPEATCOUNT = 17211;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCE = 17212;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESS = 17213;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_WRITERGROUPID = 17214;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TARGETVALUENODE = 17215;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EXPECTEDTIME = 17216;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TOLERANCE = 17217;

const int UA_NS0ID_SAFETYCONDITIONCLASSTYPE = 17218;

const int UA_NS0ID_HIGHLYMANAGEDALARMCONDITIONCLASSTYPE = 17219;

const int UA_NS0ID_TRAININGCONDITIONCLASSTYPE = 17220;

const int UA_NS0ID_TESTINGCONDITIONCLASSTYPE = 17221;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONEVENTID = 17222;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONEVENTID = 17223;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONEVENTID = 17224;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE = 17225;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTID = 17226;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTTYPE = 17227;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENODE = 17228;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENAME = 17229;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_TIME = 17230;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_RECEIVETIME = 17231;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_LOCALTIME = 17232;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_MESSAGE = 17233;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SEVERITY = 17234;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_ACTIONTIMESTAMP = 17235;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_STATUS = 17236;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SERVERID = 17237;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTAUDITENTRYID = 17238;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTUSERID = 17239;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_METHODID = 17240;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_INPUTARGUMENTS = 17241;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE = 17242;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTID = 17243;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTTYPE = 17244;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENODE = 17245;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENAME = 17246;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_TIME = 17247;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_RECEIVETIME = 17248;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_LOCALTIME = 17249;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_MESSAGE = 17250;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SEVERITY = 17251;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_ACTIONTIMESTAMP = 17252;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_STATUS = 17253;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SERVERID = 17254;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTAUDITENTRYID = 17255;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTUSERID = 17256;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_METHODID = 17257;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_INPUTARGUMENTS = 17258;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE = 17259;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTID = 17260;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTTYPE = 17261;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENODE = 17262;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENAME = 17263;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_TIME = 17264;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_RECEIVETIME = 17265;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_LOCALTIME = 17266;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_MESSAGE = 17267;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SEVERITY = 17268;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_ACTIONTIMESTAMP = 17269;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_STATUS = 17270;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SERVERID = 17271;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTAUDITENTRYID = 17272;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTUSERID = 17273;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_METHODID = 17274;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_INPUTARGUMENTS = 17275;

const int UA_NS0ID_HASEFFECTDISABLE = 17276;

const int UA_NS0ID_ALARMRATEVARIABLETYPE = 17277;

const int UA_NS0ID_ALARMRATEVARIABLETYPE_RATE = 17278;

const int UA_NS0ID_ALARMMETRICSTYPE = 17279;

const int UA_NS0ID_ALARMMETRICSTYPE_ALARMCOUNT = 17280;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMACTIVESTATE = 17281;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMUNACK = 17282;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMREALARMCOUNT = 17283;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE = 17284;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE_RATE = 17285;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE = 17286;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE_RATE = 17287;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE = 17288;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE_RATE = 17289;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS = 17290;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS = 17291;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI = 17292;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER = 17293;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_INPUTARGUMENTS = 17294;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST = 17295;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS = 17296;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS_INPUTARGUMENTS = 17297;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE = 17298;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 17299;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17300;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_OUTPUTARGUMENTS = 17301;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE = 17302;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17303;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 17304;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17305;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI = 17306;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS = 17307;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS = 17308;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_RESTRICTTOLIST = 17309;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER = 17310;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYMODE = 17311;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYGROUPID = 17312;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES = 17313;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS = 17314;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_STATE = 17315;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_ENABLE = 17316;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_DISABLE = 17317;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PUBLISHINGINTERVAL = 17318;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_KEEPALIVETIME = 17319;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17320;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PRIORITY = 17321;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_LOCALEIDS = 17322;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER = 17323;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER_INPUTARGUMENTS = 17324;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER = 17325;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYMODE = 17326;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYGROUPID = 17327;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES = 17328;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS = 17329;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_STATE = 17330;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_ENABLE = 17331;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_DISABLE = 17332;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER = 17333;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER_INPUTARGUMENTS = 17334;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17335;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17336;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 17337;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17338;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17339;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17340;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17341;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 17342;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 17343;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17344;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17345;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17346;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 17347;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17348;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17349;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17350;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17351;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 17352;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS = 17353;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    17354;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER = 17355;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP = 17356;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS = 17357;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS = 17358;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP = 17359;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS = 17360;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS = 17361;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP = 17362;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS = 17363;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS = 17364;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS_INPUTARGUMENTS = 17365;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION = 17366;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_INPUTARGUMENTS = 17367;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_OUTPUTARGUMENTS = 17368;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION = 17369;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION_INPUTARGUMENTS = 17370;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS = 17371;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS = 17372;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS = 17373;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS = 17374;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS = 17375;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 17376;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 17377;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE = 17378;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS = 17379;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS = 17380;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE = 17381;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS = 17382;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS = 17383;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET = 17384;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS = 17385;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES = 17386;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_INPUTARGUMENTS = 17387;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_OUTPUTARGUMENTS = 17388;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR = 17389;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_INPUTARGUMENTS = 17390;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_OUTPUTARGUMENTS = 17391;

const int UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE = 17392;

const int UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS = 17393;

const int UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS = 17394;

const int UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE = 17395;

const int UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_INPUTARGUMENTS = 17396;

const int UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_OUTPUTARGUMENTS = 17397;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER = 17398;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_INPUTARGUMENTS = 17399;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_OUTPUTARGUMENTS = 17400;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 17401;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 17402;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER = 17403;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 17404;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS = 17405;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_STATE = 17406;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_ENABLE = 17407;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_DISABLE = 17408;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS = 17409;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17410;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION = 17411;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17412;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 17413;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 17414;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 17415;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR = 17416;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17417;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 17418;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 17419;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 17420;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_RESET = 17421;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_SUBERROR = 17422;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS = 17423;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR = 17424;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 17425;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 17426;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP = 17427;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_INPUTARGUMENTS = 17428;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 17429;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 17430;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 17431;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 17432;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 17433;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 17434;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 17435;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 17436;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 17437;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 17438;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 17439;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 17440;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 17441;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 17442;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 17443;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 17444;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 17445;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 17446;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 17447;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 17448;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 17449;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 17450;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 17451;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 17452;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 17453;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 17454;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 17455;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_OUTPUTARGUMENTS = 17456;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES = 17457;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS = 17458;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 17459;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS = 17460;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 17461;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS = 17462;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 17463;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS = 17464;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP = 17465;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 17466;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17467;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 17468;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17469;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 17470;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 17471;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 17472;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17473;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION = 17474;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 17475;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 17476;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETOFFSET = 17477;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES = 17478;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUPPORTEDTRANSPORTPROFILES = 17479;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES = 17480;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUPPORTEDTRANSPORTPROFILES = 17481;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES = 17482;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES = 17483;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES = 17484;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_CONNECTIONPROPERTIES = 17485;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES = 17486;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES = 17487;

const int UA_NS0ID_PUBSUBGROUPTYPE_GROUPPROPERTIES = 17488;

const int UA_NS0ID_WRITERGROUPTYPE_GROUPPROPERTIES = 17489;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES = 17490;

const int UA_NS0ID_READERGROUPTYPE_GROUPPROPERTIES = 17491;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETREADERPROPERTIES = 17492;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERPROPERTIES = 17493;

const int UA_NS0ID_DATASETREADERTYPE_DATASETREADERPROPERTIES = 17494;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_OUTPUTARGUMENTS = 17495;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE = 17496;

const int UA_NS0ID_ANALOGUNITTYPE = 17497;

const int UA_NS0ID_ANALOGUNITTYPE_DEFINITION = 17498;

const int UA_NS0ID_ANALOGUNITTYPE_VALUEPRECISION = 17499;

const int UA_NS0ID_ANALOGUNITTYPE_INSTRUMENTRANGE = 17500;

const int UA_NS0ID_ANALOGUNITTYPE_EURANGE = 17501;

const int UA_NS0ID_ANALOGUNITTYPE_ENGINEERINGUNITS = 17502;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS = 17503;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17504;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 17505;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS = 17506;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_INPUTARGUMENTS = 17507;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_OUTPUTARGUMENTS = 17508;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 17509;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 17510;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER = 17511;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_RESOURCEURI = 17512;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_PROFILEURI = 17513;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ENDPOINTURLS = 17514;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICESTATUS = 17515;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY = 17516;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS = 17517;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17518;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL = 17519;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS = 17520;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL = 17521;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL = 17522;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_INPUTARGUMENTS = 17523;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_OUTPUTARGUMENTS = 17524;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY = 17525;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS = 17526;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS = 17527;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL = 17528;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_INPUTARGUMENTS = 17529;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_OUTPUTARGUMENTS = 17530;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE = 17531;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_INPUTARGUMENTS = 17532;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_OUTPUTARGUMENTS = 17533;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY = 17534;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_INPUTARGUMENTS = 17535;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_OUTPUTARGUMENTS = 17536;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTBINARY = 17537;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE = 17538;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION = 17539;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT = 17540;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTXML = 17541;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE = 17542;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION = 17543;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT = 17544;

const int UA_NS0ID_RSAENCRYPTEDSECRET = 17545;

const int UA_NS0ID_ECCENCRYPTEDSECRET = 17546;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTJSON = 17547;

const int UA_NS0ID_EPHEMERALKEYTYPE = 17548;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTBINARY = 17549;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE = 17550;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17551;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT = 17552;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTXML = 17553;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE = 17554;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17555;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT = 17556;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTJSON = 17557;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_HEADERLAYOUTURI = 17558;

const int UA_NS0ID_WRITERGROUPTYPE_HEADERLAYOUTURI = 17559;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_KEYFRAMECOUNT = 17560;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE = 17561;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_HEADERLAYOUTURI = 17562;

const int UA_NS0ID_DATASETREADERTYPE_KEYFRAMECOUNT = 17563;

const int UA_NS0ID_DATASETREADERTYPE_HEADERLAYOUTURI = 17564;

const int UA_NS0ID_BASEANALOGTYPE_DEFINITION = 17565;

const int UA_NS0ID_BASEANALOGTYPE_VALUEPRECISION = 17566;

const int UA_NS0ID_BASEANALOGTYPE_INSTRUMENTRANGE = 17567;

const int UA_NS0ID_BASEANALOGTYPE_EURANGE = 17568;

const int UA_NS0ID_BASEANALOGTYPE_ENGINEERINGUNITS = 17569;

const int UA_NS0ID_ANALOGUNITRANGETYPE = 17570;

const int UA_NS0ID_ANALOGUNITRANGETYPE_DEFINITION = 17571;

const int UA_NS0ID_ANALOGUNITRANGETYPE_VALUEPRECISION = 17572;

const int UA_NS0ID_ANALOGUNITRANGETYPE_INSTRUMENTRANGE = 17573;

const int UA_NS0ID_ANALOGUNITRANGETYPE_EURANGE = 17574;

const int UA_NS0ID_ANALOGUNITRANGETYPE_ENGINEERINGUNITS = 17575;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONS = 17576;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 17577;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 17578;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONS = 17579;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 17580;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 17581;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONS = 17582;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 17583;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_RESTRICTTOLIST = 17584;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONS = 17585;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 17586;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_RESTRICTTOLIST = 17587;

const int UA_NS0ID_INDEX = 17588;

const int UA_NS0ID_DICTIONARYENTRYTYPE = 17589;

const int UA_NS0ID_DICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17590;

const int UA_NS0ID_DICTIONARYFOLDERTYPE = 17591;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYFOLDERNAME_PLACEHOLDER = 17592;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17593;

const int UA_NS0ID_DICTIONARIES = 17594;

const int UA_NS0ID_DICTIONARIES_DICTIONARYFOLDERNAME_PLACEHOLDER = 17595;

const int UA_NS0ID_DICTIONARIES_DICTIONARYENTRYNAME_PLACEHOLDER = 17596;

const int UA_NS0ID_HASDICTIONARYENTRY = 17597;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE = 17598;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17599;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE = 17600;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17601;

const int UA_NS0ID_BASEINTERFACETYPE = 17602;

const int UA_NS0ID_HASINTERFACE = 17603;

const int UA_NS0ID_HASADDIN = 17604;

const int UA_NS0ID_DEFAULTINSTANCEBROWSENAME = 17605;

const int UA_NS0ID_GENERICATTRIBUTEVALUE = 17606;

const int UA_NS0ID_GENERICATTRIBUTES = 17607;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTXML = 17608;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTXML = 17609;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTBINARY = 17610;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTBINARY = 17611;

const int UA_NS0ID_SERVERTYPE_LOCALTIME = 17612;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_INPUTARGUMENTS = 17613;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_OUTPUTARGUMENTS = 17614;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUSCODEID = 17615;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUSCODEID = 17616;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUSCODEID = 17617;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUSCODEID = 17618;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUSCODEID = 17619;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUSCODEID = 17620;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUSCODEID = 17621;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUSCODEID = 17622;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUSCODEID = 17623;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUSCODEID = 17624;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUSCODEID = 17625;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUSCODEID = 17626;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUSCODEID = 17627;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUSCODEID = 17628;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUSCODEID = 17629;

const int UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE = 17630;

const int UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_INPUTARGUMENTS = 17631;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONS = 17632;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONDESCRIPTIONS = 17633;

const int UA_NS0ID_SERVER_LOCALTIME = 17634;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLESTATES = 17635;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLETRANSITIONS = 17636;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLESTATES = 17637;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLETRANSITIONS = 17638;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLESTATES = 17639;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17640;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE = 17641;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTID = 17642;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTTYPE = 17643;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENODE = 17644;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENAME = 17645;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_TIME = 17646;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_RECEIVETIME = 17647;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_LOCALTIME = 17648;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_MESSAGE = 17649;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SEVERITY = 17650;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 17651;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_STATUS = 17652;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SERVERID = 17653;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 17654;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTUSERID = 17655;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_METHODID = 17656;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_INPUTARGUMENTS = 17657;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLESTATES = 17658;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17659;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLESTATES = 17660;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLETRANSITIONS = 17661;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLESTATES = 17662;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17663;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17664;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17665;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLESTATES = 17666;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17667;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17668;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17669;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17670;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS = 17671;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17672;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17674;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17675;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17676;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17677;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17678;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS = 17679;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17680;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17681;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17682;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17683;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17684;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS = 17685;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17686;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17687;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17688;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17690;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS = 17691;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17692;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17693;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17694;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17695;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17696;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17697;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17698;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17699;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17700;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17701;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17702;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17703;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLESTATES = 17704;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17705;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS = 17706;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS = 17707;

const int UA_NS0ID_INTERFACETYPES = 17708;

const int UA_NS0ID_RATIONALNUMBERTYPE = 17709;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONS = 17710;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS = 17711;

const int UA_NS0ID_RATIONALNUMBERTYPE_NUMERATOR = 17712;

const int UA_NS0ID_RATIONALNUMBERTYPE_DENOMINATOR = 17713;

const int UA_NS0ID_VECTORTYPE = 17714;

const int UA_NS0ID_VECTORTYPE_VECTORUNIT = 17715;

const int UA_NS0ID_THREEDVECTORTYPE = 17716;

const int UA_NS0ID_THREEDVECTORTYPE_VECTORUNIT = 17717;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT = 17718;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 17719;

const int UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_OUTPUTARGUMENTS = 17720;

const int UA_NS0ID_CONNECTIONTRANSPORTTYPE = 17721;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT = 17722;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 17723;

const int UA_NS0ID_PUBSUBGROUPTYPE_MAXNETWORKMESSAGESIZE = 17724;

const int UA_NS0ID_WRITERGROUPTYPE = 17725;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYMODE = 17726;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYGROUPID = 17727;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYKEYSERVICES = 17728;

const int UA_NS0ID_WRITERGROUPTYPE_MAXNETWORKMESSAGESIZE = 17729;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS = 17730;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_STATE = 17731;

const int UA_NS0ID_AUTHORIZATIONSERVICES = 17732;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_ENABLE = 17734;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_DISABLE = 17735;

const int UA_NS0ID_WRITERGROUPTYPE_WRITERGROUPID = 17736;

const int UA_NS0ID_WRITERGROUPTYPE_PUBLISHINGINTERVAL = 17737;

const int UA_NS0ID_WRITERGROUPTYPE_KEEPALIVETIME = 17738;

const int UA_NS0ID_WRITERGROUPTYPE_PRIORITY = 17739;

const int UA_NS0ID_WRITERGROUPTYPE_LOCALEIDS = 17740;

const int UA_NS0ID_WRITERGROUPTYPE_TRANSPORTSETTINGS = 17741;

const int UA_NS0ID_WRITERGROUPTYPE_MESSAGESETTINGS = 17742;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER = 17743;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID = 17744;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK = 17745;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT = 17746;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS = 17747;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS = 17748;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 17749;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE = 17750;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE = 17751;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE = 17752;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS = 17753;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17754;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 17755;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17756;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 17757;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 17758;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 17759;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 17760;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 17761;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 17762;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 17763;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 17764;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 17765;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 17766;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 17767;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 17768;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 17769;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 17770;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17771;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17772;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 17773;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17774;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17775;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17776;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17777;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 17778;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17779;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17780;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17781;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17782;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 17783;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17784;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17785;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17786;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17787;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 17788;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17789;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17790;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17791;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17792;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 17793;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17794;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17795;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17796;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17797;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 17798;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES = 17799;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    17800;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    17801;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    17802;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    17803;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER = 17804;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    17805;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 17806;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    17807;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 17808;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    17809;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 17810;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    17811;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS = 17812;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17813;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 17814;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17815;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 17816;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 17817;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 17818;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 17819;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17820;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 17821;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 17822;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 17823;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_RESET = 17824;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_SUBERROR = 17825;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS = 17826;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 17827;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 17828;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 17829;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 17830;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 17831;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 17832;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 17833;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 17834;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 17835;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 17836;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 17837;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 17838;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 17839;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 17840;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 17841;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 17842;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 17843;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 17844;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 17845;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 17846;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 17847;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 17848;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 17849;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 17850;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 17851;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE = 17852;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 17853;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 17854;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 17855;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 17856;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 17857;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 17858;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES = 17859;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICECERTIFICATE = 17860;

const int UA_NS0ID_DECIMALDATATYPE = 17861;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTXML = 17862;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTBINARY = 17863;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE = 17864;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_LISTID = 17865;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_AGENCYID = 17866;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_VERSIONID = 17867;

const int UA_NS0ID_ALARMCONDITIONTYPE_UNSUPPRESS = 17868;

const int UA_NS0ID_ALARMCONDITIONTYPE_REMOVEFROMSERVICE = 17869;

const int UA_NS0ID_ALARMCONDITIONTYPE_PLACEINSERVICE = 17870;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION = 17871;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL = 17872;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE = 17873;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS = 17874;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS = 17875;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE = 17876;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE = 17877;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE = 17878;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_LISTID = 17879;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17880;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17881;

const int UA_NS0ID_LIMITALARMTYPE_UNSUPPRESS = 17882;

const int UA_NS0ID_LIMITALARMTYPE_REMOVEFROMSERVICE = 17883;

const int UA_NS0ID_LIMITALARMTYPE_PLACEINSERVICE = 17884;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION = 17885;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17886;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17887;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17888;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17889;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17890;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17891;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL = 17892;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17893;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17894;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17895;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17896;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17897;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17898;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE = 17899;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS = 17900;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE = 17901;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION = 17902;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL = 17903;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17904;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17905;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE = 17906;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 17907;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 17908;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 17909;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 17910;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17911;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17912;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS = 17913;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17914;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17915;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID = 17916;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17917;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17918;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17919;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 17920;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID = 17921;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID = 17922;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID = 17923;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17924;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17925;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17926;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS = 17927;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17928;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17929;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID = 17930;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17931;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17932;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17933;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 17934;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID = 17935;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID = 17936;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID = 17937;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17938;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17939;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17940;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID = 17941;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_LISTID = 17942;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_AGENCYID = 17943;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_VERSIONID = 17944;

const int UA_NS0ID_DISCRETEALARMTYPE_UNSUPPRESS = 17945;

const int UA_NS0ID_DISCRETEALARMTYPE_REMOVEFROMSERVICE = 17946;

const int UA_NS0ID_DISCRETEALARMTYPE_PLACEINSERVICE = 17947;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL = 17948;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17949;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17950;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17951;

const int UA_NS0ID_OFFNORMALALARMTYPE_UNSUPPRESS = 17952;

const int UA_NS0ID_OFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17953;

const int UA_NS0ID_OFFNORMALALARMTYPE_PLACEINSERVICE = 17954;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID = 17955;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17956;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17957;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17958;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_UNSUPPRESS = 17959;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17960;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_PLACEINSERVICE = 17961;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL = 17962;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_LISTID = 17963;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_AGENCYID = 17964;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_VERSIONID = 17965;

const int UA_NS0ID_TRIPALARMTYPE_UNSUPPRESS = 17966;

const int UA_NS0ID_TRIPALARMTYPE_REMOVEFROMSERVICE = 17967;

const int UA_NS0ID_TRIPALARMTYPE_PLACEINSERVICE = 17968;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER = 17969;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_LISTID = 17970;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17971;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_VERSIONID = 17972;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_UNSUPPRESS = 17973;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REMOVEFROMSERVICE = 17974;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_PLACEINSERVICE = 17975;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_INPUTARGUMENTS = 17976;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_LISTID = 17977;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_AGENCYID = 17978;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_VERSIONID = 17979;

const int UA_NS0ID_DISCREPANCYALARMTYPE_UNSUPPRESS = 17980;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REMOVEFROMSERVICE = 17981;

const int UA_NS0ID_DISCREPANCYALARMTYPE_PLACEINSERVICE = 17982;

const int UA_NS0ID_HASEFFECTENABLE = 17983;

const int UA_NS0ID_HASEFFECTSUPPRESSED = 17984;

const int UA_NS0ID_HASEFFECTUNSUPPRESSED = 17985;

const int UA_NS0ID_AUDIOVARIABLETYPE = 17986;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_OUTPUTARGUMENTS = 17987;

const int UA_NS0ID_AUDIOVARIABLETYPE_LISTID = 17988;

const int UA_NS0ID_AUDIOVARIABLETYPE_AGENCYID = 17989;

const int UA_NS0ID_AUDIOVARIABLETYPE_VERSIONID = 17990;

const int UA_NS0ID_ALARMMETRICSTYPE_STARTTIME = 17991;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER = 17992;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER_INPUTARGUMENTS = 17993;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERMETHODTYPE = 17994;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERMETHODTYPE_INPUTARGUMENTS = 17995;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERMETHODTYPE_OUTPUTARGUMENTS = 17996;

const int UA_NS0ID_WRITERGROUPTRANSPORTTYPE = 17997;

const int UA_NS0ID_WRITERGROUPMESSAGETYPE = 17998;

const int UA_NS0ID_READERGROUPTYPE = 17999;

const int UA_NS0ID_READERGROUPTYPE_SECURITYMODE = 18000;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE = 18001;

const int UA_NS0ID_READERGROUPTYPE_SECURITYGROUPID = 18002;

const int UA_NS0ID_READERGROUPTYPE_SECURITYKEYSERVICES = 18003;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_ENDPOINTURLS = 18004;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_SERVICESTATUS = 18005;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL = 18006;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL_INPUTARGUMENTS = 18007;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_DELETECREDENTIAL = 18008;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE = 18009;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE_INPUTARGUMENTS = 18010;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE = 18011;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTID = 18012;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTTYPE = 18013;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENODE = 18014;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENAME = 18015;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_TIME = 18016;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RECEIVETIME = 18017;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_LOCALTIME = 18018;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_MESSAGE = 18019;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SEVERITY = 18020;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_ACTIONTIMESTAMP = 18021;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_STATUS = 18022;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SERVERID = 18023;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTAUDITENTRYID = 18024;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTUSERID = 18025;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_METHODID = 18026;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_INPUTARGUMENTS = 18027;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RESOURCEURI = 18028;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE = 18029;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTID = 18030;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTTYPE = 18031;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENODE = 18032;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENAME = 18033;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_TIME = 18034;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RECEIVETIME = 18035;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_LOCALTIME = 18036;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_MESSAGE = 18037;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SEVERITY = 18038;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18039;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_STATUS = 18040;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SERVERID = 18041;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 18042;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 18043;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_METHODID = 18044;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 18045;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RESOURCEURI = 18046;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE = 18047;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTID = 18048;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTTYPE = 18049;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENODE = 18050;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENAME = 18051;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_TIME = 18052;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RECEIVETIME = 18053;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_LOCALTIME = 18054;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_MESSAGE = 18055;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SEVERITY = 18056;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18057;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_STATUS = 18058;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SERVERID = 18059;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 18060;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTUSERID = 18061;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_METHODID = 18062;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_INPUTARGUMENTS = 18063;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RESOURCEURI = 18064;

const int UA_NS0ID_READERGROUPTYPE_MAXNETWORKMESSAGESIZE = 18065;

const int UA_NS0ID_READERGROUPTYPE_STATUS = 18067;

const int UA_NS0ID_READERGROUPTYPE_STATUS_STATE = 18068;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_RESOURCEURI = 18069;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICEURI = 18072;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_ISSUERENDPOINTURL = 18073;

const int UA_NS0ID_READERGROUPTYPE_STATUS_ENABLE = 18074;

const int UA_NS0ID_READERGROUPTYPE_STATUS_DISABLE = 18075;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER = 18076;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_PUBLISHERID = 18077;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_WRITERGROUPID = 18078;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETWRITERID = 18079;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETMETADATA = 18080;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK = 18081;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGERECEIVETIMEOUT = 18082;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYMODE = 18083;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYGROUPID = 18084;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYKEYSERVICES = 18085;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_TRANSPORTSETTINGS = 18086;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGESETTINGS = 18087;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS = 18088;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_STATE = 18089;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_ENABLE = 18090;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_DISABLE = 18091;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS = 18092;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18093;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 18094;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18095;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 18096;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 18097;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 18098;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 18099;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 18100;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18101;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18102;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 18103;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 18104;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 18105;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 18106;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 18107;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 18108;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 18109;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18110;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18111;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 18112;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18113;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18114;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18115;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18116;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 18117;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18118;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18119;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18120;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18121;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 18122;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18123;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18124;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18125;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18126;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 18127;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18128;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18129;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18130;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18131;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 18132;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18133;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18134;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18135;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18136;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 18137;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES = 18138;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18139;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18140;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18141;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18142;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS = 18143;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE = 18144;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    18145;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    18146;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    18147;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER = 18148;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18149;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 18150;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18151;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 18152;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18153;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 18154;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION = 18155;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER = 18156;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_RESOURCEURI = 18157;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18158;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_ENDPOINTURLS = 18159;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_SERVICESTATUS = 18160;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL = 18161;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS = 18162;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL = 18163;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_PROFILEURI = 18164;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_PROFILEURI = 18165;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION = 18166;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION = 18167;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT = 18168;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD = 18169;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18170;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18171;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION = 18172;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION = 18173;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT = 18174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION = 18175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18177;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION = 18178;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION = 18179;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT = 18180;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD = 18181;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION = 18184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION = 18185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT = 18186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION = 18187;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18188;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18189;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE = 18190;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_ID = 18191;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NAME = 18192;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NUMBER = 18193;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18194;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRANSITIONTIME = 18195;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18196;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRUESTATE = 18197;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_FALSESTATE = 18198;

const int UA_NS0ID_ALARMCONDITIONTYPE_RESET = 18199;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_LISTID = 18200;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_AGENCYID = 18201;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_VERSIONID = 18202;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE = 18203;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_ID = 18204;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NAME = 18205;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NUMBER = 18206;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18207;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRANSITIONTIME = 18208;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18209;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRUESTATE = 18210;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_FALSESTATE = 18211;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET = 18212;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE = 18213;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_ID = 18214;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NAME = 18215;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18216;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18217;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18218;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18219;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18220;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18221;

const int UA_NS0ID_LIMITALARMTYPE_RESET = 18222;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18223;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18224;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18225;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18226;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18227;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18228;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18229;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18230;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18231;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RESET = 18232;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18233;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18234;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18235;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18236;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18237;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18238;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18239;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18240;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18241;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RESET = 18242;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 18243;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 18244;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 18245;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18246;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18247;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18248;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18249;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18250;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18251;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18252;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18253;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18254;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 18255;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RESET = 18256;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18257;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18258;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18259;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18260;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18261;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18262;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18263;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18264;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18265;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RESET = 18266;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18267;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18268;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18269;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18270;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18271;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18272;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18273;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE = 18274;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE = 18275;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RESET = 18276;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER = 18280;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18281;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18282;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18283;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE = 18284;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE = 18285;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18286;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18287;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18288;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18289;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18290;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18291;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18292;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18293;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE = 18294;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE = 18295;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RESET = 18296;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18297;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18298;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18299;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER = 18300;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18301;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18302;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18303;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE = 18304;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE = 18305;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18306;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE = 18307;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_ID = 18308;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NAME = 18309;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NUMBER = 18310;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18311;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18312;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18313;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRUESTATE = 18314;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_FALSESTATE = 18315;

const int UA_NS0ID_DISCRETEALARMTYPE_RESET = 18316;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE = 18317;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18318;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18319;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18320;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18321;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18322;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18323;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18324;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18325;

const int UA_NS0ID_OFFNORMALALARMTYPE_RESET = 18326;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE = 18327;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18328;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18329;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18330;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18331;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18332;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18333;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18334;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18335;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RESET = 18336;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE = 18337;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_ID = 18338;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NAME = 18339;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NUMBER = 18340;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18341;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18342;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18343;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRUESTATE = 18344;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_FALSESTATE = 18345;

const int UA_NS0ID_TRIPALARMTYPE_RESET = 18346;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE = 18347;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTID = 18348;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTTYPE = 18349;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENODE = 18350;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENAME = 18351;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_TIME = 18352;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RECEIVETIME = 18353;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LOCALTIME = 18354;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MESSAGE = 18355;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SEVERITY = 18356;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18357;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18358;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18359;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18360;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONNAME = 18361;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_BRANCHID = 18362;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RETAIN = 18363;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18364;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18365;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18366;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18367;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 18368;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 18369;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 18370;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18371;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE = 18372;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY = 18373;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP = 18374;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY = 18375;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 18376;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT = 18377;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP = 18378;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CLIENTUSERID = 18379;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_DISABLE = 18380;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLE = 18381;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT = 18382;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 18383;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18384;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 18385;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18386;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 18387;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE = 18388;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18389;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18390;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18391;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 18392;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 18393;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 18394;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18395;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18396;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18397;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18398;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18399;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18400;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 18401;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 18402;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 18403;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 18404;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 18405;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18406;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 18407;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM = 18408;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18409;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE = 18410;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18411;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18412;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18413;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 18414;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 18415;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 18416;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18417;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18418;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_INPUTNODE = 18419;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18420;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18421;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18422;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18423;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 18424;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 18425;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 18426;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 18427;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 18428;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18429;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18430;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18431;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER = 18432;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 18433;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 18434;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 18435;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 18436;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 18437;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18438;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 18439;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 18440;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 18441;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 18442;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 18443;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 18444;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 18445;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 18446;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 18447;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 18448;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 18449;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 18450;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 18451;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 18452;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 18453;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 18454;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18455;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 18456;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18457;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18458;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18459;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18460;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18461;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18462;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18463;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE = 18464;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18465;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18466;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18467;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 18468;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME = 18469;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 18470;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18471;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE = 18472;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ONDELAY = 18473;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OFFDELAY = 18474;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18475;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18476;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18477;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18478;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18479;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18480;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18481;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18482;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18483;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18484;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE = 18485;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18486;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMTIME = 18487;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18488;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCE = 18489;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESS = 18490;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_UNSUPPRESS = 18491;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18492;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18493;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RESET = 18494;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_NORMALSTATE = 18495;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE = 18496;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTID = 18497;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTTYPE = 18498;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENODE = 18499;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENAME = 18500;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_TIME = 18501;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RECEIVETIME = 18502;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LOCALTIME = 18503;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MESSAGE = 18504;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SEVERITY = 18505;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18506;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18507;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18508;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18509;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONNAME = 18510;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_BRANCHID = 18511;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RETAIN = 18512;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18513;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18514;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18515;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18516;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 18517;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 18518;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 18519;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18520;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE = 18521;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY = 18522;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP = 18523;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY = 18524;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 18525;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT = 18526;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP = 18527;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CLIENTUSERID = 18528;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_DISABLE = 18529;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLE = 18530;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT = 18531;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 18532;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18533;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 18534;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18535;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 18536;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE = 18537;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18538;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18539;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18540;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 18541;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 18542;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 18543;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18544;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18545;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18546;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18547;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18548;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18549;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 18550;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 18551;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 18552;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 18553;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 18554;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18555;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 18556;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM = 18557;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18558;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE = 18559;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18560;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18561;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18562;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 18563;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 18564;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 18565;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18566;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18567;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_INPUTNODE = 18568;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18569;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18570;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18571;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18572;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 18573;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 18574;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 18575;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 18576;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 18577;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18578;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18579;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18580;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER = 18581;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 18582;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 18583;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 18584;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 18585;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 18586;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18587;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 18588;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 18589;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 18590;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 18591;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 18592;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 18593;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 18594;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 18595;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 18596;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 18597;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 18598;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 18599;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 18600;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 18601;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 18602;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 18603;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18604;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 18605;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18606;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18607;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18608;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18609;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18610;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18611;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18612;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE = 18613;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18614;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18615;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18616;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 18617;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME = 18618;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 18619;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18620;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE = 18621;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ONDELAY = 18622;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OFFDELAY = 18623;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18624;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18625;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18626;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18627;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18628;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18629;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18630;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18631;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18632;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18633;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE = 18634;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18635;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMTIME = 18636;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18637;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCE = 18638;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESS = 18639;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_UNSUPPRESS = 18640;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18641;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18642;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RESET = 18643;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_NORMALSTATE = 18644;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE = 18645;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_ID = 18646;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NAME = 18647;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18648;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18649;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18650;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18651;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRUESTATE = 18652;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_FALSESTATE = 18653;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RESET = 18654;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE = 18655;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_ID = 18656;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NAME = 18657;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NUMBER = 18658;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18659;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18660;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18661;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRUESTATE = 18662;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_FALSESTATE = 18663;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RESET = 18664;

const int UA_NS0ID_STATISTICALCONDITIONCLASSTYPE = 18665;

const int UA_NS0ID_ALARMMETRICSTYPE_RESET = 18666;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS = 18667;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18668;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 18669;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18670;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 18671;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18672;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 18673;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 18674;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 18675;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18676;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18677;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 18678;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 18679;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 18680;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 18681;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 18682;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 18683;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18684;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18685;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18686;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18687;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18688;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18689;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18690;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18691;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18692;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18693;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18694;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18695;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18696;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18697;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18698;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18699;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18700;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18701;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 18702;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18703;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18704;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18705;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18706;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 18707;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18708;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18709;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18710;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18711;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 18712;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS = 18713;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    18714;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS = 18715;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18716;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION = 18717;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18718;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 18719;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 18720;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 18721;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR = 18722;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 18723;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18724;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18725;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 18726;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_RESET = 18727;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_SUBERROR = 18728;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS = 18729;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 18730;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 18731;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 18732;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 18733;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 18734;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 18735;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 18736;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 18737;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 18738;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 18739;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 18740;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 18741;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 18742;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 18743;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 18744;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 18745;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 18746;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 18747;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 18748;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 18749;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 18750;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 18751;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 18752;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 18753;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 18754;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 18755;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 18756;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 18757;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 18758;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 18759;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES = 18760;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS = 18761;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 18762;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS = 18763;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 18764;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS = 18765;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 18766;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS = 18767;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 18768;

const int UA_NS0ID_THREEDVECTORTYPE_X = 18769;

const int UA_NS0ID_THREEDVECTORTYPE_Y = 18770;

const int UA_NS0ID_THREEDVECTORTYPE_Z = 18771;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE = 18772;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE_LENGTHUNIT = 18773;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE = 18774;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_LENGTHUNIT = 18775;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_X = 18776;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Y = 18777;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Z = 18778;

const int UA_NS0ID_ORIENTATIONTYPE = 18779;

const int UA_NS0ID_ORIENTATIONTYPE_ANGLEUNIT = 18780;

const int UA_NS0ID_THREEDORIENTATIONTYPE = 18781;

const int UA_NS0ID_THREEDORIENTATIONTYPE_ANGLEUNIT = 18782;

const int UA_NS0ID_THREEDORIENTATIONTYPE_A = 18783;

const int UA_NS0ID_THREEDORIENTATIONTYPE_B = 18784;

const int UA_NS0ID_THREEDORIENTATIONTYPE_C = 18785;

const int UA_NS0ID_FRAMETYPE = 18786;

const int UA_NS0ID_FRAMETYPE_ORIENTATION = 18787;

const int UA_NS0ID_FRAMETYPE_CONSTANT = 18788;

const int UA_NS0ID_FRAMETYPE_BASEFRAME = 18789;

const int UA_NS0ID_FRAMETYPE_FIXEDBASE = 18790;

const int UA_NS0ID_THREEDFRAMETYPE = 18791;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION = 18792;

const int UA_NS0ID_THREEDFRAMETYPE_CONSTANT = 18793;

const int UA_NS0ID_THREEDFRAMETYPE_BASEFRAME = 18794;

const int UA_NS0ID_THREEDFRAMETYPE_FIXEDBASE = 18795;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES = 18796;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18797;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_X = 18798;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Y = 18799;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Z = 18800;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES = 18801;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18802;

const int UA_NS0ID_FRAMETYPE_ORIENTATION_ANGLEUNIT = 18803;

const int UA_NS0ID_HASWRITERGROUP = 18804;

const int UA_NS0ID_HASREADERGROUP = 18805;

const int UA_NS0ID_RATIONALNUMBER = 18806;

const int UA_NS0ID_VECTOR = 18807;

const int UA_NS0ID_THREEDVECTOR = 18808;

const int UA_NS0ID_CARTESIANCOORDINATES = 18809;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES = 18810;

const int UA_NS0ID_ORIENTATION = 18811;

const int UA_NS0ID_THREEDORIENTATION = 18812;

const int UA_NS0ID_FRAME = 18813;

const int UA_NS0ID_THREEDFRAME = 18814;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTBINARY = 18815;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTBINARY = 18816;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTBINARY = 18817;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18818;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18819;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTBINARY = 18820;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTBINARY = 18821;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTBINARY = 18822;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTBINARY = 18823;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER = 18824;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18825;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18826;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR = 18827;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DATATYPEVERSION = 18828;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18829;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR = 18830;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18831;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18832;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES = 18833;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION = 18834;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT = 18835;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES = 18836;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION = 18837;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT = 18838;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION = 18839;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DATATYPEVERSION = 18840;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 18841;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION = 18842;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 18843;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT = 18844;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME = 18845;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DATATYPEVERSION = 18846;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DICTIONARYFRAGMENT = 18847;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME = 18848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DATATYPEVERSION = 18849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 18850;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTXML = 18851;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTXML = 18852;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTXML = 18853;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18854;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18855;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTXML = 18856;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTXML = 18857;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTXML = 18858;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTXML = 18859;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER = 18860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR = 18863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DATATYPEVERSION = 18864;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18865;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR = 18866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18867;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18868;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES = 18869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION = 18870;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS = 18871;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18872;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 18873;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18874;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18875;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18876;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18877;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 18878;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 18879;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18880;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18881;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 18882;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 18883;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 18884;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 18885;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 18886;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 18887;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18888;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18889;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18890;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18891;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18892;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18893;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18894;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18895;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18896;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18897;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18898;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18899;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18900;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18901;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18902;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18903;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18904;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18905;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 18906;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18907;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18908;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18909;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18910;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18911;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18912;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18913;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18914;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18915;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 18916;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18917;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18918;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18919;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18920;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18921;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18922;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18923;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 18924;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18925;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 18926;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18927;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 18928;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18929;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS = 18930;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18931;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 18932;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18933;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18934;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18935;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18936;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 18937;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 18938;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18939;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18940;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 18941;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 18942;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 18943;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 18944;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 18945;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 18946;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18947;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18948;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18949;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18950;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18951;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18952;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18953;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18954;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18955;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18956;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18957;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18958;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18959;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18960;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18961;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18962;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18963;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18964;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18965;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18966;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18967;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18968;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18969;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18970;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18971;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18972;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18973;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18974;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 18975;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18976;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18977;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18978;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18979;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18980;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18981;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18982;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 18983;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18984;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 18985;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18986;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 18987;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18988;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS = 18989;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18990;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 18991;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 18992;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18993;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18994;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18995;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 18996;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 18997;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 18998;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 18999;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19000;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 19001;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 19002;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 19003;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 19004;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19005;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19006;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19007;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19008;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19009;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19010;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19011;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19012;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19013;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19014;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19015;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19016;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19017;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19018;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19019;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19020;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19021;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19022;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19023;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19024;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19025;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19026;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19027;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19028;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19029;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19030;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19031;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19032;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19033;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 19034;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES = 19035;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19036;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19037;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19038;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19039;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19040;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19041;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19042;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19043;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 19044;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19045;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 19046;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT = 19048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES = 19049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION = 19050;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT = 19051;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION = 19052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DATATYPEVERSION = 19053;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 19054;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION = 19055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 19056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT = 19057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME = 19058;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DATATYPEVERSION = 19059;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DICTIONARYFRAGMENT = 19060;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME = 19061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DATATYPEVERSION = 19062;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 19063;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTJSON = 19064;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTJSON = 19065;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTJSON = 19066;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19067;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19068;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTJSON = 19069;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTJSON = 19070;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTJSON = 19071;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTJSON = 19072;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_ANGLEUNIT = 19073;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_A = 19074;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_B = 19075;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_C = 19076;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE = 19077;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_DEFINITION = 19078;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEPRECISION = 19079;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMVALUES = 19080;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASTEXT = 19081;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMDICTIONARYENTRIES = 19082;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASDICTIONARYENTRIES = 19083;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE = 19084;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_DEFINITION = 19085;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEPRECISION = 19086;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMVALUES = 19087;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASTEXT = 19088;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMDICTIONARYENTRIES = 19089;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASDICTIONARYENTRIES = 19090;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_SERVERTIMESTAMPSUPPORTED = 19091;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_SERVERTIMESTAMPSUPPORTED = 19092;

const int UA_NS0ID_HACONFIGURATION_SERVERTIMESTAMPSUPPORTED = 19093;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_SERVERTIMESTAMPSUPPORTED = 19094;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE = 19095;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTID = 19096;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTTYPE = 19097;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENODE = 19098;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENAME = 19099;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_TIME = 19100;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_RECEIVETIME = 19101;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_LOCALTIME = 19102;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_MESSAGE = 19103;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SEVERITY = 19104;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_ACTIONTIMESTAMP = 19105;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_STATUS = 19106;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS = 19107;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19108;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 19109;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 19110;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 19111;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19112;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19113;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 19114;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 19115;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 19116;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 19117;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19118;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 19119;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 19120;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 19121;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 19122;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19123;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19124;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19125;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19126;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19127;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19128;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19129;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19130;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19131;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19132;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19133;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19134;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19135;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19136;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19137;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19138;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19139;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19140;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19141;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19142;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19143;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19144;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19145;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19146;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19147;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19148;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19149;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19150;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19151;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 19152;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES = 19153;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    19154;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    19155;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19156;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19157;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS = 19158;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    19159;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    19160;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    19161;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    19162;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS = 19163;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    19164;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    19165;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19166;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    19167;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19168;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19169;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19170;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19171;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID = 19172;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19173;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID = 19174;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19175;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS = 19176;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19177;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 19178;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 19179;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 19180;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19181;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19182;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 19183;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 19184;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 19185;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 19186;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19187;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 19188;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 19189;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 19190;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 19191;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19192;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19193;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19194;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19195;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19196;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19197;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19198;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19199;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19200;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19201;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19202;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19203;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19204;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19205;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19206;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19207;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19208;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19209;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19210;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19211;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19212;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19213;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19214;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19215;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19216;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19217;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19218;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19219;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19220;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 19221;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES =
    19222;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    19223;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    19224;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19225;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19226;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    19227;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    19228;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    19229;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19230;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19231;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS = 19232;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19233;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19234;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19235;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19236;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19237;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19238;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    19239;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19240;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS = 19241;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19242;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION = 19243;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 19244;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 19245;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19246;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 19247;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR = 19248;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19249;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 19250;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 19251;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19252;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_RESET = 19253;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_SUBERROR = 19254;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS = 19255;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19256;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19257;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 19258;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19259;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19260;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 19261;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19262;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19263;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19264;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19265;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 19266;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19267;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19268;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19269;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19270;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 19271;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19272;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19273;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19274;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19275;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19276;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19277;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19278;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19279;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19280;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19281;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19282;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19283;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19284;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19285;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES = 19286;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS = 19287;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL = 19288;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SERVERID = 19289;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 19290;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTUSERID = 19291;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PARAMETERDATATYPEID = 19292;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 19293;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_NEWVALUES = 19294;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_OLDVALUES = 19295;

const int UA_NS0ID_TRUSTLISTTYPE_UPDATEFREQUENCY = 19296;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE = 19297;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTID = 19298;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTTYPE = 19299;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENODE = 19300;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENAME = 19301;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TIME = 19302;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RECEIVETIME = 19303;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LOCALTIME = 19304;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MESSAGE = 19305;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SEVERITY = 19306;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSID = 19307;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSNAME = 19308;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSID = 19309;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSNAME = 19310;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONNAME = 19311;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_BRANCHID = 19312;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RETAIN = 19313;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE = 19314;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_ID = 19315;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NAME = 19316;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NUMBER = 19317;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 19318;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 19319;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 19320;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRUESTATE = 19321;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_FALSESTATE = 19322;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY = 19323;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY_SOURCETIMESTAMP = 19324;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY = 19325;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 19326;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT = 19327;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT_SOURCETIMESTAMP = 19328;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CLIENTUSERID = 19329;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_DISABLE = 19330;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLE = 19331;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT = 19332;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 19333;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH = 19334;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 19335;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2 = 19336;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 19337;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE = 19338;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_ID = 19339;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NAME = 19340;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NUMBER = 19341;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 19342;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 19343;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 19344;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRUESTATE = 19345;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_FALSESTATE = 19346;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE = 19347;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_ID = 19348;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NAME = 19349;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NUMBER = 19350;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 19351;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 19352;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 19353;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 19354;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 19355;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE = 19356;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 19357;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM = 19358;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM_INPUTARGUMENTS = 19359;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE = 19360;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_ID = 19361;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NAME = 19362;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NUMBER = 19363;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 19364;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 19365;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 19366;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRUESTATE = 19367;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_FALSESTATE = 19368;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_INPUTNODE = 19369;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE = 19370;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_ID = 19371;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NAME = 19372;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 19373;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 19374;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 19375;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 19376;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 19377;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 19378;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE = 19379;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_ID = 19380;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NAME = 19381;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 19382;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 19383;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 19384;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 19385;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 19386;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 19387;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE = 19388;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 19389;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 19390;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 19391;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 19392;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 19393;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 19394;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 19395;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 19396;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 19397;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 19398;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 19399;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 19400;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 19401;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 19402;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 19403;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 19404;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVE = 19405;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 19406;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDORSHELVED = 19407;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MAXTIMESHELVED = 19408;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLEENABLED = 19409;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND = 19410;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_LISTID = 19411;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_AGENCYID = 19412;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_VERSIONID = 19413;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE = 19414;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_ID = 19415;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NAME = 19416;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NUMBER = 19417;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 19418;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 19419;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 19420;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRUESTATE = 19421;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_FALSESTATE = 19422;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ONDELAY = 19423;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OFFDELAY = 19424;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUPFLAG = 19425;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUP = 19426;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE = 19427;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_ID = 19428;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NAME = 19429;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NUMBER = 19430;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 19431;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 19432;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 19433;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRUESTATE = 19434;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_FALSESTATE = 19435;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ALARMGROUP_PLACEHOLDER = 19436;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMTIME = 19437;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMREPEATCOUNT = 19438;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCE = 19439;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESS = 19440;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UNSUPPRESS = 19441;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REMOVEFROMSERVICE = 19442;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_PLACEINSERVICE = 19443;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RESET = 19444;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_NORMALSTATE = 19445;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TRUSTLISTID = 19446;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTUPDATETIME = 19447;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UPDATEFREQUENCY = 19448;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_UPDATEFREQUENCY = 19449;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED = 19450;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_EVENTID = 19451;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_EVENTTYPE = 19452;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SOURCENODE = 19453;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SOURCENAME = 19454;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_TIME = 19455;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_RECEIVETIME = 19456;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LOCALTIME = 19457;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_MESSAGE = 19458;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SEVERITY = 19459;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONDITIONCLASSID = 19460;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONDITIONCLASSNAME = 19461;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID = 19462;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME = 19463;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONDITIONNAME = 19464;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_BRANCHID = 19465;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_RETAIN = 19466;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE = 19467;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 19468;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 19469;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER = 19470;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 19471;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME = 19472;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 19473;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE = 19474;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE = 19475;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_QUALITY = 19476;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP = 19477;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LASTSEVERITY = 19478;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP = 19479;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_COMMENT = 19480;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP = 19481;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CLIENTUSERID = 19482;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_DISABLE = 19483;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ENABLE = 19484;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ADDCOMMENT = 19485;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS = 19486;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE = 19487;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 19488;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 19489;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 19490;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 19491;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME = 19492;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 19493;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE = 19494;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE = 19495;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 19496;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 19497;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME = 19498;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER = 19499;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 19500;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME = 19501;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 19502;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE = 19503;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE = 19504;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKNOWLEDGE = 19505;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS = 19506;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRM = 19507;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS = 19508;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE = 19509;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 19510;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 19511;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER = 19512;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 19513;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME = 19514;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 19515;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE = 19516;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE = 19517;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_INPUTNODE = 19518;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 19519;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID = 19520;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME = 19521;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER = 19522;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 19523;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME = 19524;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 19525;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE = 19526;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE = 19527;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 19528;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID = 19529;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME = 19530;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER = 19531;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 19532;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME = 19533;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 19534;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE = 19535;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE = 19536;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE = 19537;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE = 19538;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID = 19539;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME = 19540;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER = 19541;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 19542;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION = 19543;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID = 19544;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME = 19545;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER = 19546;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 19547;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 19548;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES = 19549;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS = 19550;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19551;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19552;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 19553;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 19554;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19555;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 19556;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR = 19557;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19558;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 19559;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 19560;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19561;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_RESET = 19562;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_SUBERROR = 19563;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS = 19564;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19565;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19566;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 19567;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19568;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19569;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 19570;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19571;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19572;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19573;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19574;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 19575;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19576;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19577;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19578;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19579;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 19580;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19581;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19582;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19583;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19584;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19585;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19586;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19587;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19588;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19589;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19590;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19591;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19592;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19593;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19594;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES = 19595;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES = 19596;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE = 19597;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION = 19598;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL = 19599;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE = 19600;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER = 19601;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL = 19602;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19603;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL = 19604;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 19605;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL = 19606;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 19607;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL = 19608;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS = 19609;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19610;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19611;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 19612;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 19613;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19614;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 19615;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR = 19616;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19617;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 19618;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 19619;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 19620;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_RESET = 19621;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_SUBERROR = 19622;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS = 19623;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19624;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 19625;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 19626;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19627;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19628;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 19629;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19630;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19631;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19632;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19633;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 19634;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19635;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19636;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19637;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19638;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 19639;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19640;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19641;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19642;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19643;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 19644;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19645;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19646;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19647;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19648;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 19649;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19650;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19651;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19652;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19653;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES = 19654;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES = 19655;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE = 19656;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION = 19657;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL = 19658;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE = 19659;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS = 19660;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE = 19661;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION = 19662;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL = 19663;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE = 19664;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER = 19665;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL = 19666;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19667;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL = 19668;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION = 19669;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL = 19670;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION = 19671;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL = 19672;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID = 19673;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL = 19674;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID = 19675;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL = 19676;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE = 19677;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_DIAGNOSTICSLEVEL = 19678;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION = 19679;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_ACTIVE = 19680;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_CLASSIFICATION = 19681;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19682;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19683;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR = 19684;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_ACTIVE = 19685;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_CLASSIFICATION = 19686;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19687;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19688;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_RESET = 19689;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_SUBERROR = 19690;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS = 19691;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR = 19692;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_ACTIVE = 19693;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19694;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19695;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19696;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19697;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19698;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19699;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19700;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19701;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19702;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19703;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19704;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19705;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19706;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19707;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19708;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19709;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19710;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19711;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19712;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19713;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19714;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19715;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19716;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19717;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19718;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19719;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19720;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19721;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_LIVEVALUES = 19722;

const int UA_NS0ID_DIAGNOSTICSLEVEL = 19723;

const int UA_NS0ID_DIAGNOSTICSLEVEL_ENUMSTRINGS = 19724;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE = 19725;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_ACTIVE = 19726;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_CLASSIFICATION = 19727;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_DIAGNOSTICSLEVEL = 19728;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_TIMEFIRSTCHANGE = 19729;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION = 19730;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_ENUMSTRINGS = 19731;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE = 19732;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_DIAGNOSTICSLEVEL = 19733;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION = 19734;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_ACTIVE = 19735;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_CLASSIFICATION = 19736;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19737;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19738;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR = 19739;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_ACTIVE = 19740;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_CLASSIFICATION = 19741;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19742;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19743;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_RESET = 19744;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_SUBERROR = 19745;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS = 19746;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR = 19747;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_ACTIVE = 19748;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19749;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19750;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19751;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19752;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19753;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19754;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19755;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19756;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19757;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19758;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19759;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19760;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19761;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19762;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19763;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19764;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19765;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19766;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19767;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19768;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19769;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19770;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19771;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19772;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19773;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19774;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19775;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19776;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES = 19777;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS = 19778;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 19779;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS = 19780;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 19781;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS = 19782;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 19783;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS = 19784;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 19785;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE = 19786;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_DIAGNOSTICSLEVEL = 19787;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION = 19788;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_ACTIVE = 19789;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_CLASSIFICATION = 19790;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19791;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19792;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR = 19793;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_ACTIVE = 19794;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_CLASSIFICATION = 19795;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19796;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19797;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_RESET = 19798;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_SUBERROR = 19799;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS = 19800;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR = 19801;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_ACTIVE = 19802;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19803;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19804;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19805;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19806;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19807;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19808;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19809;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19810;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19811;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19812;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19813;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19814;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19815;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19816;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19817;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19818;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19819;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19820;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19821;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19822;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19823;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19824;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19825;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19826;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19827;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19828;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19829;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19830;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES = 19831;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS = 19832;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL = 19833;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE = 19834;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_DIAGNOSTICSLEVEL = 19835;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION = 19836;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_ACTIVE = 19837;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION = 19838;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19839;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19840;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR = 19841;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_ACTIVE = 19842;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_CLASSIFICATION = 19843;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19844;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19845;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_RESET = 19846;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_SUBERROR = 19847;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS = 19848;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR = 19849;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE = 19850;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19851;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19852;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19853;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19854;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19855;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19856;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19857;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19858;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19859;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19860;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19861;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19862;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19863;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19864;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19865;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19866;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19867;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19868;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19869;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19870;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19871;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19872;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19873;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19874;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19875;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19876;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19877;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19878;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES = 19879;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES = 19880;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_ACTIVE = 19881;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION = 19882;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL = 19883;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE = 19884;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS = 19885;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE = 19886;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION = 19887;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL = 19888;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE = 19889;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS = 19890;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_ACTIVE = 19891;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION = 19892;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL = 19893;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE = 19894;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS = 19895;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 19896;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS = 19897;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 19898;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID = 19899;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL = 19900;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID = 19901;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL = 19902;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE = 19903;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_DIAGNOSTICSLEVEL = 19904;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION = 19905;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_ACTIVE = 19906;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION = 19907;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19908;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19909;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR = 19910;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_ACTIVE = 19911;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_CLASSIFICATION = 19912;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19913;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19914;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_RESET = 19915;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_SUBERROR = 19916;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS = 19917;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR = 19918;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE = 19919;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19920;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19921;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19922;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19923;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19924;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19925;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19926;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19927;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19928;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19929;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19930;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19931;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19932;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19933;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19934;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 19935;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 19936;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 19937;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19938;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 19939;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 19940;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 19941;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 19942;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19943;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 19944;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 19945;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 19946;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 19947;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES = 19948;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES = 19949;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE = 19950;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION = 19951;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL = 19952;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE = 19953;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES = 19954;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE = 19955;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION = 19956;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL = 19957;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE = 19958;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS = 19959;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE = 19960;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION = 19961;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL = 19962;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE = 19963;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS = 19964;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 19965;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS = 19966;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 19967;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE = 19968;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_DIAGNOSTICSLEVEL = 19969;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION = 19970;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_ACTIVE = 19971;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_CLASSIFICATION = 19972;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 19973;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 19974;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR = 19975;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_ACTIVE = 19976;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_CLASSIFICATION = 19977;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19978;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19979;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_RESET = 19980;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_SUBERROR = 19981;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS = 19982;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR = 19983;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_ACTIVE = 19984;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 19985;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 19986;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 19987;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 19988;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 19989;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 19990;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 19991;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 19992;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 19993;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 19994;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 19995;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 19996;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 19997;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 19998;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 19999;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 20000;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 20001;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 20002;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT = 20003;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 20004;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 20005;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 20006;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 20007;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 20008;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 20009;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 20010;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 20011;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 20012;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES = 20013;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES = 20014;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE = 20015;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION = 20016;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL = 20017;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE = 20018;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER = 20019;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL = 20020;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE = 20021;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL = 20022;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION = 20023;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL = 20024;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION = 20025;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL = 20026;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE = 20027;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_DIAGNOSTICSLEVEL = 20028;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION = 20029;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_ACTIVE = 20030;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_CLASSIFICATION = 20031;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL = 20032;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE = 20033;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR = 20034;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_ACTIVE = 20035;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_CLASSIFICATION = 20036;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 20037;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_TIMEFIRSTCHANGE = 20038;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_RESET = 20039;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_SUBERROR = 20040;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS = 20041;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR = 20042;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_ACTIVE = 20043;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_CLASSIFICATION = 20044;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 20045;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 20046;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD = 20047;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 20048;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 20049;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 20050;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 20051;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT = 20052;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 20053;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 20054;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 20055;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 20056;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR = 20057;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 20058;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 20059;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 20060;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 20061;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT = 20062;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 20063;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 20064;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 20065;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 20066;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 20067;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 20068;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 20069;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 20070;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 20071;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES = 20072;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES = 20073;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE = 20074;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION = 20075;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL = 20076;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE = 20077;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS = 20078;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE = 20079;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION = 20080;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL = 20081;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE = 20082;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER = 20083;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL = 20084;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE = 20085;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL = 20086;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION = 20087;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL = 20088;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION = 20089;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL = 20090;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID = 20091;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL = 20092;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID = 20093;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL = 20094;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS = 20095;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME = 20096;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE = 20097;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 20098;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE = 20099;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE = 20100;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED = 20101;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_MAXTIMESHELVED = 20102;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_AUDIBLEENABLED = 20103;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_AUDIBLESOUND = 20104;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID = 20105;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID = 20106;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID = 20107;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE = 20108;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_ID = 20109;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 20110;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER = 20111;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME = 20112;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME = 20113;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME = 20114;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE = 20115;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE = 20116;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_ONDELAY = 20117;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_OFFDELAY = 20118;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 20119;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_FIRSTINGROUP = 20120;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE = 20121;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 20122;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 20123;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER = 20124;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 20125;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME = 20126;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 20127;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE = 20128;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE = 20129;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_REALARMTIME = 20130;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_REALARMREPEATCOUNT = 20131;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SILENCE = 20132;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESS = 20133;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_UNSUPPRESS = 20134;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 20135;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_PLACEINSERVICE = 20136;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_RESET = 20137;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_NORMALSTATE = 20138;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_EXPIRATIONDATE = 20139;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 20140;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CERTIFICATETYPE = 20141;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_CERTIFICATE = 20142;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE = 20143;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_EVENTID = 20144;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_EVENTTYPE = 20145;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SOURCENODE = 20146;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SOURCENAME = 20147;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_TIME = 20148;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_RECEIVETIME = 20149;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LOCALTIME = 20150;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_MESSAGE = 20151;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SEVERITY = 20152;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 20153;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME = 20154;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID = 20155;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME = 20156;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONDITIONNAME = 20157;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_BRANCHID = 20158;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_RETAIN = 20159;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 20160;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 20161;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 20162;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER = 20163;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 20164;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME = 20165;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 20166;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE = 20167;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE = 20168;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_QUALITY = 20169;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP = 20170;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LASTSEVERITY = 20171;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP = 20172;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_COMMENT = 20173;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP = 20174;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CLIENTUSERID = 20175;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_DISABLE = 20176;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ENABLE = 20177;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ADDCOMMENT = 20178;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS = 20179;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE = 20180;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 20181;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 20182;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 20183;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 20184;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME = 20185;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 20186;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE = 20187;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE = 20188;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 20189;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 20190;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME = 20191;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER = 20192;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 20193;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME = 20194;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 20195;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE = 20196;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE = 20197;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 20198;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS = 20199;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRM = 20200;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS = 20201;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE = 20202;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 20203;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 20204;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER = 20205;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 20206;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME = 20207;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 20208;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE = 20209;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE = 20210;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_INPUTNODE = 20211;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 20212;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID = 20213;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME = 20214;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER = 20215;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 20216;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME = 20217;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME = 20218;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE = 20219;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE = 20220;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 20221;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID = 20222;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME = 20223;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER = 20224;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 20225;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME = 20226;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME = 20227;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE = 20228;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE = 20229;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 20230;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE = 20231;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID = 20232;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME = 20233;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 20234;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 20235;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION = 20236;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID = 20237;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME = 20238;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 20239;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME = 20240;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME = 20241;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES = 20242;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS = 20243;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME = 20244;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE = 20245;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS = 20246;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE = 20247;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE = 20248;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED = 20249;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 20250;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 20251;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 20252;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID = 20253;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID = 20254;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID = 20255;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE = 20256;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 20257;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 20258;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER = 20259;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 20260;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME = 20261;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 20262;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE = 20263;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE = 20264;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_ONDELAY = 20265;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_OFFDELAY = 20266;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 20267;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 20268;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 20269;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 20270;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 20271;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER = 20272;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 20273;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME = 20274;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 20275;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE = 20276;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE = 20277;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_REALARMTIME = 20278;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT = 20279;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SILENCE = 20280;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESS = 20281;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_UNSUPPRESS = 20282;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 20283;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 20284;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_RESET = 20285;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_NORMALSTATE = 20286;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_TRUSTLISTID = 20287;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 20288;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 20289;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY = 20290;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED = 20291;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID = 20292;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 20293;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE = 20294;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME = 20295;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME = 20296;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 20297;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME = 20298;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE = 20299;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY = 20300;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID = 20301;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME = 20302;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID = 20303;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME = 20304;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 20305;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID = 20306;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN = 20307;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 20308;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 20309;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 20310;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER = 20311;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    20312;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    20313;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    20314;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE = 20315;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    20316;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY = 20317;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    20318;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 20319;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    20320;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT = 20321;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    20322;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 20323;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE = 20324;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE = 20325;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 20326;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    20327;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 20328;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 20329;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 20330;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 20331;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    20332;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    20333;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    20334;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE = 20335;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE = 20336;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 20337;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 20338;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME = 20339;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER = 20340;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    20341;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    20342;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    20343;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    20344;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    20345;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 20346;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    20347;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM = 20348;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS = 20349;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 20350;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 20351;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 20352;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER = 20353;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    20354;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    20355;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    20356;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE = 20357;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE = 20358;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE = 20359;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 20360;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID = 20361;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME = 20362;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER = 20363;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    20364;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    20365;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    20366;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    20367;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    20368;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 20369;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID = 20370;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME = 20371;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    20372;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    20373;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    20374;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    20375;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    20376;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    20377;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 20378;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    20379;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    20380;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    20381;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    20382;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    20383;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    20384;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    20385;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    20386;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    20387;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    20388;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    20389;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    20390;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    20391;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    20392;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    20393;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    20394;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE = 20395;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    20396;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED = 20397;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED = 20398;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED = 20399;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 20400;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID = 20401;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID = 20402;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID = 20403;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 20404;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID = 20405;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 20406;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER = 20407;

const int UA_NS0ID_DATASETORDERINGTYPE = 20408;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID = 20409;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    20410;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    20411;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    20412;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE = 20413;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    20414;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY = 20415;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY = 20416;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 20417;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 20418;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 20419;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 20420;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 20421;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER = 20422;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    20423;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    20424;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    20425;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE = 20426;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    20427;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME = 20428;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT = 20429;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE = 20430;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS = 20431;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 20432;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 20433;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE = 20434;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET = 20435;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 20436;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE = 20437;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 20438;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE = 20439;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 20440;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE = 20441;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID = 20442;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 20443;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 20444;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 20445;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME = 20446;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 20447;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 20448;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 20449;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 20450;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 20451;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME = 20452;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID = 20453;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME = 20454;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 20455;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 20456;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN = 20457;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 20458;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 20459;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 20460;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER = 20461;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    20462;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    20463;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    20464;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE = 20465;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    20466;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY = 20467;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    20468;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 20469;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    20470;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT = 20471;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    20472;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 20473;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE = 20474;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE = 20475;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 20476;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    20477;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 20478;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 20479;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 20480;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 20481;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    20482;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    20483;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    20484;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE = 20485;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE = 20486;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 20487;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 20488;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME = 20489;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER = 20490;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    20491;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    20492;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    20493;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    20494;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    20495;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 20496;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    20497;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 20498;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS = 20499;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 20500;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 20501;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 20502;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER = 20503;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    20504;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    20505;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    20506;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE = 20507;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE = 20508;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 20509;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 20510;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID = 20511;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME = 20512;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER = 20513;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    20514;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    20515;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    20516;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    20517;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    20518;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 20519;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID = 20520;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME = 20521;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    20522;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    20523;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    20524;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    20525;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    20526;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    20527;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 20528;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    20529;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    20530;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    20531;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    20532;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    20533;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    20534;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    20535;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    20536;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    20537;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    20538;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    20539;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    20540;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    20541;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    20542;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    20543;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    20544;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE = 20545;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    20546;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED = 20547;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 20548;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 20549;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 20550;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID = 20551;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID = 20552;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID = 20553;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 20554;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 20555;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 20556;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER = 20557;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    20558;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    20559;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    20560;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE = 20561;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    20562;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 20563;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 20564;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 20565;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 20566;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 20567;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 20568;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 20569;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER = 20570;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    20571;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    20572;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    20573;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE = 20574;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    20575;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 20576;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT = 20577;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE = 20578;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 20579;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 20580;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 20581;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 20582;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET = 20583;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 20584;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 20585;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 20586;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 20587;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY = 20588;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED = 20589;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID = 20590;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 20591;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE = 20592;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME = 20593;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME = 20594;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 20595;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME = 20596;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE = 20597;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY = 20598;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID = 20599;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME = 20600;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID = 20601;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME = 20602;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 20603;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID = 20604;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN = 20605;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 20606;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 20607;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 20608;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER = 20609;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    20610;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME = 20611;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    20612;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE = 20613;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE = 20614;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY = 20615;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP = 20616;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 20617;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP = 20618;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT = 20619;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP = 20620;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 20621;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE = 20622;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE = 20623;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 20624;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS = 20625;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 20626;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 20627;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 20628;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 20629;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    20630;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME = 20631;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    20632;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE = 20633;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE = 20634;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 20635;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 20636;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME = 20637;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER = 20638;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    20639;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    20640;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    20641;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE = 20642;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE = 20643;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 20644;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS = 20645;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM = 20646;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS = 20647;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 20648;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 20649;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 20650;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER = 20651;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    20652;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME = 20653;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    20654;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE = 20655;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE = 20656;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE = 20657;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 20658;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID = 20659;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME = 20660;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER = 20661;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    20662;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    20663;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    20664;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE = 20665;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE = 20666;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 20667;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID = 20668;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME = 20669;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER = 20670;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    20671;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    20672;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    20673;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE = 20674;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE = 20675;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 20676;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE = 20677;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    20678;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    20679;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    20680;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    20681;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION = 20682;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    20683;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    20684;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    20685;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    20686;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    20687;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    20688;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    20689;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME = 20690;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE = 20691;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    20692;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE = 20693;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE = 20694;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED = 20695;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED = 20696;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED = 20697;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 20698;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID = 20699;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID = 20700;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID = 20701;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 20702;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID = 20703;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 20704;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER = 20705;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    20706;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME = 20707;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    20708;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE = 20709;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE = 20710;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY = 20711;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY = 20712;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 20713;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 20714;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 20715;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 20716;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 20717;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER = 20718;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    20719;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME = 20720;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    20721;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE = 20722;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE = 20723;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME = 20724;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT = 20725;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE = 20726;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS = 20727;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 20728;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 20729;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE = 20730;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET = 20731;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 20732;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE = 20733;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 20734;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE = 20735;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 20736;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE = 20737;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID = 20738;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 20739;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 20740;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 20741;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME = 20742;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 20743;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 20744;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 20745;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 20746;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 20747;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME = 20748;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID = 20749;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME = 20750;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 20751;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 20752;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN = 20753;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 20754;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 20755;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 20756;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER = 20757;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    20758;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME = 20759;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    20760;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE = 20761;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE = 20762;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY = 20763;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP = 20764;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 20765;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP = 20766;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT = 20767;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP = 20768;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 20769;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE = 20770;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE = 20771;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 20772;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS = 20773;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 20774;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 20775;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 20776;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 20777;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    20778;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME = 20779;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    20780;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE = 20781;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE = 20782;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 20783;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 20784;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME = 20785;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER = 20786;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    20787;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    20788;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    20789;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE = 20790;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE = 20791;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 20792;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS = 20793;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 20794;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS = 20795;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 20796;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 20797;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 20798;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER = 20799;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    20800;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME = 20801;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    20802;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE = 20803;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE = 20804;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 20805;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 20806;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID = 20807;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME = 20808;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER = 20809;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    20810;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    20811;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    20812;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE = 20813;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE = 20814;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 20815;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID = 20816;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME = 20817;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER = 20818;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    20819;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    20820;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    20821;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE = 20822;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE = 20823;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 20824;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE = 20825;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    20826;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    20827;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    20828;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    20829;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION = 20830;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    20831;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    20832;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    20833;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    20834;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    20835;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    20836;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    20837;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME = 20838;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE = 20839;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    20840;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE = 20841;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE = 20842;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED = 20843;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 20844;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 20845;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 20846;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID = 20847;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID = 20848;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID = 20849;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 20850;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 20851;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 20852;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER = 20853;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    20854;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME = 20855;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    20856;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE = 20857;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE = 20858;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 20859;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 20860;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 20861;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 20862;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 20863;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 20864;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 20865;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER = 20866;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    20867;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME = 20868;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    20869;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE = 20870;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE = 20871;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 20872;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT = 20873;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE = 20874;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 20875;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 20876;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 20877;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 20878;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET = 20879;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 20880;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 20881;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 20882;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 20883;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY = 20884;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED = 20885;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID = 20886;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 20887;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE = 20888;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME = 20889;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME = 20890;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 20891;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME = 20892;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE = 20893;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY = 20894;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID = 20895;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME = 20896;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID = 20897;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME = 20898;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 20899;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID = 20900;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN = 20901;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 20902;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 20903;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 20904;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER = 20905;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    20906;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    20907;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    20908;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE = 20909;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE = 20910;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY = 20911;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP = 20912;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 20913;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    20914;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT = 20915;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP = 20916;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 20917;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE = 20918;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE = 20919;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 20920;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    20921;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 20922;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 20923;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 20924;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 20925;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    20926;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    20927;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    20928;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE = 20929;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE = 20930;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 20931;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 20932;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME = 20933;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER = 20934;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    20935;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    20936;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    20937;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE = 20938;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    20939;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 20940;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    20941;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM = 20942;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS = 20943;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 20944;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 20945;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 20946;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER = 20947;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    20948;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    20949;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    20950;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE = 20951;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE = 20952;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE = 20953;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 20954;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID = 20955;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME = 20956;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER = 20957;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    20958;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    20959;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    20960;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    20961;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    20962;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 20963;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID = 20964;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME = 20965;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER = 20966;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    20967;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    20968;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    20969;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    20970;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    20971;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 20972;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    20973;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    20974;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    20975;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    20976;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    20977;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    20978;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    20979;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    20980;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    20981;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    20982;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    20983;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    20984;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    20985;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    20986;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    20987;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    20988;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE = 20989;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    20990;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED = 20991;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED = 20992;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED = 20993;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 20994;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID = 20995;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID = 20996;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID = 20997;

const int UA_NS0ID_VERSIONTIME = 20998;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE = 20999;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTXML = 21000;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTBINARY = 21001;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE = 21002;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    21003;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID = 21004;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    21005;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SUBSCRIBEDDATASET = 21006;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 21007;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID = 21008;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES = 21009;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_INPUTARGUMENTS = 21010;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_OUTPUTARGUMENTS = 21011;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR = 21012;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_INPUTARGUMENTS = 21013;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_OUTPUTARGUMENTS = 21014;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS = 21015;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 21016;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 21017;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 21018;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 21019;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 21020;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 21021;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 21022;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 21023;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 21024;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 21025;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 21026;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_RESET = 21027;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_SUBERROR = 21028;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS = 21029;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 21030;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 21031;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 21032;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 21033;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 21034;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 21035;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 21036;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 21037;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 21038;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 21039;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 21040;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 21041;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 21042;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 21043;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 21044;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 21045;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 21046;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 21047;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 21048;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 21049;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 21050;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 21051;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 21052;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 21053;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 21054;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 21055;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 21056;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 21057;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 21058;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 21059;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 21060;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES = 21061;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE = 21062;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION = 21063;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL = 21064;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE = 21065;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES = 21066;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE = 21067;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION = 21068;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL = 21069;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE = 21070;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS = 21071;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE = 21072;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION = 21073;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL = 21074;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE = 21075;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS = 21076;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 21077;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS = 21078;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 21079;

const int UA_NS0ID_READERGROUPTYPE_TRANSPORTSETTINGS = 21080;

const int UA_NS0ID_READERGROUPTYPE_MESSAGESETTINGS = 21081;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER = 21082;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_INPUTARGUMENTS = 21083;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_OUTPUTARGUMENTS = 21084;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER = 21085;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER_INPUTARGUMENTS = 21086;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE = 21087;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_INPUTARGUMENTS = 21088;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_OUTPUTARGUMENTS = 21089;

const int UA_NS0ID_READERGROUPTRANSPORTTYPE = 21090;

const int UA_NS0ID_READERGROUPMESSAGETYPE = 21091;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERID = 21092;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETFIELDCONTENTMASK = 21093;

const int UA_NS0ID_DATASETWRITERTYPE_KEYFRAMECOUNT = 21094;

const int UA_NS0ID_DATASETWRITERTYPE_MESSAGESETTINGS = 21095;

const int UA_NS0ID_DATASETWRITERMESSAGETYPE = 21096;

const int UA_NS0ID_DATASETREADERTYPE_PUBLISHERID = 21097;

const int UA_NS0ID_DATASETREADERTYPE_WRITERGROUPID = 21098;

const int UA_NS0ID_DATASETREADERTYPE_DATASETWRITERID = 21099;

const int UA_NS0ID_DATASETREADERTYPE_DATASETMETADATA = 21100;

const int UA_NS0ID_DATASETREADERTYPE_DATASETFIELDCONTENTMASK = 21101;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGERECEIVETIMEOUT = 21102;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGESETTINGS = 21103;

const int UA_NS0ID_DATASETREADERMESSAGETYPE = 21104;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE = 21105;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_GROUPVERSION = 21106;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_DATASETORDERING = 21107;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21108;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_SAMPLINGOFFSET = 21109;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_PUBLISHINGOFFSET = 21110;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE = 21111;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK = 21112;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_CONFIGUREDSIZE = 21113;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_NETWORKMESSAGENUMBER = 21114;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETOFFSET = 21115;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE = 21116;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_GROUPVERSION = 21117;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 21118;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGENUMBER = 21119;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETCLASSID = 21120;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21121;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK = 21122;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PUBLISHINGINTERVAL = 21123;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PROCESSINGOFFSET = 21124;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_RECEIVEOFFSET = 21125;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE = 21126;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21127;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE = 21128;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK = 21129;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE = 21130;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21131;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK = 21132;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE = 21133;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATCOUNT = 21134;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATDELAY = 21135;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE = 21136;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_QUEUENAME = 21137;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE = 21138;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_QUEUENAME = 21139;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAQUEUENAME = 21140;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAUPDATETIME = 21141;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE = 21142;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_QUEUENAME = 21143;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_METADATAQUEUENAME = 21144;

const int UA_NS0ID_NETWORKADDRESSTYPE = 21145;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE = 21146;

const int UA_NS0ID_NETWORKADDRESSURLTYPE = 21147;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE = 21148;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_URL = 21149;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21150;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTBINARY = 21151;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTBINARY = 21152;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21153;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTBINARY = 21154;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 21155;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE = 21156;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION = 21157;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT = 21158;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE = 21159;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION = 21160;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT = 21161;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE = 21162;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION = 21163;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT = 21164;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE = 21165;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION = 21166;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT = 21167;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21168;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION = 21169;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT = 21170;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 21171;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 21172;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 21173;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTXML = 21174;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTXML = 21175;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTXML = 21176;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTXML = 21177;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTXML = 21178;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 21179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE = 21180;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION = 21181;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT = 21182;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE = 21183;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION = 21184;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT = 21185;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE = 21186;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION = 21187;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT = 21188;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE = 21189;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION = 21190;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT = 21191;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21192;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION = 21193;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT = 21194;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 21195;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION = 21196;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 21197;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21198;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTJSON = 21199;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTJSON = 21200;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21201;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTJSON = 21202;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 21203;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER = 21204;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21205;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    21206;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21207;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE = 21208;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE = 21209;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY = 21210;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY = 21211;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 21212;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 21213;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 21214;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 21215;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 21216;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER = 21217;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21218;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    21219;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21220;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE = 21221;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE = 21222;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME = 21223;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT = 21224;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE = 21225;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS = 21226;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 21227;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 21228;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE = 21229;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET = 21230;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 21231;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE = 21232;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 21233;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE = 21234;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 21235;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE = 21236;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID = 21237;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 21238;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 21239;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 21240;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME = 21241;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 21242;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 21243;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 21244;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 21245;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 21246;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME = 21247;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID = 21248;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME = 21249;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 21250;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 21251;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN = 21252;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 21253;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 21254;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 21255;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER = 21256;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21257;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    21258;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21259;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE = 21260;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE = 21261;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY = 21262;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP = 21263;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 21264;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    21265;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT = 21266;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP = 21267;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 21268;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE = 21269;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE = 21270;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 21271;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    21272;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 21273;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 21274;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 21275;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 21276;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    21277;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    21278;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    21279;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE = 21280;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE = 21281;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 21282;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 21283;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME = 21284;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER = 21285;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    21286;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    21287;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    21288;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE = 21289;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    21290;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 21291;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    21292;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 21293;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS = 21294;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 21295;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 21296;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 21297;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER = 21298;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    21299;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    21300;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    21301;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE = 21302;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE = 21303;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 21304;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 21305;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID = 21306;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME = 21307;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER = 21308;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    21309;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    21310;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    21311;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    21312;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    21313;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 21314;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID = 21315;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME = 21316;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER = 21317;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    21318;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    21319;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    21320;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    21321;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    21322;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 21323;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    21324;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    21325;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    21326;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    21327;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    21328;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    21329;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    21330;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    21331;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    21332;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    21333;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    21334;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    21335;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    21336;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    21337;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    21338;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    21339;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE = 21340;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    21341;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED = 21342;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 21343;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 21344;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 21345;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID = 21346;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID = 21347;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID = 21348;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 21349;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 21350;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 21351;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER = 21352;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21353;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    21354;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21355;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE = 21356;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE = 21357;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 21358;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 21359;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 21360;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 21361;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 21362;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 21363;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 21364;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER = 21365;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21366;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    21367;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21368;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE = 21369;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE = 21370;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 21371;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT = 21372;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE = 21373;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 21374;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 21375;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 21376;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 21377;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET = 21378;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 21379;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 21380;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 21381;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 21382;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_UPDATEFREQUENCY = 21383;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED = 21384;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_EVENTID = 21385;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_EVENTTYPE = 21386;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SOURCENODE = 21387;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SOURCENAME = 21388;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_TIME = 21389;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_RECEIVETIME = 21390;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LOCALTIME = 21391;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_MESSAGE = 21392;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SEVERITY = 21393;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONDITIONCLASSID = 21394;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONDITIONCLASSNAME = 21395;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    21396;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    21397;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONDITIONNAME = 21398;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_BRANCHID = 21399;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_RETAIN = 21400;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE = 21401;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 21402;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 21403;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    21404;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21405;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    21406;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21407;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    21408;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    21409;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_QUALITY = 21410;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    21411;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LASTSEVERITY = 21412;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    21413;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_COMMENT = 21414;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    21415;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CLIENTUSERID = 21416;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_DISABLE = 21417;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ENABLE = 21418;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ADDCOMMENT = 21419;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    21420;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE = 21421;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 21422;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 21423;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 21424;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    21425;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    21426;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    21427;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    21428;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    21429;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 21430;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 21431;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    21432;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    21433;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    21434;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    21435;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    21436;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    21437;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    21438;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKNOWLEDGE = 21439;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    21440;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRM = 21441;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    21442;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE = 21443;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 21444;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 21445;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER = 21446;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    21447;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    21448;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    21449;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    21450;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    21451;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_INPUTNODE = 21452;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 21453;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID = 21454;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    21455;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    21456;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    21457;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    21458;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    21459;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    21460;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    21461;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 21462;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    21463;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    21464;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    21465;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    21466;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    21467;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    21468;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    21469;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    21470;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE = 21471;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    21472;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    21473;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    21474;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    21475;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    21476;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    21477;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    21478;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    21479;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    21480;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    21481;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    21482;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    21483;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    21484;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    21485;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    21486;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    21487;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    21488;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    21489;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    21490;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_MAXTIMESHELVED = 21491;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_AUDIBLEENABLED = 21492;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_AUDIBLESOUND = 21493;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    21494;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    21495;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    21496;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE = 21497;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_ID = 21498;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 21499;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    21500;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21501;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    21502;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21503;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    21504;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    21505;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_ONDELAY = 21506;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_OFFDELAY = 21507;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 21508;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_FIRSTINGROUP = 21509;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE = 21510;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 21511;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 21512;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    21513;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21514;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    21515;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21516;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    21517;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    21518;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_REALARMTIME = 21519;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_REALARMREPEATCOUNT = 21520;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SILENCE = 21521;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESS = 21522;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_UNSUPPRESS = 21523;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 21524;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_PLACEINSERVICE = 21525;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_RESET = 21526;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_NORMALSTATE = 21527;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_EXPIRATIONDATE = 21528;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 21529;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CERTIFICATETYPE = 21530;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_CERTIFICATE = 21531;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE = 21532;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_EVENTID = 21533;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_EVENTTYPE = 21534;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SOURCENODE = 21535;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SOURCENAME = 21536;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_TIME = 21537;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_RECEIVETIME = 21538;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LOCALTIME = 21539;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_MESSAGE = 21540;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SEVERITY = 21541;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 21542;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME = 21543;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    21544;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    21545;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONDITIONNAME = 21546;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_BRANCHID = 21547;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_RETAIN = 21548;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 21549;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 21550;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 21551;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    21552;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21553;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    21554;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21555;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    21556;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    21557;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_QUALITY = 21558;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    21559;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LASTSEVERITY = 21560;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    21561;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_COMMENT = 21562;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    21563;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CLIENTUSERID = 21564;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_DISABLE = 21565;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ENABLE = 21566;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ADDCOMMENT = 21567;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    21568;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE = 21569;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 21570;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 21571;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 21572;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    21573;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    21574;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    21575;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    21576;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    21577;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 21578;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 21579;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    21580;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    21581;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    21582;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    21583;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    21584;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    21585;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    21586;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 21587;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    21588;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRM = 21589;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    21590;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE = 21591;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 21592;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 21593;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER = 21594;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    21595;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    21596;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    21597;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    21598;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    21599;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_INPUTNODE = 21600;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 21601;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID = 21602;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    21603;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    21604;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    21605;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    21606;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    21607;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    21608;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    21609;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 21610;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    21611;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    21612;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    21613;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    21614;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    21615;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    21616;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    21617;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    21618;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 21619;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    21620;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    21621;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    21622;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    21623;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    21624;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    21625;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    21626;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    21627;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    21628;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    21629;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    21630;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    21631;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    21632;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    21633;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    21634;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    21635;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    21636;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    21637;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    21638;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 21639;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 21640;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 21641;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    21642;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    21643;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    21644;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE = 21645;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 21646;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 21647;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    21648;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21649;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    21650;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21651;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    21652;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    21653;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_ONDELAY = 21654;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_OFFDELAY = 21655;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 21656;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 21657;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 21658;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 21659;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 21660;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    21661;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21662;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    21663;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21664;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    21665;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    21666;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_REALARMTIME = 21667;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT = 21668;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SILENCE = 21669;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESS = 21670;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_UNSUPPRESS = 21671;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 21672;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 21673;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_RESET = 21674;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_NORMALSTATE = 21675;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_TRUSTLISTID = 21676;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 21677;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 21678;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY = 21679;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED = 21680;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID = 21681;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    21682;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    21683;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    21684;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME = 21685;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    21686;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    21687;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE = 21688;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY =
    21689;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    21690;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    21691;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    21692;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    21693;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    21694;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID =
    21695;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN = 21696;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    21697;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    21698;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    21699;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    21700;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21701;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    21702;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21703;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    21704;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    21705;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY = 21706;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    21707;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    21708;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    21709;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT = 21710;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    21711;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    21712;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE = 21713;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE = 21714;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    21715;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    21716;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    21717;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    21718;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    21719;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    21720;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    21721;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    21722;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    21723;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    21724;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    21725;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    21726;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    21727;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    21728;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    21729;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    21730;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    21731;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    21732;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    21733;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    21734;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    21735;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    21736;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM = 21737;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    21738;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    21739;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    21740;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    21741;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    21742;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    21743;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    21744;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    21745;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    21746;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    21747;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    21748;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    21749;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    21750;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    21751;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    21752;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    21753;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    21754;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    21755;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    21756;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    21757;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    21758;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    21759;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    21760;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    21761;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    21762;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    21763;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    21764;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    21765;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    21766;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    21767;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    21768;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    21769;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    21770;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    21771;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    21772;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    21773;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    21774;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    21775;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    21776;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    21777;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    21778;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    21779;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    21780;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    21781;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    21782;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    21783;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    21784;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    21785;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    21786;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    21787;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    21788;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    21789;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    21790;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    21791;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    21792;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    21793;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    21794;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    21795;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    21796;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21797;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    21798;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21799;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    21800;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    21801;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY = 21802;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    21803;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    21804;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    21805;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    21806;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    21807;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    21808;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    21809;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21810;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    21811;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21812;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    21813;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    21814;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    21815;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    21816;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE = 21817;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    21818;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    21819;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    21820;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    21821;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET = 21822;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    21823;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    21824;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    21825;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    21826;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    21827;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE = 21828;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID = 21829;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    21830;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    21831;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    21832;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME = 21833;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    21834;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    21835;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 21836;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    21837;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    21838;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    21839;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    21840;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    21841;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    21842;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    21843;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN = 21844;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    21845;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    21846;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    21847;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    21848;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21849;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    21850;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21851;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    21852;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    21853;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY = 21854;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    21855;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    21856;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    21857;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT = 21858;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    21859;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    21860;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE = 21861;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE = 21862;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    21863;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    21864;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    21865;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    21866;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    21867;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    21868;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    21869;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    21870;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    21871;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    21872;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    21873;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    21874;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    21875;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    21876;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    21877;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    21878;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    21879;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    21880;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    21881;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    21882;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    21883;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    21884;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 21885;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    21886;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    21887;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    21888;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    21889;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    21890;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    21891;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    21892;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    21893;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    21894;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    21895;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    21896;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    21897;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    21898;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    21899;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    21900;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    21901;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    21902;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    21903;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    21904;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    21905;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    21906;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    21907;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    21908;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    21909;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    21910;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    21911;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    21912;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    21913;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    21914;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    21915;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    21916;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    21917;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    21918;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    21919;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    21920;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    21921;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    21922;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    21923;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    21924;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    21925;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    21926;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    21927;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    21928;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    21929;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    21930;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    21931;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    21932;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    21933;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    21934;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    21935;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    21936;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    21937;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    21938;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    21939;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    21940;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    21941;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    21942;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    21943;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    21944;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    21945;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    21946;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    21947;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    21948;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    21949;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 21950;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    21951;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    21952;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    21953;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    21954;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    21955;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    21956;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    21957;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    21958;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    21959;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    21960;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    21961;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    21962;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    21963;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    21964;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE = 21965;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    21966;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    21967;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    21968;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    21969;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET = 21970;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    21971;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    21972;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    21973;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    21974;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY = 21975;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED = 21976;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID = 21977;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 21978;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE = 21979;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME = 21980;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME = 21981;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 21982;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME = 21983;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE = 21984;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY = 21985;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    21986;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    21987;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    21988;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    21989;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 21990;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID = 21991;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN = 21992;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 21993;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    21994;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    21995;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    21996;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    21997;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    21998;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    21999;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    22000;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    22001;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY = 22002;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    22003;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 22004;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    22005;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT = 22006;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    22007;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 22008;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE = 22009;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE = 22010;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 22011;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    22012;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 22013;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 22014;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    22015;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    22016;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22017;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    22018;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22019;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    22020;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    22021;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    22022;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    22023;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    22024;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    22025;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22026;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    22027;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22028;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    22029;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    22030;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 22031;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    22032;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM = 22033;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    22034;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 22035;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    22036;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    22037;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    22038;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22039;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    22040;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22041;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    22042;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    22043;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE = 22044;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    22045;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    22046;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    22047;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    22048;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22049;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    22050;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22051;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    22052;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    22053;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    22054;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    22055;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    22056;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    22057;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22058;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    22059;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22060;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    22061;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    22062;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 22063;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    22064;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    22065;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    22066;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22067;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22068;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    22069;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    22070;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    22071;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22072;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22073;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22074;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    22075;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22076;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    22077;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    22078;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22079;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    22080;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    22081;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    22082;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    22083;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    22084;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 22085;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    22086;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    22087;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    22088;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 22089;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    22090;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    22091;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    22092;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22093;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    22094;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22095;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    22096;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    22097;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY = 22098;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY = 22099;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    22100;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 22101;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 22102;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    22103;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    22104;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    22105;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22106;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    22107;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22108;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    22109;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    22110;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME = 22111;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    22112;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE = 22113;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS = 22114;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 22115;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    22116;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    22117;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET = 22118;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 22119;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    22120;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    22121;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    22122;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 22123;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE = 22124;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID = 22125;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 22126;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 22127;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 22128;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME = 22129;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 22130;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 22131;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 22132;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 22133;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    22134;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    22135;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    22136;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    22137;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 22138;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 22139;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN = 22140;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 22141;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    22142;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    22143;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    22144;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22145;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    22146;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22147;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    22148;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    22149;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY = 22150;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    22151;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 22152;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    22153;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT = 22154;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    22155;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 22156;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE = 22157;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE = 22158;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 22159;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    22160;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 22161;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 22162;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    22163;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    22164;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22165;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    22166;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22167;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    22168;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    22169;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    22170;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    22171;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    22172;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    22173;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22174;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    22175;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22176;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    22177;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    22178;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 22179;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    22180;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 22181;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    22182;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 22183;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    22184;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    22185;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    22186;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22187;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    22188;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22189;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    22190;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    22191;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 22192;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    22193;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    22194;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    22195;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    22196;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22197;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    22198;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22199;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    22200;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    22201;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    22202;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    22203;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    22204;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    22205;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22206;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    22207;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22208;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    22209;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    22210;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 22211;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    22212;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    22213;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    22214;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22215;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22216;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    22217;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    22218;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    22219;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22220;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22221;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22222;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    22223;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22224;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    22225;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    22226;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22227;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    22228;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    22229;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    22230;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    22231;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    22232;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 22233;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    22234;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    22235;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    22236;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 22237;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    22238;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    22239;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    22240;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22241;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    22242;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22243;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    22244;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    22245;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 22246;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 22247;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    22248;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 22249;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 22250;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    22251;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    22252;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    22253;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22254;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    22255;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22256;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    22257;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    22258;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 22259;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    22260;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE = 22261;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 22262;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 22263;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    22264;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    22265;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET = 22266;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 22267;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 22268;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    22269;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    22270;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY = 22271;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED = 22272;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID = 22273;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 22274;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    22275;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    22276;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME = 22277;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    22278;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME = 22279;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE = 22280;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY = 22281;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    22282;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    22283;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    22284;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    22285;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    22286;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID = 22287;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN = 22288;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    22289;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    22290;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    22291;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    22292;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22293;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    22294;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22295;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    22296;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    22297;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY = 22298;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    22299;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    22300;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    22301;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT = 22302;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    22303;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    22304;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE = 22305;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE = 22306;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    22307;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    22308;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    22309;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    22310;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    22311;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    22312;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22313;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    22314;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22315;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    22316;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    22317;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    22318;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    22319;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    22320;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    22321;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22322;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    22323;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22324;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    22325;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    22326;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    22327;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    22328;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM = 22329;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    22330;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    22331;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    22332;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    22333;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    22334;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22335;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    22336;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22337;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    22338;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    22339;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE = 22340;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    22341;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    22342;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    22343;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    22344;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22345;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    22346;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22347;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    22348;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    22349;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    22350;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    22351;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    22352;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    22353;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22354;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    22355;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22356;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    22357;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    22358;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    22359;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    22360;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    22361;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    22362;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22363;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22364;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    22365;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    22366;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    22367;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22368;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22369;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22370;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    22371;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22372;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    22373;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    22374;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22375;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    22376;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    22377;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    22378;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    22379;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    22380;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    22381;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    22382;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    22383;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    22384;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    22385;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    22386;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    22387;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    22388;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22389;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    22390;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22391;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    22392;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    22393;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY = 22394;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY = 22395;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    22396;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    22397;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    22398;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    22399;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    22400;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    22401;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22402;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    22403;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22404;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    22405;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    22406;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    22407;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    22408;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE = 22409;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS = 22410;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    22411;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    22412;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    22413;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET = 22414;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    22415;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    22416;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    22417;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    22418;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    22419;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE = 22420;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID = 22421;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 22422;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    22423;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    22424;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME = 22425;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    22426;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 22427;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 22428;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 22429;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    22430;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    22431;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    22432;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    22433;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    22434;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 22435;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN = 22436;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    22437;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    22438;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    22439;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    22440;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22441;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    22442;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22443;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    22444;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    22445;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY = 22446;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    22447;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    22448;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    22449;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT = 22450;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    22451;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    22452;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE = 22453;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE = 22454;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    22455;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    22456;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    22457;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    22458;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    22459;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    22460;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22461;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    22462;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22463;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    22464;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    22465;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    22466;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    22467;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    22468;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    22469;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22470;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    22471;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22472;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    22473;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    22474;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    22475;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    22476;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 22477;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    22478;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    22479;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    22480;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    22481;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    22482;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22483;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    22484;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22485;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    22486;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    22487;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 22488;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    22489;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    22490;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    22491;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    22492;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22493;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    22494;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22495;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    22496;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    22497;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    22498;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    22499;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    22500;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    22501;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22502;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    22503;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22504;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    22505;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    22506;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    22507;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    22508;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    22509;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    22510;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22511;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22512;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    22513;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    22514;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    22515;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22516;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22517;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22518;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    22519;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22520;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    22521;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    22522;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22523;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    22524;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    22525;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    22526;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    22527;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    22528;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    22529;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    22530;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    22531;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    22532;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    22533;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    22534;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    22535;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    22536;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22537;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    22538;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22539;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    22540;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    22541;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 22542;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 22543;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    22544;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    22545;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    22546;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    22547;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    22548;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    22549;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22550;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    22551;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22552;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    22553;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    22554;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    22555;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    22556;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE = 22557;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 22558;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    22559;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    22560;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    22561;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET = 22562;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    22563;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    22564;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    22565;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    22566;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY = 22567;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED = 22568;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID = 22569;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 22570;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE = 22571;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME = 22572;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME = 22573;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 22574;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME = 22575;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE = 22576;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY = 22577;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    22578;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    22579;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    22580;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    22581;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    22582;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID = 22583;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN = 22584;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    22585;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    22586;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    22587;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    22588;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22589;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    22590;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22591;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    22592;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    22593;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY = 22594;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    22595;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    22596;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    22597;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT = 22598;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    22599;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    22600;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE = 22601;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE = 22602;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 22603;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    22604;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 22605;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    22606;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    22607;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    22608;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22609;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    22610;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22611;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    22612;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    22613;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    22614;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    22615;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    22616;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    22617;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22618;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    22619;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22620;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    22621;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    22622;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 22623;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    22624;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM = 22625;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    22626;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 22627;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    22628;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    22629;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    22630;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22631;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    22632;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22633;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    22634;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    22635;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE = 22636;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    22637;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    22638;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    22639;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    22640;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22641;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    22642;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22643;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    22644;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    22645;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    22646;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    22647;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    22648;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    22649;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22650;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    22651;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22652;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    22653;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    22654;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    22655;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    22656;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    22657;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    22658;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22659;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22660;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    22661;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    22662;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    22663;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22664;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22665;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22666;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    22667;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22668;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    22669;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    22670;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22671;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    22672;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    22673;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    22674;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    22675;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    22676;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    22677;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    22678;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    22679;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    22680;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    22681;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    22682;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    22683;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    22684;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22685;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    22686;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22687;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    22688;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    22689;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY = 22690;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY = 22691;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    22692;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    22693;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    22694;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    22695;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    22696;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    22697;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22698;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    22699;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22700;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    22701;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    22702;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME = 22703;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    22704;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE = 22705;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS = 22706;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 22707;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    22708;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    22709;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET = 22710;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 22711;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    22712;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    22713;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    22714;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 22715;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE = 22716;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID = 22717;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 22718;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 22719;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 22720;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME = 22721;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 22722;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 22723;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 22724;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 22725;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    22726;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    22727;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    22728;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    22729;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    22730;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 22731;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN = 22732;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    22733;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    22734;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    22735;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    22736;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22737;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    22738;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22739;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    22740;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    22741;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY = 22742;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    22743;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    22744;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    22745;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT = 22746;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    22747;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    22748;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE = 22749;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE = 22750;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 22751;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    22752;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 22753;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    22754;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    22755;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    22756;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22757;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    22758;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22759;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    22760;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    22761;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    22762;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    22763;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    22764;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    22765;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22766;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    22767;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22768;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    22769;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    22770;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 22771;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    22772;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 22773;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    22774;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 22775;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    22776;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    22777;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    22778;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22779;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    22780;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22781;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    22782;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    22783;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 22784;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    22785;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    22786;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    22787;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    22788;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22789;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    22790;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22791;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    22792;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    22793;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    22794;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    22795;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    22796;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    22797;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22798;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    22799;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22800;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    22801;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    22802;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    22803;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    22804;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    22805;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    22806;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22807;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22808;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    22809;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    22810;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    22811;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22812;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22813;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22814;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    22815;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22816;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    22817;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    22818;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22819;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    22820;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    22821;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    22822;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    22823;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    22824;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    22825;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    22826;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    22827;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    22828;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    22829;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    22830;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    22831;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    22832;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22833;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    22834;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22835;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    22836;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    22837;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 22838;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 22839;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    22840;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    22841;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    22842;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    22843;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    22844;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    22845;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22846;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    22847;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22848;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    22849;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    22850;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 22851;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    22852;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE = 22853;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 22854;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 22855;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    22856;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    22857;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET = 22858;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 22859;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 22860;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    22861;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    22862;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY = 22863;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED = 22864;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID = 22865;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 22866;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE = 22867;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME = 22868;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME = 22869;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 22870;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME = 22871;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE = 22872;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY = 22873;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID = 22874;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    22875;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    22876;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    22877;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 22878;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID = 22879;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN = 22880;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 22881;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID = 22882;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME = 22883;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    22884;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    22885;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    22886;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    22887;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    22888;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    22889;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY = 22890;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    22891;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 22892;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    22893;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT = 22894;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    22895;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 22896;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE = 22897;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE = 22898;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 22899;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    22900;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 22901;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 22902;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME = 22903;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER = 22904;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    22905;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    22906;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    22907;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    22908;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    22909;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE = 22910;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID = 22911;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    22912;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    22913;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    22914;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    22915;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    22916;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    22917;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    22918;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 22919;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    22920;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM = 22921;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    22922;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 22923;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID = 22924;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME = 22925;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    22926;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    22927;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    22928;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    22929;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    22930;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    22931;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE = 22932;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE = 22933;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    22934;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    22935;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    22936;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    22937;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    22938;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    22939;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    22940;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    22941;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE = 22942;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    22943;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    22944;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    22945;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    22946;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    22947;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    22948;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    22949;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    22950;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 22951;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    22952;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    22953;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    22954;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    22955;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    22956;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    22957;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    22958;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    22959;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    22960;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    22961;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    22962;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    22963;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    22964;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    22965;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    22966;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    22967;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    22968;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    22969;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    22970;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED = 22971;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED = 22972;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 22973;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    22974;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    22975;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    22976;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 22977;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID = 22978;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME = 22979;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    22980;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    22981;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    22982;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    22983;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    22984;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    22985;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY = 22986;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY = 22987;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG = 22988;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 22989;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 22990;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID = 22991;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME = 22992;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    22993;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    22994;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    22995;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    22996;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    22997;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    22998;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME = 22999;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    23000;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE = 23001;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS = 23002;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 23003;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE = 23004;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE = 23005;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET = 23006;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 23007;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE = 23008;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT = 23009;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE = 23010;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 23011;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE = 23012;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID = 23013;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 23014;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 23015;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 23016;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME = 23017;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 23018;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 23019;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 23020;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 23021;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID = 23022;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    23023;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    23024;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    23025;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 23026;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 23027;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN = 23028;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 23029;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID = 23030;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME = 23031;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    23032;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    23033;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    23034;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    23035;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    23036;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    23037;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY = 23038;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    23039;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 23040;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    23041;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT = 23042;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    23043;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 23044;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE = 23045;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE = 23046;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 23047;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    23048;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 23049;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 23050;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME = 23051;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER = 23052;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    23053;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    23054;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    23055;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    23056;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    23057;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE = 23058;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID = 23059;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    23060;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    23061;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    23062;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    23063;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    23064;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    23065;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    23066;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 23067;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    23068;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 23069;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    23070;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 23071;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID = 23072;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME = 23073;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    23074;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    23075;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    23076;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    23077;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    23078;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    23079;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 23080;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE = 23081;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    23082;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    23083;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    23084;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    23085;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    23086;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    23087;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    23088;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    23089;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE = 23090;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    23091;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    23092;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    23093;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    23094;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    23095;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    23096;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    23097;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    23098;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 23099;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    23100;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    23101;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    23102;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    23103;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    23104;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    23105;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    23106;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    23107;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    23108;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    23109;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    23110;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    23111;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    23112;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    23113;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    23114;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    23115;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    23116;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    23117;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    23118;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED = 23119;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED = 23120;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 23121;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    23122;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    23123;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    23124;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 23125;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID = 23126;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME = 23127;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    23128;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    23129;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    23130;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    23131;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    23132;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    23133;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 23134;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 23135;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG = 23136;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 23137;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 23138;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID = 23139;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME = 23140;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    23141;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    23142;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    23143;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    23144;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    23145;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    23146;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 23147;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    23148;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE = 23149;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 23150;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 23151;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE = 23152;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE = 23153;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET = 23154;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 23155;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 23156;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME = 23157;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY = 23158;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY = 23159;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED = 23160;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID = 23161;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE = 23162;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE = 23163;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME = 23164;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME = 23165;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME = 23166;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME = 23167;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE = 23168;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY = 23169;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    23170;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    23171;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    23172;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    23173;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME = 23174;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID = 23175;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN = 23176;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE = 23177;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    23178;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    23179;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    23180;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    23181;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    23182;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    23183;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    23184;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    23185;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY = 23186;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    23187;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY = 23188;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    23189;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT = 23190;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    23191;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID = 23192;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE = 23193;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE = 23194;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT = 23195;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    23196;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE = 23197;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID = 23198;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    23199;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    23200;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    23201;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    23202;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    23203;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    23204;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    23205;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    23206;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    23207;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    23208;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    23209;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    23210;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    23211;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    23212;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    23213;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    23214;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE = 23215;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    23216;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM = 23217;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    23218;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE = 23219;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    23220;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    23221;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    23222;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    23223;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    23224;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    23225;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    23226;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    23227;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE = 23228;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    23229;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    23230;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    23231;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    23232;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    23233;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    23234;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    23235;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    23236;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    23237;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    23238;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    23239;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    23240;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    23241;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    23242;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    23243;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    23244;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    23245;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    23246;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE = 23247;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    23248;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    23249;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    23250;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    23251;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    23252;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    23253;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    23254;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    23255;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    23256;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    23257;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    23258;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    23259;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    23260;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    23261;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    23262;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    23263;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    23264;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    23265;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    23266;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    23267;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    23268;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND = 23269;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    23270;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    23271;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    23272;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE = 23273;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    23274;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    23275;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    23276;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    23277;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    23278;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    23279;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    23280;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    23281;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY = 23282;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY = 23283;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    23284;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP = 23285;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE = 23286;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    23287;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    23288;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    23289;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    23290;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    23291;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    23292;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    23293;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    23294;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME = 23295;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    23296;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE = 23297;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS = 23298;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS = 23299;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    23300;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    23301;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET = 23302;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE = 23303;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    23304;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    23305;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    23306;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE = 23307;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE = 23308;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID = 23309;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE = 23310;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE = 23311;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME = 23312;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME = 23313;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME = 23314;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME = 23315;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 23316;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 23317;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    23318;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    23319;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    23320;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    23321;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME = 23322;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 23323;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN = 23324;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE = 23325;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    23326;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    23327;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    23328;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    23329;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    23330;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    23331;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    23332;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    23333;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY = 23334;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    23335;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY = 23336;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    23337;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT = 23338;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    23339;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID = 23340;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE = 23341;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE = 23342;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT = 23343;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    23344;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE = 23345;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID = 23346;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    23347;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    23348;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    23349;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    23350;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    23351;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    23352;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    23353;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    23354;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    23355;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    23356;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    23357;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    23358;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    23359;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    23360;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    23361;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    23362;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE = 23363;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    23364;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 23365;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    23366;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE = 23367;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    23368;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    23369;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    23370;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    23371;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    23372;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    23373;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    23374;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    23375;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE = 23376;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    23377;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    23378;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    23379;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    23380;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    23381;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    23382;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    23383;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    23384;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    23385;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    23386;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    23387;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    23388;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    23389;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    23390;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    23391;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    23392;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    23393;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    23394;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE = 23395;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    23396;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    23397;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    23398;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    23399;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    23400;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    23401;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    23402;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    23403;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    23404;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    23405;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    23406;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    23407;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    23408;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    23409;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    23410;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    23411;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    23412;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    23413;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    23414;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    23415;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    23416;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND = 23417;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    23418;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    23419;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    23420;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE = 23421;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    23422;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    23423;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    23424;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    23425;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    23426;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    23427;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    23428;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    23429;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 23430;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 23431;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    23432;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP = 23433;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE = 23434;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    23435;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    23436;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    23437;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    23438;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    23439;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    23440;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    23441;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    23442;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME = 23443;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    23444;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE = 23445;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 23446;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS = 23447;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    23448;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    23449;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET = 23450;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE = 23451;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID = 23452;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    23453;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    23454;

const int UA_NS0ID_ALIASNAMETYPE = 23455;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE = 23456;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_ALIAS_PLACEHOLDER = 23457;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23458;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23459;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS = 23460;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS = 23461;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS = 23462;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_INPUTARGUMENTS = 23463;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_OUTPUTARGUMENTS = 23464;

const int UA_NS0ID_FINDALIASMETHODTYPE = 23465;

const int UA_NS0ID_FINDALIASMETHODTYPE_INPUTARGUMENTS = 23466;

const int UA_NS0ID_FINDALIASMETHODTYPE_OUTPUTARGUMENTS = 23467;

const int UA_NS0ID_ALIASNAMEDATATYPE = 23468;

const int UA_NS0ID_ALIASFOR = 23469;

const int UA_NS0ID_ALIASES = 23470;

const int UA_NS0ID_ALIASES_ALIAS_PLACEHOLDER = 23471;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23472;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23473;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS = 23474;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS = 23475;

const int UA_NS0ID_ALIASES_FINDALIAS = 23476;

const int UA_NS0ID_ALIASES_FINDALIAS_INPUTARGUMENTS = 23477;

const int UA_NS0ID_ALIASES_FINDALIAS_OUTPUTARGUMENTS = 23478;

const int UA_NS0ID_TAGVARIABLES = 23479;

const int UA_NS0ID_TAGVARIABLES_ALIAS_PLACEHOLDER = 23480;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23481;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23482;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS = 23483;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS = 23484;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS = 23485;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_INPUTARGUMENTS = 23486;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_OUTPUTARGUMENTS = 23487;

const int UA_NS0ID_TOPICS = 23488;

const int UA_NS0ID_TOPICS_ALIAS_PLACEHOLDER = 23489;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23490;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23491;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS = 23492;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS = 23493;

const int UA_NS0ID_TOPICS_FINDALIAS = 23494;

const int UA_NS0ID_TOPICS_FINDALIAS_INPUTARGUMENTS = 23495;

const int UA_NS0ID_TOPICS_FINDALIAS_OUTPUTARGUMENTS = 23496;

const int UA_NS0ID_READANNOTATIONDATADETAILS = 23497;

const int UA_NS0ID_CURRENCYUNITTYPE = 23498;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTBINARY = 23499;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTBINARY = 23500;

const int UA_NS0ID_CURRENCYUNIT = 23501;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE = 23502;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23503;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT = 23504;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTXML = 23505;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTXML = 23506;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTBINARY = 23507;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE = 23508;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23509;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT = 23510;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTJSON = 23511;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTJSON = 23512;

const int UA_NS0ID_IORDEREDOBJECTTYPE = 23513;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE = 23514;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23515;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT = 23516;

const int UA_NS0ID_IORDEREDOBJECTTYPE_NUMBERINLIST = 23517;

const int UA_NS0ID_ORDEREDLISTTYPE = 23518;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER = 23519;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTXML = 23520;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER_NUMBERINLIST = 23521;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE = 23522;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23523;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT = 23524;

const int UA_NS0ID_ORDEREDLISTTYPE_NODEVERSION = 23525;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST = 23526;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS = 23527;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTJSON = 23528;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST = 23529;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23530;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST = 23531;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23532;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST = 23533;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23534;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST = 23535;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST_OUTPUTARGUMENTS = 23536;

const int UA_NS0ID_ECCAPPLICATIONCERTIFICATETYPE = 23537;

const int UA_NS0ID_ECCNISTP256APPLICATIONCERTIFICATETYPE = 23538;

const int UA_NS0ID_ECCNISTP384APPLICATIONCERTIFICATETYPE = 23539;

const int UA_NS0ID_ECCBRAINPOOLP256R1APPLICATIONCERTIFICATETYPE = 23540;

const int UA_NS0ID_ECCBRAINPOOLP384R1APPLICATIONCERTIFICATETYPE = 23541;

const int UA_NS0ID_ECCCURVE25519APPLICATIONCERTIFICATETYPE = 23542;

const int UA_NS0ID_ECCCURVE448APPLICATIONCERTIFICATETYPE = 23543;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST = 23544;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23545;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST = 23546;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23547;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST = 23548;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23549;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST = 23550;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23551;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST = 23552;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23553;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST = 23554;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS = 23555;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE = 23556;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER = 23557;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICEURI = 23558;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICECERTIFICATE = 23559;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ISSUERENDPOINTURL = 23560;

const int UA_NS0ID_ISDEPRECATED = 23562;

const int UA_NS0ID_TRUSTLISTTYPE_DEFAULTVALIDATIONOPTIONS = 23563;

const int UA_NS0ID_TRUSTLISTVALIDATIONOPTIONS = 23564;

const int UA_NS0ID_TRUSTLISTVALIDATIONOPTIONS_OPTIONSETVALUES = 23565;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23566;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23567;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23568;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23569;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23570;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    23571;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    23572;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    23573;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    23574;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS = 23575;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    23576;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_HASSECUREELEMENT = 23593;

const int UA_NS0ID_SERVERCONFIGURATION_HASSECUREELEMENT = 23597;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETREFDATATYPE = 23599;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETDATATYPE = 23600;

const int UA_NS0ID_SECURITYGROUPDATATYPE = 23601;

const int UA_NS0ID_PUBSUBCONFIGURATION2DATATYPE = 23602;

const int UA_NS0ID_QOSDATATYPE = 23603;

const int UA_NS0ID_TRANSMITQOSDATATYPE = 23604;

const int UA_NS0ID_TRANSMITQOSPRIORITYDATATYPE = 23605;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE = 23606;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_EVENTID = 23607;

const int UA_NS0ID_RECEIVEQOSDATATYPE = 23608;

const int UA_NS0ID_RECEIVEQOSPRIORITYDATATYPE = 23609;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_EVENTTYPE = 23610;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_SOURCENODE = 23611;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORT2DATATYPE = 23612;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE = 23613;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTDATATYPE = 23614;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS = 23622;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER = 23637;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 23638;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 23639;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER = 23640;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 23641;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES = 23642;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXPUBSUBCONNECTIONS = 23643;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXWRITERGROUPS = 23644;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXREADERGROUPS = 23645;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXDATASETWRITERS = 23646;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXDATASETREADERS = 23647;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXFIELDSPERDATASET = 23648;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DATASETCLASSES = 23649;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS = 23658;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER = 23673;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 23674;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 23675;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER = 23676;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 23677;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES = 23678;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXPUBSUBCONNECTIONS = 23679;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXWRITERGROUPS = 23680;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXREADERGROUPS = 23681;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXDATASETWRITERS = 23682;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXDATASETREADERS = 23683;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXFIELDSPERDATASET = 23684;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DATASETCLASSES = 23685;

const int UA_NS0ID_GETCONNECTIONMETHODTYPE = 23726;

const int UA_NS0ID_GETCONNECTIONMETHODTYPE_INPUTARGUMENTS = 23727;

const int UA_NS0ID_GETCONNECTIONMETHODTYPE_OUTPUTARGUMENTS = 23728;

const int UA_NS0ID_MODIFYCONNECTIONMETHODTYPE = 23729;

const int UA_NS0ID_MODIFYCONNECTIONMETHODTYPE_INPUTARGUMENTS = 23730;

const int UA_NS0ID_MODIFYCONNECTIONMETHODTYPE_OUTPUTARGUMENTS = 23731;

const int UA_NS0ID_GETWRITERGROUPMETHODTYPE = 23745;

const int UA_NS0ID_GETWRITERGROUPMETHODTYPE_INPUTARGUMENTS = 23746;

const int UA_NS0ID_GETWRITERGROUPMETHODTYPE_OUTPUTARGUMENTS = 23747;

const int UA_NS0ID_MODIFYWRITERGROUPMETHODTYPE = 23748;

const int UA_NS0ID_MODIFYWRITERGROUPMETHODTYPE_INPUTARGUMENTS = 23749;

const int UA_NS0ID_MODIFYWRITERGROUPMETHODTYPE_OUTPUTARGUMENTS = 23750;

const int UA_NS0ID_URISTRING = 23751;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSESSIONS = 23752;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSUBSCRIPTIONS = 23753;

const int UA_NS0ID_GETREADERGROUPMETHODTYPE = 23767;

const int UA_NS0ID_GETREADERGROUPMETHODTYPE_INPUTARGUMENTS = 23768;

const int UA_NS0ID_GETREADERGROUPMETHODTYPE_OUTPUTARGUMENTS = 23769;

const int UA_NS0ID_MODIFYREADERGROUPMETHODTYPE = 23770;

const int UA_NS0ID_MODIFYREADERGROUPMETHODTYPE_INPUTARGUMENTS = 23771;

const int UA_NS0ID_MODIFYREADERGROUPMETHODTYPE_OUTPUTARGUMENTS = 23772;

const int UA_NS0ID_GETDATASETWRITERMETHODTYPE = 23779;

const int UA_NS0ID_GETDATASETWRITERMETHODTYPE_OUTPUTARGUMENTS = 23780;

const int UA_NS0ID_MODIFYDATASETWRITERMETHODTYPE = 23781;

const int UA_NS0ID_MODIFYDATASETWRITERMETHODTYPE_INPUTARGUMENTS = 23782;

const int UA_NS0ID_MODIFYDATASETWRITERMETHODTYPE_OUTPUTARGUMENTS = 23783;

const int UA_NS0ID_GETDATASETREADERMETHODTYPE = 23790;

const int UA_NS0ID_GETDATASETREADERMETHODTYPE_OUTPUTARGUMENTS = 23791;

const int UA_NS0ID_MODIFYDATASETREADERMETHODTYPE = 23792;

const int UA_NS0ID_MODIFYDATASETREADERMETHODTYPE_INPUTARGUMENTS = 23793;

const int UA_NS0ID_MODIFYDATASETREADERMETHODTYPE_OUTPUTARGUMENTS = 23794;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE = 23795;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER = 23796;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDSUBSCRIBEDDATASET = 23797;

const int
    UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDSUBSCRIBEDDATASET_INPUTARGUMENTS =
    23798;

const int
    UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDSUBSCRIBEDDATASET_OUTPUTARGUMENTS =
    23799;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_REMOVESUBSCRIBEDDATASET = 23800;

const int
    UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_REMOVESUBSCRIBEDDATASET_INPUTARGUMENTS =
    23801;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER = 23802;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_INPUTARGUMENTS =
    23803;

const int
    UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    23804;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER = 23805;

const int
    UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_SUBSCRIBEDDATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    23806;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_STANDALONESUBSCRIBEDDATASETNAME_PLACEHOLDER = 23807;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_STANDALONESUBSCRIBEDDATASETNAME_PLACEHOLDER_SUBSCRIBEDDATASET = 23808;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_STANDALONESUBSCRIBEDDATASETNAME_PLACEHOLDER_DATASETMETADATA = 23809;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_STANDALONESUBSCRIBEDDATASETNAME_PLACEHOLDER_ISCONNECTED = 23810;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDSUBSCRIBEDDATASET = 23811;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDSUBSCRIBEDDATASET_INPUTARGUMENTS = 23812;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDSUBSCRIBEDDATASET_OUTPUTARGUMENTS = 23813;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_REMOVESUBSCRIBEDDATASET = 23814;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_REMOVESUBSCRIBEDDATASET_INPUTARGUMENTS = 23815;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDDATASETFOLDER = 23816;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDDATASETFOLDER_INPUTARGUMENTS = 23817;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_ADDDATASETFOLDER_OUTPUTARGUMENTS = 23818;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_REMOVEDATASETFOLDER = 23819;

const int UA_NS0ID_SUBSCRIBEDDATASETFOLDERTYPE_REMOVEDATASETFOLDER_INPUTARGUMENTS = 23820;

const int UA_NS0ID_ADDSUBSCRIBEDDATASETMETHODTYPE = 23821;

const int UA_NS0ID_ADDSUBSCRIBEDDATASETMETHODTYPE_INPUTARGUMENTS = 23822;

const int UA_NS0ID_ADDSUBSCRIBEDDATASETMETHODTYPE_OUTPUTARGUMENTS = 23823;

const int UA_NS0ID_REMOVESUBSCRIBEDDATASETMETHODTYPE = 23824;

const int UA_NS0ID_REMOVESUBSCRIBEDDATASETMETHODTYPE_INPUTARGUMENTS = 23825;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETTYPE = 23828;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETTYPE_SUBSCRIBEDDATASET = 23829;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETTYPE_DATASETMETADATA = 23830;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETTYPE_ISCONNECTED = 23831;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE = 23832;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXPUBSUBCONNECTIONS = 23833;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXWRITERGROUPS = 23834;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXREADERGROUPS = 23835;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXDATASETWRITERS = 23836;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXDATASETREADERS = 23837;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXFIELDSPERDATASET = 23838;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYANNOUNCERATE = 23839;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYMAXMESSAGESIZE = 23840;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_ADDRESS = 23842;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE = 23843;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONS = 23844;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 23845;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 23846;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_DATAGRAMQOS = 23847;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_DISCOVERYANNOUNCERATE = 23848;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_TOPIC = 23849;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETREFDATATYPE_ENCODING_DEFAULTBINARY = 23851;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 23852;

const int UA_NS0ID_SECURITYGROUPDATATYPE_ENCODING_DEFAULTBINARY = 23853;

const int UA_NS0ID_PUBSUBCONFIGURATION2DATATYPE_ENCODING_DEFAULTBINARY = 23854;

const int UA_NS0ID_QOSDATATYPE_ENCODING_DEFAULTBINARY = 23855;

const int UA_NS0ID_TRANSMITQOSDATATYPE_ENCODING_DEFAULTBINARY = 23856;

const int UA_NS0ID_TRANSMITQOSPRIORITYDATATYPE_ENCODING_DEFAULTBINARY = 23857;

const int UA_NS0ID_RECEIVEQOSDATATYPE_ENCODING_DEFAULTBINARY = 23860;

const int UA_NS0ID_RECEIVEQOSPRIORITYDATATYPE_ENCODING_DEFAULTBINARY = 23861;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_ENCODING_DEFAULTBINARY = 23864;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_ENCODING_DEFAULTBINARY = 23865;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 23866;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE = 23870;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE_DATATYPEVERSION = 23871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE_DICTIONARYFRAGMENT = 23872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE = 23873;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION = 23874;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT = 23875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SECURITYGROUPDATATYPE = 23876;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SECURITYGROUPDATATYPE_DATATYPEVERSION = 23877;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SECURITYGROUPDATATYPE_DICTIONARYFRAGMENT = 23878;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATION2DATATYPE = 23879;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATION2DATATYPE_DATATYPEVERSION = 23880;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATION2DATATYPE_DICTIONARYFRAGMENT = 23881;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_QOSDATATYPE = 23882;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_QOSDATATYPE_DATATYPEVERSION = 23883;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_QOSDATATYPE_DICTIONARYFRAGMENT = 23884;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSDATATYPE = 23885;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSDATATYPE_DATATYPEVERSION = 23886;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSDATATYPE_DICTIONARYFRAGMENT = 23887;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSPRIORITYDATATYPE = 23888;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSPRIORITYDATATYPE_DATATYPEVERSION = 23889;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSMITQOSPRIORITYDATATYPE_DICTIONARYFRAGMENT = 23890;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_SOURCENAME = 23891;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_TIME = 23892;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_RECEIVETIME = 23893;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_LOCALTIME = 23894;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_MESSAGE = 23895;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_SEVERITY = 23896;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSDATATYPE = 23897;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSDATATYPE_DATATYPEVERSION = 23898;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSDATATYPE_DICTIONARYFRAGMENT = 23899;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSPRIORITYDATATYPE = 23900;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSPRIORITYDATATYPE_DATATYPEVERSION = 23901;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RECEIVEQOSPRIORITYDATATYPE_DICTIONARYFRAGMENT = 23902;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_ACTIONTIMESTAMP = 23903;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_STATUS = 23904;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_SERVERID = 23905;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CLIENTAUDITENTRYID = 23906;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CLIENTUSERID = 23907;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_SERVERURI = 23908;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE = 23909;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_DATATYPEVERSION = 23910;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_DICTIONARYFRAGMENT = 23911;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE = 23912;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_DATATYPEVERSION = 23913;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_DICTIONARYFRAGMENT = 23914;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE = 23915;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 23916;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 23917;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETREFDATATYPE_ENCODING_DEFAULTXML = 23919;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTXML = 23920;

const int UA_NS0ID_SECURITYGROUPDATATYPE_ENCODING_DEFAULTXML = 23921;

const int UA_NS0ID_PUBSUBCONFIGURATION2DATATYPE_ENCODING_DEFAULTXML = 23922;

const int UA_NS0ID_QOSDATATYPE_ENCODING_DEFAULTXML = 23923;

const int UA_NS0ID_TRANSMITQOSDATATYPE_ENCODING_DEFAULTXML = 23924;

const int UA_NS0ID_TRANSMITQOSPRIORITYDATATYPE_ENCODING_DEFAULTXML = 23925;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE = 23926;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_EVENTID = 23927;

const int UA_NS0ID_RECEIVEQOSDATATYPE_ENCODING_DEFAULTXML = 23928;

const int UA_NS0ID_RECEIVEQOSPRIORITYDATATYPE_ENCODING_DEFAULTXML = 23929;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_EVENTTYPE = 23930;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_SOURCENODE = 23931;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_ENCODING_DEFAULTXML = 23932;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_ENCODING_DEFAULTXML = 23933;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 23934;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE = 23938;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE_DATATYPEVERSION = 23939;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETREFDATATYPE_DICTIONARYFRAGMENT = 23940;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE = 23941;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION = 23942;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STANDALONESUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT = 23943;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SECURITYGROUPDATATYPE = 23944;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SECURITYGROUPDATATYPE_DATATYPEVERSION = 23945;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SECURITYGROUPDATATYPE_DICTIONARYFRAGMENT = 23946;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATION2DATATYPE = 23947;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATION2DATATYPE_DATATYPEVERSION = 23948;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATION2DATATYPE_DICTIONARYFRAGMENT = 23949;

const int UA_NS0ID_OPCUA_XMLSCHEMA_QOSDATATYPE = 23950;

const int UA_NS0ID_OPCUA_XMLSCHEMA_QOSDATATYPE_DATATYPEVERSION = 23951;

const int UA_NS0ID_OPCUA_XMLSCHEMA_QOSDATATYPE_DICTIONARYFRAGMENT = 23952;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSDATATYPE = 23953;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSDATATYPE_DATATYPEVERSION = 23954;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSDATATYPE_DICTIONARYFRAGMENT = 23955;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSPRIORITYDATATYPE = 23956;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSPRIORITYDATATYPE_DATATYPEVERSION = 23957;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSMITQOSPRIORITYDATATYPE_DICTIONARYFRAGMENT = 23958;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_SOURCENAME = 23959;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_TIME = 23960;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_RECEIVETIME = 23961;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_LOCALTIME = 23962;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_MESSAGE = 23963;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_SEVERITY = 23964;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSDATATYPE = 23965;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSDATATYPE_DATATYPEVERSION = 23966;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSDATATYPE_DICTIONARYFRAGMENT = 23967;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSPRIORITYDATATYPE = 23968;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSPRIORITYDATATYPE_DATATYPEVERSION = 23969;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RECEIVEQOSPRIORITYDATATYPE_DICTIONARYFRAGMENT = 23970;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_ACTIONTIMESTAMP = 23971;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_STATUS = 23972;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_SERVERID = 23973;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CLIENTAUDITENTRYID = 23974;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CLIENTUSERID = 23975;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_SERVERURI = 23976;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE = 23977;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_DATATYPEVERSION = 23978;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_DICTIONARYFRAGMENT = 23979;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE = 23980;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_DATATYPEVERSION = 23981;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_DICTIONARYFRAGMENT = 23982;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE = 23983;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION = 23984;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT = 23985;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETREFDATATYPE_ENCODING_DEFAULTJSON = 23987;

const int UA_NS0ID_STANDALONESUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 23988;

const int UA_NS0ID_SECURITYGROUPDATATYPE_ENCODING_DEFAULTJSON = 23989;

const int UA_NS0ID_PUBSUBCONFIGURATION2DATATYPE_ENCODING_DEFAULTJSON = 23990;

const int UA_NS0ID_QOSDATATYPE_ENCODING_DEFAULTJSON = 23991;

const int UA_NS0ID_TRANSMITQOSDATATYPE_ENCODING_DEFAULTJSON = 23992;

const int UA_NS0ID_TRANSMITQOSPRIORITYDATATYPE_ENCODING_DEFAULTJSON = 23993;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_OBJECTID = 23994;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_METHODID = 23995;

const int UA_NS0ID_RECEIVEQOSDATATYPE_ENCODING_DEFAULTJSON = 23996;

const int UA_NS0ID_RECEIVEQOSPRIORITYDATATYPE_ENCODING_DEFAULTJSON = 23997;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_STATUSCODEID = 23998;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_INPUTARGUMENTS = 23999;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORT2DATATYPE_ENCODING_DEFAULTJSON = 24000;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE_ENCODING_DEFAULTJSON = 24001;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 24002;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET = 24004;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_INPUTARGUMENTS = 24005;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_OUTPUTARGUMENTS = 24006;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET = 24007;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET_INPUTARGUMENTS = 24008;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DATASETCLASSES_DATASETNAME_PLACEHOLDER = 24009;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET = 24010;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_INPUTARGUMENTS = 24011;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_OUTPUTARGUMENTS = 24012;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET = 24013;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET_INPUTARGUMENTS = 24014;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DATASETCLASSES_DATASETNAME_PLACEHOLDER = 24015;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE = 24016;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_ADDRESS = 24017;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE = 24018;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONS = 24019;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 24020;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 24021;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_DATAGRAMQOS = 24022;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_TOPIC = 24023;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE = 24033;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTBINARY = 24034;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 24035;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION = 24036;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT = 24037;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTXML = 24038;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 24039;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION = 24040;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT = 24041;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTJSON = 24042;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXMONITOREDITEMS = 24083;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSUBSCRIPTIONSPERSESSION = 24084;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSELECTCLAUSEPARAMETERS = 24085;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXWHERECLAUSEPARAMETERS = 24086;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_CONFORMANCEUNITS = 24087;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSESSIONS = 24088;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSUBSCRIPTIONS = 24089;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXMONITOREDITEMS = 24090;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSUBSCRIPTIONSPERSESSION = 24091;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSELECTCLAUSEPARAMETERS = 24092;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXWHERECLAUSEPARAMETERS = 24093;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_CONFORMANCEUNITS = 24094;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSESSIONS = 24095;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSUBSCRIPTIONS = 24096;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXMONITOREDITEMS = 24097;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSUBSCRIPTIONSPERSESSION = 24098;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSELECTCLAUSEPARAMETERS = 24099;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXWHERECLAUSEPARAMETERS = 24100;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_CONFORMANCEUNITS = 24101;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXMONITOREDITEMSPERSUBSCRIPTION = 24102;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXMONITOREDITEMSPERSUBSCRIPTION = 24103;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXMONITOREDITEMSPERSUBSCRIPTION = 24104;

const int UA_NS0ID_PORTABLEQUALIFIEDNAME = 24105;

const int UA_NS0ID_PORTABLENODEID = 24106;

const int UA_NS0ID_UNSIGNEDRATIONALNUMBER = 24107;

const int UA_NS0ID_PORTABLEQUALIFIEDNAME_ENCODING_DEFAULTBINARY = 24108;

const int UA_NS0ID_PORTABLENODEID_ENCODING_DEFAULTBINARY = 24109;

const int UA_NS0ID_UNSIGNEDRATIONALNUMBER_ENCODING_DEFAULTBINARY = 24110;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLEQUALIFIEDNAME = 24111;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLEQUALIFIEDNAME_DATATYPEVERSION = 24112;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLEQUALIFIEDNAME_DICTIONARYFRAGMENT = 24113;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLENODEID = 24114;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLENODEID_DATATYPEVERSION = 24115;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PORTABLENODEID_DICTIONARYFRAGMENT = 24116;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNSIGNEDRATIONALNUMBER = 24117;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNSIGNEDRATIONALNUMBER_DATATYPEVERSION = 24118;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNSIGNEDRATIONALNUMBER_DICTIONARYFRAGMENT = 24119;

const int UA_NS0ID_PORTABLEQUALIFIEDNAME_ENCODING_DEFAULTXML = 24120;

const int UA_NS0ID_PORTABLENODEID_ENCODING_DEFAULTXML = 24121;

const int UA_NS0ID_UNSIGNEDRATIONALNUMBER_ENCODING_DEFAULTXML = 24122;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLEQUALIFIEDNAME = 24123;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLEQUALIFIEDNAME_DATATYPEVERSION = 24124;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLEQUALIFIEDNAME_DICTIONARYFRAGMENT = 24125;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLENODEID = 24126;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLENODEID_DATATYPEVERSION = 24127;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PORTABLENODEID_DICTIONARYFRAGMENT = 24128;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNSIGNEDRATIONALNUMBER = 24129;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNSIGNEDRATIONALNUMBER_DATATYPEVERSION = 24130;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNSIGNEDRATIONALNUMBER_DICTIONARYFRAGMENT = 24131;

const int UA_NS0ID_PORTABLEQUALIFIEDNAME_ENCODING_DEFAULTJSON = 24132;

const int UA_NS0ID_PORTABLENODEID_ENCODING_DEFAULTJSON = 24133;

const int UA_NS0ID_UNSIGNEDRATIONALNUMBER_ENCODING_DEFAULTJSON = 24134;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CERTIFICATEERROREVENTID = 24135;

const int UA_NS0ID_HASSTRUCTUREDCOMPONENT = 24136;

const int UA_NS0ID_ASSOCIATEDWITH = 24137;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_CUSTOMCONFIGURATION = 24138;

const int UA_NS0ID_ROLETYPE_CUSTOMCONFIGURATION = 24139;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_CUSTOMCONFIGURATION = 24140;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_CUSTOMCONFIGURATION = 24141;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_CUSTOMCONFIGURATION = 24142;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_CUSTOMCONFIGURATION = 24143;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_CUSTOMCONFIGURATION = 24144;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_CUSTOMCONFIGURATION = 24145;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_CUSTOMCONFIGURATION = 24146;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_CUSTOMCONFIGURATION = 24147;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE = 24148;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_ADMINSTATUS = 24149;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_OPERSTATUS = 24150;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_PHYSADDRESS = 24151;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED = 24152;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED_DEFINITION = 24153;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED_VALUEPRECISION = 24154;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED_INSTRUMENTRANGE = 24155;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED_EURANGE = 24156;

const int UA_NS0ID_IIETFBASENETWORKINTERFACETYPE_SPEED_ENGINEERINGUNITS = 24157;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE = 24158;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED = 24159;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED_DEFINITION = 24160;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED_VALUEPRECISION = 24161;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED_INSTRUMENTRANGE = 24162;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED_EURANGE = 24163;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_SPEED_ENGINEERINGUNITS = 24164;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_DUPLEX = 24165;

const int UA_NS0ID_IIEEEBASEETHERNETPORTTYPE_MAXFRAMELENGTH = 24166;

const int UA_NS0ID_IBASEETHERNETCAPABILITIESTYPE = 24167;

const int UA_NS0ID_IBASEETHERNETCAPABILITIESTYPE_VLANTAGCAPABLE = 24168;

const int UA_NS0ID_ISRCLASSTYPE = 24169;

const int UA_NS0ID_ISRCLASSTYPE_ID = 24170;

const int UA_NS0ID_ISRCLASSTYPE_PRIORITY = 24171;

const int UA_NS0ID_ISRCLASSTYPE_VID = 24172;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE = 24173;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE_STREAMID = 24174;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE_STREAMNAME = 24175;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE_STATE = 24176;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE_ACCUMULATEDLATENCY = 24177;

const int UA_NS0ID_IIEEEBASETSNSTREAMTYPE_SRCLASSID = 24178;

const int UA_NS0ID_IIEEEBASETSNTRAFFICSPECIFICATIONTYPE = 24179;

const int UA_NS0ID_IIEEEBASETSNTRAFFICSPECIFICATIONTYPE_MAXINTERVALFRAMES = 24180;

const int UA_NS0ID_IIEEEBASETSNTRAFFICSPECIFICATIONTYPE_MAXFRAMESIZE = 24181;

const int UA_NS0ID_IIEEEBASETSNTRAFFICSPECIFICATIONTYPE_INTERVAL = 24182;

const int UA_NS0ID_IIEEEBASETSNSTATUSSTREAMTYPE = 24183;

const int UA_NS0ID_IIEEEBASETSNSTATUSSTREAMTYPE_TALKERSTATUS = 24184;

const int UA_NS0ID_IIEEEBASETSNSTATUSSTREAMTYPE_LISTENERSTATUS = 24185;

const int UA_NS0ID_IIEEEBASETSNSTATUSSTREAMTYPE_FAILURECODE = 24186;

const int UA_NS0ID_IIEEEBASETSNSTATUSSTREAMTYPE_FAILURESYSTEMIDENTIFIER = 24187;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTYPE = 24188;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTYPE_MACADDRESS = 24189;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTYPE_INTERFACENAME = 24190;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTALKERTYPE = 24191;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTALKERTYPE_MACADDRESS = 24192;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTALKERTYPE_INTERFACENAME = 24193;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONTALKERTYPE_TIMEAWAREOFFSET = 24194;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONLISTENERTYPE = 24195;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONLISTENERTYPE_MACADDRESS = 24196;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONLISTENERTYPE_INTERFACENAME = 24197;

const int UA_NS0ID_IIEEETSNINTERFACECONFIGURATIONLISTENERTYPE_RECEIVEOFFSET = 24198;

const int UA_NS0ID_IIEEETSNMACADDRESSTYPE = 24199;

const int UA_NS0ID_IIEEETSNMACADDRESSTYPE_DESTINATIONADDRESS = 24200;

const int UA_NS0ID_IIEEETSNMACADDRESSTYPE_SOURCEADDRESS = 24201;

const int UA_NS0ID_IIEEETSNVLANTAGTYPE = 24202;

const int UA_NS0ID_IIEEETSNVLANTAGTYPE_VLANID = 24203;

const int UA_NS0ID_IIEEETSNVLANTAGTYPE_PRIORITYCODEPOINT = 24204;

const int UA_NS0ID_IPRIORITYMAPPINGENTRYTYPE = 24205;

const int UA_NS0ID_IPRIORITYMAPPINGENTRYTYPE_MAPPINGURI = 24206;

const int UA_NS0ID_IPRIORITYMAPPINGENTRYTYPE_PRIORITYLABEL = 24207;

const int UA_NS0ID_IPRIORITYMAPPINGENTRYTYPE_PRIORITYVALUE_PCP = 24208;

const int UA_NS0ID_IPRIORITYMAPPINGENTRYTYPE_PRIORITYVALUE_DSCP = 24209;

const int UA_NS0ID_DUPLEX = 24210;

const int UA_NS0ID_INTERFACEADMINSTATUS = 24212;

const int UA_NS0ID_INTERFACEOPERSTATUS = 24214;

const int UA_NS0ID_NEGOTIATIONSTATUS = 24216;

const int UA_NS0ID_TSNFAILURECODE = 24218;

const int UA_NS0ID_TSNSTREAMSTATE = 24220;

const int UA_NS0ID_TSNTALKERSTATUS = 24222;

const int UA_NS0ID_TSNLISTENERSTATUS = 24224;

const int UA_NS0ID_RESOURCES = 24226;

const int UA_NS0ID_COMMUNICATION = 24227;

const int UA_NS0ID_MAPPINGTABLES = 24228;

const int UA_NS0ID_NETWORKINTERFACES = 24229;

const int UA_NS0ID_STREAMS = 24230;

const int UA_NS0ID_TALKERSTREAMS = 24231;

const int UA_NS0ID_LISTENERSTREAMS = 24232;

const int UA_NS0ID_IIEEEAUTONEGOTIATIONSTATUSTYPE = 24233;

const int UA_NS0ID_IIEEEAUTONEGOTIATIONSTATUSTYPE_NEGOTIATIONSTATUS = 24234;

const int UA_NS0ID_DUPLEX_ENUMVALUES = 24235;

const int UA_NS0ID_INTERFACEADMINSTATUS_ENUMVALUES = 24236;

const int UA_NS0ID_INTERFACEOPERSTATUS_ENUMVALUES = 24237;

const int UA_NS0ID_NEGOTIATIONSTATUS_ENUMVALUES = 24238;

const int UA_NS0ID_TSNFAILURECODE_ENUMVALUES = 24239;

const int UA_NS0ID_TSNSTREAMSTATE_ENUMVALUES = 24240;

const int UA_NS0ID_TSNTALKERSTATUS_ENUMVALUES = 24241;

const int UA_NS0ID_TSNLISTENERSTATUS_ENUMVALUES = 24242;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_MAXBYTESTRINGLENGTH = 24243;

const int UA_NS0ID_FILETYPE_MAXBYTESTRINGLENGTH = 24244;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_MAXBYTESTRINGLENGTH = 24245;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_MAXBYTESTRINGLENGTH = 24246;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_MAXBYTESTRINGLENGTH = 24247;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_MAXBYTESTRINGLENGTH = 24248;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_MAXBYTESTRINGLENGTH = 24249;

const int UA_NS0ID_TRUSTLISTTYPE_MAXBYTESTRINGLENGTH = 24250;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_MAXBYTESTRINGLENGTH = 24251;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24252;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24253;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24254;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_MAXBYTESTRINGLENGTH = 24255;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    24256;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24257;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    24258;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24259;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24260;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH = 24261;

const int UA_NS0ID_SEMANTICVERSIONSTRING = 24263;

const int UA_NS0ID_USERMANAGEMENTTYPE = 24264;

const int UA_NS0ID_USERMANAGEMENTTYPE_USERS = 24265;

const int UA_NS0ID_USERMANAGEMENTTYPE_PASSWORDLENGTH = 24266;

const int UA_NS0ID_USERMANAGEMENTTYPE_PASSWORDOPTIONS = 24267;

const int UA_NS0ID_USERMANAGEMENTTYPE_PASSWORDRESTRICTIONS = 24268;

const int UA_NS0ID_USERMANAGEMENTTYPE_ADDUSER = 24269;

const int UA_NS0ID_USERMANAGEMENTTYPE_ADDUSER_INPUTARGUMENTS = 24270;

const int UA_NS0ID_USERMANAGEMENTTYPE_MODIFYUSER = 24271;

const int UA_NS0ID_USERMANAGEMENTTYPE_MODIFYUSER_INPUTARGUMENTS = 24272;

const int UA_NS0ID_USERMANAGEMENTTYPE_REMOVEUSER = 24273;

const int UA_NS0ID_USERMANAGEMENTTYPE_REMOVEUSER_INPUTARGUMENTS = 24274;

const int UA_NS0ID_USERMANAGEMENTTYPE_CHANGEPASSWORD = 24275;

const int UA_NS0ID_USERMANAGEMENTTYPE_CHANGEPASSWORD_INPUTARGUMENTS = 24276;

const int UA_NS0ID_PASSWORDOPTIONSMASK = 24277;

const int UA_NS0ID_PASSWORDOPTIONSMASK_OPTIONSETVALUES = 24278;

const int UA_NS0ID_USERCONFIGURATIONMASK = 24279;

const int UA_NS0ID_USERCONFIGURATIONMASK_OPTIONSETVALUES = 24280;

const int UA_NS0ID_USERMANAGEMENTDATATYPE = 24281;

const int UA_NS0ID_ADDUSERMETHODTYPE = 24282;

const int UA_NS0ID_ADDUSERMETHODTYPE_INPUTARGUMENTS = 24283;

const int UA_NS0ID_MODIFYUSERMETHODTYPE = 24284;

const int UA_NS0ID_MODIFYUSERMETHODTYPE_INPUTARGUMENTS = 24285;

const int UA_NS0ID_REMOVEUSERMETHODTYPE = 24286;

const int UA_NS0ID_REMOVEUSERMETHODTYPE_INPUTARGUMENTS = 24287;

const int UA_NS0ID_CHANGEPASSWORDMETHODTYPE = 24288;

const int UA_NS0ID_CHANGEPASSWORDMETHODTYPE_INPUTARGUMENTS = 24289;

const int UA_NS0ID_USERMANAGEMENT = 24290;

const int UA_NS0ID_USERMANAGEMENT_PASSWORDRESTRICTIONS = 24291;

const int UA_NS0ID_USERMANAGEMENTDATATYPE_ENCODING_DEFAULTBINARY = 24292;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERMANAGEMENTDATATYPE = 24293;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERMANAGEMENTDATATYPE_DATATYPEVERSION = 24294;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERMANAGEMENTDATATYPE_DICTIONARYFRAGMENT = 24295;

const int UA_NS0ID_USERMANAGEMENTDATATYPE_ENCODING_DEFAULTXML = 24296;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERMANAGEMENTDATATYPE = 24297;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERMANAGEMENTDATATYPE_DATATYPEVERSION = 24298;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERMANAGEMENTDATATYPE_DICTIONARYFRAGMENT = 24299;

const int UA_NS0ID_USERMANAGEMENTDATATYPE_ENCODING_DEFAULTJSON = 24300;

const int UA_NS0ID_USERMANAGEMENT_USERS = 24301;

const int UA_NS0ID_USERMANAGEMENT_PASSWORDLENGTH = 24302;

const int UA_NS0ID_USERMANAGEMENT_PASSWORDOPTIONS = 24303;

const int UA_NS0ID_USERMANAGEMENT_ADDUSER = 24304;

const int UA_NS0ID_USERMANAGEMENT_ADDUSER_INPUTARGUMENTS = 24305;

const int UA_NS0ID_USERMANAGEMENT_MODIFYUSER = 24306;

const int UA_NS0ID_USERMANAGEMENT_MODIFYUSER_INPUTARGUMENTS = 24307;

const int UA_NS0ID_USERMANAGEMENT_REMOVEUSER = 24308;

const int UA_NS0ID_USERMANAGEMENT_REMOVEUSER_INPUTARGUMENTS = 24309;

const int UA_NS0ID_USERMANAGEMENT_CHANGEPASSWORD = 24310;

const int UA_NS0ID_USERMANAGEMENT_CHANGEPASSWORD_INPUTARGUMENTS = 24311;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND2 = 24312;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND2_INPUTARGUMENTS = 24313;

const int UA_NS0ID_DIALOGRESPONSE2METHODTYPE = 24314;

const int UA_NS0ID_DIALOGRESPONSE2METHODTYPE_INPUTARGUMENTS = 24315;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESS2 = 24316;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESS2_INPUTARGUMENTS = 24317;

const int UA_NS0ID_ALARMCONDITIONTYPE_UNSUPPRESS2 = 24318;

const int UA_NS0ID_ALARMCONDITIONTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24319;

const int UA_NS0ID_ALARMCONDITIONTYPE_REMOVEFROMSERVICE2 = 24320;

const int UA_NS0ID_ALARMCONDITIONTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24321;

const int UA_NS0ID_ALARMCONDITIONTYPE_PLACEINSERVICE2 = 24322;

const int UA_NS0ID_ALARMCONDITIONTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24323;

const int UA_NS0ID_ALARMCONDITIONTYPE_RESET2 = 24324;

const int UA_NS0ID_ALARMCONDITIONTYPE_RESET2_INPUTARGUMENTS = 24325;

const int UA_NS0ID_WITHCOMMENTMETHODTYPE = 24326;

const int UA_NS0ID_WITHCOMMENTMETHODTYPE_INPUTARGUMENTS = 24327;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS2 = 24328;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS2_INPUTARGUMENTS = 24329;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS2 = 24330;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS2_INPUTARGUMENTS = 24331;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE2 = 24332;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24333;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE2 = 24334;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE2_INPUTARGUMENTS = 24335;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET2 = 24336;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET2_INPUTARGUMENTS = 24337;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESS2 = 24338;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24339;

const int UA_NS0ID_LIMITALARMTYPE_UNSUPPRESS2 = 24340;

const int UA_NS0ID_LIMITALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24341;

const int UA_NS0ID_LIMITALARMTYPE_REMOVEFROMSERVICE2 = 24342;

const int UA_NS0ID_LIMITALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24343;

const int UA_NS0ID_LIMITALARMTYPE_PLACEINSERVICE2 = 24344;

const int UA_NS0ID_LIMITALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24345;

const int UA_NS0ID_LIMITALARMTYPE_RESET2 = 24346;

const int UA_NS0ID_LIMITALARMTYPE_RESET2_INPUTARGUMENTS = 24347;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESS2 = 24348;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24349;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_UNSUPPRESS2 = 24350;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24351;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE2 = 24352;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24353;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_PLACEINSERVICE2 = 24354;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24355;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RESET2 = 24356;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RESET2_INPUTARGUMENTS = 24357;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESS2 = 24358;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24359;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_UNSUPPRESS2 = 24360;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24361;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE2 = 24362;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24363;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_PLACEINSERVICE2 = 24364;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24365;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RESET2 = 24366;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RESET2_INPUTARGUMENTS = 24367;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESS2 = 24368;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24369;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_UNSUPPRESS2 = 24370;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24371;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE2 = 24372;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24373;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_PLACEINSERVICE2 = 24374;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24375;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RESET2 = 24376;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RESET2_INPUTARGUMENTS = 24377;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESS2 = 24378;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24379;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_UNSUPPRESS2 = 24380;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24381;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE2 = 24382;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24383;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_PLACEINSERVICE2 = 24384;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24385;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RESET2 = 24386;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RESET2_INPUTARGUMENTS = 24387;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS2 = 24388;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24389;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS2 = 24390;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24391;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE2 = 24392;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24393;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE2 = 24394;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24395;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RESET2 = 24396;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RESET2_INPUTARGUMENTS = 24397;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS2 = 24398;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24399;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS2 = 24400;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24401;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE2 = 24402;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24403;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE2 = 24404;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24405;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RESET2 = 24406;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RESET2_INPUTARGUMENTS = 24407;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS2 = 24408;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24409;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS2 = 24410;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24411;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE2 = 24412;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24413;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE2 = 24414;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24415;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RESET2 = 24416;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RESET2_INPUTARGUMENTS = 24417;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS2 = 24418;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24419;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS2 = 24420;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24421;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE2 = 24422;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24423;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE2 = 24424;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24425;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RESET2 = 24426;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RESET2_INPUTARGUMENTS = 24427;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESS2 = 24428;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24429;

const int UA_NS0ID_DISCRETEALARMTYPE_UNSUPPRESS2 = 24430;

const int UA_NS0ID_DISCRETEALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24431;

const int UA_NS0ID_DISCRETEALARMTYPE_REMOVEFROMSERVICE2 = 24432;

const int UA_NS0ID_DISCRETEALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24433;

const int UA_NS0ID_DISCRETEALARMTYPE_PLACEINSERVICE2 = 24434;

const int UA_NS0ID_DISCRETEALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24435;

const int UA_NS0ID_DISCRETEALARMTYPE_RESET2 = 24436;

const int UA_NS0ID_DISCRETEALARMTYPE_RESET2_INPUTARGUMENTS = 24437;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESS2 = 24438;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24439;

const int UA_NS0ID_OFFNORMALALARMTYPE_UNSUPPRESS2 = 24440;

const int UA_NS0ID_OFFNORMALALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24441;

const int UA_NS0ID_OFFNORMALALARMTYPE_REMOVEFROMSERVICE2 = 24442;

const int UA_NS0ID_OFFNORMALALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24443;

const int UA_NS0ID_OFFNORMALALARMTYPE_PLACEINSERVICE2 = 24444;

const int UA_NS0ID_OFFNORMALALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24445;

const int UA_NS0ID_OFFNORMALALARMTYPE_RESET2 = 24446;

const int UA_NS0ID_OFFNORMALALARMTYPE_RESET2_INPUTARGUMENTS = 24447;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESS2 = 24448;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24449;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_UNSUPPRESS2 = 24450;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24451;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REMOVEFROMSERVICE2 = 24452;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24453;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_PLACEINSERVICE2 = 24454;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24455;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RESET2 = 24456;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RESET2_INPUTARGUMENTS = 24457;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESS2 = 24458;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24459;

const int UA_NS0ID_TRIPALARMTYPE_UNSUPPRESS2 = 24460;

const int UA_NS0ID_TRIPALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24461;

const int UA_NS0ID_TRIPALARMTYPE_REMOVEFROMSERVICE2 = 24462;

const int UA_NS0ID_TRIPALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24463;

const int UA_NS0ID_TRIPALARMTYPE_PLACEINSERVICE2 = 24464;

const int UA_NS0ID_TRIPALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24465;

const int UA_NS0ID_TRIPALARMTYPE_RESET2 = 24466;

const int UA_NS0ID_TRIPALARMTYPE_RESET2_INPUTARGUMENTS = 24467;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESS2 = 24468;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24469;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_UNSUPPRESS2 = 24470;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24471;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE2 = 24472;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24473;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_PLACEINSERVICE2 = 24474;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24475;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RESET2 = 24476;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RESET2_INPUTARGUMENTS = 24477;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESS2 = 24478;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24479;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_UNSUPPRESS2 = 24480;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24481;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE2 = 24482;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24483;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_PLACEINSERVICE2 = 24484;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24485;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RESET2 = 24486;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RESET2_INPUTARGUMENTS = 24487;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESS2 = 24488;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24489;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_UNSUPPRESS2 = 24490;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24491;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REMOVEFROMSERVICE2 = 24492;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24493;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_PLACEINSERVICE2 = 24494;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24495;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RESET2 = 24496;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RESET2_INPUTARGUMENTS = 24497;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESS2 = 24498;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24499;

const int UA_NS0ID_DISCREPANCYALARMTYPE_UNSUPPRESS2 = 24500;

const int UA_NS0ID_DISCREPANCYALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24501;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REMOVEFROMSERVICE2 = 24502;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24503;

const int UA_NS0ID_DISCREPANCYALARMTYPE_PLACEINSERVICE2 = 24504;

const int UA_NS0ID_DISCREPANCYALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24505;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RESET2 = 24506;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RESET2_INPUTARGUMENTS = 24507;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESS2 = 24508;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESS2_INPUTARGUMENTS = 24509;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UNSUPPRESS2 = 24510;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UNSUPPRESS2_INPUTARGUMENTS = 24511;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REMOVEFROMSERVICE2 = 24512;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24513;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_PLACEINSERVICE2 = 24514;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_PLACEINSERVICE2_INPUTARGUMENTS = 24515;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RESET2 = 24516;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RESET2_INPUTARGUMENTS = 24517;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESS2 = 24518;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS = 24519;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24520;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS = 24521;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 = 24522;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24523;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24524;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS = 24525;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_RESET2 = 24526;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS = 24527;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24528;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS = 24529;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24530;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS = 24531;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 = 24532;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS = 24533;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24534;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS = 24535;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_RESET2 = 24536;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS = 24537;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24538;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24539;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24540;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24541;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 = 24542;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24543;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24544;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24545;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 = 24546;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS = 24547;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24548;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24549;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24550;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24551;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 = 24552;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24553;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24554;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24555;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24556;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS = 24557;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24558;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS = 24559;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24560;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS = 24561;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 = 24562;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24563;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24564;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24565;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 = 24566;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS = 24567;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24568;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS = 24569;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24570;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS = 24571;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 = 24572;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24573;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24574;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24575;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24576;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS = 24577;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24578;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS = 24579;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24580;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24581;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 = 24582;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24583;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24584;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24585;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 = 24586;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS = 24587;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24588;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS = 24589;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24590;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24591;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 = 24592;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24593;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24594;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24595;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24596;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS = 24597;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESS2 = 24598;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24599;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24600;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24601;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 = 24602;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24603;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24604;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24605;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_RESET2 = 24606;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24607;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24608;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24609;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24610;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24611;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 = 24612;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24613;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24614;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24615;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_RESET2 = 24616;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24617;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    24618;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24619;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    24620;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24621;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24622;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24623;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    24624;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24625;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 = 24626;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24627;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    24628;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24629;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    24630;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24631;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24632;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24633;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    24634;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24635;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24636;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24637;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24638;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24639;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24640;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24641;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24642;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24643;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    24644;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24645;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 = 24646;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24647;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24648;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24649;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24650;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24651;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24652;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24653;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    24654;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24655;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24656;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24657;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24658;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24659;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    24660;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24661;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24662;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24663;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    24664;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24665;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 = 24666;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24667;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24668;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24669;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    24670;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24671;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24672;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24673;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    24674;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24675;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24676;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24677;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24678;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24679;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24680;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24681;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24682;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24683;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    24684;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24685;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 = 24686;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24687;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24688;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24689;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24690;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24691;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24692;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24693;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    24694;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24695;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24696;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24697;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24698;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24699;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24700;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24701;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24702;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24703;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 = 24704;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24705;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 = 24706;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24707;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24708;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24709;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24710;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24711;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24712;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24713;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 = 24714;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24715;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24716;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24717;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 = 24718;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    24719;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 = 24720;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    24721;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    24722;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24723;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    24724;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    24725;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 = 24726;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    24727;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 = 24728;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    24729;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 = 24730;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    24731;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    24732;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    24733;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    24734;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    24735;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 = 24736;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    24737;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24738;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24739;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVE2 = 24740;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24741;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24742;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24743;

const int UA_NS0ID_ALARMCONDITIONTYPE_GETGROUPMEMBERSHIPS = 24744;

const int UA_NS0ID_GETGROUPMEMBERSHIPSMETHODTYPE = 24746;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE2 = 24748;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24749;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE2 = 24750;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24751;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE2 = 24752;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    24753;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_GETGROUPMEMBERSHIPS = 24754;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE2 = 24756;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE2_INPUTARGUMENTS = 24757;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVE2 = 24758;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVE2_INPUTARGUMENTS = 24759;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVE2 = 24760;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVE2_INPUTARGUMENTS = 24761;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24762;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24763;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24764;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24765;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24766;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24767;

const int UA_NS0ID_LIMITALARMTYPE_GETGROUPMEMBERSHIPS = 24768;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITYHIGHHIGH = 24770;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITYHIGH = 24771;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITYLOW = 24772;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITYLOWLOW = 24773;

const int UA_NS0ID_LIMITALARMTYPE_HIGHHIGHDEADBAND = 24774;

const int UA_NS0ID_LIMITALARMTYPE_HIGHDEADBAND = 24775;

const int UA_NS0ID_LIMITALARMTYPE_LOWDEADBAND = 24776;

const int UA_NS0ID_LIMITALARMTYPE_LOWLOWDEADBAND = 24777;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24778;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24779;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24780;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24781;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24782;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24783;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_GETGROUPMEMBERSHIPS = 24784;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITYHIGHHIGH = 24786;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITYHIGH = 24787;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITYLOW = 24788;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITYLOWLOW = 24789;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHHIGHDEADBAND = 24790;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHDEADBAND = 24791;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWDEADBAND = 24792;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLOWDEADBAND = 24793;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24794;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24795;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24796;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24797;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24798;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24799;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_GETGROUPMEMBERSHIPS = 24800;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITYHIGHHIGH = 24802;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITYHIGH = 24803;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITYLOW = 24804;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITYLOWLOW = 24805;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHDEADBAND = 24806;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHDEADBAND = 24807;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWDEADBAND = 24808;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWDEADBAND = 24809;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24810;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24811;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24812;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24813;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24814;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24815;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_GETGROUPMEMBERSHIPS = 24816;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITYHIGHHIGH = 24818;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITYHIGH = 24819;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITYLOW = 24820;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITYLOWLOW = 24821;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHDEADBAND = 24822;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHDEADBAND = 24823;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWDEADBAND = 24824;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWDEADBAND = 24825;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24826;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24827;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24828;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24829;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24830;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24831;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_GETGROUPMEMBERSHIPS = 24832;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITYHIGHHIGH = 24834;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITYHIGH = 24835;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITYLOW = 24836;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITYLOWLOW = 24837;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHHIGHDEADBAND = 24838;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHDEADBAND = 24839;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWDEADBAND = 24840;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLOWDEADBAND = 24841;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24842;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24843;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24844;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24845;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24846;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24847;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_GETGROUPMEMBERSHIPS = 24848;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITYHIGHHIGH = 24850;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITYHIGH = 24851;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITYLOW = 24852;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITYLOWLOW = 24853;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHDEADBAND = 24854;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHDEADBAND = 24855;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWDEADBAND = 24856;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWDEADBAND = 24857;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24858;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24859;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24860;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24861;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24862;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24863;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_GETGROUPMEMBERSHIPS = 24864;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYHIGHHIGH = 24866;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYHIGH = 24867;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYLOW = 24868;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYLOWLOW = 24869;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHDEADBAND = 24870;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHDEADBAND = 24871;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWDEADBAND = 24872;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWDEADBAND = 24873;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24874;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24875;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24876;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24877;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24878;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24879;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_GETGROUPMEMBERSHIPS = 24880;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITYHIGHHIGH = 24882;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITYHIGH = 24883;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITYLOW = 24884;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITYLOWLOW = 24885;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHDEADBAND = 24886;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHDEADBAND = 24887;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWDEADBAND = 24888;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLOWDEADBAND = 24889;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24890;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24891;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24892;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24893;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24894;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24895;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_GETGROUPMEMBERSHIPS = 24896;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYHIGHHIGH = 24898;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYHIGH = 24899;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYLOW = 24900;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITYLOWLOW = 24901;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHDEADBAND = 24902;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHDEADBAND = 24903;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWDEADBAND = 24904;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWDEADBAND = 24905;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24906;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24907;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24908;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24909;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24910;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24911;

const int UA_NS0ID_DISCRETEALARMTYPE_GETGROUPMEMBERSHIPS = 24912;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24914;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24915;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24916;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24917;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24918;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24919;

const int UA_NS0ID_OFFNORMALALARMTYPE_GETGROUPMEMBERSHIPS = 24920;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24922;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24923;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24924;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24925;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24926;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24927;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_GETGROUPMEMBERSHIPS = 24928;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24930;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24931;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24932;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24933;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24934;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24935;

const int UA_NS0ID_TRIPALARMTYPE_GETGROUPMEMBERSHIPS = 24936;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24938;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24939;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24940;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24941;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24942;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24943;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_GETGROUPMEMBERSHIPS = 24944;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24946;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24947;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24948;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24949;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24950;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24951;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_GETGROUPMEMBERSHIPS = 24952;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24954;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24955;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24956;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24957;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24958;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24959;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_GETGROUPMEMBERSHIPS = 24960;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24962;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24963;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24964;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24965;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24966;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24967;

const int UA_NS0ID_DISCREPANCYALARMTYPE_GETGROUPMEMBERSHIPS = 24968;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2 = 24970;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24971;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVE2 = 24972;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24973;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2 = 24974;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24975;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_GETGROUPMEMBERSHIPS = 24976;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 = 24978;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24979;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 = 24980;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24981;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 = 24982;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24983;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS = 24984;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 = 24986;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS = 24987;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 = 24988;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS = 24989;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 = 24990;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS = 24991;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS = 24992;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    24994;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    24995;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    24996;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    24997;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    24998;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    24999;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS = 25000;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25002;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25003;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25004;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25005;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25006;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25007;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS = 25008;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 = 25010;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25011;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 = 25012;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25013;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 = 25014;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25015;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS = 25016;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 = 25018;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25019;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 = 25020;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25021;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 = 25022;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25023;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS = 25024;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25026;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25027;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 = 25028;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25029;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25030;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25031;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS = 25032;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25034;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25035;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 = 25036;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25037;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25038;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25039;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS = 25040;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25042;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25043;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25044;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25045;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25046;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25047;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25048;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25050;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25051;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25052;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25053;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25054;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25055;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25056;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25058;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25059;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25060;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25061;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25062;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25063;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25064;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25066;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25067;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25068;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25069;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25070;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25071;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25072;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25074;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25075;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25076;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25077;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25078;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25079;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25080;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25082;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25083;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25084;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25085;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25086;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25087;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25088;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25090;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25091;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25092;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25093;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25094;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25095;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25096;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25098;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25099;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25100;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25101;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25102;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25103;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25104;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25106;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25107;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25108;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25109;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25110;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25111;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25112;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25114;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25115;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25116;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25117;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25118;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25119;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25120;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25122;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25123;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25124;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25125;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25126;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25127;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25128;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25130;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25131;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25132;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25133;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25134;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25135;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25136;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25138;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25139;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25140;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25141;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25142;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25143;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25144;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    25146;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25147;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    25148;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25149;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    25150;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25151;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    25152;

const int UA_NS0ID_ALARMCONDITIONTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25154;

const int UA_NS0ID_GETGROUPMEMBERSHIPSMETHODTYPE_OUTPUTARGUMENTS = 25155;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25156;

const int UA_NS0ID_TIMEDSHELVE2METHODTYPE = 25157;

const int UA_NS0ID_TIMEDSHELVE2METHODTYPE_INPUTARGUMENTS = 25158;

const int UA_NS0ID_LIMITALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25159;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25160;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25161;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25162;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25163;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25164;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25165;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25166;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25167;

const int UA_NS0ID_DISCRETEALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25168;

const int UA_NS0ID_OFFNORMALALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25169;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25170;

const int UA_NS0ID_TRIPALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25171;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25172;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25173;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25174;

const int UA_NS0ID_DISCREPANCYALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25175;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25176;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25177;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS = 25178;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25179;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25180;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25181;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25182;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25183;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25184;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25185;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25186;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25187;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25188;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25189;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25190;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25191;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25192;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25193;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25194;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25195;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25196;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25197;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25198;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_LASTMODIFIEDTIME = 25199;

const int UA_NS0ID_FILETYPE_LASTMODIFIEDTIME = 25200;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_LASTMODIFIEDTIME = 25201;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_LASTMODIFIEDTIME = 25202;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_LASTMODIFIEDTIME = 25203;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_LASTMODIFIEDTIME = 25204;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_LASTMODIFIEDTIME = 25205;

const int UA_NS0ID_TRUSTLISTTYPE_LASTMODIFIEDTIME = 25206;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_LASTMODIFIEDTIME = 25207;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25208;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25209;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25210;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_LASTMODIFIEDTIME = 25211;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25212;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25213;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25214;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25215;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25216;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME = 25217;

const int UA_NS0ID_IVLANIDTYPE = 25218;

const int UA_NS0ID_IVLANIDTYPE_VLANID = 25219;

const int UA_NS0ID_PRIORITYMAPPINGENTRYTYPE = 25220;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE = 25221;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_ADMINSTATUS = 25222;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_OPERSTATUS = 25223;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_PHYSADDRESS = 25224;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED = 25225;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_INTERFACENAME_PLACEHOLDER = 25226;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE = 25227;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE_PRIORITYMAPPPINGENTRIES = 25228;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE_ADDPRIORITYMAPPINGENTRY = 25229;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE_ADDPRIORITYMAPPINGENTRY_INPUTARGUMENTS = 25230;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE_DELETEPRIORITYMAPPINGENTRY = 25231;

const int UA_NS0ID_PRIORITYMAPPINGTABLETYPE_DELETEPRIORITYMAPPINGENTRY_INPUTARGUMENTS = 25232;

const int UA_NS0ID_ADDPRIORITYMAPPINGENTRYMETHODTYPE = 25233;

const int UA_NS0ID_ADDPRIORITYMAPPINGENTRYMETHODTYPE_INPUTARGUMENTS = 25234;

const int UA_NS0ID_DELETEPRIORITYMAPPINGENTRYMETHODTYPE = 25235;

const int UA_NS0ID_DELETEPRIORITYMAPPINGENTRYMETHODTYPE_INPUTARGUMENTS = 25236;

const int UA_NS0ID_USESPRIORITYMAPPINGTABLE = 25237;

const int UA_NS0ID_HASLOWERLAYERINTERFACE = 25238;

const int UA_NS0ID_PRIORITYMAPPINGENTRYTYPE_ENCODING_DEFAULTBINARY = 25239;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PRIORITYMAPPINGENTRYTYPE = 25240;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PRIORITYMAPPINGENTRYTYPE_DATATYPEVERSION = 25241;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PRIORITYMAPPINGENTRYTYPE_DICTIONARYFRAGMENT = 25242;

const int UA_NS0ID_PRIORITYMAPPINGENTRYTYPE_ENCODING_DEFAULTXML = 25243;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PRIORITYMAPPINGENTRYTYPE = 25244;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PRIORITYMAPPINGENTRYTYPE_DATATYPEVERSION = 25245;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PRIORITYMAPPINGENTRYTYPE_DICTIONARYFRAGMENT = 25246;

const int UA_NS0ID_PRIORITYMAPPINGENTRYTYPE_ENCODING_DEFAULTJSON = 25247;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED_DEFINITION = 25248;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED_VALUEPRECISION = 25249;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED_INSTRUMENTRANGE = 25250;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED_EURANGE = 25251;

const int UA_NS0ID_IETFBASENETWORKINTERFACETYPE_SPEED_ENGINEERINGUNITS = 25252;

const int UA_NS0ID_ISEXECUTABLEON = 25253;

const int UA_NS0ID_CONTROLS = 25254;

const int UA_NS0ID_UTILIZES = 25255;

const int UA_NS0ID_REQUIRES = 25256;

const int UA_NS0ID_ISPHYSICALLYCONNECTEDTO = 25257;

const int UA_NS0ID_REPRESENTSSAMEENTITYAS = 25258;

const int UA_NS0ID_REPRESENTSSAMEHARDWAREAS = 25259;

const int UA_NS0ID_REPRESENTSSAMEFUNCTIONALITYAS = 25260;

const int UA_NS0ID_ISHOSTEDBY = 25261;

const int UA_NS0ID_HASPHYSICALCOMPONENT = 25262;

const int UA_NS0ID_HASCONTAINEDCOMPONENT = 25263;

const int UA_NS0ID_HASATTACHEDCOMPONENT = 25264;

const int UA_NS0ID_ISEXECUTINGON = 25265;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_CONFIGURATIONVERSION = 25266;

const int UA_NS0ID_NAMESPACEMETADATATYPE_CONFIGURATIONVERSION = 25267;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_CONFIGURATIONVERSION = 25268;

const int UA_NS0ID_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE = 25269;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETDATATYPE = 25270;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER = 25271;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS = 25272;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS = 25273;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER = 25274;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS = 25275;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_SUPPORTEDSECURITYPOLICYURIS = 25276;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS = 25277;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGET = 25278;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGET_INPUTARGUMENTS = 25279;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGET_OUTPUTARGUMENTS = 25280;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGET = 25281;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGET_INPUTARGUMENTS = 25282;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER = 25283;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_INPUTARGUMENTS = 25284;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS = 25285;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER = 25286;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS = 25287;

const int UA_NS0ID_ADDSECURITYGROUPFOLDERMETHODTYPE = 25288;

const int UA_NS0ID_ADDSECURITYGROUPFOLDERMETHODTYPE_INPUTARGUMENTS = 25289;

const int UA_NS0ID_ADDSECURITYGROUPFOLDERMETHODTYPE_OUTPUTARGUMENTS = 25290;

const int UA_NS0ID_REMOVESECURITYGROUPFOLDERMETHODTYPE = 25291;

const int UA_NS0ID_REMOVESECURITYGROUPFOLDERMETHODTYPE_INPUTARGUMENTS = 25292;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUPFOLDER = 25293;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS =
    25294;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS =
    25295;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUPFOLDER = 25296;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS =
    25297;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_SUPPORTEDSECURITYPOLICYURIS = 25298;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUPFOLDER = 25312;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS = 25313;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS = 25314;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUPFOLDER = 25315;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS = 25316;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SUPPORTEDSECURITYPOLICYURIS = 25317;

const int UA_NS0ID_CONNECTSECURITYGROUPSMETHODTYPE = 25331;

const int UA_NS0ID_CONNECTSECURITYGROUPSMETHODTYPE_INPUTARGUMENTS = 25332;

const int UA_NS0ID_CONNECTSECURITYGROUPSMETHODTYPE_OUTPUTARGUMENTS = 25333;

const int UA_NS0ID_DISCONNECTSECURITYGROUPSMETHODTYPE = 25334;

const int UA_NS0ID_DISCONNECTSECURITYGROUPSMETHODTYPE_INPUTARGUMENTS = 25335;

const int UA_NS0ID_DISCONNECTSECURITYGROUPSMETHODTYPE_OUTPUTARGUMENTS = 25336;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE = 25337;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYPOLICYURI = 25340;

const int UA_NS0ID_HASPUSHEDSECURITYGROUP = 25345;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE = 25346;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER = 25347;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGET = 25348;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGET_INPUTARGUMENTS = 25349;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGET_OUTPUTARGUMENTS = 25350;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_REMOVEPUSHTARGET = 25351;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_REMOVEPUSHTARGET_INPUTARGUMENTS =
    25352;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGETFOLDER = 25353;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGETFOLDER_INPUTARGUMENTS =
    25354;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS =
    25355;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_REMOVEPUSHTARGETFOLDER = 25356;

const int
    UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETFOLDERNAME_PLACEHOLDER_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS =
    25357;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER = 25358;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_SECURITYPOLICYURI = 25361;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGET = 25366;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGET_INPUTARGUMENTS = 25367;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGET_OUTPUTARGUMENTS = 25368;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_REMOVEPUSHTARGET = 25369;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_REMOVEPUSHTARGET_INPUTARGUMENTS = 25370;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGETFOLDER = 25371;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGETFOLDER_INPUTARGUMENTS = 25372;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS = 25373;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_REMOVEPUSHTARGETFOLDER = 25374;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS = 25375;

const int UA_NS0ID_ADDPUSHTARGETMETHODTYPE = 25376;

const int UA_NS0ID_ADDPUSHTARGETMETHODTYPE_INPUTARGUMENTS = 25377;

const int UA_NS0ID_ADDPUSHTARGETMETHODTYPE_OUTPUTARGUMENTS = 25378;

const int UA_NS0ID_REMOVEPUSHTARGETMETHODTYPE = 25379;

const int UA_NS0ID_REMOVEPUSHTARGETMETHODTYPE_INPUTARGUMENTS = 25380;

const int UA_NS0ID_ADDPUSHTARGETFOLDERMETHODTYPE = 25381;

const int UA_NS0ID_ADDPUSHTARGETFOLDERMETHODTYPE_INPUTARGUMENTS = 25382;

const int UA_NS0ID_ADDPUSHTARGETFOLDERMETHODTYPE_OUTPUTARGUMENTS = 25383;

const int UA_NS0ID_REMOVEPUSHTARGETFOLDERMETHODTYPE = 25384;

const int UA_NS0ID_REMOVEPUSHTARGETFOLDERMETHODTYPE_INPUTARGUMENTS = 25385;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER = 25386;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS = 25387;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS = 25388;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER = 25389;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS = 25390;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_SUPPORTEDSECURITYPOLICYURIS = 25391;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS = 25392;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGET = 25393;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGET_INPUTARGUMENTS = 25394;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGET_OUTPUTARGUMENTS = 25395;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGET = 25396;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGET_INPUTARGUMENTS = 25397;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER = 25398;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_INPUTARGUMENTS = 25399;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS = 25400;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER = 25401;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS = 25402;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION = 25403;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_SIZE = 25404;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_WRITABLE = 25405;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_USERWRITABLE = 25406;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_OPENCOUNT = 25407;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_MIMETYPE = 25408;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_MAXBYTESTRINGLENGTH = 25409;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_LASTMODIFIEDTIME = 25410;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_OPEN = 25411;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_OPEN_INPUTARGUMENTS = 25412;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_OPEN_OUTPUTARGUMENTS = 25413;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_CLOSE = 25414;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_CLOSE_INPUTARGUMENTS = 25415;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_READ = 25416;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_READ_INPUTARGUMENTS = 25417;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_READ_OUTPUTARGUMENTS = 25418;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_WRITE = 25419;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_WRITE_INPUTARGUMENTS = 25420;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_GETPOSITION = 25421;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_GETPOSITION_INPUTARGUMENTS = 25422;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_GETPOSITION_OUTPUTARGUMENTS = 25423;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_SETPOSITION = 25424;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_SETPOSITION_INPUTARGUMENTS = 25425;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_RESERVEIDS = 25426;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_RESERVEIDS_INPUTARGUMENTS = 25427;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_RESERVEIDS_OUTPUTARGUMENTS = 25428;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_CLOSEANDUPDATE = 25429;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_CLOSEANDUPDATE_INPUTARGUMENTS = 25430;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCONFIGURATION_CLOSEANDUPDATE_OUTPUTARGUMENTS = 25431;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DEFAULTDATAGRAMPUBLISHERID = 25432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONFIGURATIONVERSION = 25433;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER = 25434;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS = 25435;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS = 25436;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER = 25437;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS = 25438;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_SUPPORTEDSECURITYPOLICYURIS = 25439;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS = 25440;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGET = 25441;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGET_INPUTARGUMENTS = 25442;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGET_OUTPUTARGUMENTS = 25443;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_REMOVEPUSHTARGET = 25444;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_REMOVEPUSHTARGET_INPUTARGUMENTS = 25445;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER = 25446;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_INPUTARGUMENTS = 25447;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS = 25448;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER = 25449;

const int UA_NS0ID_PUBLISHSUBSCRIBE_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS = 25450;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION = 25451;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_SIZE = 25452;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_WRITABLE = 25453;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_USERWRITABLE = 25454;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_OPENCOUNT = 25455;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_MIMETYPE = 25456;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_MAXBYTESTRINGLENGTH = 25457;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_LASTMODIFIEDTIME = 25458;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_OPEN = 25459;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_OPEN_INPUTARGUMENTS = 25460;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_OPEN_OUTPUTARGUMENTS = 25461;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_CLOSE = 25462;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_CLOSE_INPUTARGUMENTS = 25463;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_READ = 25464;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_READ_INPUTARGUMENTS = 25465;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_READ_OUTPUTARGUMENTS = 25466;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_WRITE = 25467;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_WRITE_INPUTARGUMENTS = 25468;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_GETPOSITION = 25469;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_GETPOSITION_INPUTARGUMENTS = 25470;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_GETPOSITION_OUTPUTARGUMENTS = 25471;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_SETPOSITION = 25472;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_SETPOSITION_INPUTARGUMENTS = 25473;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_RESERVEIDS = 25474;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_RESERVEIDS_INPUTARGUMENTS = 25475;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_RESERVEIDS_OUTPUTARGUMENTS = 25476;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_CLOSEANDUPDATE = 25477;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_CLOSEANDUPDATE_INPUTARGUMENTS = 25478;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCONFIGURATION_CLOSEANDUPDATE_OUTPUTARGUMENTS = 25479;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DEFAULTDATAGRAMPUBLISHERID = 25480;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONFIGURATIONVERSION = 25481;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE = 25482;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_SIZE = 25483;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_WRITABLE = 25484;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_USERWRITABLE = 25485;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_OPENCOUNT = 25486;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_MIMETYPE = 25487;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_MAXBYTESTRINGLENGTH = 25488;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_LASTMODIFIEDTIME = 25489;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_OPEN = 25490;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_OPEN_INPUTARGUMENTS = 25491;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_OPEN_OUTPUTARGUMENTS = 25492;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_CLOSE = 25493;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_CLOSE_INPUTARGUMENTS = 25494;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_READ = 25495;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_READ_INPUTARGUMENTS = 25496;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_READ_OUTPUTARGUMENTS = 25497;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_WRITE = 25498;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_WRITE_INPUTARGUMENTS = 25499;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_GETPOSITION = 25500;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_GETPOSITION_INPUTARGUMENTS = 25501;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_GETPOSITION_OUTPUTARGUMENTS = 25502;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_SETPOSITION = 25503;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_SETPOSITION_INPUTARGUMENTS = 25504;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_RESERVEIDS = 25505;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_RESERVEIDS_INPUTARGUMENTS = 25506;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_RESERVEIDS_OUTPUTARGUMENTS = 25507;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_CLOSEANDUPDATE = 25508;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_CLOSEANDUPDATE_INPUTARGUMENTS = 25509;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPE_CLOSEANDUPDATE_OUTPUTARGUMENTS = 25510;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPERESERVEIDSMETHODTYPE = 25511;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPERESERVEIDSMETHODTYPE_INPUTARGUMENTS = 25512;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPERESERVEIDSMETHODTYPE_OUTPUTARGUMENTS = 25513;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPECLOSEANDUPDATEMETHODTYPE = 25514;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPECLOSEANDUPDATEMETHODTYPE_INPUTARGUMENTS = 25515;

const int UA_NS0ID_PUBSUBCONFIGURATIONTYPECLOSEANDUPDATEMETHODTYPE_OUTPUTARGUMENTS = 25516;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFMASK = 25517;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFMASK_OPTIONSETVALUES = 25518;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFDATATYPE = 25519;

const int UA_NS0ID_PUBSUBCONFIGURATIONVALUEDATATYPE = 25520;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_CYCLICDATASET = 25521;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_CYCLICDATASET = 25522;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_CYCLICDATASET = 25523;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_CYCLICDATASET = 25524;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_QOSCATEGORY = 25525;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DATAGRAMQOS = 25526;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_QOSCATEGORY = 25527;

const int UA_NS0ID_DATAGRAMDATASETREADERTRANSPORTTYPE_QOSCATEGORY = 25528;

const int UA_NS0ID_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_ENCODING_DEFAULTBINARY = 25529;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETDATATYPE_ENCODING_DEFAULTBINARY = 25530;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFDATATYPE_ENCODING_DEFAULTBINARY = 25531;

const int UA_NS0ID_PUBSUBCONFIGURATIONVALUEDATATYPE_ENCODING_DEFAULTBINARY = 25532;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE = 25533;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_DATATYPEVERSION = 25534;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_DICTIONARYFRAGMENT = 25535;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE = 25536;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE_DATATYPEVERSION = 25537;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE_DICTIONARYFRAGMENT = 25538;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE = 25539;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE_DATATYPEVERSION = 25540;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE_DICTIONARYFRAGMENT = 25541;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE = 25542;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE_DATATYPEVERSION = 25543;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE_DICTIONARYFRAGMENT = 25544;

const int UA_NS0ID_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_ENCODING_DEFAULTXML = 25545;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETDATATYPE_ENCODING_DEFAULTXML = 25546;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFDATATYPE_ENCODING_DEFAULTXML = 25547;

const int UA_NS0ID_PUBSUBCONFIGURATIONVALUEDATATYPE_ENCODING_DEFAULTXML = 25548;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE = 25549;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_DATATYPEVERSION = 25550;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_DICTIONARYFRAGMENT = 25551;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE = 25552;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE_DATATYPEVERSION = 25553;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBKEYPUSHTARGETDATATYPE_DICTIONARYFRAGMENT = 25554;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE = 25555;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE_DATATYPEVERSION = 25556;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONREFDATATYPE_DICTIONARYFRAGMENT = 25557;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE = 25558;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE_DATATYPEVERSION = 25559;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONVALUEDATATYPE_DICTIONARYFRAGMENT = 25560;

const int UA_NS0ID_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE_ENCODING_DEFAULTJSON = 25561;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETDATATYPE_ENCODING_DEFAULTJSON = 25562;

const int UA_NS0ID_PUBSUBCONFIGURATIONREFDATATYPE_ENCODING_DEFAULTJSON = 25563;

const int UA_NS0ID_PUBSUBCONFIGURATIONVALUEDATATYPE_ENCODING_DEFAULTJSON = 25564;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN = 25565;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_IDENTITIES = 25566;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_APPLICATIONSEXCLUDE = 25567;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_APPLICATIONS = 25568;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ENDPOINTSEXCLUDE = 25569;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ENDPOINTS = 25570;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_CUSTOMCONFIGURATION = 25571;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDIDENTITY = 25572;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDIDENTITY_INPUTARGUMENTS = 25573;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEIDENTITY = 25574;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEIDENTITY_INPUTARGUMENTS = 25575;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDAPPLICATION = 25576;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDAPPLICATION_INPUTARGUMENTS = 25577;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEAPPLICATION = 25578;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEAPPLICATION_INPUTARGUMENTS = 25579;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDENDPOINT = 25580;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_ADDENDPOINT_INPUTARGUMENTS = 25581;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEENDPOINT = 25582;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERADMIN_REMOVEENDPOINT_INPUTARGUMENTS = 25583;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH = 25584;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_IDENTITIES = 25585;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_APPLICATIONSEXCLUDE = 25586;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_APPLICATIONS = 25587;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ENDPOINTSEXCLUDE = 25588;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ENDPOINTS = 25589;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_CUSTOMCONFIGURATION = 25590;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDIDENTITY = 25591;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDIDENTITY_INPUTARGUMENTS = 25592;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEIDENTITY = 25593;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEIDENTITY_INPUTARGUMENTS = 25594;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDAPPLICATION = 25595;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDAPPLICATION_INPUTARGUMENTS = 25596;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEAPPLICATION = 25597;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEAPPLICATION_INPUTARGUMENTS = 25598;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDENDPOINT = 25599;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_ADDENDPOINT_INPUTARGUMENTS = 25600;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEENDPOINT = 25601;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERPUSH_REMOVEENDPOINT_INPUTARGUMENTS = 25602;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS = 25603;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_IDENTITIES = 25604;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_APPLICATIONSEXCLUDE = 25605;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_APPLICATIONS = 25606;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ENDPOINTSEXCLUDE = 25607;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ENDPOINTS = 25608;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_CUSTOMCONFIGURATION = 25609;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDIDENTITY = 25610;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDIDENTITY_INPUTARGUMENTS = 25611;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEIDENTITY = 25612;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEIDENTITY_INPUTARGUMENTS = 25613;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDAPPLICATION = 25614;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDAPPLICATION_INPUTARGUMENTS = 25615;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEAPPLICATION = 25616;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEAPPLICATION_INPUTARGUMENTS = 25617;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDENDPOINT = 25618;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_ADDENDPOINT_INPUTARGUMENTS = 25619;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEENDPOINT = 25620;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYKEYSERVERACCESS_REMOVEENDPOINT_INPUTARGUMENTS = 25621;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_INVALIDATEKEYS = 25622;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_FORCEKEYROTATION = 25623;

const int UA_NS0ID_SECURITYGROUPTYPE_INVALIDATEKEYS = 25624;

const int UA_NS0ID_SECURITYGROUPTYPE_FORCEKEYROTATION = 25625;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER = 25626;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYGROUPID = 25627;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_KEYLIFETIME = 25628;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYPOLICYURI = 25629;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXFUTUREKEYCOUNT = 25630;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXPASTKEYCOUNT = 25631;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_INVALIDATEKEYS = 25632;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_SECURITYGROUPNAME_PLACEHOLDER_FORCEKEYROTATION = 25633;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_APPLICATIONURI = 25634;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_ENDPOINTURL = 25635;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_USERTOKENTYPE = 25636;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_REQUESTEDKEYCOUNT = 25637;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_RETRYINTERVAL = 25638;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_LASTPUSHEXECUTIONTIME = 25639;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_LASTPUSHERRORTIME = 25640;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_CONNECTSECURITYGROUPS = 25641;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_CONNECTSECURITYGROUPS_INPUTARGUMENTS = 25642;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_CONNECTSECURITYGROUPS_OUTPUTARGUMENTS = 25643;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_DISCONNECTSECURITYGROUPS = 25644;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_DISCONNECTSECURITYGROUPS_INPUTARGUMENTS = 25645;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_DISCONNECTSECURITYGROUPS_OUTPUTARGUMENTS = 25646;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETTYPE_TRIGGERKEYUPDATE = 25647;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_APPLICATIONURI = 25648;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_ENDPOINTURL = 25649;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_USERTOKENTYPE = 25650;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_REQUESTEDKEYCOUNT = 25651;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_RETRYINTERVAL = 25652;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_LASTPUSHEXECUTIONTIME = 25653;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_LASTPUSHERRORTIME = 25654;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_CONNECTSECURITYGROUPS = 25655;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_CONNECTSECURITYGROUPS_INPUTARGUMENTS =
    25656;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_CONNECTSECURITYGROUPS_OUTPUTARGUMENTS =
    25657;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_DISCONNECTSECURITYGROUPS = 25658;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_DISCONNECTSECURITYGROUPS_INPUTARGUMENTS =
    25659;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_DISCONNECTSECURITYGROUPS_OUTPUTARGUMENTS =
    25660;

const int UA_NS0ID_PUBSUBKEYPUSHTARGETFOLDERTYPE_PUSHTARGETNAME_PLACEHOLDER_TRIGGERKEYUPDATE = 25661;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_OUTPUTARGUMENTS = 25684;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_APPLICATIONURI = 25696;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_APPLICATIONTYPE = 25697;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CANCELCHANGES = 25698;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_RESETTOSERVERDEFAULTS = 25699;

const int UA_NS0ID_SERVERCONFIGURATION_APPLICATIONURI = 25706;

const int UA_NS0ID_SERVERCONFIGURATION_APPLICATIONTYPE = 25707;

const int UA_NS0ID_SERVERCONFIGURATION_CANCELCHANGES = 25708;

const int UA_NS0ID_SERVERCONFIGURATION_RESETTOSERVERDEFAULTS = 25709;

const int UA_NS0ID_SERVERCONFIGURATION_SETADMINPASSWORD = 25710;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_PRODUCTURI = 25724;

const int UA_NS0ID_SERVERCONFIGURATION_PRODUCTURI = 25725;

const int UA_NS0ID_ENCODEDTICKET = 25726;

const int UA_NS0ID_REQUESTTICKETSMETHODTYPE = 25727;

const int UA_NS0ID_REQUESTTICKETSMETHODTYPE_OUTPUTARGUMENTS = 25728;

const int UA_NS0ID_SETREGISTRARENDPOINTSMETHODTYPE = 25729;

const int UA_NS0ID_SETREGISTRARENDPOINTSMETHODTYPE_INPUTARGUMENTS = 25730;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE = 25731;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS = 25732;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP = 25733;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST = 25734;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE = 25735;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE = 25736;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    25737;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT = 25738;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE = 25739;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    25740;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    25741;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN = 25742;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    25743;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    25744;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE = 25745;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    25746;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ = 25747;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    25748;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    25749;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE = 25750;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    25751;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION = 25752;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    25753;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    25754;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION = 25755;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    25756;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    25757;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    25758;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    25759;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    25760;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    25761;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    25762;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    25763;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    25764;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    25765;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    25766;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    25767;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    25768;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    25769;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES = 25770;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST = 25772;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    25773;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED = 25774;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID =
    25775;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    25776;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    25777;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    25778;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME =
    25779;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    25780;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    25781;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE =
    25782;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY =
    25783;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    25784;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    25785;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    25786;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    25787;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    25788;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID =
    25789;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN =
    25790;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    25791;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    25792;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    25793;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    25794;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    25795;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    25796;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    25797;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    25798;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    25799;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY =
    25800;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    25801;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    25802;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    25803;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT =
    25804;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    25805;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    25806;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE =
    25807;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE =
    25808;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    25809;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    25810;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    25811;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    25812;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    25813;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    25814;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    25815;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    25816;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    25817;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    25818;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    25819;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    25820;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    25821;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    25822;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    25823;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    25824;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    25825;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    25826;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    25827;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    25828;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    25829;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    25830;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM =
    25831;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    25832;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    25833;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    25834;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    25835;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    25836;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    25837;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    25838;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    25839;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    25840;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    25841;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    25842;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    25843;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    25844;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    25845;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    25846;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    25847;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    25848;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    25849;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    25850;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    25851;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    25852;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    25853;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    25854;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    25855;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    25856;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    25857;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    25858;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    25859;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    25860;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    25861;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    25862;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    25863;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    25864;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    25865;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    25866;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    25867;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    25868;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    25869;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    25870;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    25871;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    25872;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    25873;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    25874;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    25875;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    25876;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    25877;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    25878;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    25879;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    25880;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    25881;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    25882;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    25883;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    25884;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    25885;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    25886;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    25887;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    25888;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    25889;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    25890;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    25891;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    25892;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    25893;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    25894;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    25895;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    25896;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    25897;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    25898;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    25899;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    25900;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    25901;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY =
    25902;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    25903;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    25904;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    25905;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    25906;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    25907;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    25908;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    25909;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    25910;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    25911;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    25912;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    25913;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    25914;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    25915;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    25916;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE =
    25917;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    25918;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    25919;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    25920;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    25921;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    25922;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    25923;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    25924;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    25925;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    25926;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    25927;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    25928;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    25929;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET =
    25930;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 =
    25931;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    25932;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    25933;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    25934;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    25935;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    25936;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    25937;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    25938;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    25939;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE = 25940;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    25941;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    25942;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    25943;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    25944;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME =
    25945;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    25946;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    25947;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    25948;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    25949;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    25950;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    25951;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    25952;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    25953;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    25954;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    25955;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    25956;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    25957;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    25958;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    25959;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    25960;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    25961;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    25962;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    25963;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    25964;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    25965;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    25966;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    25967;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    25968;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    25969;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    25970;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    25971;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    25972;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    25973;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    25974;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    25975;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    25976;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    25977;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    25978;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    25979;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    25980;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    25981;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    25982;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    25983;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    25984;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    25985;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    25986;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    25987;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    25988;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    25989;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    25990;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    25991;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    25992;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    25993;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    25994;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    25995;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    25996;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    25997;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    25998;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    25999;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    26000;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    26001;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    26002;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26003;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    26004;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26005;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    26006;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    26007;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    26008;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    26009;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    26010;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    26011;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    26012;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26013;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    26014;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26015;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    26016;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    26017;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    26018;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    26019;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    26020;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    26021;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    26022;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    26023;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    26024;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    26025;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    26026;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    26027;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    26028;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    26029;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    26030;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    26031;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    26032;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    26033;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    26034;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    26035;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    26036;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    26037;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    26038;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    26039;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    26040;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    26041;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    26042;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    26043;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    26044;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    26045;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    26046;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    26047;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    26048;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    26049;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    26050;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    26051;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    26052;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    26053;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    26054;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    26055;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    26056;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    26057;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    26058;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    26059;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    26060;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    26061;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    26062;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    26063;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    26064;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    26065;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    26066;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    26067;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    26068;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    26069;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    26070;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    26071;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    26072;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    26073;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    26074;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    26075;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    26076;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    26077;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    26078;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    26079;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    26080;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    26081;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    26082;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    26083;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    26084;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    26085;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    26086;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    26087;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    26088;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    26089;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    26090;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    26091;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    26092;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    26093;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    26094;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    26095;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET =
    26096;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    26097;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    26098;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    26099;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    26100;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    26101;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    26102;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    26103;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    26104;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP = 26105;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST = 26106;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE = 26107;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE = 26108;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE = 26109;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT = 26110;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE = 26111;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    26112;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME = 26113;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN = 26114;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    26115;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    26116;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE = 26117;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    26118;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ = 26119;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    26120;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    26121;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE = 26122;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    26123;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION = 26124;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    26125;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    26126;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION = 26127;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    26128;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME = 26129;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY = 26130;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    26131;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS = 26132;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    26133;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    26134;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE = 26135;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    26136;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    26137;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE = 26138;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    26139;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE = 26140;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    26141;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES = 26142;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST = 26144;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    26145;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED = 26146;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID = 26147;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    26148;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    26149;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    26150;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME = 26151;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    26152;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    26153;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE = 26154;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY = 26155;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    26156;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    26157;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    26158;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    26159;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    26160;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID = 26161;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN = 26162;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    26163;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    26164;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    26165;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    26166;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    26167;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    26168;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    26169;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    26170;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    26171;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY = 26172;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    26173;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    26174;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    26175;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT = 26176;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    26177;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    26178;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE = 26179;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE = 26180;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    26181;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    26182;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    26183;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    26184;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    26185;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    26186;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    26187;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    26188;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    26189;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    26190;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    26191;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    26192;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    26193;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    26194;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    26195;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    26196;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    26197;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    26198;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    26199;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    26200;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    26201;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    26202;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM = 26203;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    26204;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    26205;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    26206;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    26207;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    26208;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26209;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    26210;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26211;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    26212;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    26213;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    26214;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    26215;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    26216;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    26217;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    26218;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26219;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    26220;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26221;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    26222;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    26223;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    26224;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    26225;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    26226;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    26227;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    26228;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    26229;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    26230;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    26231;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    26232;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    26233;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    26234;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    26235;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    26236;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    26237;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    26238;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    26239;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    26240;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    26241;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    26242;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    26243;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    26244;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    26245;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    26246;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    26247;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    26248;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    26249;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    26250;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    26251;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    26252;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    26253;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    26254;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    26255;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    26256;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    26257;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    26258;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    26259;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    26260;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    26261;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    26262;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    26263;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    26264;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    26265;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    26266;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    26267;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    26268;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    26269;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    26270;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    26271;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    26272;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    26273;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY = 26274;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY = 26275;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    26276;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    26277;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    26278;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    26279;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    26280;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    26281;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    26282;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    26283;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    26284;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    26285;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    26286;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    26287;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    26288;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE = 26289;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS = 26290;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    26291;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    26292;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    26293;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    26294;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    26295;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    26296;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    26297;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    26298;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    26299;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    26300;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    26301;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET = 26302;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 = 26303;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    26304;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    26305;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    26306;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    26307;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    26308;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    26309;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    26310;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    26311;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE = 26312;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID = 26313;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    26314;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    26315;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    26316;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME = 26317;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    26318;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    26319;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE = 26320;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY = 26321;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    26322;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    26323;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    26324;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    26325;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    26326;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID = 26327;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN = 26328;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    26329;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    26330;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    26331;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    26332;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    26333;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    26334;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    26335;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    26336;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    26337;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY = 26338;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    26339;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    26340;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    26341;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT = 26342;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    26343;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    26344;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE = 26345;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE = 26346;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    26347;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    26348;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    26349;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    26350;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    26351;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    26352;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    26353;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    26354;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    26355;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    26356;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    26357;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    26358;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    26359;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    26360;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    26361;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    26362;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    26363;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    26364;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    26365;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    26366;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    26367;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    26368;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM = 26369;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    26370;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    26371;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    26372;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    26373;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    26374;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26375;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    26376;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26377;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    26378;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    26379;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    26380;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    26381;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    26382;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    26383;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    26384;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26385;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    26386;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26387;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    26388;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    26389;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    26390;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    26391;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    26392;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    26393;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    26394;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    26395;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    26396;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    26397;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    26398;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    26399;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    26400;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    26401;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    26402;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    26403;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    26404;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    26405;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    26406;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    26407;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    26408;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    26409;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    26410;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    26411;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    26412;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    26413;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    26414;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    26415;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    26416;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    26417;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    26418;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    26419;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    26420;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    26421;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    26422;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    26423;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    26424;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    26425;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    26426;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    26427;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    26428;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    26429;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    26430;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    26431;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    26432;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    26433;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    26434;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    26435;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    26436;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    26437;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    26438;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    26439;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY = 26440;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY = 26441;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    26442;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    26443;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    26444;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    26445;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    26446;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    26447;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    26448;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    26449;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    26450;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    26451;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    26452;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    26453;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    26454;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE = 26455;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS = 26456;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    26457;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    26458;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    26459;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    26460;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    26461;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    26462;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    26463;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    26464;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    26465;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    26466;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    26467;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET = 26468;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 = 26469;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    26470;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    26471;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    26472;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    26473;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    26474;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    26475;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    26476;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP = 26477;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST = 26478;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE = 26479;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE = 26480;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE = 26481;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT = 26482;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE = 26483;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    26484;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    26485;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN = 26486;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    26487;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    26488;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE = 26489;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    26490;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ = 26491;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    26492;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    26493;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE = 26494;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    26495;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION = 26496;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    26497;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    26498;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION = 26499;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    26500;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    26501;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    26502;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    26503;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS = 26504;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    26505;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    26506;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    26507;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    26508;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    26509;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    26510;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    26511;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    26512;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    26513;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES = 26514;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST = 26516;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    26517;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED = 26518;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID =
    26519;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    26520;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    26521;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    26522;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME = 26523;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    26524;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    26525;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE =
    26526;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY =
    26527;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    26528;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    26529;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    26530;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    26531;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    26532;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID =
    26533;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN =
    26534;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    26535;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    26536;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    26537;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    26538;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    26539;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    26540;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    26541;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    26542;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    26543;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY =
    26544;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    26545;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    26546;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    26547;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT =
    26548;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    26549;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    26550;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE =
    26551;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE =
    26552;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    26553;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    26554;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    26555;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    26556;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    26557;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    26558;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    26559;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    26560;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    26561;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    26562;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    26563;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    26564;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    26565;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    26566;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    26567;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    26568;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    26569;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    26570;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    26571;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    26572;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    26573;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    26574;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM =
    26575;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    26576;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    26577;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    26578;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    26579;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    26580;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26581;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    26582;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26583;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    26584;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    26585;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    26586;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    26587;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    26588;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    26589;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    26590;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26591;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    26592;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26593;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    26594;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    26595;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    26596;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    26597;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    26598;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    26599;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    26600;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    26601;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    26602;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    26603;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    26604;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    26605;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    26606;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    26607;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    26608;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    26609;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    26610;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    26611;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    26612;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    26613;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    26614;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    26615;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    26616;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    26617;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    26618;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    26619;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    26620;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    26621;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    26622;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    26623;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    26624;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    26625;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    26626;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    26627;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    26628;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    26629;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    26630;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    26631;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    26632;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    26633;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    26634;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    26635;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    26636;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    26637;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    26638;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    26639;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    26640;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    26641;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    26642;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    26643;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    26644;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    26645;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY =
    26646;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    26647;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    26648;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    26649;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    26650;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    26651;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    26652;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    26653;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    26654;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    26655;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    26656;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    26657;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    26658;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    26659;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    26660;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE =
    26661;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    26662;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    26663;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    26664;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    26665;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    26666;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    26667;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    26668;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    26669;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    26670;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    26671;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    26672;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    26673;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET =
    26674;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 =
    26675;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    26676;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    26677;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    26678;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    26679;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    26680;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    26681;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    26682;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    26683;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE = 26684;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    26685;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    26686;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    26687;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    26688;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME = 26689;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    26690;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    26691;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    26692;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    26693;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    26694;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    26695;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    26696;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    26697;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    26698;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    26699;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    26700;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    26701;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    26702;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    26703;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    26704;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    26705;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    26706;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    26707;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    26708;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    26709;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    26710;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    26711;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    26712;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    26713;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    26714;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    26715;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    26716;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    26717;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    26718;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    26719;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    26720;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    26721;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    26722;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    26723;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    26724;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    26725;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    26726;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    26727;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    26728;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    26729;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    26730;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    26731;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    26732;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    26733;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    26734;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    26735;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    26736;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    26737;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    26738;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    26739;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    26740;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    26741;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    26742;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    26743;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    26744;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    26745;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    26746;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26747;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    26748;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26749;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    26750;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    26751;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    26752;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    26753;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    26754;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    26755;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    26756;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26757;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    26758;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26759;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    26760;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    26761;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    26762;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    26763;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    26764;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    26765;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    26766;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    26767;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    26768;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    26769;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    26770;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    26771;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    26772;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    26773;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    26774;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    26775;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    26776;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    26777;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    26778;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    26779;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    26780;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    26781;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    26782;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    26783;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    26784;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    26785;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    26786;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    26787;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    26788;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    26789;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    26790;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    26791;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    26792;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    26793;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    26794;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    26795;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    26796;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    26797;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    26798;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    26799;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    26800;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    26801;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    26802;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    26803;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    26804;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    26805;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    26806;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    26807;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    26808;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    26809;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    26810;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    26811;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    26812;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    26813;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    26814;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    26815;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    26816;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    26817;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    26818;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    26819;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    26820;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    26821;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    26822;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    26823;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    26824;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    26825;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    26826;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    26827;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    26828;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    26829;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    26830;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    26831;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    26832;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    26833;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    26834;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    26835;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    26836;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    26837;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    26838;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    26839;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET =
    26840;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    26841;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    26842;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    26843;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    26844;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    26845;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    26846;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    26847;

const int
    UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    26848;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_ENABLED = 26849;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_APPLICATIONURI = 26850;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_PRODUCTURI = 26851;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_APPLICATIONTYPE = 26852;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_SERVERCAPABILITIES = 26853;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_SUPPORTEDPRIVATEKEYFORMATS = 26854;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_MAXTRUSTLISTSIZE = 26855;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_MULTICASTDNSENABLED = 26856;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_HASSECUREELEMENT = 26857;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_UPDATECERTIFICATE = 26858;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_UPDATECERTIFICATE_INPUTARGUMENTS = 26859;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_UPDATECERTIFICATE_OUTPUTARGUMENTS = 26860;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_APPLYCHANGES = 26861;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CANCELCHANGES = 26862;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CREATESIGNINGREQUEST = 26863;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CREATESIGNINGREQUEST_INPUTARGUMENTS = 26864;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CREATESIGNINGREQUEST_OUTPUTARGUMENTS = 26865;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_GETREJECTEDLIST = 26866;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS = 26867;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_RESETTOSERVERDEFAULTS = 26868;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE = 26871;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_ISSINGLETON = 26872;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_REQUESTTICKETS = 26873;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_REQUESTTICKETS_OUTPUTARGUMENTS = 26874;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_SETREGISTRARENDPOINTS = 26875;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_SETREGISTRARENDPOINTS_INPUTARGUMENTS = 26876;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER = 26878;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS = 26879;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP =
    26880;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    26881;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    26882;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    26883;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    26884;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    26885;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    26886;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    26887;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    26888;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    26889;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    26890;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    26891;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    26892;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    26893;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    26894;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    26895;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    26896;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    26897;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    26898;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    26899;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    26900;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    26901;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    26902;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    26903;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    26904;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    26905;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    26906;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    26907;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    26908;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    26909;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    26910;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    26911;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    26912;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    26913;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    26914;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    26915;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    26916;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    26917;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    26919;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    26920;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED =
    26921;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID =
    26922;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    26923;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    26924;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    26925;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME =
    26926;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    26927;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    26928;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE =
    26929;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY =
    26930;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    26931;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    26932;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    26933;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    26934;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    26935;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID =
    26936;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN =
    26937;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    26938;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    26939;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    26940;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    26941;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    26942;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    26943;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    26944;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    26945;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    26946;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY =
    26947;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    26948;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    26949;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    26950;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT =
    26951;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    26952;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    26953;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE =
    26954;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE =
    26955;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    26956;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    26957;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    26958;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    26959;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    26960;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    26961;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    26962;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    26963;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    26964;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    26965;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    26966;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    26967;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    26968;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    26969;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    26970;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    26971;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    26972;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    26973;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    26974;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    26975;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    26976;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    26977;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM =
    26978;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    26979;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    26980;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    26981;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    26982;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    26983;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    26984;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    26985;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    26986;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    26987;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    26988;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    26989;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    26990;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    26991;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    26992;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    26993;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    26994;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    26995;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    26996;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    26997;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    26998;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    26999;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    27000;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    27001;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    27002;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27003;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    27004;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27005;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    27006;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    27007;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    27008;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    27009;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    27010;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    27011;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27012;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27013;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    27014;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    27015;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    27016;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27017;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27018;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27019;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    27020;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27021;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    27022;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    27023;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27024;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    27025;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27026;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    27027;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    27028;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27029;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    27030;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    27031;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27032;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    27033;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    27034;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    27035;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    27036;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    27037;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    27038;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    27039;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    27040;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    27041;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    27042;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    27043;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27044;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    27045;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27046;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    27047;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    27048;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY =
    27049;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    27050;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    27051;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    27052;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    27053;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    27054;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    27055;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    27056;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27057;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    27058;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27059;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    27060;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    27061;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    27062;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    27063;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE =
    27064;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    27065;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    27066;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    27067;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    27068;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    27069;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    27070;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    27071;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    27072;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27073;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    27074;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    27075;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    27076;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET =
    27077;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 =
    27078;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    27079;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    27080;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27081;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    27082;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    27083;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    27084;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    27085;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    27086;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE =
    27087;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    27088;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    27089;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    27090;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    27091;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME =
    27092;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    27093;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    27094;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    27095;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    27096;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    27097;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    27098;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    27099;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    27100;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    27101;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    27102;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    27103;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    27104;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    27105;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    27106;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    27107;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    27108;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    27109;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    27110;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    27111;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    27112;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    27113;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    27114;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    27115;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    27116;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    27117;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    27118;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    27119;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    27120;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    27121;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    27122;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    27123;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    27124;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    27125;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    27126;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    27127;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    27128;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    27129;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    27130;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    27131;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    27132;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    27133;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    27134;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    27135;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    27136;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    27137;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    27138;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    27139;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    27140;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    27141;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    27142;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    27143;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    27144;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    27145;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    27146;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    27147;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    27148;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    27149;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    27150;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    27151;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    27152;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    27153;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    27154;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    27155;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    27156;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    27157;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    27158;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    27159;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    27160;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    27161;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    27162;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    27163;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    27164;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    27165;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    27166;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    27167;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    27168;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27169;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    27170;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27171;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    27172;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    27173;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    27174;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    27175;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    27176;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    27177;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27178;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27179;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    27180;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    27181;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    27182;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27183;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27184;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27185;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    27186;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27187;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    27188;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    27189;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27190;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    27191;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27192;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    27193;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    27194;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27195;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    27196;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    27197;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27198;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    27199;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    27200;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    27201;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    27202;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    27203;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    27204;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    27205;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    27206;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    27207;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    27208;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    27209;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27210;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    27211;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27212;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    27213;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    27214;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    27215;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    27216;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    27217;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    27218;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    27219;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    27220;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    27221;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    27222;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27223;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    27224;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27225;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    27226;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    27227;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    27228;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    27229;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    27230;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    27231;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    27232;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    27233;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    27234;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    27235;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    27236;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    27237;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    27238;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27239;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    27240;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    27241;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    27242;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET =
    27243;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    27244;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    27245;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    27246;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27247;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    27248;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    27249;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    27250;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    27251;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP = 27252;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    27253;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    27254;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    27255;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    27256;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    27257;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    27258;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    27259;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    27260;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    27261;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    27262;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    27263;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    27264;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    27265;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    27266;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    27267;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    27268;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    27269;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    27270;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    27271;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    27272;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    27273;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    27274;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    27275;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    27276;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    27277;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    27278;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    27279;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    27280;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    27281;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    27282;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    27283;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    27284;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    27285;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    27286;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    27287;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    27288;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    27289;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    27291;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    27292;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED =
    27293;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID =
    27294;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    27295;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    27296;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    27297;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME =
    27298;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    27299;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    27300;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE =
    27301;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY =
    27302;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    27303;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    27304;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    27305;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    27306;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    27307;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID =
    27308;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN =
    27309;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    27310;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    27311;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    27312;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    27313;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    27314;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    27315;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    27316;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    27317;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    27318;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY =
    27319;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    27320;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    27321;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    27322;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT =
    27323;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    27324;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    27325;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE =
    27326;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE =
    27327;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    27328;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    27329;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    27330;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    27331;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    27332;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    27333;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    27334;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    27335;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    27336;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    27337;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    27338;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    27339;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    27340;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    27341;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    27342;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    27343;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    27344;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    27345;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    27346;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    27347;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    27348;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    27349;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM =
    27350;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    27351;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    27352;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    27353;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    27354;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    27355;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    27356;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    27357;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    27358;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    27359;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    27360;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    27361;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    27362;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    27363;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    27364;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    27365;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    27366;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    27367;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    27368;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    27369;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    27370;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    27371;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    27372;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    27373;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    27374;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27375;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    27376;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27377;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    27378;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    27379;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    27380;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    27381;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    27382;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    27383;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27384;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27385;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    27386;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    27387;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    27388;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27389;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27390;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27391;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    27392;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27393;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    27394;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    27395;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27396;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    27397;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27398;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    27399;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    27400;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27401;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    27402;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    27403;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27404;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    27405;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    27406;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    27407;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    27408;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    27409;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    27410;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    27411;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    27412;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    27413;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    27414;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    27415;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27416;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    27417;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27418;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    27419;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    27420;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY =
    27421;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    27422;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    27423;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    27424;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    27425;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    27426;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    27427;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    27428;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27429;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    27430;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27431;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    27432;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    27433;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    27434;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    27435;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE =
    27436;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    27437;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    27438;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    27439;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    27440;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    27441;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    27442;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    27443;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    27444;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27445;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    27446;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    27447;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    27448;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET =
    27449;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 =
    27450;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    27451;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    27452;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27453;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    27454;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    27455;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    27456;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    27457;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    27458;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE =
    27459;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    27460;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    27461;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    27462;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    27463;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME =
    27464;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    27465;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    27466;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    27467;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    27468;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    27469;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    27470;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    27471;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    27472;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    27473;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    27474;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    27475;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    27476;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    27477;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    27478;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    27479;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    27480;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    27481;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    27482;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    27483;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    27484;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    27485;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    27486;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    27487;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    27488;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    27489;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    27490;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    27491;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    27492;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    27493;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    27494;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    27495;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    27496;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    27497;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    27498;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    27499;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    27500;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    27501;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    27502;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    27503;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    27504;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    27505;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    27506;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    27507;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    27508;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    27509;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    27510;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    27511;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    27512;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    27513;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    27514;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    27515;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    27516;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    27517;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    27518;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    27519;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    27520;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    27521;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    27522;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    27523;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    27524;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    27525;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    27526;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    27527;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    27528;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    27529;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    27530;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    27531;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    27532;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    27533;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    27534;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    27535;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    27536;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    27537;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    27538;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    27539;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    27540;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27541;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    27542;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27543;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    27544;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    27545;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    27546;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    27547;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    27548;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    27549;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27550;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27551;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    27552;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    27553;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    27554;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27555;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27556;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27557;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    27558;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27559;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    27560;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    27561;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27562;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    27563;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27564;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    27565;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    27566;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27567;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    27568;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    27569;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27570;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    27571;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    27572;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    27573;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    27574;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    27575;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    27576;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    27577;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    27578;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    27579;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    27580;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    27581;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27582;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    27583;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27584;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    27585;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    27586;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    27587;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    27588;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    27589;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    27590;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    27591;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    27592;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    27593;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    27594;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27595;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    27596;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27597;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    27598;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    27599;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    27600;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    27601;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    27602;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    27603;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    27604;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    27605;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    27606;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    27607;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    27608;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    27609;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    27610;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27611;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    27612;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    27613;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    27614;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET =
    27615;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    27616;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    27617;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    27618;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27619;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    27620;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    27621;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    27622;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    27623;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP = 27624;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    27625;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    27626;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    27627;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    27628;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    27629;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    27630;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    27631;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    27632;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    27633;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    27634;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    27635;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    27636;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    27637;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    27638;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    27639;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    27640;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    27641;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    27642;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    27643;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    27644;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    27645;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    27646;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    27647;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    27648;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    27649;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    27650;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    27651;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    27652;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    27653;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    27654;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    27655;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    27656;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    27657;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    27658;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    27659;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    27660;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    27661;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    27663;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    27664;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED =
    27665;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID =
    27666;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    27667;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    27668;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    27669;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME =
    27670;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    27671;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    27672;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE =
    27673;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY =
    27674;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    27675;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    27676;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    27677;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    27678;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    27679;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID =
    27680;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN =
    27681;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    27682;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    27683;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    27684;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    27685;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    27686;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    27687;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    27688;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    27689;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    27690;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY =
    27691;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    27692;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    27693;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    27694;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT =
    27695;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    27696;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    27697;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE =
    27698;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE =
    27699;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    27700;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    27701;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    27702;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    27703;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    27704;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    27705;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    27706;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    27707;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    27708;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    27709;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    27710;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    27711;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    27712;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    27713;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    27714;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    27715;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    27716;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    27717;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    27718;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    27719;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    27720;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    27721;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM =
    27722;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    27723;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    27724;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    27725;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    27726;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    27727;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    27728;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    27729;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    27730;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    27731;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    27732;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    27733;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    27734;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    27735;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    27736;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    27737;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    27738;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    27739;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    27740;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    27741;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    27742;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    27743;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    27744;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    27745;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    27746;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27747;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    27748;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27749;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    27750;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    27751;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    27752;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    27753;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    27754;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    27755;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27756;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27757;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    27758;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    27759;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    27760;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27761;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27762;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27763;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    27764;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27765;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    27766;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    27767;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27768;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    27769;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27770;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    27771;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    27772;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27773;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    27774;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    27775;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27776;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    27777;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    27778;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    27779;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    27780;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    27781;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    27782;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    27783;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    27784;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    27785;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    27786;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    27787;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27788;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    27789;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27790;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    27791;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    27792;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY =
    27793;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    27794;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    27795;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    27796;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    27797;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    27798;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    27799;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    27800;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27801;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    27802;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27803;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    27804;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    27805;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    27806;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    27807;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE =
    27808;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    27809;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    27810;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    27811;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    27812;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    27813;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    27814;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    27815;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    27816;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27817;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    27818;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    27819;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    27820;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET =
    27821;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 =
    27822;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    27823;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    27824;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27825;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    27826;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    27827;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    27828;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    27829;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    27830;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE =
    27831;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    27832;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    27833;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    27834;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    27835;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME =
    27836;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    27837;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    27838;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    27839;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    27840;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    27841;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    27842;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    27843;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    27844;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    27845;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    27846;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    27847;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    27848;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    27849;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    27850;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    27851;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    27852;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    27853;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    27854;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    27855;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    27856;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    27857;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    27858;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    27859;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    27860;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    27861;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    27862;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    27863;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    27864;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    27865;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    27866;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    27867;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    27868;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    27869;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    27870;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    27871;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    27872;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    27873;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    27874;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    27875;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    27876;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    27877;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    27878;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    27879;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    27880;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    27881;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    27882;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    27883;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    27884;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    27885;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    27886;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    27887;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    27888;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    27889;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    27890;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    27891;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    27892;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    27893;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    27894;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    27895;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    27896;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    27897;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    27898;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    27899;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    27900;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    27901;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    27902;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    27903;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    27904;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    27905;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    27906;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    27907;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    27908;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    27909;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    27910;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    27911;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    27912;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    27913;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    27914;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    27915;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    27916;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    27917;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    27918;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    27919;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    27920;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    27921;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    27922;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    27923;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    27924;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    27925;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    27926;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    27927;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    27928;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    27929;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    27930;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    27931;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    27932;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    27933;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    27934;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    27935;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    27936;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    27937;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    27938;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    27939;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    27940;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    27941;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    27942;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    27943;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    27944;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    27945;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    27946;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    27947;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    27948;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    27949;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    27950;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    27951;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    27952;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    27953;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    27954;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    27955;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    27956;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    27957;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    27958;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    27959;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    27960;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    27961;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    27962;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    27963;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    27964;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    27965;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    27966;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    27967;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    27968;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    27969;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    27970;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    27971;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    27972;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    27973;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    27974;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    27975;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    27976;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    27977;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    27978;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    27979;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    27980;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    27981;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    27982;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    27983;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    27984;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    27985;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    27986;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET =
    27987;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    27988;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    27989;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    27990;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    27991;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    27992;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    27993;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    27994;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    27995;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_ENABLED = 27996;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_APPLICATIONURI = 27997;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_PRODUCTURI = 27998;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_APPLICATIONTYPE = 27999;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_SERVERCAPABILITIES = 28000;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_SUPPORTEDPRIVATEKEYFORMATS = 28001;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_MAXTRUSTLISTSIZE = 28002;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_MULTICASTDNSENABLED = 28003;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_HASSECUREELEMENT = 28004;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE = 28005;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE_INPUTARGUMENTS = 28006;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE_OUTPUTARGUMENTS = 28007;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_APPLYCHANGES = 28008;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CANCELCHANGES = 28009;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST = 28010;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST_INPUTARGUMENTS = 28011;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST_OUTPUTARGUMENTS = 28012;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_GETREJECTEDLIST = 28013;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_GETREJECTEDLIST_OUTPUTARGUMENTS = 28014;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_RESETTOSERVERDEFAULTS = 28015;

const int UA_NS0ID_PROVISIONABLEDEVICE = 29878;

const int UA_NS0ID_PROVISIONABLEDEVICE_ISSINGLETON = 29879;

const int UA_NS0ID_PROVISIONABLEDEVICE_REQUESTTICKETS = 29880;

const int UA_NS0ID_PROVISIONABLEDEVICE_REQUESTTICKETS_OUTPUTARGUMENTS = 29881;

const int UA_NS0ID_PROVISIONABLEDEVICE_SETREGISTRARENDPOINTS = 29882;

const int UA_NS0ID_PROVISIONABLEDEVICE_SETREGISTRARENDPOINTS_INPUTARGUMENTS = 29883;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER = 29885;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS = 29886;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP = 29887;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    29888;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    29889;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    29890;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    29891;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    29892;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    29893;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    29894;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    29895;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    29896;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    29897;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    29898;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    29899;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    29900;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    29901;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    29902;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    29903;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    29904;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    29905;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    29906;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    29907;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    29908;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    29909;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    29910;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    29911;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    29912;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    29913;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    29914;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    29915;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    29916;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    29917;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    29918;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    29919;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    29920;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    29921;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    29922;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    29923;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    29924;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    29926;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    29927;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED =
    29928;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTID =
    29929;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    29930;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    29931;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    29932;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_TIME =
    29933;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    29934;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    29935;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MESSAGE =
    29936;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SEVERITY =
    29937;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    29938;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    29939;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    29940;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    29941;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    29942;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_BRANCHID =
    29943;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RETAIN =
    29944;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    29945;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    29946;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    29947;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    29948;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    29949;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    29950;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    29951;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    29952;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    29953;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY =
    29954;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    29955;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    29956;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    29957;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT =
    29958;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    29959;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    29960;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_DISABLE =
    29961;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ENABLE =
    29962;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    29963;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    29964;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    29965;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    29966;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    29967;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    29968;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    29969;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    29970;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    29971;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    29972;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    29973;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    29974;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    29975;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    29976;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    29977;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    29978;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    29979;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    29980;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    29981;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    29982;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    29983;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    29984;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM =
    29985;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    29986;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    29987;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    29988;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    29989;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    29990;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    29991;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    29992;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    29993;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    29994;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    29995;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    29996;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    29997;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    29998;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    29999;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    30000;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30001;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    30002;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30003;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    30004;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    30005;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    30006;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    30007;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    30008;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    30009;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30010;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    30011;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30012;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    30013;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    30014;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    30015;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    30016;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    30017;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    30018;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30019;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30020;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    30021;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    30022;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    30023;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30024;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30025;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30026;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    30027;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30028;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    30029;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    30030;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30031;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    30032;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30033;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    30034;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    30035;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30036;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    30037;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    30038;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30039;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    30040;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    30041;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    30042;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    30043;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    30044;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    30045;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    30046;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    30047;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    30048;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    30049;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    30050;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30051;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    30052;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30053;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    30054;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    30055;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_ONDELAY =
    30056;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    30057;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    30058;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    30059;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    30060;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    30061;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    30062;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    30063;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30064;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    30065;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30066;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    30067;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    30068;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    30069;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    30070;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SILENCE =
    30071;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    30072;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    30073;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    30074;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    30075;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    30076;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    30077;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    30078;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    30079;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30080;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    30081;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    30082;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    30083;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET =
    30084;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2 =
    30085;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    30086;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    30087;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30088;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    30089;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    30090;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    30091;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    30092;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    30093;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE =
    30094;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    30095;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    30096;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    30097;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    30098;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TIME =
    30099;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    30100;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    30101;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    30102;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    30103;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    30104;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    30105;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    30106;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    30107;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    30108;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    30109;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    30110;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    30111;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    30112;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    30113;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    30114;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    30115;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    30116;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    30117;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    30118;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    30119;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    30120;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    30121;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    30122;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    30123;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    30124;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    30125;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    30126;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    30127;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    30128;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    30129;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    30130;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    30131;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    30132;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    30133;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    30134;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    30135;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    30136;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    30137;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    30138;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    30139;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    30140;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    30141;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    30142;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    30143;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    30144;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    30145;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    30146;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    30147;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    30148;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    30149;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    30150;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    30151;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    30152;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    30153;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    30154;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    30155;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    30156;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    30157;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    30158;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    30159;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    30160;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    30161;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    30162;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    30163;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    30164;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    30165;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    30166;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30167;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    30168;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30169;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    30170;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    30171;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    30172;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    30173;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    30174;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    30175;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30176;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    30177;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30178;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    30179;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    30180;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    30181;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    30182;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    30183;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    30184;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30185;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30186;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    30187;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    30188;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    30189;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30190;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30191;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30192;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    30193;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30194;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    30195;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    30196;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30197;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    30198;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30199;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    30200;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    30201;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30202;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    30203;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    30204;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30205;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    30206;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    30207;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    30208;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    30209;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    30210;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    30211;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    30212;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    30213;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    30214;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    30215;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    30216;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30217;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    30218;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30219;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    30220;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    30221;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    30222;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    30223;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    30224;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    30225;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    30226;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    30227;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    30228;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    30229;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30230;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    30231;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30232;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    30233;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    30234;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    30235;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    30236;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    30237;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    30238;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    30239;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    30240;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    30241;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    30242;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    30243;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    30244;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    30245;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30246;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    30247;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    30248;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    30249;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET =
    30250;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    30251;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    30252;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    30253;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30254;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    30255;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    30256;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    30257;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    30258;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP = 30259;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    30260;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    30261;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    30262;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    30263;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    30264;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    30265;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    30266;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    30267;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    30268;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    30269;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    30270;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    30271;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    30272;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    30273;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    30274;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    30275;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    30276;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    30277;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    30278;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    30279;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    30280;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    30281;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    30282;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    30283;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    30284;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    30285;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    30286;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    30287;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    30288;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    30289;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    30290;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    30291;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    30292;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    30293;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    30294;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    30295;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    30296;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    30298;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    30299;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED =
    30300;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTID =
    30301;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    30302;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    30303;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    30304;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_TIME =
    30305;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    30306;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    30307;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MESSAGE =
    30308;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SEVERITY =
    30309;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    30310;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    30311;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    30312;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    30313;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    30314;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_BRANCHID =
    30315;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RETAIN =
    30316;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    30317;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    30318;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    30319;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    30320;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    30321;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    30322;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    30323;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    30324;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    30325;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY =
    30326;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    30327;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    30328;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    30329;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT =
    30330;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    30331;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    30332;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_DISABLE =
    30333;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ENABLE =
    30334;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    30335;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    30336;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    30337;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    30338;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    30339;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    30340;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    30341;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    30342;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    30343;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    30344;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    30345;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    30346;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    30347;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    30348;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    30349;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    30350;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    30351;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    30352;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    30353;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    30354;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    30355;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    30356;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM =
    30357;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    30358;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    30359;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    30360;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    30361;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    30362;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    30363;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    30364;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    30365;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    30366;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    30367;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    30368;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    30369;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    30370;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    30371;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    30372;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30373;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    30374;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30375;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    30376;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    30377;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    30378;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    30379;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    30380;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    30381;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30382;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    30383;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30384;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    30385;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    30386;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    30387;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    30388;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    30389;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    30390;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30391;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30392;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    30393;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    30394;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    30395;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30396;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30397;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30398;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    30399;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30400;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    30401;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    30402;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30403;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    30404;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30405;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    30406;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    30407;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30408;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    30409;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    30410;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30411;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    30412;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    30413;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    30414;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    30415;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    30416;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    30417;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    30418;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    30419;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    30420;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    30421;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    30422;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30423;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    30424;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30425;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    30426;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    30427;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_ONDELAY =
    30428;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    30429;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    30430;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    30431;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    30432;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    30433;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    30434;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    30435;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30436;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    30437;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30438;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    30439;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    30440;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    30441;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    30442;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SILENCE =
    30443;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    30444;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    30445;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    30446;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    30447;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    30448;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    30449;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    30450;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    30451;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30452;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    30453;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    30454;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    30455;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET =
    30456;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2 =
    30457;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    30458;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    30459;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30460;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    30461;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    30462;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    30463;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    30464;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    30465;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE =
    30466;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    30467;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    30468;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    30469;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    30470;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TIME =
    30471;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    30472;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    30473;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    30474;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    30475;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    30476;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    30477;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    30478;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    30479;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    30480;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    30481;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    30482;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    30483;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    30484;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    30485;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    30486;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    30487;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    30488;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    30489;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    30490;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    30491;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    30492;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    30493;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    30494;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    30495;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    30496;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    30497;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    30498;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    30499;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    30500;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    30501;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    30502;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    30503;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    30504;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    30505;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    30506;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    30507;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    30508;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    30509;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    30510;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    30511;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    30512;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    30513;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    30514;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    30515;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    30516;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    30517;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    30518;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    30519;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    30520;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    30521;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    30522;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    30523;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    30524;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    30525;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    30526;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    30527;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    30528;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    30529;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    30530;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    30531;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    30532;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    30533;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    30534;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    30535;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    30536;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    30537;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    30538;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30539;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    30540;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30541;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    30542;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    30543;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    30544;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    30545;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    30546;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    30547;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30548;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    30549;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30550;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    30551;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    30552;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    30553;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    30554;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    30555;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    30556;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30557;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30558;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    30559;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    30560;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    30561;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30562;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30563;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30564;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    30565;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30566;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    30567;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    30568;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30569;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    30570;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30571;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    30572;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    30573;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30574;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    30575;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    30576;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30577;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    30578;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    30579;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    30580;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    30581;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    30582;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    30583;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    30584;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    30585;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    30586;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    30587;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    30588;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30589;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    30590;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30591;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    30592;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    30593;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    30594;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    30595;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    30596;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    30597;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    30598;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    30599;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    30600;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    30601;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30602;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    30603;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30604;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    30605;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    30606;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    30607;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    30608;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    30609;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    30610;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    30611;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    30612;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    30613;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    30614;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    30615;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    30616;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    30617;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30618;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    30619;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    30620;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    30621;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET =
    30622;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    30623;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    30624;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    30625;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30626;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    30627;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    30628;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    30629;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    30630;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP = 30631;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    30632;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    30633;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    30634;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    30635;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    30636;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    30637;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MAXBYTESTRINGLENGTH =
    30638;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTMODIFIEDTIME =
    30639;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    30640;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    30641;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    30642;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    30643;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    30644;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    30645;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    30646;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    30647;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    30648;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    30649;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    30650;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    30651;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    30652;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    30653;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    30654;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    30655;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    30656;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_DEFAULTVALIDATIONOPTIONS =
    30657;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    30658;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    30659;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    30660;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    30661;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    30662;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    30663;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    30664;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    30665;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    30666;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    30667;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    30668;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    30670;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    30671;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED =
    30672;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTID =
    30673;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EVENTTYPE =
    30674;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENODE =
    30675;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SOURCENAME =
    30676;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_TIME =
    30677;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RECEIVETIME =
    30678;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LOCALTIME =
    30679;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MESSAGE =
    30680;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SEVERITY =
    30681;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSID =
    30682;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONCLASSNAME =
    30683;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSID =
    30684;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONSUBCLASSNAME =
    30685;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONDITIONNAME =
    30686;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_BRANCHID =
    30687;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RETAIN =
    30688;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE =
    30689;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_ID =
    30690;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NAME =
    30691;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_NUMBER =
    30692;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    30693;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRANSITIONTIME =
    30694;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    30695;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_TRUESTATE =
    30696;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLEDSTATE_FALSESTATE =
    30697;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY =
    30698;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_QUALITY_SOURCETIMESTAMP =
    30699;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY =
    30700;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LASTSEVERITY_SOURCETIMESTAMP =
    30701;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT =
    30702;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_COMMENT_SOURCETIMESTAMP =
    30703;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CLIENTUSERID =
    30704;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_DISABLE =
    30705;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ENABLE =
    30706;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT =
    30707;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ADDCOMMENT_INPUTARGUMENTS =
    30708;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE =
    30709;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_ID =
    30710;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NAME =
    30711;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_NUMBER =
    30712;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    30713;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRANSITIONTIME =
    30714;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    30715;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_TRUESTATE =
    30716;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKEDSTATE_FALSESTATE =
    30717;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE =
    30718;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_ID =
    30719;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NAME =
    30720;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_NUMBER =
    30721;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    30722;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRANSITIONTIME =
    30723;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    30724;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_TRUESTATE =
    30725;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRMEDSTATE_FALSESTATE =
    30726;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE =
    30727;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACKNOWLEDGE_INPUTARGUMENTS =
    30728;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM =
    30729;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CONFIRM_INPUTARGUMENTS =
    30730;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE =
    30731;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_ID =
    30732;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NAME =
    30733;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_NUMBER =
    30734;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    30735;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRANSITIONTIME =
    30736;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    30737;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_TRUESTATE =
    30738;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ACTIVESTATE_FALSESTATE =
    30739;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_INPUTNODE =
    30740;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE =
    30741;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_ID =
    30742;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NAME =
    30743;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_NUMBER =
    30744;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30745;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRANSITIONTIME =
    30746;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30747;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_TRUESTATE =
    30748;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDSTATE_FALSESTATE =
    30749;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE =
    30750;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_ID =
    30751;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NAME =
    30752;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_NUMBER =
    30753;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30754;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRANSITIONTIME =
    30755;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30756;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_TRUESTATE =
    30757;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OUTOFSERVICESTATE_FALSESTATE =
    30758;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE =
    30759;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE =
    30760;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_ID =
    30761;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NAME =
    30762;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30763;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30764;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION =
    30765;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_ID =
    30766;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NAME =
    30767;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30768;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30769;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30770;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLESTATES =
    30771;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30772;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVETIME =
    30773;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE =
    30774;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30775;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2 =
    30776;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30777;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE =
    30778;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2 =
    30779;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30780;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE =
    30781;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2 =
    30782;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30783;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESSEDORSHELVED =
    30784;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_MAXTIMESHELVED =
    30785;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLEENABLED =
    30786;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND =
    30787;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_LISTID =
    30788;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_AGENCYID =
    30789;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_AUDIBLESOUND_VERSIONID =
    30790;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE =
    30791;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_ID =
    30792;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NAME =
    30793;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_NUMBER =
    30794;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30795;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRANSITIONTIME =
    30796;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30797;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_TRUESTATE =
    30798;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCESTATE_FALSESTATE =
    30799;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_ONDELAY =
    30800;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_OFFDELAY =
    30801;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUPFLAG =
    30802;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_FIRSTINGROUP =
    30803;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE =
    30804;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_ID =
    30805;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NAME =
    30806;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_NUMBER =
    30807;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30808;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRANSITIONTIME =
    30809;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30810;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_TRUESTATE =
    30811;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_LATCHEDSTATE_FALSESTATE =
    30812;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMTIME =
    30813;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REALARMREPEATCOUNT =
    30814;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SILENCE =
    30815;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS =
    30816;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2 =
    30817;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_SUPPRESS2_INPUTARGUMENTS =
    30818;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS =
    30819;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2 =
    30820;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_UNSUPPRESS2_INPUTARGUMENTS =
    30821;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE =
    30822;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2 =
    30823;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30824;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE =
    30825;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2 =
    30826;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_PLACEINSERVICE2_INPUTARGUMENTS =
    30827;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET =
    30828;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2 =
    30829;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_RESET2_INPUTARGUMENTS =
    30830;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS =
    30831;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30832;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_NORMALSTATE =
    30833;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONDATE =
    30834;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_EXPIRATIONLIMIT =
    30835;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATETYPE =
    30836;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATEEXPIRED_CERTIFICATE =
    30837;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE =
    30838;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTID =
    30839;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_EVENTTYPE =
    30840;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENODE =
    30841;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SOURCENAME =
    30842;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TIME =
    30843;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RECEIVETIME =
    30844;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LOCALTIME =
    30845;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MESSAGE =
    30846;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SEVERITY =
    30847;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSID =
    30848;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONCLASSNAME =
    30849;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSID =
    30850;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONSUBCLASSNAME =
    30851;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONDITIONNAME =
    30852;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_BRANCHID =
    30853;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RETAIN =
    30854;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE =
    30855;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_ID =
    30856;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NAME =
    30857;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_NUMBER =
    30858;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    30859;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRANSITIONTIME =
    30860;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    30861;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_TRUESTATE =
    30862;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLEDSTATE_FALSESTATE =
    30863;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY =
    30864;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_QUALITY_SOURCETIMESTAMP =
    30865;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY =
    30866;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTSEVERITY_SOURCETIMESTAMP =
    30867;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT =
    30868;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_COMMENT_SOURCETIMESTAMP =
    30869;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CLIENTUSERID =
    30870;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_DISABLE =
    30871;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ENABLE =
    30872;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT =
    30873;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ADDCOMMENT_INPUTARGUMENTS =
    30874;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE =
    30875;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_ID =
    30876;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NAME =
    30877;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_NUMBER =
    30878;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    30879;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRANSITIONTIME =
    30880;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    30881;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_TRUESTATE =
    30882;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKEDSTATE_FALSESTATE =
    30883;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE =
    30884;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_ID =
    30885;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NAME =
    30886;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_NUMBER =
    30887;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    30888;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRANSITIONTIME =
    30889;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    30890;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_TRUESTATE =
    30891;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRMEDSTATE_FALSESTATE =
    30892;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE =
    30893;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACKNOWLEDGE_INPUTARGUMENTS =
    30894;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM =
    30895;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_CONFIRM_INPUTARGUMENTS =
    30896;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE =
    30897;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_ID =
    30898;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NAME =
    30899;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_NUMBER =
    30900;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    30901;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRANSITIONTIME =
    30902;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    30903;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_TRUESTATE =
    30904;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ACTIVESTATE_FALSESTATE =
    30905;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_INPUTNODE =
    30906;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE =
    30907;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_ID =
    30908;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NAME =
    30909;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_NUMBER =
    30910;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    30911;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRANSITIONTIME =
    30912;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    30913;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_TRUESTATE =
    30914;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDSTATE_FALSESTATE =
    30915;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE =
    30916;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_ID =
    30917;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NAME =
    30918;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_NUMBER =
    30919;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    30920;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRANSITIONTIME =
    30921;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    30922;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_TRUESTATE =
    30923;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OUTOFSERVICESTATE_FALSESTATE =
    30924;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE =
    30925;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE =
    30926;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_ID =
    30927;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NAME =
    30928;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    30929;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    30930;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION =
    30931;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_ID =
    30932;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NAME =
    30933;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    30934;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    30935;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    30936;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLESTATES =
    30937;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    30938;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVETIME =
    30939;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE =
    30940;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    30941;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2 =
    30942;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    30943;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE =
    30944;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2 =
    30945;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    30946;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE =
    30947;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2 =
    30948;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    30949;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESSEDORSHELVED =
    30950;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_MAXTIMESHELVED =
    30951;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLEENABLED =
    30952;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND =
    30953;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_LISTID =
    30954;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_AGENCYID =
    30955;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_AUDIBLESOUND_VERSIONID =
    30956;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE =
    30957;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_ID =
    30958;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NAME =
    30959;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_NUMBER =
    30960;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    30961;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRANSITIONTIME =
    30962;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    30963;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_TRUESTATE =
    30964;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCESTATE_FALSESTATE =
    30965;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_ONDELAY =
    30966;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_OFFDELAY =
    30967;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUPFLAG =
    30968;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_FIRSTINGROUP =
    30969;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE =
    30970;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_ID =
    30971;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NAME =
    30972;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_NUMBER =
    30973;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    30974;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRANSITIONTIME =
    30975;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    30976;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_TRUESTATE =
    30977;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LATCHEDSTATE_FALSESTATE =
    30978;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMTIME =
    30979;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REALARMREPEATCOUNT =
    30980;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SILENCE =
    30981;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS =
    30982;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2 =
    30983;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_SUPPRESS2_INPUTARGUMENTS =
    30984;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS =
    30985;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2 =
    30986;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UNSUPPRESS2_INPUTARGUMENTS =
    30987;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE =
    30988;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2 =
    30989;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    30990;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE =
    30991;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2 =
    30992;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_PLACEINSERVICE2_INPUTARGUMENTS =
    30993;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET =
    30994;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2 =
    30995;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_RESET2_INPUTARGUMENTS =
    30996;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS =
    30997;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    30998;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_NORMALSTATE =
    30999;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_TRUSTLISTID =
    31000;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_LASTUPDATETIME =
    31001;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLISTOUTOFDATE_UPDATEFREQUENCY =
    31002;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_ENABLED = 31375;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_APPLICATIONURI = 31376;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_PRODUCTURI = 31377;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_APPLICATIONTYPE = 31378;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_SERVERCAPABILITIES = 31379;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_SUPPORTEDPRIVATEKEYFORMATS = 31380;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_MAXTRUSTLISTSIZE = 31381;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_MULTICASTDNSENABLED = 31382;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_HASSECUREELEMENT = 31383;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE = 31384;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE_INPUTARGUMENTS = 31385;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_UPDATECERTIFICATE_OUTPUTARGUMENTS = 31386;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_APPLYCHANGES = 31387;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CANCELCHANGES = 31388;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST = 31389;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST_INPUTARGUMENTS = 31390;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CREATESIGNINGREQUEST_OUTPUTARGUMENTS = 31391;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_GETREJECTEDLIST = 31392;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_GETREJECTEDLIST_OUTPUTARGUMENTS = 31393;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_RESETTOSERVERDEFAULTS = 31394;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXMONITOREDITEMSQUEUESIZE = 31769;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXMONITOREDITEMSQUEUESIZE = 31770;

const int UA_NS0ID_BASEEVENTTYPE_CONDITIONCLASSID = 31771;

const int UA_NS0ID_BASEEVENTTYPE_CONDITIONCLASSNAME = 31772;

const int UA_NS0ID_BASEEVENTTYPE_CONDITIONSUBCLASSID = 31773;

const int UA_NS0ID_BASEEVENTTYPE_CONDITIONSUBCLASSNAME = 31774;

const int UA_NS0ID_AUDITEVENTTYPE_CONDITIONCLASSID = 31775;

const int UA_NS0ID_AUDITEVENTTYPE_CONDITIONCLASSNAME = 31776;

const int UA_NS0ID_AUDITEVENTTYPE_CONDITIONSUBCLASSID = 31777;

const int UA_NS0ID_AUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 31778;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CONDITIONCLASSID = 31779;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CONDITIONCLASSNAME = 31780;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CONDITIONSUBCLASSID = 31781;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CONDITIONSUBCLASSNAME = 31782;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CONDITIONCLASSID = 31783;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CONDITIONCLASSNAME = 31784;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CONDITIONSUBCLASSID = 31785;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CONDITIONSUBCLASSNAME = 31786;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CONDITIONCLASSID = 31787;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CONDITIONCLASSNAME = 31788;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CONDITIONSUBCLASSID = 31789;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CONDITIONSUBCLASSNAME = 31790;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CONDITIONCLASSID = 31791;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CONDITIONCLASSNAME = 31792;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CONDITIONSUBCLASSID = 31793;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31794;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CONDITIONCLASSID = 31795;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CONDITIONCLASSNAME = 31796;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CONDITIONSUBCLASSID = 31797;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31798;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CONDITIONCLASSID = 31799;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CONDITIONCLASSNAME = 31800;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CONDITIONSUBCLASSID = 31801;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CONDITIONSUBCLASSNAME = 31802;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CONDITIONCLASSID = 31803;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CONDITIONCLASSNAME = 31804;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CONDITIONSUBCLASSID = 31805;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31806;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CONDITIONCLASSID = 31807;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CONDITIONCLASSNAME = 31808;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CONDITIONSUBCLASSID = 31809;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CONDITIONSUBCLASSNAME = 31810;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CONDITIONCLASSID = 31811;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CONDITIONCLASSNAME = 31812;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CONDITIONSUBCLASSID = 31813;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CONDITIONSUBCLASSNAME = 31814;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CONDITIONCLASSID = 31815;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CONDITIONCLASSNAME = 31816;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CONDITIONSUBCLASSID = 31817;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CONDITIONSUBCLASSNAME = 31818;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CONDITIONCLASSID = 31819;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CONDITIONCLASSNAME = 31820;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CONDITIONSUBCLASSID = 31821;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CONDITIONSUBCLASSNAME = 31822;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CONDITIONCLASSID = 31823;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CONDITIONCLASSNAME = 31824;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CONDITIONSUBCLASSID = 31825;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CONDITIONSUBCLASSNAME = 31826;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CONDITIONCLASSID = 31827;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CONDITIONCLASSNAME = 31828;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CONDITIONSUBCLASSID = 31829;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CONDITIONSUBCLASSNAME = 31830;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CONDITIONCLASSID = 31831;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CONDITIONCLASSNAME = 31832;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CONDITIONSUBCLASSID = 31833;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CONDITIONSUBCLASSNAME = 31834;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CONDITIONCLASSID = 31835;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CONDITIONCLASSNAME = 31836;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CONDITIONSUBCLASSID = 31837;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CONDITIONSUBCLASSNAME = 31838;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CONDITIONCLASSID = 31839;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CONDITIONCLASSNAME = 31840;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CONDITIONSUBCLASSID = 31841;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CONDITIONSUBCLASSNAME = 31842;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CONDITIONCLASSID = 31843;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CONDITIONCLASSNAME = 31844;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CONDITIONSUBCLASSID = 31845;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CONDITIONSUBCLASSNAME = 31846;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CONDITIONCLASSID = 31847;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CONDITIONCLASSNAME = 31848;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CONDITIONSUBCLASSID = 31849;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CONDITIONSUBCLASSNAME = 31850;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CONDITIONCLASSID = 31851;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CONDITIONCLASSNAME = 31852;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CONDITIONSUBCLASSID = 31853;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CONDITIONSUBCLASSNAME = 31854;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CONDITIONCLASSID = 31855;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CONDITIONCLASSNAME = 31856;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CONDITIONSUBCLASSID = 31857;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CONDITIONSUBCLASSNAME = 31858;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CONDITIONCLASSID = 31859;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CONDITIONCLASSNAME = 31860;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 31861;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 31862;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CONDITIONCLASSID = 31863;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CONDITIONCLASSNAME = 31864;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 31865;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 31866;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CONDITIONCLASSID = 31867;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CONDITIONCLASSNAME = 31868;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 31869;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 31870;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CONDITIONCLASSID = 31871;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CONDITIONCLASSNAME = 31872;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CONDITIONSUBCLASSID = 31873;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CONDITIONSUBCLASSNAME = 31874;

const int UA_NS0ID_SYSTEMEVENTTYPE_CONDITIONCLASSID = 31875;

const int UA_NS0ID_SYSTEMEVENTTYPE_CONDITIONCLASSNAME = 31876;

const int UA_NS0ID_SYSTEMEVENTTYPE_CONDITIONSUBCLASSID = 31877;

const int UA_NS0ID_SYSTEMEVENTTYPE_CONDITIONSUBCLASSNAME = 31878;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_CONDITIONCLASSID = 31879;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_CONDITIONCLASSNAME = 31880;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_CONDITIONSUBCLASSID = 31881;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_CONDITIONSUBCLASSNAME = 31882;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_CONDITIONCLASSID = 31883;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_CONDITIONCLASSNAME = 31884;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_CONDITIONSUBCLASSID = 31885;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_CONDITIONSUBCLASSNAME = 31886;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_CONDITIONCLASSID = 31887;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_CONDITIONCLASSNAME = 31888;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_CONDITIONSUBCLASSID = 31889;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_CONDITIONSUBCLASSNAME = 31890;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CONDITIONCLASSID = 31891;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CONDITIONCLASSNAME = 31892;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CONDITIONSUBCLASSID = 31893;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CONDITIONSUBCLASSNAME = 31894;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CONDITIONCLASSID = 31895;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CONDITIONCLASSNAME = 31896;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CONDITIONSUBCLASSID = 31897;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CONDITIONSUBCLASSNAME = 31898;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_CONDITIONCLASSID = 31899;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_CONDITIONCLASSNAME = 31900;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_CONDITIONSUBCLASSID = 31901;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_CONDITIONSUBCLASSNAME = 31902;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONDITIONCLASSID = 31903;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONDITIONCLASSNAME = 31904;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONDITIONSUBCLASSID = 31905;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONDITIONSUBCLASSNAME = 31906;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CONDITIONCLASSID = 31907;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CONDITIONCLASSNAME = 31908;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CONDITIONSUBCLASSID = 31909;

const int UA_NS0ID_AUDITCLIENTEVENTTYPE_CONDITIONSUBCLASSNAME = 31910;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CONDITIONCLASSID = 31911;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CONDITIONCLASSNAME = 31912;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CONDITIONSUBCLASSID = 31913;

const int UA_NS0ID_AUDITCLIENTUPDATEMETHODRESULTEVENTTYPE_CONDITIONSUBCLASSNAME = 31914;

const int UA_NS0ID_LOCATIONS = 31915;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXMONITOREDITEMSQUEUESIZE = 31916;

const int UA_NS0ID_HANDLE = 31917;

const int UA_NS0ID_TRIMMEDSTRING = 31918;

const int UA_NS0ID_TRANSITIONEVENTTYPE_CONDITIONCLASSID = 31919;

const int UA_NS0ID_TRANSITIONEVENTTYPE_CONDITIONCLASSNAME = 31920;

const int UA_NS0ID_TRANSITIONEVENTTYPE_CONDITIONSUBCLASSID = 31921;

const int UA_NS0ID_TRANSITIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31922;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CONDITIONCLASSID = 31923;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CONDITIONCLASSNAME = 31924;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CONDITIONSUBCLASSID = 31925;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CONDITIONSUBCLASSNAME = 31926;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CONDITIONCLASSID = 31927;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 31928;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 31929;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 31930;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CONDITIONCLASSID = 31931;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CONDITIONCLASSNAME = 31932;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CONDITIONSUBCLASSID = 31933;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31934;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CONDITIONCLASSID = 31935;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CONDITIONCLASSNAME = 31936;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CONDITIONSUBCLASSID = 31937;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CONDITIONSUBCLASSNAME = 31938;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONCLASSID = 31939;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONCLASSNAME = 31940;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONSUBCLASSID = 31941;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONSUBCLASSNAME = 31942;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CONDITIONCLASSID = 31943;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CONDITIONCLASSNAME = 31944;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CONDITIONSUBCLASSID = 31945;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CONDITIONSUBCLASSNAME = 31946;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONCLASSID = 31947;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONCLASSNAME = 31948;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONSUBCLASSID = 31949;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONSUBCLASSNAME = 31950;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONCLASSID = 31951;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONCLASSNAME = 31952;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONSUBCLASSID = 31953;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONSUBCLASSNAME = 31954;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CONDITIONCLASSID = 31955;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CONDITIONCLASSNAME = 31956;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CONDITIONSUBCLASSID = 31957;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CONDITIONSUBCLASSNAME = 31958;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CONDITIONCLASSID = 31959;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CONDITIONCLASSNAME = 31960;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CONDITIONSUBCLASSID = 31961;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31962;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CONDITIONCLASSID = 31963;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CONDITIONCLASSNAME = 31964;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CONDITIONSUBCLASSID = 31965;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CONDITIONSUBCLASSNAME = 31966;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CONDITIONCLASSID = 31967;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CONDITIONCLASSNAME = 31968;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CONDITIONSUBCLASSID = 31969;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CONDITIONSUBCLASSNAME = 31970;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CONDITIONCLASSID = 31971;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CONDITIONCLASSNAME = 31972;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CONDITIONSUBCLASSID = 31973;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CONDITIONSUBCLASSNAME = 31974;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_CONDITIONCLASSID = 31975;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_CONDITIONCLASSNAME = 31976;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_CONDITIONSUBCLASSID = 31977;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_CONDITIONSUBCLASSNAME = 31978;

const int UA_NS0ID_REFRESHENDEVENTTYPE_CONDITIONCLASSID = 31979;

const int UA_NS0ID_REFRESHENDEVENTTYPE_CONDITIONCLASSNAME = 31980;

const int UA_NS0ID_REFRESHENDEVENTTYPE_CONDITIONSUBCLASSID = 31981;

const int UA_NS0ID_REFRESHENDEVENTTYPE_CONDITIONSUBCLASSNAME = 31982;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_CONDITIONCLASSID = 31983;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_CONDITIONCLASSNAME = 31984;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_CONDITIONSUBCLASSID = 31985;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_CONDITIONSUBCLASSNAME = 31986;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_CONDITIONCLASSID = 31987;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_CONDITIONCLASSNAME = 31988;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_CONDITIONSUBCLASSID = 31989;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31990;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CONDITIONCLASSID = 31991;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CONDITIONCLASSNAME = 31992;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CONDITIONSUBCLASSID = 31993;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CONDITIONSUBCLASSNAME = 31994;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CONDITIONCLASSID = 31995;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CONDITIONCLASSNAME = 31996;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CONDITIONSUBCLASSID = 31997;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 31998;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CONDITIONCLASSID = 31999;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CONDITIONCLASSNAME = 32000;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 32001;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 32002;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CONDITIONCLASSID = 32003;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CONDITIONCLASSNAME = 32004;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 32005;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 32006;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CONDITIONCLASSID = 32007;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CONDITIONCLASSNAME = 32008;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CONDITIONSUBCLASSID = 32009;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CONDITIONSUBCLASSNAME = 32010;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CONDITIONCLASSID = 32011;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CONDITIONCLASSNAME = 32012;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CONDITIONSUBCLASSID = 32013;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CONDITIONSUBCLASSNAME = 32014;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CONDITIONCLASSID = 32015;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CONDITIONCLASSNAME = 32016;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CONDITIONSUBCLASSID = 32017;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CONDITIONSUBCLASSNAME = 32018;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CONDITIONCLASSID = 32019;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CONDITIONCLASSNAME = 32020;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CONDITIONSUBCLASSID = 32021;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CONDITIONSUBCLASSNAME = 32022;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CONDITIONCLASSID = 32023;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CONDITIONCLASSNAME = 32024;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CONDITIONSUBCLASSID = 32025;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CONDITIONSUBCLASSNAME = 32026;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CONDITIONCLASSID = 32027;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32028;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32029;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32030;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CONDITIONCLASSID = 32031;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32032;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32033;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32034;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CONDITIONCLASSID = 32035;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CONDITIONCLASSNAME = 32036;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32037;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32038;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CONDITIONCLASSID = 32039;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32040;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32041;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32042;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CONDITIONCLASSID = 32043;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32044;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32045;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32046;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONDITIONCLASSID = 32047;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONDITIONCLASSNAME = 32048;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONDITIONSUBCLASSID = 32049;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONDITIONSUBCLASSNAME = 32050;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONDITIONCLASSID = 32051;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONDITIONCLASSNAME = 32052;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONDITIONSUBCLASSID = 32053;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONDITIONSUBCLASSNAME = 32054;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONDITIONCLASSID = 32055;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONDITIONCLASSNAME = 32056;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONDITIONSUBCLASSID = 32057;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONDITIONSUBCLASSNAME = 32058;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPMEMBER = 32059;

const int UA_NS0ID_CONDITIONTYPE_SUPPORTSFILTEREDRETAIN = 32060;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SUPPORTSFILTEREDRETAIN = 32061;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SUPPORTSFILTEREDRETAIN = 32062;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPORTSFILTEREDRETAIN = 32063;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE = 32064;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER = 32065;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTID = 32066;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTTYPE = 32067;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENODE = 32068;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENAME = 32069;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_TIME = 32070;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RECEIVETIME = 32071;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LOCALTIME = 32072;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MESSAGE = 32073;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SEVERITY = 32074;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSID = 32075;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSNAME = 32076;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSID = 32077;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSNAME = 32078;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONNAME = 32079;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_BRANCHID = 32080;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RETAIN = 32081;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE = 32082;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_ID = 32083;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NAME = 32084;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NUMBER = 32085;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    32086;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRANSITIONTIME = 32087;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    32088;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRUESTATE = 32089;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_FALSESTATE = 32090;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY = 32091;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY_SOURCETIMESTAMP = 32092;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY = 32093;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY_SOURCETIMESTAMP = 32094;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT = 32095;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT_SOURCETIMESTAMP = 32096;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CLIENTUSERID = 32097;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_DISABLE = 32098;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLE = 32099;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT = 32100;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT_INPUTARGUMENTS = 32101;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE = 32102;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_ID = 32103;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NAME = 32104;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NUMBER = 32105;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 32106;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRANSITIONTIME = 32107;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    32108;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRUESTATE = 32109;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_FALSESTATE = 32110;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE = 32111;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_ID = 32112;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NAME = 32113;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NUMBER = 32114;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    32115;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRANSITIONTIME = 32116;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    32117;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRUESTATE = 32118;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_FALSESTATE = 32119;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE = 32120;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE_INPUTARGUMENTS = 32121;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM = 32122;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM_INPUTARGUMENTS = 32123;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE = 32124;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_ID = 32125;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NAME = 32126;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NUMBER = 32127;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    32128;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRANSITIONTIME = 32129;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    32130;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRUESTATE = 32131;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_FALSESTATE = 32132;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_INPUTNODE = 32133;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE = 32134;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_ID = 32135;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NAME = 32136;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NUMBER = 32137;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    32138;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRANSITIONTIME = 32139;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    32140;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRUESTATE = 32141;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_FALSESTATE = 32142;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE = 32143;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_ID = 32144;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NAME = 32145;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NUMBER = 32146;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    32147;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRANSITIONTIME =
    32148;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    32149;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRUESTATE = 32150;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_FALSESTATE = 32151;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE = 32152;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE = 32153;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_ID = 32154;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NAME = 32155;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    32156;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    32157;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION = 32158;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_ID = 32159;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NAME =
    32160;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    32161;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    32162;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    32163;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLESTATES = 32164;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLETRANSITIONS =
    32165;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVETIME = 32166;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE = 32167;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    32168;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE2 = 32169;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE2_INPUTARGUMENTS =
    32170;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE = 32171;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE2 = 32172;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE2_INPUTARGUMENTS =
    32173;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE = 32174;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE2 = 32175;

const int
    UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE2_INPUTARGUMENTS =
    32176;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDORSHELVED = 32177;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MAXTIMESHELVED = 32178;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLEENABLED = 32179;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND = 32180;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_LISTID = 32181;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_AGENCYID = 32182;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_VERSIONID = 32183;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE = 32184;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_ID = 32185;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NAME = 32186;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NUMBER = 32187;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    32188;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRANSITIONTIME = 32189;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    32190;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRUESTATE = 32191;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_FALSESTATE = 32192;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ONDELAY = 32193;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OFFDELAY = 32194;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUPFLAG = 32195;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUP = 32196;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE = 32197;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_ID = 32198;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NAME = 32199;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NUMBER = 32200;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    32201;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRANSITIONTIME = 32202;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    32203;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRUESTATE = 32204;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_FALSESTATE = 32205;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMTIME = 32206;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMREPEATCOUNT = 32207;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCE = 32208;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS = 32209;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS2 = 32210;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS2_INPUTARGUMENTS = 32211;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS = 32212;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS2 = 32213;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS2_INPUTARGUMENTS = 32214;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE = 32215;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE2 = 32216;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE2_INPUTARGUMENTS =
    32217;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE = 32218;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE2 = 32219;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE2_INPUTARGUMENTS = 32220;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET = 32221;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET2 = 32222;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET2_INPUTARGUMENTS = 32223;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_GETGROUPMEMBERSHIPS = 32224;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_GETGROUPMEMBERSHIPS_OUTPUTARGUMENTS =
    32225;

const int UA_NS0ID_ALARMSUPPRESSIONGROUPTYPE_DIGITALVARIABLE_PLACEHOLDER = 32226;

const int UA_NS0ID_LIMITALARMTYPE_SUPPORTSFILTEREDRETAIN = 32227;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPORTSFILTEREDRETAIN = 32228;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPORTSFILTEREDRETAIN = 32229;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPORTSFILTEREDRETAIN = 32230;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPORTSFILTEREDRETAIN = 32231;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPORTSFILTEREDRETAIN = 32232;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPORTSFILTEREDRETAIN = 32233;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPORTSFILTEREDRETAIN = 32234;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPORTSFILTEREDRETAIN = 32235;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPORTSFILTEREDRETAIN = 32236;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPORTSFILTEREDRETAIN = 32237;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPORTSFILTEREDRETAIN = 32238;

const int UA_NS0ID_TRIPALARMTYPE_SUPPORTSFILTEREDRETAIN = 32239;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPORTSFILTEREDRETAIN = 32240;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPORTSFILTEREDRETAIN = 32241;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPORTSFILTEREDRETAIN = 32242;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPORTSFILTEREDRETAIN = 32243;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE = 32244;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_HIGHESTACTIVESEVERITY = 32245;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_HIGHESTUNACKSEVERITY = 32246;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_ACTIVECOUNT = 32247;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_UNACKNOWLEDGEDCOUNT = 32248;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_UNCONFIRMEDCOUNT = 32249;

const int UA_NS0ID_ALARMSTATEVARIABLETYPE_FILTER = 32250;

const int UA_NS0ID_ALARMMASK = 32251;

const int UA_NS0ID_ALARMMASK_OPTIONSETVALUES = 32252;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPORTSFILTEREDRETAIN = 32253;

const int UA_NS0ID_TRUSTLISTTYPE_ACTIVITYTIMEOUT = 32254;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ACTIVITYTIMEOUT = 32255;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32256;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32257;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32258;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ACTIVITYTIMEOUT = 32259;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE = 32260;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_EVENTID = 32261;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_EVENTTYPE = 32262;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_SOURCENODE = 32263;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_SOURCENAME = 32264;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_TIME = 32265;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_RECEIVETIME = 32266;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_LOCALTIME = 32267;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_MESSAGE = 32268;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_SEVERITY = 32269;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONCLASSID = 32270;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32271;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32272;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32273;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 32274;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_STATUS = 32275;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_SERVERID = 32276;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 32277;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_CLIENTUSERID = 32278;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_METHODID = 32279;

const int UA_NS0ID_TRUSTLISTUPDATEREQUESTEDAUDITEVENTTYPE_INPUTARGUMENTS = 32280;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_TRUSTLISTID = 32281;

const int UA_NS0ID_GETCERTIFICATESMETHODTYPE = 32282;

const int UA_NS0ID_GETCERTIFICATESMETHODTYPE_INPUTARGUMENTS = 32283;

const int UA_NS0ID_GETCERTIFICATESMETHODTYPE_OUTPUTARGUMENTS = 32284;

const int UA_NS0ID_TRANSACTIONERRORTYPE = 32285;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE = 32286;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_STARTTIME = 32287;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_ENDTIME = 32288;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_RESULT = 32289;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_AFFECTEDTRUSTLISTS = 32290;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_AFFECTEDCERTIFICATEGROUPS = 32291;

const int UA_NS0ID_TRANSACTIONDIAGNOSTICSTYPE_ERRORS = 32292;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32293;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32294;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32295;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETCERTIFICATES = 32296;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETCERTIFICATES_INPUTARGUMENTS = 32297;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETCERTIFICATES_OUTPUTARGUMENTS = 32298;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS = 32299;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_STARTTIME = 32300;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_ENDTIME = 32301;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_RESULT = 32302;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_AFFECTEDTRUSTLISTS = 32303;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_AFFECTEDCERTIFICATEGROUPS = 32304;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_ERRORS = 32305;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE = 32306;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_EVENTID = 32307;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_EVENTTYPE = 32308;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_SOURCENODE = 32309;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_SOURCENAME = 32310;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_TIME = 32311;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_RECEIVETIME = 32312;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_LOCALTIME = 32313;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_MESSAGE = 32314;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_SEVERITY = 32315;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONCLASSID = 32316;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONCLASSNAME = 32317;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONSUBCLASSID = 32318;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CONDITIONSUBCLASSNAME = 32319;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 32320;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_STATUS = 32321;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_SERVERID = 32322;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 32323;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_CLIENTUSERID = 32324;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_METHODID = 32325;

const int UA_NS0ID_CERTIFICATEUPDATEREQUESTEDAUDITEVENTTYPE_INPUTARGUMENTS = 32326;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32330;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32331;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32332;

const int UA_NS0ID_SERVERCONFIGURATION_GETCERTIFICATES = 32333;

const int UA_NS0ID_SERVERCONFIGURATION_GETCERTIFICATES_INPUTARGUMENTS = 32334;

const int UA_NS0ID_SERVERCONFIGURATION_GETCERTIFICATES_OUTPUTARGUMENTS = 32335;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS = 32336;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_STARTTIME = 32337;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_ENDTIME = 32338;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_RESULT = 32339;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_AFFECTEDTRUSTLISTS = 32340;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_AFFECTEDCERTIFICATEGROUPS = 32341;

const int UA_NS0ID_SERVERCONFIGURATION_TRANSACTIONDIAGNOSTICS_ERRORS = 32342;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32343;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT = 32344;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32345;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_GETCERTIFICATES = 32346;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_GETCERTIFICATES_INPUTARGUMENTS = 32347;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_GETCERTIFICATES_OUTPUTARGUMENTS = 32348;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS = 32349;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_STARTTIME = 32350;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_ENDTIME = 32351;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_RESULT = 32352;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_AFFECTEDTRUSTLISTS = 32353;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_AFFECTEDCERTIFICATEGROUPS = 32354;

const int UA_NS0ID_APPLICATIONCONFIGURATIONTYPE_TRANSACTIONDIAGNOSTICS_ERRORS = 32355;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32356;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32357;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32358;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES = 32359;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES_INPUTARGUMENTS = 32360;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES_OUTPUTARGUMENTS = 32361;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS = 32362;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_STARTTIME = 32363;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_ENDTIME = 32364;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_RESULT = 32365;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_AFFECTEDTRUSTLISTS =
    32366;

const int
    UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_AFFECTEDCERTIFICATEGROUPS =
    32367;

const int UA_NS0ID_PROVISIONABLEDEVICETYPE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_ERRORS = 32368;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32369;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32370;

const int
    UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ACTIVITYTIMEOUT =
    32371;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES = 32372;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES_INPUTARGUMENTS = 32373;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_GETCERTIFICATES_OUTPUTARGUMENTS = 32374;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS = 32375;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_STARTTIME = 32376;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_ENDTIME = 32377;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_RESULT = 32378;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_AFFECTEDTRUSTLISTS = 32379;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_AFFECTEDCERTIFICATEGROUPS =
    32380;

const int UA_NS0ID_PROVISIONABLEDEVICE_APPLICATIONNAME_PLACEHOLDER_TRANSACTIONDIAGNOSTICS_ERRORS = 32381;

const int UA_NS0ID_TRANSACTIONERRORTYPE_ENCODING_DEFAULTBINARY = 32382;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSACTIONERRORTYPE = 32383;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSACTIONERRORTYPE_DATATYPEVERSION = 32384;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRANSACTIONERRORTYPE_DICTIONARYFRAGMENT = 32385;

const int UA_NS0ID_TRANSACTIONERRORTYPE_ENCODING_DEFAULTXML = 32386;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSACTIONERRORTYPE = 32387;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSACTIONERRORTYPE_DATATYPEVERSION = 32388;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRANSACTIONERRORTYPE_DICTIONARYFRAGMENT = 32389;

const int UA_NS0ID_TRANSACTIONERRORTYPE_ENCODING_DEFAULTJSON = 32390;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXDATASETWRITERSPERGROUP = 32391;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEDATAGRAM = 32392;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEBROKER = 32393;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPULL = 32394;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPUSH = 32395;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DEFAULTSECURITYKEYSERVICES = 32396;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONFIGURATIONPROPERTIES = 32397;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXDATASETWRITERSPERGROUP = 32398;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEDATAGRAM = 32399;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEBROKER = 32400;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPULL = 32401;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPUSH = 32402;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DEFAULTSECURITYKEYSERVICES = 32403;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONFIGURATIONPROPERTIES = 32404;

const int UA_NS0ID_DATASETCLASSES = 32405;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYKEYS = 32406;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYKEYS_INPUTARGUMENTS = 32407;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYKEYS_OUTPUTARGUMENTS = 32408;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYGROUP = 32409;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYGROUP_INPUTARGUMENTS = 32410;

const int UA_NS0ID_DATASETCLASSES_GETSECURITYGROUP_OUTPUTARGUMENTS = 32411;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS = 32412;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUP = 32413;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS = 32414;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS = 32415;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_REMOVESECURITYGROUP = 32416;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS = 32417;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUPFOLDER = 32418;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_INPUTARGUMENTS = 32419;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_ADDSECURITYGROUPFOLDER_OUTPUTARGUMENTS = 32420;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER = 32421;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_REMOVESECURITYGROUPFOLDER_INPUTARGUMENTS = 32422;

const int UA_NS0ID_DATASETCLASSES_SECURITYGROUPS_SUPPORTEDSECURITYPOLICYURIS = 32423;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS = 32424;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGET = 32425;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGET_INPUTARGUMENTS = 32426;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGET_OUTPUTARGUMENTS = 32427;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_REMOVEPUSHTARGET = 32428;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_REMOVEPUSHTARGET_INPUTARGUMENTS = 32429;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER = 32430;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_INPUTARGUMENTS = 32431;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_ADDPUSHTARGETFOLDER_OUTPUTARGUMENTS = 32432;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER = 32433;

const int UA_NS0ID_DATASETCLASSES_KEYPUSHTARGETS_REMOVEPUSHTARGETFOLDER_INPUTARGUMENTS = 32434;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER = 32435;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID = 32436;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI = 32437;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS = 32438;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS = 32439;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST = 32440;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES = 32441;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDRESS = 32442;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE = 32443;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS = 32444;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS = 32445;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST = 32446;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS = 32447;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_STATUS = 32448;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE = 32449;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE = 32450;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE = 32451;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS = 32452;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL = 32453;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION = 32454;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 32455;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 32456;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 32457;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 32458;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR = 32459;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE = 32460;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 32461;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 32462;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 32463;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET = 32464;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR = 32465;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS = 32466;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR = 32467;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 32468;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 32469;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 32470;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 32471;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 32472;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    32473;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    32474;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    32475;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    32476;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 32477;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    32478;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    32479;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    32480;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    32481;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 32482;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    32483;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    32484;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    32485;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    32486;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 32487;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 32488;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    32489;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    32490;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    32491;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 32492;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 32493;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    32494;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    32495;

const int
    UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    32496;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES = 32497;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS = 32498;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    32499;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP = 32500;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS = 32501;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS = 32502;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP = 32503;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS = 32504;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS = 32505;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP = 32506;

const int UA_NS0ID_DATASETCLASSES_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS = 32507;

const int UA_NS0ID_DATASETCLASSES_SETSECURITYKEYS = 32508;

const int UA_NS0ID_DATASETCLASSES_SETSECURITYKEYS_INPUTARGUMENTS = 32509;

const int UA_NS0ID_DATASETCLASSES_ADDCONNECTION = 32510;

const int UA_NS0ID_DATASETCLASSES_ADDCONNECTION_INPUTARGUMENTS = 32511;

const int UA_NS0ID_DATASETCLASSES_ADDCONNECTION_OUTPUTARGUMENTS = 32512;

const int UA_NS0ID_DATASETCLASSES_REMOVECONNECTION = 32513;

const int UA_NS0ID_DATASETCLASSES_REMOVECONNECTION_INPUTARGUMENTS = 32514;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS = 32515;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS = 32516;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS = 32517;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS = 32518;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS = 32519;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 32520;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 32521;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE = 32522;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS = 32523;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS = 32524;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE = 32525;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS = 32526;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS = 32527;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET = 32528;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS = 32529;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDDATASETFOLDER = 32530;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 32531;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 32532;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_REMOVEDATASETFOLDER = 32533;

const int UA_NS0ID_DATASETCLASSES_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 32534;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS = 32535;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET = 32536;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_INPUTARGUMENTS = 32537;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDSUBSCRIBEDDATASET_OUTPUTARGUMENTS = 32538;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET = 32539;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_REMOVESUBSCRIBEDDATASET_INPUTARGUMENTS = 32540;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDDATASETFOLDER = 32541;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS = 32542;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS = 32543;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER = 32544;

const int UA_NS0ID_DATASETCLASSES_SUBSCRIBEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS = 32545;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION = 32546;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_SIZE = 32547;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_WRITABLE = 32548;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_USERWRITABLE = 32549;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_OPENCOUNT = 32550;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_MIMETYPE = 32551;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_MAXBYTESTRINGLENGTH = 32552;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_LASTMODIFIEDTIME = 32553;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_OPEN = 32554;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_OPEN_INPUTARGUMENTS = 32555;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_OPEN_OUTPUTARGUMENTS = 32556;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_CLOSE = 32557;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_CLOSE_INPUTARGUMENTS = 32558;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_READ = 32559;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_READ_INPUTARGUMENTS = 32560;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_READ_OUTPUTARGUMENTS = 32561;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_WRITE = 32562;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_WRITE_INPUTARGUMENTS = 32563;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_GETPOSITION = 32564;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_GETPOSITION_INPUTARGUMENTS = 32565;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_GETPOSITION_OUTPUTARGUMENTS = 32566;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_SETPOSITION = 32567;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_SETPOSITION_INPUTARGUMENTS = 32568;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_RESERVEIDS = 32569;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_RESERVEIDS_INPUTARGUMENTS = 32570;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_RESERVEIDS_OUTPUTARGUMENTS = 32571;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_CLOSEANDUPDATE = 32572;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_CLOSEANDUPDATE_INPUTARGUMENTS = 32573;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCONFIGURATION_CLOSEANDUPDATE_OUTPUTARGUMENTS = 32574;

const int UA_NS0ID_DATASETCLASSES_STATUS = 32575;

const int UA_NS0ID_DATASETCLASSES_STATUS_STATE = 32576;

const int UA_NS0ID_DATASETCLASSES_STATUS_ENABLE = 32577;

const int UA_NS0ID_DATASETCLASSES_STATUS_DISABLE = 32578;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS = 32579;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_DIAGNOSTICSLEVEL = 32580;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALINFORMATION = 32581;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 32582;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION = 32583;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL = 32584;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE = 32585;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALERROR = 32586;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALERROR_ACTIVE = 32587;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALERROR_CLASSIFICATION = 32588;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL = 32589;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE = 32590;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_RESET = 32591;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_SUBERROR = 32592;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS = 32593;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEERROR = 32594;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE = 32595;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION = 32596;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL = 32597;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE = 32598;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD = 32599;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE = 32600;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION = 32601;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL = 32602;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE = 32603;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT = 32604;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE = 32605;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION = 32606;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL = 32607;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE = 32608;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR = 32609;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE = 32610;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION = 32611;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL = 32612;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE = 32613;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT = 32614;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE = 32615;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION = 32616;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL = 32617;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE = 32618;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD = 32619;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE = 32620;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION = 32621;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL = 32622;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE = 32623;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES = 32624;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS = 32625;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL = 32626;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS = 32627;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL = 32628;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS = 32629;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL = 32630;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS = 32631;

const int UA_NS0ID_DATASETCLASSES_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL = 32632;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES = 32633;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXPUBSUBCONNECTIONS = 32634;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXWRITERGROUPS = 32635;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXREADERGROUPS = 32636;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXDATASETWRITERS = 32637;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXDATASETREADERS = 32638;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXDATASETWRITERSPERGROUP = 32639;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEDATAGRAM = 32640;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXNETWORKMESSAGESIZEBROKER = 32641;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPULL = 32642;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_SUPPORTSECURITYKEYPUSH = 32643;

const int UA_NS0ID_DATASETCLASSES_DATASETCLASSES = 32644;

const int UA_NS0ID_DATASETCLASSES_DATASETCLASSES_DATASETNAME_PLACEHOLDER = 32645;

const int UA_NS0ID_DATASETCLASSES_SUPPORTEDTRANSPORTPROFILES = 32646;

const int UA_NS0ID_DATASETCLASSES_DEFAULTDATAGRAMPUBLISHERID = 32647;

const int UA_NS0ID_DATASETCLASSES_CONFIGURATIONVERSION = 32648;

const int UA_NS0ID_DATASETCLASSES_DEFAULTSECURITYKEYSERVICES = 32649;

const int UA_NS0ID_DATASETCLASSES_CONFIGURATIONPROPERTIES = 32650;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXDATASETWRITERSPERGROUP = 32651;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXNETWORKMESSAGESIZEDATAGRAM = 32652;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_MAXNETWORKMESSAGESIZEBROKER = 32653;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_SUPPORTSECURITYKEYPULL = 32654;

const int UA_NS0ID_PUBSUBCAPABILITIESTYPE_SUPPORTSECURITYKEYPUSH = 32655;

const int UA_NS0ID_DATASETCLASSES_PUBSUBCAPABLITIES_MAXFIELDSPERDATASET = 32656;

const int UA_NS0ID_REFERENCEDESCRIPTIONVARIABLETYPE = 32657;

const int UA_NS0ID_REFERENCEDESCRIPTIONVARIABLETYPE_REFERENCEREFINEMENT = 32658;

const int UA_NS0ID_REFERENCEDESCRIPTIONDATATYPE = 32659;

const int UA_NS0ID_REFERENCELISTENTRYDATATYPE = 32660;

const int UA_NS0ID_REFERENCEDESCRIPTIONDATATYPE_ENCODING_DEFAULTBINARY = 32661;

const int UA_NS0ID_REFERENCELISTENTRYDATATYPE_ENCODING_DEFAULTBINARY = 32662;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCEDESCRIPTIONDATATYPE = 32663;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCEDESCRIPTIONDATATYPE_DATATYPEVERSION = 32664;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCEDESCRIPTIONDATATYPE_DICTIONARYFRAGMENT = 32665;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCELISTENTRYDATATYPE = 32666;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCELISTENTRYDATATYPE_DATATYPEVERSION = 32667;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REFERENCELISTENTRYDATATYPE_DICTIONARYFRAGMENT = 32668;

const int UA_NS0ID_REFERENCEDESCRIPTIONDATATYPE_ENCODING_DEFAULTXML = 32669;

const int UA_NS0ID_REFERENCELISTENTRYDATATYPE_ENCODING_DEFAULTXML = 32670;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCEDESCRIPTIONDATATYPE = 32671;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCEDESCRIPTIONDATATYPE_DATATYPEVERSION = 32672;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCEDESCRIPTIONDATATYPE_DICTIONARYFRAGMENT = 32673;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCELISTENTRYDATATYPE = 32674;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCELISTENTRYDATATYPE_DATATYPEVERSION = 32675;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REFERENCELISTENTRYDATATYPE_DICTIONARYFRAGMENT = 32676;

const int UA_NS0ID_REFERENCEDESCRIPTIONDATATYPE_ENCODING_DEFAULTJSON = 32677;

const int UA_NS0ID_REFERENCELISTENTRYDATATYPE_ENCODING_DEFAULTJSON = 32678;

const int UA_NS0ID_HASREFERENCEDESCRIPTION = 32679;

const int UA_NS0ID_OPTIONSETLENGTH = 32750;

const int UA_ACCESSLEVELMASK_READ = 1;

const int UA_ACCESSLEVELMASK_CURRENTREAD = 1;

const int UA_ACCESSLEVELMASK_WRITE = 2;

const int UA_ACCESSLEVELMASK_CURRENTWRITE = 2;

const int UA_ACCESSLEVELMASK_HISTORYREAD = 4;

const int UA_ACCESSLEVELMASK_HISTORYWRITE = 8;

const int UA_ACCESSLEVELMASK_SEMANTICCHANGE = 16;

const int UA_ACCESSLEVELMASK_STATUSWRITE = 32;

const int UA_ACCESSLEVELMASK_TIMESTAMPWRITE = 64;

const int UA_WRITEMASK_ACCESSLEVEL = 1;

const int UA_WRITEMASK_ARRRAYDIMENSIONS = 2;

const int UA_WRITEMASK_BROWSENAME = 4;

const int UA_WRITEMASK_CONTAINSNOLOOPS = 8;

const int UA_WRITEMASK_DATATYPE = 16;

const int UA_WRITEMASK_DESCRIPTION = 32;

const int UA_WRITEMASK_DISPLAYNAME = 64;

const int UA_WRITEMASK_EVENTNOTIFIER = 128;

const int UA_WRITEMASK_EXECUTABLE = 256;

const int UA_WRITEMASK_HISTORIZING = 512;

const int UA_WRITEMASK_INVERSENAME = 1024;

const int UA_WRITEMASK_ISABSTRACT = 2048;

const int UA_WRITEMASK_MINIMUMSAMPLINGINTERVAL = 4096;

const int UA_WRITEMASK_NODECLASS = 8192;

const int UA_WRITEMASK_NODEID = 16384;

const int UA_WRITEMASK_SYMMETRIC = 32768;

const int UA_WRITEMASK_USERACCESSLEVEL = 65536;

const int UA_WRITEMASK_USEREXECUTABLE = 131072;

const int UA_WRITEMASK_USERWRITEMASK = 262144;

const int UA_WRITEMASK_VALUERANK = 524288;

const int UA_WRITEMASK_WRITEMASK = 1048576;

const int UA_WRITEMASK_VALUEFORVARIABLETYPE = 2097152;

const int UA_WRITEMASK_DATATYPEDEFINITION = 4194304;

const int UA_WRITEMASK_ROLEPERMISSIONS = 8388608;

const int UA_WRITEMASK_ACCESSRESTRICTIONS = 16777216;

const int UA_WRITEMASK_ACCESSLEVELEX = 33554432;

const int UA_VALUERANK_SCALAR_OR_ONE_DIMENSION = -3;

const int UA_VALUERANK_ANY = -2;

const int UA_VALUERANK_SCALAR = -1;

const int UA_VALUERANK_ONE_OR_MORE_DIMENSIONS = 0;

const int UA_VALUERANK_ONE_DIMENSION = 1;

const int UA_VALUERANK_TWO_DIMENSIONS = 2;

const int UA_VALUERANK_THREE_DIMENSIONS = 3;

const int UA_EVENTNOTIFIER_SUBSCRIBE_TO_EVENT = 1;

const int UA_EVENTNOTIFIER_HISTORY_READ = 4;

const int UA_EVENTNOTIFIER_HISTORY_WRITE = 8;

const int UA_TRUE = 1;

const int UA_FALSE = 0;

const int UA_SBYTE_MIN = -128;

const int UA_SBYTE_MAX = 127;

const int UA_BYTE_MIN = 0;

const int UA_BYTE_MAX = 255;

const int UA_INT16_MIN = -32768;

const int UA_INT16_MAX = 32767;

const int UA_UINT16_MIN = 0;

const int UA_UINT16_MAX = 65535;

const int UA_INT32_MIN = -2147483648;

const int UA_INT32_MAX = 2147483647;

const int UA_UINT32_MIN = 0;

const int UA_UINT32_MAX = 4294967295;

const int UA_INT64_MAX = 9223372036854775807;

const int UA_INT64_MIN = -9223372036854775808;

const int UA_UINT64_MIN = 0;

const int UA_UINT64_MAX = -1;

const double UA_FLOAT_MIN = 1.1754943508222875e-38;

const double UA_FLOAT_MAX = 3.4028234663852886e+38;

const double UA_DOUBLE_MIN = 2.2250738585072014e-308;

const double UA_DOUBLE_MAX = 1.7976931348623157e+308;

const int UA_DATETIME_USEC = 10;

const int UA_DATETIME_MSEC = 10000;

const int UA_DATETIME_SEC = 10000000;

const int UA_DATETIME_UNIX_EPOCH = 116444736000000000;

const int UA_DATATYPEKINDS = 31;

const int UA_TYPES_COUNT = 388;

const int UA_TYPES_BOOLEAN = 0;

const int UA_TYPES_SBYTE = 1;

const int UA_TYPES_BYTE = 2;

const int UA_TYPES_INT16 = 3;

const int UA_TYPES_UINT16 = 4;

const int UA_TYPES_INT32 = 5;

const int UA_TYPES_UINT32 = 6;

const int UA_TYPES_INT64 = 7;

const int UA_TYPES_UINT64 = 8;

const int UA_TYPES_FLOAT = 9;

const int UA_TYPES_DOUBLE = 10;

const int UA_TYPES_STRING = 11;

const int UA_TYPES_DATETIME = 12;

const int UA_TYPES_GUID = 13;

const int UA_TYPES_BYTESTRING = 14;

const int UA_TYPES_XMLELEMENT = 15;

const int UA_TYPES_NODEID = 16;

const int UA_TYPES_EXPANDEDNODEID = 17;

const int UA_TYPES_STATUSCODE = 18;

const int UA_TYPES_QUALIFIEDNAME = 19;

const int UA_TYPES_LOCALIZEDTEXT = 20;

const int UA_TYPES_EXTENSIONOBJECT = 21;

const int UA_TYPES_DATAVALUE = 22;

const int UA_TYPES_VARIANT = 23;

const int UA_TYPES_DIAGNOSTICINFO = 24;

const int UA_TYPES_NAMINGRULETYPE = 25;

const int UA_TYPES_ENUMERATION = 26;

const int UA_TYPES_IMAGEBMP = 27;

const int UA_TYPES_IMAGEGIF = 28;

const int UA_TYPES_IMAGEJPG = 29;

const int UA_TYPES_IMAGEPNG = 30;

const int UA_TYPES_AUDIODATATYPE = 31;

const int UA_TYPES_URISTRING = 32;

const int UA_TYPES_BITFIELDMASKDATATYPE = 33;

const int UA_TYPES_SEMANTICVERSIONSTRING = 34;

const int UA_TYPES_KEYVALUEPAIR = 35;

const int UA_TYPES_ADDITIONALPARAMETERSTYPE = 36;

const int UA_TYPES_EPHEMERALKEYTYPE = 37;

const int UA_TYPES_RATIONALNUMBER = 38;

const int UA_TYPES_THREEDVECTOR = 39;

const int UA_TYPES_THREEDCARTESIANCOORDINATES = 40;

const int UA_TYPES_THREEDORIENTATION = 41;

const int UA_TYPES_THREEDFRAME = 42;

const int UA_TYPES_OPENFILEMODE = 43;

const int UA_TYPES_IDENTITYCRITERIATYPE = 44;

const int UA_TYPES_IDENTITYMAPPINGRULETYPE = 45;

const int UA_TYPES_CURRENCYUNITTYPE = 46;

const int UA_TYPES_TRUSTLISTMASKS = 47;

const int UA_TYPES_TRUSTLISTDATATYPE = 48;

const int UA_TYPES_DECIMALDATATYPE = 49;

const int UA_TYPES_DATATYPEDESCRIPTION = 50;

const int UA_TYPES_SIMPLETYPEDESCRIPTION = 51;

const int UA_TYPES_PORTABLEQUALIFIEDNAME = 52;

const int UA_TYPES_PORTABLENODEID = 53;

const int UA_TYPES_UNSIGNEDRATIONALNUMBER = 54;

const int UA_TYPES_PUBSUBSTATE = 55;

const int UA_DATASETFIELDFLAGS_NONE = 0;

const int UA_DATASETFIELDFLAGS_PROMOTEDFIELD = 1;

const int UA_TYPES_DATASETFIELDFLAGS = 56;

const int UA_TYPES_CONFIGURATIONVERSIONDATATYPE = 57;

const int UA_TYPES_PUBLISHEDVARIABLEDATATYPE = 58;

const int UA_TYPES_PUBLISHEDDATAITEMSDATATYPE = 59;

const int UA_TYPES_PUBLISHEDDATASETCUSTOMSOURCEDATATYPE = 60;

const int UA_DATASETFIELDCONTENTMASK_NONE = 0;

const int UA_DATASETFIELDCONTENTMASK_STATUSCODE = 1;

const int UA_DATASETFIELDCONTENTMASK_SOURCETIMESTAMP = 2;

const int UA_DATASETFIELDCONTENTMASK_SERVERTIMESTAMP = 4;

const int UA_DATASETFIELDCONTENTMASK_SOURCEPICOSECONDS = 8;

const int UA_DATASETFIELDCONTENTMASK_SERVERPICOSECONDS = 16;

const int UA_DATASETFIELDCONTENTMASK_RAWDATA = 32;

const int UA_TYPES_DATASETFIELDCONTENTMASK = 61;

const int UA_TYPES_DATASETWRITERDATATYPE = 62;

const int UA_TYPES_NETWORKADDRESSDATATYPE = 63;

const int UA_TYPES_NETWORKADDRESSURLDATATYPE = 64;

const int UA_TYPES_OVERRIDEVALUEHANDLING = 65;

const int UA_TYPES_STANDALONESUBSCRIBEDDATASETREFDATATYPE = 66;

const int UA_TYPES_DATASETORDERINGTYPE = 67;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PUBLISHERID = 1;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPHEADER = 2;

const int UA_UADPNETWORKMESSAGECONTENTMASK_WRITERGROUPID = 4;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPVERSION = 8;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NETWORKMESSAGENUMBER = 16;

const int UA_UADPNETWORKMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PAYLOADHEADER = 64;

const int UA_UADPNETWORKMESSAGECONTENTMASK_TIMESTAMP = 128;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PICOSECONDS = 256;

const int UA_UADPNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 512;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PROMOTEDFIELDS = 1024;

const int UA_TYPES_UADPNETWORKMESSAGECONTENTMASK = 68;

const int UA_TYPES_UADPWRITERGROUPMESSAGEDATATYPE = 69;

const int UA_UADPDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPDATASETMESSAGECONTENTMASK_TIMESTAMP = 1;

const int UA_UADPDATASETMESSAGECONTENTMASK_PICOSECONDS = 2;

const int UA_UADPDATASETMESSAGECONTENTMASK_STATUS = 4;

const int UA_UADPDATASETMESSAGECONTENTMASK_MAJORVERSION = 8;

const int UA_UADPDATASETMESSAGECONTENTMASK_MINORVERSION = 16;

const int UA_UADPDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_TYPES_UADPDATASETMESSAGECONTENTMASK = 70;

const int UA_TYPES_UADPDATASETWRITERMESSAGEDATATYPE = 71;

const int UA_TYPES_UADPDATASETREADERMESSAGEDATATYPE = 72;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NETWORKMESSAGEHEADER = 1;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETMESSAGEHEADER = 2;

const int UA_JSONNETWORKMESSAGECONTENTMASK_SINGLEDATASETMESSAGE = 4;

const int UA_JSONNETWORKMESSAGECONTENTMASK_PUBLISHERID = 8;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 16;

const int UA_JSONNETWORKMESSAGECONTENTMASK_REPLYTO = 32;

const int UA_TYPES_JSONNETWORKMESSAGECONTENTMASK = 73;

const int UA_TYPES_JSONWRITERGROUPMESSAGEDATATYPE = 74;

const int UA_JSONDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONDATASETMESSAGECONTENTMASK_DATASETWRITERID = 1;

const int UA_JSONDATASETMESSAGECONTENTMASK_METADATAVERSION = 2;

const int UA_JSONDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 4;

const int UA_JSONDATASETMESSAGECONTENTMASK_TIMESTAMP = 8;

const int UA_JSONDATASETMESSAGECONTENTMASK_STATUS = 16;

const int UA_JSONDATASETMESSAGECONTENTMASK_MESSAGETYPE = 32;

const int UA_JSONDATASETMESSAGECONTENTMASK_DATASETWRITERNAME = 64;

const int UA_JSONDATASETMESSAGECONTENTMASK_REVERSIBLEFIELDENCODING = 128;

const int UA_TYPES_JSONDATASETMESSAGECONTENTMASK = 75;

const int UA_TYPES_JSONDATASETWRITERMESSAGEDATATYPE = 76;

const int UA_TYPES_JSONDATASETREADERMESSAGEDATATYPE = 77;

const int UA_TYPES_TRANSMITQOSPRIORITYDATATYPE = 78;

const int UA_TYPES_RECEIVEQOSPRIORITYDATATYPE = 79;

const int UA_TYPES_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 80;

const int UA_TYPES_DATAGRAMCONNECTIONTRANSPORT2DATATYPE = 81;

const int UA_TYPES_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 82;

const int UA_TYPES_DATAGRAMWRITERGROUPTRANSPORT2DATATYPE = 83;

const int UA_TYPES_DATAGRAMDATASETREADERTRANSPORTDATATYPE = 84;

const int UA_TYPES_BROKERCONNECTIONTRANSPORTDATATYPE = 85;

const int UA_TYPES_BROKERTRANSPORTQUALITYOFSERVICE = 86;

const int UA_TYPES_BROKERWRITERGROUPTRANSPORTDATATYPE = 87;

const int UA_TYPES_BROKERDATASETWRITERTRANSPORTDATATYPE = 88;

const int UA_TYPES_BROKERDATASETREADERTRANSPORTDATATYPE = 89;

const int UA_PUBSUBCONFIGURATIONREFMASK_NONE = 0;

const int UA_PUBSUBCONFIGURATIONREFMASK_ELEMENTADD = 1;

const int UA_PUBSUBCONFIGURATIONREFMASK_ELEMENTMATCH = 2;

const int UA_PUBSUBCONFIGURATIONREFMASK_ELEMENTMODIFY = 4;

const int UA_PUBSUBCONFIGURATIONREFMASK_ELEMENTREMOVE = 8;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEWRITER = 16;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEREADER = 32;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEWRITERGROUP = 64;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEREADERGROUP = 128;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCECONNECTION = 256;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEPUBDATASET = 512;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCESUBDATASET = 1024;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCESECURITYGROUP = 2048;

const int UA_PUBSUBCONFIGURATIONREFMASK_REFERENCEPUSHTARGET = 4096;

const int UA_TYPES_PUBSUBCONFIGURATIONREFMASK = 90;

const int UA_TYPES_PUBSUBCONFIGURATIONREFDATATYPE = 91;

const int UA_TYPES_PUBSUBCONFIGURATIONVALUEDATATYPE = 92;

const int UA_TYPES_DIAGNOSTICSLEVEL = 93;

const int UA_TYPES_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION = 94;

const int UA_TYPES_ALIASNAMEDATATYPE = 95;

const int UA_PASSWORDOPTIONSMASK_NONE = 0;

const int UA_PASSWORDOPTIONSMASK_SUPPORTINITIALPASSWORDCHANGE = 1;

const int UA_PASSWORDOPTIONSMASK_SUPPORTDISABLEUSER = 2;

const int UA_PASSWORDOPTIONSMASK_SUPPORTDISABLEDELETEFORUSER = 4;

const int UA_PASSWORDOPTIONSMASK_SUPPORTNOCHANGEFORUSER = 8;

const int UA_PASSWORDOPTIONSMASK_SUPPORTDESCRIPTIONFORUSER = 16;

const int UA_PASSWORDOPTIONSMASK_REQUIRESUPPERCASECHARACTERS = 32;

const int UA_PASSWORDOPTIONSMASK_REQUIRESLOWERCASECHARACTERS = 64;

const int UA_PASSWORDOPTIONSMASK_REQUIRESDIGITCHARACTERS = 128;

const int UA_PASSWORDOPTIONSMASK_REQUIRESSPECIALCHARACTERS = 256;

const int UA_TYPES_PASSWORDOPTIONSMASK = 96;

const int UA_USERCONFIGURATIONMASK_NONE = 0;

const int UA_USERCONFIGURATIONMASK_NODELETE = 1;

const int UA_USERCONFIGURATIONMASK_DISABLED = 2;

const int UA_USERCONFIGURATIONMASK_NOCHANGEBYUSER = 4;

const int UA_USERCONFIGURATIONMASK_MUSTCHANGEPASSWORD = 8;

const int UA_TYPES_USERCONFIGURATIONMASK = 97;

const int UA_TYPES_USERMANAGEMENTDATATYPE = 98;

const int UA_TYPES_DUPLEX = 99;

const int UA_TYPES_INTERFACEADMINSTATUS = 100;

const int UA_TYPES_INTERFACEOPERSTATUS = 101;

const int UA_TYPES_NEGOTIATIONSTATUS = 102;

const int UA_TYPES_TSNFAILURECODE = 103;

const int UA_TYPES_TSNSTREAMSTATE = 104;

const int UA_TYPES_TSNTALKERSTATUS = 105;

const int UA_TYPES_TSNLISTENERSTATUS = 106;

const int UA_TYPES_PRIORITYMAPPINGENTRYTYPE = 107;

const int UA_TYPES_IDTYPE = 108;

const int UA_TYPES_NODECLASS = 109;

const int UA_PERMISSIONTYPE_NONE = 0;

const int UA_PERMISSIONTYPE_BROWSE = 1;

const int UA_PERMISSIONTYPE_READROLEPERMISSIONS = 2;

const int UA_PERMISSIONTYPE_WRITEATTRIBUTE = 4;

const int UA_PERMISSIONTYPE_WRITEROLEPERMISSIONS = 8;

const int UA_PERMISSIONTYPE_WRITEHISTORIZING = 16;

const int UA_PERMISSIONTYPE_READ = 32;

const int UA_PERMISSIONTYPE_WRITE = 64;

const int UA_PERMISSIONTYPE_READHISTORY = 128;

const int UA_PERMISSIONTYPE_INSERTHISTORY = 256;

const int UA_PERMISSIONTYPE_MODIFYHISTORY = 512;

const int UA_PERMISSIONTYPE_DELETEHISTORY = 1024;

const int UA_PERMISSIONTYPE_RECEIVEEVENTS = 2048;

const int UA_PERMISSIONTYPE_CALL = 4096;

const int UA_PERMISSIONTYPE_ADDREFERENCE = 8192;

const int UA_PERMISSIONTYPE_REMOVEREFERENCE = 16384;

const int UA_PERMISSIONTYPE_DELETENODE = 32768;

const int UA_PERMISSIONTYPE_ADDNODE = 65536;

const int UA_TYPES_PERMISSIONTYPE = 110;

const int UA_ACCESSLEVELTYPE_NONE = 0;

const int UA_ACCESSLEVELTYPE_CURRENTREAD = 1;

const int UA_ACCESSLEVELTYPE_CURRENTWRITE = 2;

const int UA_ACCESSLEVELTYPE_HISTORYREAD = 4;

const int UA_ACCESSLEVELTYPE_HISTORYWRITE = 8;

const int UA_ACCESSLEVELTYPE_SEMANTICCHANGE = 16;

const int UA_ACCESSLEVELTYPE_STATUSWRITE = 32;

const int UA_ACCESSLEVELTYPE_TIMESTAMPWRITE = 64;

const int UA_TYPES_ACCESSLEVELTYPE = 111;

const int UA_ACCESSLEVELEXTYPE_NONE = 0;

const int UA_ACCESSLEVELEXTYPE_CURRENTREAD = 1;

const int UA_ACCESSLEVELEXTYPE_CURRENTWRITE = 2;

const int UA_ACCESSLEVELEXTYPE_HISTORYREAD = 4;

const int UA_ACCESSLEVELEXTYPE_HISTORYWRITE = 8;

const int UA_ACCESSLEVELEXTYPE_SEMANTICCHANGE = 16;

const int UA_ACCESSLEVELEXTYPE_STATUSWRITE = 32;

const int UA_ACCESSLEVELEXTYPE_TIMESTAMPWRITE = 64;

const int UA_ACCESSLEVELEXTYPE_NONATOMICREAD = 256;

const int UA_ACCESSLEVELEXTYPE_NONATOMICWRITE = 512;

const int UA_ACCESSLEVELEXTYPE_WRITEFULLARRAYONLY = 1024;

const int UA_ACCESSLEVELEXTYPE_NOSUBDATATYPES = 2048;

const int UA_ACCESSLEVELEXTYPE_NONVOLATILE = 4096;

const int UA_ACCESSLEVELEXTYPE_CONSTANT = 8192;

const int UA_TYPES_ACCESSLEVELEXTYPE = 112;

const int UA_EVENTNOTIFIERTYPE_NONE = 0;

const int UA_EVENTNOTIFIERTYPE_SUBSCRIBETOEVENTS = 1;

const int UA_EVENTNOTIFIERTYPE_HISTORYREAD = 4;

const int UA_EVENTNOTIFIERTYPE_HISTORYWRITE = 8;

const int UA_TYPES_EVENTNOTIFIERTYPE = 113;

const int UA_ACCESSRESTRICTIONTYPE_NONE = 0;

const int UA_ACCESSRESTRICTIONTYPE_SIGNINGREQUIRED = 1;

const int UA_ACCESSRESTRICTIONTYPE_ENCRYPTIONREQUIRED = 2;

const int UA_ACCESSRESTRICTIONTYPE_SESSIONREQUIRED = 4;

const int UA_ACCESSRESTRICTIONTYPE_APPLYRESTRICTIONSTOBROWSE = 8;

const int UA_TYPES_ACCESSRESTRICTIONTYPE = 114;

const int UA_TYPES_ROLEPERMISSIONTYPE = 115;

const int UA_TYPES_STRUCTURETYPE = 116;

const int UA_TYPES_STRUCTUREFIELD = 117;

const int UA_TYPES_STRUCTUREDEFINITION = 118;

const int UA_TYPES_REFERENCENODE = 119;

const int UA_TYPES_ARGUMENT = 120;

const int UA_TYPES_ENUMVALUETYPE = 121;

const int UA_TYPES_ENUMFIELD = 122;

const int UA_TYPES_OPTIONSET = 123;

const int UA_TYPES_NORMALIZEDSTRING = 124;

const int UA_TYPES_DECIMALSTRING = 125;

const int UA_TYPES_DURATIONSTRING = 126;

const int UA_TYPES_TIMESTRING = 127;

const int UA_TYPES_DATESTRING = 128;

const int UA_TYPES_DURATION = 129;

const int UA_TYPES_UTCTIME = 130;

const int UA_TYPES_LOCALEID = 131;

const int UA_TYPES_TIMEZONEDATATYPE = 132;

const int UA_TYPES_INDEX = 133;

const int UA_TYPES_INTEGERID = 134;

const int UA_TYPES_APPLICATIONTYPE = 135;

const int UA_TYPES_APPLICATIONDESCRIPTION = 136;

const int UA_TYPES_REQUESTHEADER = 137;

const int UA_TYPES_RESPONSEHEADER = 138;

const int UA_TYPES_VERSIONTIME = 139;

const int UA_TYPES_SERVICEFAULT = 140;

const int UA_TYPES_SESSIONLESSINVOKEREQUESTTYPE = 141;

const int UA_TYPES_SESSIONLESSINVOKERESPONSETYPE = 142;

const int UA_TYPES_FINDSERVERSREQUEST = 143;

const int UA_TYPES_FINDSERVERSRESPONSE = 144;

const int UA_TYPES_SERVERONNETWORK = 145;

const int UA_TYPES_FINDSERVERSONNETWORKREQUEST = 146;

const int UA_TYPES_FINDSERVERSONNETWORKRESPONSE = 147;

const int UA_TYPES_APPLICATIONINSTANCECERTIFICATE = 148;

const int UA_TYPES_MESSAGESECURITYMODE = 149;

const int UA_TYPES_USERTOKENTYPE = 150;

const int UA_TYPES_USERTOKENPOLICY = 151;

const int UA_TYPES_ENDPOINTDESCRIPTION = 152;

const int UA_TYPES_GETENDPOINTSREQUEST = 153;

const int UA_TYPES_GETENDPOINTSRESPONSE = 154;

const int UA_TYPES_REGISTEREDSERVER = 155;

const int UA_TYPES_REGISTERSERVERREQUEST = 156;

const int UA_TYPES_REGISTERSERVERRESPONSE = 157;

const int UA_TYPES_MDNSDISCOVERYCONFIGURATION = 158;

const int UA_TYPES_REGISTERSERVER2REQUEST = 159;

const int UA_TYPES_REGISTERSERVER2RESPONSE = 160;

const int UA_TYPES_SECURITYTOKENREQUESTTYPE = 161;

const int UA_TYPES_CHANNELSECURITYTOKEN = 162;

const int UA_TYPES_OPENSECURECHANNELREQUEST = 163;

const int UA_TYPES_OPENSECURECHANNELRESPONSE = 164;

const int UA_TYPES_CLOSESECURECHANNELREQUEST = 165;

const int UA_TYPES_CLOSESECURECHANNELRESPONSE = 166;

const int UA_TYPES_SIGNEDSOFTWARECERTIFICATE = 167;

const int UA_TYPES_SESSIONAUTHENTICATIONTOKEN = 168;

const int UA_TYPES_SIGNATUREDATA = 169;

const int UA_TYPES_CREATESESSIONREQUEST = 170;

const int UA_TYPES_CREATESESSIONRESPONSE = 171;

const int UA_TYPES_USERIDENTITYTOKEN = 172;

const int UA_TYPES_ANONYMOUSIDENTITYTOKEN = 173;

const int UA_TYPES_USERNAMEIDENTITYTOKEN = 174;

const int UA_TYPES_X509IDENTITYTOKEN = 175;

const int UA_TYPES_ISSUEDIDENTITYTOKEN = 176;

const int UA_TYPES_RSAENCRYPTEDSECRET = 177;

const int UA_TYPES_ECCENCRYPTEDSECRET = 178;

const int UA_TYPES_ACTIVATESESSIONREQUEST = 179;

const int UA_TYPES_ACTIVATESESSIONRESPONSE = 180;

const int UA_TYPES_CLOSESESSIONREQUEST = 181;

const int UA_TYPES_CLOSESESSIONRESPONSE = 182;

const int UA_TYPES_CANCELREQUEST = 183;

const int UA_TYPES_CANCELRESPONSE = 184;

const int UA_TYPES_NODEATTRIBUTESMASK = 185;

const int UA_TYPES_NODEATTRIBUTES = 186;

const int UA_TYPES_OBJECTATTRIBUTES = 187;

const int UA_TYPES_VARIABLEATTRIBUTES = 188;

const int UA_TYPES_METHODATTRIBUTES = 189;

const int UA_TYPES_OBJECTTYPEATTRIBUTES = 190;

const int UA_TYPES_VARIABLETYPEATTRIBUTES = 191;

const int UA_TYPES_REFERENCETYPEATTRIBUTES = 192;

const int UA_TYPES_DATATYPEATTRIBUTES = 193;

const int UA_TYPES_VIEWATTRIBUTES = 194;

const int UA_TYPES_GENERICATTRIBUTEVALUE = 195;

const int UA_TYPES_GENERICATTRIBUTES = 196;

const int UA_TYPES_ADDNODESITEM = 197;

const int UA_TYPES_ADDNODESRESULT = 198;

const int UA_TYPES_ADDNODESREQUEST = 199;

const int UA_TYPES_ADDNODESRESPONSE = 200;

const int UA_TYPES_ADDREFERENCESITEM = 201;

const int UA_TYPES_ADDREFERENCESREQUEST = 202;

const int UA_TYPES_ADDREFERENCESRESPONSE = 203;

const int UA_TYPES_DELETENODESITEM = 204;

const int UA_TYPES_DELETENODESREQUEST = 205;

const int UA_TYPES_DELETENODESRESPONSE = 206;

const int UA_TYPES_DELETEREFERENCESITEM = 207;

const int UA_TYPES_DELETEREFERENCESREQUEST = 208;

const int UA_TYPES_DELETEREFERENCESRESPONSE = 209;

const int UA_ATTRIBUTEWRITEMASK_NONE = 0;

const int UA_ATTRIBUTEWRITEMASK_ACCESSLEVEL = 1;

const int UA_ATTRIBUTEWRITEMASK_ARRAYDIMENSIONS = 2;

const int UA_ATTRIBUTEWRITEMASK_BROWSENAME = 4;

const int UA_ATTRIBUTEWRITEMASK_CONTAINSNOLOOPS = 8;

const int UA_ATTRIBUTEWRITEMASK_DATATYPE = 16;

const int UA_ATTRIBUTEWRITEMASK_DESCRIPTION = 32;

const int UA_ATTRIBUTEWRITEMASK_DISPLAYNAME = 64;

const int UA_ATTRIBUTEWRITEMASK_EVENTNOTIFIER = 128;

const int UA_ATTRIBUTEWRITEMASK_EXECUTABLE = 256;

const int UA_ATTRIBUTEWRITEMASK_HISTORIZING = 512;

const int UA_ATTRIBUTEWRITEMASK_INVERSENAME = 1024;

const int UA_ATTRIBUTEWRITEMASK_ISABSTRACT = 2048;

const int UA_ATTRIBUTEWRITEMASK_MINIMUMSAMPLINGINTERVAL = 4096;

const int UA_ATTRIBUTEWRITEMASK_NODECLASS = 8192;

const int UA_ATTRIBUTEWRITEMASK_NODEID = 16384;

const int UA_ATTRIBUTEWRITEMASK_SYMMETRIC = 32768;

const int UA_ATTRIBUTEWRITEMASK_USERACCESSLEVEL = 65536;

const int UA_ATTRIBUTEWRITEMASK_USEREXECUTABLE = 131072;

const int UA_ATTRIBUTEWRITEMASK_USERWRITEMASK = 262144;

const int UA_ATTRIBUTEWRITEMASK_VALUERANK = 524288;

const int UA_ATTRIBUTEWRITEMASK_WRITEMASK = 1048576;

const int UA_ATTRIBUTEWRITEMASK_VALUEFORVARIABLETYPE = 2097152;

const int UA_ATTRIBUTEWRITEMASK_DATATYPEDEFINITION = 4194304;

const int UA_ATTRIBUTEWRITEMASK_ROLEPERMISSIONS = 8388608;

const int UA_ATTRIBUTEWRITEMASK_ACCESSRESTRICTIONS = 16777216;

const int UA_ATTRIBUTEWRITEMASK_ACCESSLEVELEX = 33554432;

const int UA_TYPES_ATTRIBUTEWRITEMASK = 210;

const int UA_TYPES_BROWSEDIRECTION = 211;

const int UA_TYPES_VIEWDESCRIPTION = 212;

const int UA_TYPES_BROWSEDESCRIPTION = 213;

const int UA_TYPES_BROWSERESULTMASK = 214;

const int UA_TYPES_REFERENCEDESCRIPTION = 215;

const int UA_TYPES_CONTINUATIONPOINT = 216;

const int UA_TYPES_BROWSERESULT = 217;

const int UA_TYPES_BROWSEREQUEST = 218;

const int UA_TYPES_BROWSERESPONSE = 219;

const int UA_TYPES_BROWSENEXTREQUEST = 220;

const int UA_TYPES_BROWSENEXTRESPONSE = 221;

const int UA_TYPES_RELATIVEPATHELEMENT = 222;

const int UA_TYPES_RELATIVEPATH = 223;

const int UA_TYPES_BROWSEPATH = 224;

const int UA_TYPES_BROWSEPATHTARGET = 225;

const int UA_TYPES_BROWSEPATHRESULT = 226;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 227;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 228;

const int UA_TYPES_REGISTERNODESREQUEST = 229;

const int UA_TYPES_REGISTERNODESRESPONSE = 230;

const int UA_TYPES_UNREGISTERNODESREQUEST = 231;

const int UA_TYPES_UNREGISTERNODESRESPONSE = 232;

const int UA_TYPES_COUNTER = 233;

const int UA_TYPES_OPAQUENUMERICRANGE = 234;

const int UA_TYPES_ENDPOINTCONFIGURATION = 235;

const int UA_TYPES_QUERYDATADESCRIPTION = 236;

const int UA_TYPES_NODETYPEDESCRIPTION = 237;

const int UA_TYPES_FILTEROPERATOR = 238;

const int UA_TYPES_QUERYDATASET = 239;

const int UA_TYPES_NODEREFERENCE = 240;

const int UA_TYPES_CONTENTFILTERELEMENT = 241;

const int UA_TYPES_CONTENTFILTER = 242;

const int UA_TYPES_ELEMENTOPERAND = 243;

const int UA_TYPES_LITERALOPERAND = 244;

const int UA_TYPES_ATTRIBUTEOPERAND = 245;

const int UA_TYPES_SIMPLEATTRIBUTEOPERAND = 246;

const int UA_TYPES_CONTENTFILTERELEMENTRESULT = 247;

const int UA_TYPES_CONTENTFILTERRESULT = 248;

const int UA_TYPES_PARSINGRESULT = 249;

const int UA_TYPES_QUERYFIRSTREQUEST = 250;

const int UA_TYPES_QUERYFIRSTRESPONSE = 251;

const int UA_TYPES_QUERYNEXTREQUEST = 252;

const int UA_TYPES_QUERYNEXTRESPONSE = 253;

const int UA_TYPES_TIMESTAMPSTORETURN = 254;

const int UA_TYPES_READVALUEID = 255;

const int UA_TYPES_READREQUEST = 256;

const int UA_TYPES_READRESPONSE = 257;

const int UA_TYPES_HISTORYREADVALUEID = 258;

const int UA_TYPES_HISTORYREADRESULT = 259;

const int UA_TYPES_READRAWMODIFIEDDETAILS = 260;

const int UA_TYPES_READATTIMEDETAILS = 261;

const int UA_TYPES_READANNOTATIONDATADETAILS = 262;

const int UA_TYPES_HISTORYDATA = 263;

const int UA_TYPES_HISTORYREADREQUEST = 264;

const int UA_TYPES_HISTORYREADRESPONSE = 265;

const int UA_TYPES_WRITEVALUE = 266;

const int UA_TYPES_WRITEREQUEST = 267;

const int UA_TYPES_WRITERESPONSE = 268;

const int UA_TYPES_HISTORYUPDATEDETAILS = 269;

const int UA_TYPES_HISTORYUPDATETYPE = 270;

const int UA_TYPES_PERFORMUPDATETYPE = 271;

const int UA_TYPES_UPDATEDATADETAILS = 272;

const int UA_TYPES_UPDATESTRUCTUREDATADETAILS = 273;

const int UA_TYPES_DELETERAWMODIFIEDDETAILS = 274;

const int UA_TYPES_DELETEATTIMEDETAILS = 275;

const int UA_TYPES_DELETEEVENTDETAILS = 276;

const int UA_TYPES_HISTORYUPDATERESULT = 277;

const int UA_TYPES_HISTORYUPDATEREQUEST = 278;

const int UA_TYPES_HISTORYUPDATERESPONSE = 279;

const int UA_TYPES_CALLMETHODREQUEST = 280;

const int UA_TYPES_CALLMETHODRESULT = 281;

const int UA_TYPES_CALLREQUEST = 282;

const int UA_TYPES_CALLRESPONSE = 283;

const int UA_TYPES_MONITORINGMODE = 284;

const int UA_TYPES_DATACHANGETRIGGER = 285;

const int UA_TYPES_DEADBANDTYPE = 286;

const int UA_TYPES_DATACHANGEFILTER = 287;

const int UA_TYPES_EVENTFILTER = 288;

const int UA_TYPES_AGGREGATECONFIGURATION = 289;

const int UA_TYPES_AGGREGATEFILTER = 290;

const int UA_TYPES_EVENTFILTERRESULT = 291;

const int UA_TYPES_AGGREGATEFILTERRESULT = 292;

const int UA_TYPES_MONITORINGPARAMETERS = 293;

const int UA_TYPES_MONITOREDITEMCREATEREQUEST = 294;

const int UA_TYPES_MONITOREDITEMCREATERESULT = 295;

const int UA_TYPES_CREATEMONITOREDITEMSREQUEST = 296;

const int UA_TYPES_CREATEMONITOREDITEMSRESPONSE = 297;

const int UA_TYPES_MONITOREDITEMMODIFYREQUEST = 298;

const int UA_TYPES_MONITOREDITEMMODIFYRESULT = 299;

const int UA_TYPES_MODIFYMONITOREDITEMSREQUEST = 300;

const int UA_TYPES_MODIFYMONITOREDITEMSRESPONSE = 301;

const int UA_TYPES_SETMONITORINGMODEREQUEST = 302;

const int UA_TYPES_SETMONITORINGMODERESPONSE = 303;

const int UA_TYPES_SETTRIGGERINGREQUEST = 304;

const int UA_TYPES_SETTRIGGERINGRESPONSE = 305;

const int UA_TYPES_DELETEMONITOREDITEMSREQUEST = 306;

const int UA_TYPES_DELETEMONITOREDITEMSRESPONSE = 307;

const int UA_TYPES_CREATESUBSCRIPTIONREQUEST = 308;

const int UA_TYPES_CREATESUBSCRIPTIONRESPONSE = 309;

const int UA_TYPES_MODIFYSUBSCRIPTIONREQUEST = 310;

const int UA_TYPES_MODIFYSUBSCRIPTIONRESPONSE = 311;

const int UA_TYPES_SETPUBLISHINGMODEREQUEST = 312;

const int UA_TYPES_SETPUBLISHINGMODERESPONSE = 313;

const int UA_TYPES_NOTIFICATIONMESSAGE = 314;

const int UA_TYPES_MONITOREDITEMNOTIFICATION = 315;

const int UA_TYPES_EVENTFIELDLIST = 316;

const int UA_TYPES_HISTORYEVENTFIELDLIST = 317;

const int UA_TYPES_STATUSCHANGENOTIFICATION = 318;

const int UA_TYPES_SUBSCRIPTIONACKNOWLEDGEMENT = 319;

const int UA_TYPES_PUBLISHREQUEST = 320;

const int UA_TYPES_PUBLISHRESPONSE = 321;

const int UA_TYPES_REPUBLISHREQUEST = 322;

const int UA_TYPES_REPUBLISHRESPONSE = 323;

const int UA_TYPES_TRANSFERRESULT = 324;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSREQUEST = 325;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSRESPONSE = 326;

const int UA_TYPES_DELETESUBSCRIPTIONSREQUEST = 327;

const int UA_TYPES_DELETESUBSCRIPTIONSRESPONSE = 328;

const int UA_TYPES_BUILDINFO = 329;

const int UA_TYPES_REDUNDANCYSUPPORT = 330;

const int UA_TYPES_SERVERSTATE = 331;

const int UA_TYPES_REDUNDANTSERVERDATATYPE = 332;

const int UA_TYPES_ENDPOINTURLLISTDATATYPE = 333;

const int UA_TYPES_NETWORKGROUPDATATYPE = 334;

const int UA_TYPES_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 335;

const int UA_TYPES_SERVERDIAGNOSTICSSUMMARYDATATYPE = 336;

const int UA_TYPES_SERVERSTATUSDATATYPE = 337;

const int UA_TYPES_SESSIONSECURITYDIAGNOSTICSDATATYPE = 338;

const int UA_TYPES_SERVICECOUNTERDATATYPE = 339;

const int UA_TYPES_STATUSRESULT = 340;

const int UA_TYPES_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 341;

const int UA_TYPES_MODELCHANGESTRUCTUREVERBMASK = 342;

const int UA_TYPES_MODELCHANGESTRUCTUREDATATYPE = 343;

const int UA_TYPES_SEMANTICCHANGESTRUCTUREDATATYPE = 344;

const int UA_TYPES_RANGE = 345;

const int UA_TYPES_EUINFORMATION = 346;

const int UA_TYPES_AXISSCALEENUMERATION = 347;

const int UA_TYPES_COMPLEXNUMBERTYPE = 348;

const int UA_TYPES_DOUBLECOMPLEXNUMBERTYPE = 349;

const int UA_TYPES_AXISINFORMATION = 350;

const int UA_TYPES_XVTYPE = 351;

const int UA_TYPES_PROGRAMDIAGNOSTICDATATYPE = 352;

const int UA_TYPES_PROGRAMDIAGNOSTIC2DATATYPE = 353;

const int UA_TYPES_ANNOTATION = 354;

const int UA_TYPES_EXCEPTIONDEVIATIONFORMAT = 355;

const int UA_TYPES_ENDPOINTTYPE = 356;

const int UA_TYPES_STRUCTUREDESCRIPTION = 357;

const int UA_TYPES_FIELDMETADATA = 358;

const int UA_TYPES_PUBLISHEDEVENTSDATATYPE = 359;

const int UA_TYPES_PUBSUBGROUPDATATYPE = 360;

const int UA_TYPES_WRITERGROUPDATATYPE = 361;

const int UA_TYPES_FIELDTARGETDATATYPE = 362;

const int UA_TYPES_SUBSCRIBEDDATASETMIRRORDATATYPE = 363;

const int UA_TYPES_SECURITYGROUPDATATYPE = 364;

const int UA_TYPES_PUBSUBKEYPUSHTARGETDATATYPE = 365;

const int UA_TYPES_ENUMDEFINITION = 366;

const int UA_TYPES_READEVENTDETAILS = 367;

const int UA_TYPES_READPROCESSEDDETAILS = 368;

const int UA_TYPES_MODIFICATIONINFO = 369;

const int UA_TYPES_HISTORYMODIFIEDDATA = 370;

const int UA_TYPES_HISTORYEVENT = 371;

const int UA_TYPES_UPDATEEVENTDETAILS = 372;

const int UA_TYPES_DATACHANGENOTIFICATION = 373;

const int UA_TYPES_EVENTNOTIFICATIONLIST = 374;

const int UA_TYPES_SESSIONDIAGNOSTICSDATATYPE = 375;

const int UA_TYPES_ENUMDESCRIPTION = 376;

const int UA_TYPES_UABINARYFILEDATATYPE = 377;

const int UA_TYPES_DATASETMETADATATYPE = 378;

const int UA_TYPES_PUBLISHEDDATASETDATATYPE = 379;

const int UA_TYPES_DATASETREADERDATATYPE = 380;

const int UA_TYPES_TARGETVARIABLESDATATYPE = 381;

const int UA_TYPES_STANDALONESUBSCRIBEDDATASETDATATYPE = 382;

const int UA_TYPES_DATATYPESCHEMAHEADER = 383;

const int UA_TYPES_READERGROUPDATATYPE = 384;

const int UA_TYPES_PUBSUBCONNECTIONDATATYPE = 385;

const int UA_TYPES_PUBSUBCONFIGURATIONDATATYPE = 386;

const int UA_TYPES_PUBSUBCONFIGURATION2DATATYPE = 387;

const int UA_LOGCATEGORIES = 10;

const String UA_PRINTF_GUID_FORMAT = '%08x-%04hx-%04hx-%02hhx%02hhx-%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx';

const String UA_PRINTF_STRING_FORMAT = '"%.*s"';

const int UA_REFERENCETYPEINDEX_REFERENCES = 0;

const int UA_REFERENCETYPEINDEX_HASSUBTYPE = 1;

const int UA_REFERENCETYPEINDEX_AGGREGATES = 2;

const int UA_REFERENCETYPEINDEX_HIERARCHICALREFERENCES = 3;

const int UA_REFERENCETYPEINDEX_NONHIERARCHICALREFERENCES = 4;

const int UA_REFERENCETYPEINDEX_HASCHILD = 5;

const int UA_REFERENCETYPEINDEX_ORGANIZES = 6;

const int UA_REFERENCETYPEINDEX_HASEVENTSOURCE = 7;

const int UA_REFERENCETYPEINDEX_HASMODELLINGRULE = 8;

const int UA_REFERENCETYPEINDEX_HASENCODING = 9;

const int UA_REFERENCETYPEINDEX_HASDESCRIPTION = 10;

const int UA_REFERENCETYPEINDEX_HASTYPEDEFINITION = 11;

const int UA_REFERENCETYPEINDEX_GENERATESEVENT = 12;

const int UA_REFERENCETYPEINDEX_HASPROPERTY = 13;

const int UA_REFERENCETYPEINDEX_HASCOMPONENT = 14;

const int UA_REFERENCETYPEINDEX_HASNOTIFIER = 15;

const int UA_REFERENCETYPEINDEX_HASORDEREDCOMPONENT = 16;

const int UA_REFERENCETYPEINDEX_HASINTERFACE = 17;

const int UA_REFERENCETYPESET_MAX = 128;

const int UA_NETWORKMESSAGE_MAX_NONCE_LENGTH = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EDEADLK = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EAGAIN = 35;

const int EWOULDBLOCK = 35;

const int EINPROGRESS = 36;

const int EALREADY = 37;

const int ENOTSOCK = 38;

const int EDESTADDRREQ = 39;

const int EMSGSIZE = 40;

const int EPROTOTYPE = 41;

const int ENOPROTOOPT = 42;

const int EPROTONOSUPPORT = 43;

const int ENOTSUP = 45;

const int EAFNOSUPPORT = 47;

const int EADDRINUSE = 48;

const int EADDRNOTAVAIL = 49;

const int ENETDOWN = 50;

const int ENETUNREACH = 51;

const int ENETRESET = 52;

const int ECONNABORTED = 53;

const int ECONNRESET = 54;

const int ENOBUFS = 55;

const int EISCONN = 56;

const int ENOTCONN = 57;

const int ETIMEDOUT = 60;

const int ECONNREFUSED = 61;

const int ELOOP = 62;

const int ENAMETOOLONG = 63;

const int EHOSTUNREACH = 65;

const int ENOTEMPTY = 66;

const int EDQUOT = 69;

const int ESTALE = 70;

const int ENOLCK = 77;

const int ENOSYS = 78;

const int EOVERFLOW = 84;

const int ECANCELED = 89;

const int EIDRM = 90;

const int ENOMSG = 91;

const int EILSEQ = 92;

const int EBADMSG = 94;

const int EMULTIHOP = 95;

const int ENODATA = 96;

const int ENOLINK = 97;

const int ENOSR = 98;

const int ENOSTR = 99;

const int EPROTO = 100;

const int ETIME = 101;

const int EOPNOTSUPP = 102;

const int ENOPOLICY = 103;

const int INITIAL_MEMORY_STORE_SIZE = 1000;
